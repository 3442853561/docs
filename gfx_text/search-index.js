var searchIndex = {};
searchIndex["gfx_text"] = {"doc":"A library for drawing text for gfx-rs graphics API.\nUses freetype-rs underneath to former the font bitmap texture and collect\ninformation about face glyphs.","items":[[3,"Renderer","gfx_text","Text renderer.",null,null],[3,"RendererBuilder","","Text renderer builder. Allows to set rendering options using builder\npattern.",null,null],[4,"FontError","","Represents possible errors which may occur during the font loading.",null,null],[13,"NoFont","","No font was specified",0,null],[13,"EmptyFont","","Character set is empty",0,null],[13,"FreetypeError","","FreeType library error",0,null],[4,"Error","","General error type returned by the library. Wraps all other errors.",null,null],[13,"FontError","","Font loading error",1,null],[13,"PipelineError","","Pipeline creation/update error",1,null],[13,"ProgramError","","Program shader error.",1,null],[13,"CombinedError","","An error occuring during creation of texture or resource view",1,null],[13,"UpdateError","","An error occuring in buffer/texture updates",1,null],[4,"HorizontalAnchor","","An anchor aligns text horizontally to its given x position.",null,null],[13,"Left","","Anchor the left edge of the text",2,null],[13,"Center","","Anchor the horizontal mid-point of the text",2,null],[13,"Right","","Anchor the right edge of the text",2,null],[4,"VerticalAnchor","","An anchor aligns text vertically to its given y position.",null,null],[13,"Top","","Anchor the top edge of the text",3,null],[13,"Center","","Anchor the vertical mid-point of the text",3,null],[13,"Bottom","","Anchor the bottom edge of the text",3,null],[5,"new","","Create a new text renderer builder. Alias for `RendererBuilder::new`.",null,{"inputs":[{"name":"f"}],"output":{"name":"rendererbuilder"}}],[11,"fmt","","",0,{"inputs":[{"name":"fonterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"freetypeerror"}],"output":{"name":"fonterror"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"horizontalanchor"},{"name":"horizontalanchor"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"verticalanchor"},{"name":"verticalanchor"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"fonterror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"pipelinestateerror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"programerror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"combinederror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"updateerror"}],"output":{"name":"error"}}],[11,"new","","Create a new text renderer builder.",4,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_size","","Specify custom size.",4,{"inputs":[{"name":"rendererbuilder"},{"name":"u8"}],"output":{"name":"self"}}],[11,"with_font","","Specify custom font by path.",4,{"inputs":[{"name":"rendererbuilder"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_font_data","","Pass raw font data.",4,null],[11,"with_outline","","Specify outline width and color.\n**Not implemented yet.**",4,null],[11,"with_buffer_size","","Specify custom initial buffer size.",4,{"inputs":[{"name":"rendererbuilder"},{"name":"usize"}],"output":{"name":"self"}}],[11,"with_chars","","Make available only provided characters in font texture instead of\nloading all existing from the font face.",4,null],[11,"build","","Build a new text renderer instance using current settings.",4,{"inputs":[{"name":"rendererbuilder"}],"output":{"name":"result"}}],[11,"unwrap","","Just an alias for `builder.build().unwrap()`.",4,{"inputs":[{"name":"rendererbuilder"}],"output":{"name":"renderer"}}],[11,"add","","Add some text to the current draw scene relative to the top left corner\nof the screen using pixel coordinates.",5,null],[11,"add_anchored","","Add text to the draw scene by anchoring an edge or mid-point to a\nposition defined in screen pixel coordinates.",5,null],[11,"add_at","","Add some text to the draw scene using absolute world coordinates.",5,null],[11,"draw","","Draw the current scene and clear state.",5,{"inputs":[{"name":"renderer"},{"name":"encoder"},{"name":"rendertargetview"}],"output":{"name":"result"}}],[11,"draw_at","","Draw using provided projection matrix.",5,null],[11,"measure","","Get the bounding box size of a string as rendered by this font.",5,null]],"paths":[[4,"FontError"],[4,"Error"],[4,"HorizontalAnchor"],[4,"VerticalAnchor"],[3,"RendererBuilder"],[3,"Renderer"]]};
searchIndex["gfx"] = {"doc":"An efficient, low-level, bindless graphics API for Rust. See [the\nblog](http://gfx-rs.github.io/) for explanations and annotated examples.","items":[[0,"preset","gfx","State presets",null,null],[0,"blend","gfx::preset","Blending preset modes.",null,null],[17,"ADD","gfx::preset::blend","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the\nvalue of the destination multiplied by the inverse of the source alpha channel. Has the\nusual transparency effect: mixes the two colors using a fraction of each one specified by\nthe alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color\nusing the source color as weight. Has an invert effect with the constant color\nas base and source color controlling displacement from the base color.\nA white source color and a white value results in plain invert.\nThe output alpha is same as destination alpha.",null,null],[0,"depth","gfx::preset","Depth preset modes.",null,null],[17,"LESS_EQUAL_TEST","gfx::preset::depth","&quot;&lt;=&quot; comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","&quot;&lt;=&quot; comparison with writable depth",null,null],[0,"state","gfx","Fixed-function hardware state.",null,null],[11,"fmt","draw_state::state","",0,{"inputs":[{"name":"frontface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"frontface"}],"output":{"name":"frontface"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"offset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"offset"}],"output":{"name":"offset"}}],[11,"cmp","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"option"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"cullface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"cullface"}],"output":{"name":"cullface"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"rastermethod"}],"output":{"name":"rastermethod"}}],[11,"cmp","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"multisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"multisample"}],"output":{"name":"multisample"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"rasterizer"}],"output":{"name":"rasterizer"}}],[11,"new_fill","","Create a new filling rasterizer.",5,{"inputs":[],"output":{"name":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",5,{"inputs":[{"name":"rasterizer"}],"output":{"name":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",5,{"inputs":[{"name":"rasterizer"},{"name":"f32"},{"name":"i32"}],"output":{"name":"rasterizer"}}],[11,"cmp","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"comparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"comparison"}],"output":{"name":"comparison"}}],[11,"cmp","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"stencilop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"stencilop"}],"output":{"name":"stencilop"}}],[11,"cmp","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"stencilside"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"stencilside"}}],[11,"cmp","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"stencil"}}],[11,"new","","Create a new stencil state with a given function.",9,null],[11,"cmp","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"depth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"depth"}}],[11,"cmp","","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"option"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"equation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"equation"}],"output":{"name":"equation"}}],[11,"cmp","","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"blendvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"blendvalue"}],"output":{"name":"blendvalue"}}],[11,"cmp","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"factor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"factor"}],"output":{"name":"factor"}}],[11,"fmt","","",14,{"inputs":[{"name":"blendchannel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"hash","","",14,null],[11,"partial_cmp","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"eq","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"blend"}}],[11,"new","","Create a new blend state with a given equation.",15,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"fmt","","",15,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"cmp","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"eq","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"colormask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",16,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",16,null],[11,"remove","","Removes the specified flags in-place.",16,null],[11,"toggle","","Toggles the specified flags in-place.",16,null],[11,"bitor","","Returns the union of the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",16,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitxor_assign","","Toggles the set of flags.",16,null],[11,"bitand","","Returns the intersection between the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",16,null],[11,"sub","","Returns the set difference of the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"sub_assign","","Disables all flags enabled in the set.",16,null],[11,"not","","Returns the complement of this set of flags.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"color"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"color"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"refvalues"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"refvalues"}],"output":{"name":"refvalues"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"refvalues"}}],[11,"partial_cmp","draw_state::target","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"hash","","",20,null],[11,"cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"eq","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"mirror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,null],[11,"remove","","Removes the specified flags in-place.",20,null],[11,"toggle","","Toggles the specified flags in-place.",20,null],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitor_assign","","Adds the set of flags.",20,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitxor_assign","","Toggles the set of flags.",20,null],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",20,null],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"sub_assign","","Disables all flags enabled in the set.",20,null],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}],[4,"FrontFace","gfx::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","",null,null],[6,"OffsetSlope","","",null,null],[6,"OffsetUnits","","",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",5,null],[12,"cull_face","","Which face should be culled.",5,null],[12,"method","","How to rasterize this primitive.",5,null],[12,"offset","","Any polygon offset to apply.",5,null],[12,"samples","","Multi-sampling mode.",5,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",6,null],[13,"Less","","`x &lt; y`",6,null],[13,"LessEqual","","`x &lt;= y`",6,null],[13,"Equal","","`x == y`",6,null],[13,"GreaterEqual","","`x &gt;= y`",6,null],[13,"Greater","","`x &gt; y`",6,null],[13,"NotEqual","","`x != y`",6,null],[13,"Always","","`true`",6,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",7,null],[13,"Zero","","Set the value in the stencil buffer to zero.",7,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",7,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",7,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",7,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",7,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",7,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",7,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",8,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",8,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",8,null],[12,"op_fail","","What operation to do if the stencil test fails.",8,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",8,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",8,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",9,null],[12,"back","","",9,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",10,null],[12,"write","","Specify whether to write to the depth buffer or not.",10,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",11,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",11,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",11,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",11,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",11,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",12,null],[13,"SourceAlpha","","",12,null],[13,"DestColor","","",12,null],[13,"DestAlpha","","",12,null],[13,"ConstColor","","",12,null],[13,"ConstAlpha","","",12,null],[4,"Factor","","",null,null],[13,"Zero","","",13,null],[13,"One","","",13,null],[13,"SourceAlphaSaturated","","",13,null],[13,"ZeroPlus","","",13,null],[13,"OneMinus","","",13,null],[3,"BlendChannel","","",null,null],[12,"equation","","",14,null],[12,"source","","",14,null],[12,"destination","","",14,null],[3,"Blend","","",null,null],[12,"color","","",15,null],[12,"alpha","","",15,null],[3,"ColorMask","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",17,null],[12,"blend","","Optional blending.",17,null],[3,"RefValues","","The complete set of the rasterizer reference values.\nSwitching these doesn&#39;t roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",18,null],[12,"blend","","Constant blend color.",18,null],[11,"partial_cmp","gfx_core::draw","",21,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"clearcolor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"clearcolor"}],"output":{"name":"clearcolor"}}],[11,"from","","",21,null],[11,"from","","",21,null],[11,"from","","",21,null],[11,"from","","",21,null],[11,"from","","",21,null],[11,"from","","",21,null],[11,"from","","",21,null],[11,"from","","",21,null],[11,"from","","",21,null],[11,"from","","",21,{"inputs":[{"name":"f32"}],"output":{"name":"clearcolor"}}],[11,"from","","",21,{"inputs":[{"name":"i32"}],"output":{"name":"clearcolor"}}],[11,"from","","",21,{"inputs":[{"name":"u32"}],"output":{"name":"clearcolor"}}],[11,"eq","gfx_core::dummy","",22,{"inputs":[{"name":"dummyresources"},{"name":"dummyresources"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"dummyresources"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"dummyresources"}],"output":{"name":"dummyresources"}}],[11,"new","","Create a new dummy device",23,{"inputs":[],"output":{"name":"dummydevice"}}],[11,"clone_empty","","",24,{"inputs":[{"name":"dummycommandbuffer"}],"output":{"name":"dummycommandbuffer"}}],[11,"reset","","",24,null],[11,"bind_pipeline_state","","",24,null],[11,"bind_vertex_buffers","","",24,null],[11,"bind_constant_buffers","","",24,null],[11,"bind_global_constant","","",24,null],[11,"bind_resource_views","","",24,null],[11,"bind_unordered_views","","",24,null],[11,"bind_samplers","","",24,null],[11,"bind_pixel_targets","","",24,null],[11,"bind_index","","",24,null],[11,"set_scissor","","",24,null],[11,"set_ref_values","","",24,null],[11,"update_buffer","","",24,null],[11,"update_texture","","",24,null],[11,"generate_mipmap","","",24,null],[11,"clear_color","","",24,null],[11,"clear_depth_stencil","","",24,null],[11,"call_draw","","",24,null],[11,"call_draw_indexed","","",24,null],[11,"get_capabilities","","",23,{"inputs":[{"name":"dummydevice"}],"output":{"name":"capabilities"}}],[11,"pin_submitted_resources","","",23,null],[11,"submit","","",23,null],[11,"cleanup","","",23,null],[11,"fmt","gfx_core::factory","",25,{"inputs":[{"name":"mapaccess"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"mapaccess"}],"output":{"name":"mapaccess"}}],[11,"hash","","",25,null],[11,"partial_cmp","","",25,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"option"}}],[11,"eq","","",25,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"ordering"}}],[11,"hash","","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"bind"}],"output":{"name":"bind"}}],[11,"eq","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"bind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[],"output":{"name":"bind"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[],"output":{"name":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"bind"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",26,{"inputs":[{"name":"u8"}],"output":{"name":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"bind"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"bind"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,null],[11,"remove","","Removes the specified flags in-place.",26,null],[11,"toggle","","Toggles the specified flags in-place.",26,null],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitor_assign","","Adds the set of flags.",26,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitxor_assign","","Toggles the set of flags.",26,null],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",26,null],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"sub_assign","","Disables all flags enabled in the set.",26,null],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"bind"}],"output":{"name":"bind"}}],[11,"from_iter","","",26,{"inputs":[{"name":"t"}],"output":{"name":"bind"}}],[11,"eq","","",27,{"inputs":[{"name":"bufferrole"},{"name":"bufferrole"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"bufferrole"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"bufferrole"}],"output":{"name":"bufferrole"}}],[11,"fmt","","",28,{"inputs":[{"name":"usage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[11,"hash","","",28,null],[11,"partial_cmp","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"eq","","",29,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"bufferinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"bufferinfo"}],"output":{"name":"bufferinfo"}}],[11,"eq","","",30,{"inputs":[{"name":"buffererror"},{"name":"buffererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"buffererror"},{"name":"buffererror"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"buffererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"buffererror"}],"output":{"name":"buffererror"}}],[11,"fmt","","",31,{"inputs":[{"name":"bufferupdateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"bufferupdateerror"},{"name":"bufferupdateerror"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"bufferupdateerror"}],"output":{"name":"bufferupdateerror"}}],[11,"fmt","","",32,{"inputs":[{"name":"resourceviewerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"resourceviewerror"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"resourceviewerror"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"resourceviewerror"}}],[11,"fmt","","",33,{"inputs":[{"name":"targetviewerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"targetviewerror"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"targetviewerror"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"targetviewerror"}}],[11,"fmt","","",34,{"inputs":[{"name":"combinederror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"combinederror"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"combinederror"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"combinederror"}],"output":{"name":"combinederror"}}],[11,"from","","",34,{"inputs":[{"name":"error"}],"output":{"name":"combinederror"}}],[11,"from","","",34,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"combinederror"}}],[11,"from","","",34,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"combinederror"}}],[11,"fmt","gfx_core::format","",35,{"inputs":[{"name":"channeltype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"channeltype"}],"output":{"name":"channeltype"}}],[11,"hash","","",35,null],[11,"partial_cmp","","",35,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"option"}}],[11,"eq","","",35,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"bool"}}],[11,"cmp","","",35,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"ordering"}}],[11,"fmt","","",36,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"hash","","",36,null],[11,"partial_cmp","","",36,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"bool"}}],[11,"cmp","","",36,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",36,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",37,{"inputs":[{"name":"uint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"uint"}],"output":{"name":"uint"}}],[11,"hash","","",37,null],[11,"partial_cmp","","",37,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"option"}}],[11,"eq","","",37,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"cmp","","",37,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",37,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",38,{"inputs":[{"name":"inorm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"inorm"}],"output":{"name":"inorm"}}],[11,"hash","","",38,null],[11,"partial_cmp","","",38,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"option"}}],[11,"eq","","",38,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"bool"}}],[11,"cmp","","",38,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",38,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",39,{"inputs":[{"name":"unorm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"unorm"}],"output":{"name":"unorm"}}],[11,"hash","","",39,null],[11,"partial_cmp","","",39,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"option"}}],[11,"eq","","",39,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"bool"}}],[11,"cmp","","",39,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",39,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",40,{"inputs":[{"name":"float"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"float"}],"output":{"name":"float"}}],[11,"hash","","",40,null],[11,"partial_cmp","","",40,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"option"}}],[11,"eq","","",40,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"bool"}}],[11,"cmp","","",40,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",40,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",41,{"inputs":[{"name":"srgb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"srgb"}],"output":{"name":"srgb"}}],[11,"hash","","",41,null],[11,"partial_cmp","","",41,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"option"}}],[11,"eq","","",41,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"bool"}}],[11,"cmp","","",41,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",41,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",42,{"inputs":[{"name":"surfacetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"surfacetype"}],"output":{"name":"surfacetype"}}],[11,"hash","","",42,null],[11,"partial_cmp","","",42,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"option"}}],[11,"eq","","",42,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"bool"}}],[11,"cmp","","",42,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"ordering"}}],[11,"get_total_bits","","Return the total number of bits for this format.",42,{"inputs":[{"name":"surfacetype"}],"output":{"name":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",42,{"inputs":[{"name":"surfacetype"}],"output":{"name":"u8"}}],[11,"fmt","","",43,{"inputs":[{"name":"r4_g4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"r4_g4"}],"output":{"name":"r4_g4"}}],[11,"hash","","",43,null],[11,"partial_cmp","","",43,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"option"}}],[11,"eq","","",43,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",43,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",44,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"r4_g4_b4_a4"}],"output":{"name":"r4_g4_b4_a4"}}],[11,"hash","","",44,null],[11,"partial_cmp","","",44,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"option"}}],[11,"eq","","",44,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",44,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",45,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"r5_g5_b5_a1"}],"output":{"name":"r5_g5_b5_a1"}}],[11,"hash","","",45,null],[11,"partial_cmp","","",45,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"option"}}],[11,"eq","","",45,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"bool"}}],[11,"cmp","","",45,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",45,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",46,{"inputs":[{"name":"r5_g6_b5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"r5_g6_b5"}],"output":{"name":"r5_g6_b5"}}],[11,"hash","","",46,null],[11,"partial_cmp","","",46,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"option"}}],[11,"eq","","",46,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"bool"}}],[11,"cmp","","",46,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",46,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",47,{"inputs":[{"name":"r8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"r8"}],"output":{"name":"r8"}}],[11,"hash","","",47,null],[11,"partial_cmp","","",47,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"option"}}],[11,"eq","","",47,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"bool"}}],[11,"cmp","","",47,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",47,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",48,{"inputs":[{"name":"r8_g8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"r8_g8"}],"output":{"name":"r8_g8"}}],[11,"hash","","",48,null],[11,"partial_cmp","","",48,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"option"}}],[11,"eq","","",48,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"bool"}}],[11,"cmp","","",48,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",48,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",49,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"r8_g8_b8_a8"}],"output":{"name":"r8_g8_b8_a8"}}],[11,"hash","","",49,null],[11,"partial_cmp","","",49,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"option"}}],[11,"eq","","",49,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"bool"}}],[11,"cmp","","",49,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",49,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",50,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"r10_g10_b10_a2"}],"output":{"name":"r10_g10_b10_a2"}}],[11,"hash","","",50,null],[11,"partial_cmp","","",50,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"option"}}],[11,"eq","","",50,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"bool"}}],[11,"cmp","","",50,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",50,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",51,{"inputs":[{"name":"r11_g11_b10"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"r11_g11_b10"}],"output":{"name":"r11_g11_b10"}}],[11,"hash","","",51,null],[11,"partial_cmp","","",51,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"option"}}],[11,"eq","","",51,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",51,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",52,{"inputs":[{"name":"r16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"r16"}],"output":{"name":"r16"}}],[11,"hash","","",52,null],[11,"partial_cmp","","",52,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"option"}}],[11,"eq","","",52,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"bool"}}],[11,"cmp","","",52,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",52,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",53,{"inputs":[{"name":"r16_g16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"r16_g16"}],"output":{"name":"r16_g16"}}],[11,"hash","","",53,null],[11,"partial_cmp","","",53,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"option"}}],[11,"eq","","",53,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"bool"}}],[11,"cmp","","",53,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",53,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",54,{"inputs":[{"name":"r16_g16_b16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"r16_g16_b16"}],"output":{"name":"r16_g16_b16"}}],[11,"hash","","",54,null],[11,"partial_cmp","","",54,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"option"}}],[11,"eq","","",54,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"bool"}}],[11,"cmp","","",54,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",54,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",55,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"r16_g16_b16_a16"}],"output":{"name":"r16_g16_b16_a16"}}],[11,"hash","","",55,null],[11,"partial_cmp","","",55,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"option"}}],[11,"eq","","",55,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"bool"}}],[11,"cmp","","",55,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",55,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",56,{"inputs":[{"name":"r32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"r32"}],"output":{"name":"r32"}}],[11,"hash","","",56,null],[11,"partial_cmp","","",56,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"option"}}],[11,"eq","","",56,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",56,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",57,{"inputs":[{"name":"r32_g32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"r32_g32"}],"output":{"name":"r32_g32"}}],[11,"hash","","",57,null],[11,"partial_cmp","","",57,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"option"}}],[11,"eq","","",57,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",57,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",58,{"inputs":[{"name":"r32_g32_b32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"r32_g32_b32"}],"output":{"name":"r32_g32_b32"}}],[11,"hash","","",58,null],[11,"partial_cmp","","",58,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"option"}}],[11,"eq","","",58,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",58,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",59,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"r32_g32_b32_a32"}],"output":{"name":"r32_g32_b32_a32"}}],[11,"hash","","",59,null],[11,"partial_cmp","","",59,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"option"}}],[11,"eq","","",59,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"bool"}}],[11,"cmp","","",59,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",59,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",60,{"inputs":[{"name":"d16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"d16"}],"output":{"name":"d16"}}],[11,"hash","","",60,null],[11,"partial_cmp","","",60,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"option"}}],[11,"eq","","",60,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",60,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",61,{"inputs":[{"name":"d24"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"d24"}],"output":{"name":"d24"}}],[11,"hash","","",61,null],[11,"partial_cmp","","",61,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"option"}}],[11,"eq","","",61,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",61,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",62,{"inputs":[{"name":"d24_s8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"d24_s8"}],"output":{"name":"d24_s8"}}],[11,"hash","","",62,null],[11,"partial_cmp","","",62,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"option"}}],[11,"eq","","",62,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"bool"}}],[11,"cmp","","",62,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",62,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",63,{"inputs":[{"name":"d32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"d32"}],"output":{"name":"d32"}}],[11,"hash","","",63,null],[11,"partial_cmp","","",63,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"option"}}],[11,"eq","","",63,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"bool"}}],[11,"cmp","","",63,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",63,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",64,{"inputs":[{"name":"channelsource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"channelsource"}],"output":{"name":"channelsource"}}],[11,"hash","","",64,null],[11,"partial_cmp","","",64,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"option"}}],[11,"eq","","",64,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"bool"}}],[11,"cmp","","",64,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"ordering"}}],[11,"fmt","","",65,{"inputs":[{"name":"swizzle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"swizzle"}],"output":{"name":"swizzle"}}],[11,"hash","","",65,null],[11,"partial_cmp","","",65,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"option"}}],[11,"lt","","",65,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"le","","",65,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"gt","","",65,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ge","","",65,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"cmp","","",65,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"ordering"}}],[11,"new","","Create a new swizzle where each channel is unmapped.",65,{"inputs":[],"output":{"name":"swizzle"}}],[11,"fmt","","",66,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"hash","","",66,null],[11,"partial_cmp","","",66,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"option"}}],[11,"lt","","",66,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",66,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",66,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",66,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"cmp","","",66,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"fmt","","",67,{"inputs":[{"name":"u8norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"u8norm"}],"output":{"name":"u8norm"}}],[11,"hash","","",67,null],[11,"partial_cmp","","",67,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"option"}}],[11,"lt","","",67,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"le","","",67,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"gt","","",67,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ge","","",67,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"cmp","","",67,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"ordering"}}],[11,"from","","",67,{"inputs":[{"name":"u8"}],"output":{"name":"u8norm"}}],[11,"cast2","","Convert a 2-element slice.",67,null],[11,"cast3","","Convert a 3-element slice.",67,null],[11,"cast4","","Convert a 4-element slice.",67,null],[11,"cast_slice","","Convert a generic slice by transmutation.",67,null],[11,"fmt","","",68,{"inputs":[{"name":"i8norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"i8norm"}],"output":{"name":"i8norm"}}],[11,"hash","","",68,null],[11,"partial_cmp","","",68,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"ordering"}}],[11,"from","","",68,{"inputs":[{"name":"i8"}],"output":{"name":"i8norm"}}],[11,"cast2","","Convert a 2-element slice.",68,null],[11,"cast3","","Convert a 3-element slice.",68,null],[11,"cast4","","Convert a 4-element slice.",68,null],[11,"cast_slice","","Convert a generic slice by transmutation.",68,null],[11,"fmt","","",69,{"inputs":[{"name":"u16norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"u16norm"}],"output":{"name":"u16norm"}}],[11,"hash","","",69,null],[11,"partial_cmp","","",69,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"cmp","","",69,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"ordering"}}],[11,"from","","",69,{"inputs":[{"name":"u16"}],"output":{"name":"u16norm"}}],[11,"cast2","","Convert a 2-element slice.",69,null],[11,"cast3","","Convert a 3-element slice.",69,null],[11,"cast4","","Convert a 4-element slice.",69,null],[11,"cast_slice","","Convert a generic slice by transmutation.",69,null],[11,"fmt","","",70,{"inputs":[{"name":"i16norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"i16norm"}],"output":{"name":"i16norm"}}],[11,"hash","","",70,null],[11,"partial_cmp","","",70,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"cmp","","",70,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"ordering"}}],[11,"from","","",70,{"inputs":[{"name":"i16"}],"output":{"name":"i16norm"}}],[11,"cast2","","Convert a 2-element slice.",70,null],[11,"cast3","","Convert a 3-element slice.",70,null],[11,"cast4","","Convert a 4-element slice.",70,null],[11,"cast_slice","","Convert a generic slice by transmutation.",70,null],[11,"fmt","","",71,{"inputs":[{"name":"f16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"f16"}],"output":{"name":"f16"}}],[11,"hash","","",71,null],[11,"partial_cmp","","",71,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"ordering"}}],[11,"from","","",71,{"inputs":[{"name":"u16"}],"output":{"name":"f16"}}],[11,"cast2","","Convert a 2-element slice.",71,null],[11,"cast3","","Convert a 3-element slice.",71,null],[11,"cast4","","Convert a 4-element slice.",71,null],[11,"cast_slice","","Convert a generic slice by transmutation.",71,null],[11,"eq","gfx_core::handle","",72,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"rawbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get raw buffer info",72,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"bufferinfo"}}],[11,"eq","","",73,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"buffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"buffer"}],"output":{"name":"buffer"}}],[11,"new","","",73,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"buffer"}}],[11,"raw","","",73,{"inputs":[{"name":"buffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get the associated information about the buffer",73,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferinfo"}}],[11,"len","","Get the number of elements in the buffer.",73,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"eq","","",74,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"fmt","","",74,{"inputs":[{"name":"shader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"shader"}],"output":{"name":"shader"}}],[11,"eq","","",75,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"program"}],"output":{"name":"program"}}],[11,"get_info","","Get program info",75,{"inputs":[{"name":"program"}],"output":{"name":"programinfo"}}],[11,"eq","","",76,{"inputs":[{"name":"rawpipelinestate"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"rawpipelinestate"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"rawpipelinestate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"rawpipelinestate"}],"output":{"name":"rawpipelinestate"}}],[11,"eq","","",77,{"inputs":[{"name":"rawtexture"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"rawtexture"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"rawtexture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"rawtexture"}],"output":{"name":"rawtexture"}}],[11,"eq","","",78,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"texture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"texture"}],"output":{"name":"texture"}}],[11,"get_info","","Get texture descriptor",77,{"inputs":[{"name":"rawtexture"}],"output":{"name":"descriptor"}}],[11,"new","","",78,{"inputs":[{"name":"rawtexture"}],"output":{"name":"texture"}}],[11,"raw","","",78,{"inputs":[{"name":"texture"}],"output":{"name":"rawtexture"}}],[11,"get_info","","Get texture descriptor",78,{"inputs":[{"name":"texture"}],"output":{"name":"descriptor"}}],[11,"eq","","",79,{"inputs":[{"name":"rawshaderresourceview"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"rawshaderresourceview"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"rawshaderresourceview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"rawshaderresourceview"}],"output":{"name":"rawshaderresourceview"}}],[11,"eq","","",80,{"inputs":[{"name":"shaderresourceview"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"shaderresourceview"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"shaderresourceview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"shaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"new","","",80,{"inputs":[{"name":"rawshaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"raw","","",80,{"inputs":[{"name":"shaderresourceview"}],"output":{"name":"rawshaderresourceview"}}],[11,"eq","","",81,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"rawunorderedaccessview"}],"output":{"name":"rawunorderedaccessview"}}],[11,"eq","","",82,{"inputs":[{"name":"unorderedaccessview"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"unorderedaccessview"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"hash","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"unorderedaccessview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"unorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"new","","",82,{"inputs":[{"name":"rawunorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"raw","","",82,{"inputs":[{"name":"unorderedaccessview"}],"output":{"name":"rawunorderedaccessview"}}],[11,"eq","","",83,{"inputs":[{"name":"rawrendertargetview"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"rawrendertargetview"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"rawrendertargetview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"rawrendertargetview"}}],[11,"get_dimensions","","Get target dimensions",83,null],[11,"eq","","",84,{"inputs":[{"name":"rawdepthstencilview"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"rawdepthstencilview"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"rawdepthstencilview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"rawdepthstencilview"}}],[11,"get_dimensions","","Get target dimensions",84,null],[11,"eq","","",85,{"inputs":[{"name":"rendertargetview"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"rendertargetview"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"rendertargetview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"rendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"get_dimensions","","Get target dimensions",85,null],[11,"new","","",85,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"raw","","",85,{"inputs":[{"name":"rendertargetview"}],"output":{"name":"rawrendertargetview"}}],[11,"eq","","",86,{"inputs":[{"name":"depthstencilview"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"depthstencilview"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"depthstencilview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"depthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"get_dimensions","","Get target dimensions",86,null],[11,"new","","",86,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"raw","","",86,{"inputs":[{"name":"depthstencilview"}],"output":{"name":"rawdepthstencilview"}}],[11,"eq","","",87,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"sampler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"sampler"}],"output":{"name":"sampler"}}],[11,"get_info","","Get sampler info",87,{"inputs":[{"name":"sampler"}],"output":{"name":"samplerinfo"}}],[11,"eq","","",88,{"inputs":[{"name":"fence"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"fence"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"fence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"fence"}],"output":{"name":"fence"}}],[11,"make_buffer","","",89,null],[11,"make_shader","","",89,null],[11,"make_program","","",89,null],[11,"make_pso","","",89,null],[11,"make_texture","","",89,null],[11,"make_buffer_srv","","",89,null],[11,"make_texture_srv","","",89,null],[11,"make_buffer_uav","","",89,null],[11,"make_texture_uav","","",89,null],[11,"make_rtv","","",89,null],[11,"make_dsv","","",89,null],[11,"make_sampler","","",89,null],[11,"make_fence","","",89,null],[11,"clean_with","","",89,null],[11,"new","","Create a new handle manager",89,{"inputs":[],"output":{"name":"manager"}}],[11,"clear","","Clear all references",89,null],[11,"extend","","Extend with all references of another handle manager",89,null],[11,"count","","Count the total number of referenced resources",89,{"inputs":[{"name":"manager"}],"output":{"name":"usize"}}],[11,"ref_buffer","","Reference a buffer",89,null],[11,"ref_shader","","Reference a shader",89,null],[11,"ref_program","","Reference a program",89,null],[11,"ref_pso","","Reference a pipeline state object",89,null],[11,"ref_texture","","Reference a texture",89,null],[11,"ref_srv","","Reference a shader resource view",89,null],[11,"ref_uav","","Reference an unordered access view",89,null],[11,"ref_rtv","","Reference an RTV",89,null],[11,"ref_dsv","","Reference a DSV",89,null],[11,"ref_sampler","","Reference a sampler",89,null],[11,"ref_fence","","Reference a fence",89,null],[11,"deref","gfx_core::mapping","",90,null],[11,"drop","","",90,null],[11,"set","","Set a value in the buffer",91,null],[11,"to_mut_slice","","Returns a mutable slice of the specified length.",91,null],[11,"drop","","",91,null],[11,"deref","","",92,null],[11,"deref_mut","","",92,null],[11,"drop","","",92,null],[11,"fmt","gfx_core::pso","",93,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"creationerror"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"eq","","",94,{"inputs":[{"name":"colorinfo"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"colorinfo"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"colorinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"colorinfo"}],"output":{"name":"colorinfo"}}],[11,"from","","",94,{"inputs":[{"name":"colormask"}],"output":{"name":"colorinfo"}}],[11,"from","","",94,{"inputs":[{"name":"blend"}],"output":{"name":"colorinfo"}}],[11,"eq","","",95,{"inputs":[{"name":"depthstencilinfo"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"depthstencilinfo"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"depthstencilinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"depthstencilinfo"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",95,{"inputs":[{"name":"depth"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",95,{"inputs":[{"name":"stencil"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",95,null],[11,"eq","","",96,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"bool"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"element"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"element"}],"output":{"name":"element"}}],[11,"eq","","",97,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"descriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"descriptor"}],"output":{"name":"descriptor"}}],[11,"new","","Create a new empty PSO descriptor.",97,{"inputs":[{"name":"primitive"},{"name":"rasterizer"}],"output":{"name":"descriptor"}}],[11,"fmt","","",98,{"inputs":[{"name":"vertexbufferset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"vertexbufferset"}],"output":{"name":"vertexbufferset"}}],[11,"new","","Create an empty set",98,{"inputs":[],"output":{"name":"vertexbufferset"}}],[11,"fmt","","",99,{"inputs":[{"name":"constantbufferparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"constantbufferparam"}],"output":{"name":"constantbufferparam"}}],[11,"fmt","","",100,{"inputs":[{"name":"resourceviewparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"resourceviewparam"}],"output":{"name":"resourceviewparam"}}],[11,"fmt","","",101,{"inputs":[{"name":"unorderedviewparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"unorderedviewparam"}],"output":{"name":"unorderedviewparam"}}],[11,"fmt","","",102,{"inputs":[{"name":"samplerparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"samplerparam"}],"output":{"name":"samplerparam"}}],[11,"fmt","","",103,{"inputs":[{"name":"pixeltargetset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"pixeltargetset"}],"output":{"name":"pixeltargetset"}}],[11,"new","","Create an empty set",103,{"inputs":[],"output":{"name":"pixeltargetset"}}],[11,"add_color","","Add a color view to the specified slot",103,null],[11,"add_depth_stencil","","Add a depth or stencil view to the specified slot",103,null],[11,"fmt","gfx_core::shade","",104,{"inputs":[{"name":"isarray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"isarray"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"isarray"}],"output":{"name":"isarray"}}],[11,"fmt","","",105,{"inputs":[{"name":"iscomparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"iscomparison"},{"name":"iscomparison"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"iscomparison"}],"output":{"name":"iscomparison"}}],[11,"fmt","","",106,{"inputs":[{"name":"ismultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"ismultisample"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"ismultisample"}],"output":{"name":"ismultisample"}}],[11,"fmt","","",107,{"inputs":[{"name":"isrect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"isrect"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"isrect"}],"output":{"name":"isrect"}}],[11,"fmt","","",108,{"inputs":[{"name":"matrixformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"matrixformat"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"matrixformat"}],"output":{"name":"matrixformat"}}],[11,"fmt","","",109,{"inputs":[{"name":"texturetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"texturetype"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"texturetype"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"texturetype"}],"output":{"name":"texturetype"}}],[11,"can_sample","","Check if this texture can be used with a sampler.",109,{"inputs":[{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"samplertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"samplertype"}],"output":{"name":"samplertype"}}],[11,"fmt","","",111,{"inputs":[{"name":"basetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"basetype"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"basetype"}],"output":{"name":"basetype"}}],[11,"fmt","","",112,{"inputs":[{"name":"containertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"containertype"}],"output":{"name":"containertype"}}],[11,"eq","","",113,{"inputs":[{"name":"stage"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"hash","","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"stage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"stage"}],"output":{"name":"stage"}}],[11,"clone","","",114,{"inputs":[{"name":"uniformvalue"}],"output":{"name":"uniformvalue"}}],[11,"fmt","","",114,{"inputs":[{"name":"uniformvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",115,null],[11,"cmp","","",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"option"}}],[11,"lt","","",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[11,"eq","","",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"fmt","","",115,{"inputs":[{"name":"usage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",115,{"inputs":[],"output":{"name":"usage"}}],[11,"all","","Returns the set containing all flags.",115,{"inputs":[],"output":{"name":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",115,{"inputs":[{"name":"usage"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",115,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",115,{"inputs":[{"name":"u8"}],"output":{"name":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",115,{"inputs":[{"name":"usage"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",115,{"inputs":[{"name":"usage"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",115,null],[11,"remove","","Removes the specified flags in-place.",115,null],[11,"toggle","","Toggles the specified flags in-place.",115,null],[11,"bitor","","Returns the union of the two sets of flags.",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitor_assign","","Adds the set of flags.",115,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitxor_assign","","Toggles the set of flags.",115,null],[11,"bitand","","Returns the intersection between the two sets of flags.",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",115,null],[11,"sub","","Returns the set difference of the two sets of flags.",115,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"sub_assign","","Disables all flags enabled in the set.",115,null],[11,"not","","Returns the complement of this set of flags.",115,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[11,"from_iter","","",115,{"inputs":[{"name":"t"}],"output":{"name":"usage"}}],[11,"from","","",115,{"inputs":[{"name":"stage"}],"output":{"name":"usage"}}],[11,"fmt","","",116,{"inputs":[{"name":"attributevar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"attributevar"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"attributevar"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"attributevar"}],"output":{"name":"attributevar"}}],[11,"fmt","","",117,{"inputs":[{"name":"constvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",117,{"inputs":[{"name":"constvar"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"constvar"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"constvar"}],"output":{"name":"constvar"}}],[11,"fmt","","",118,{"inputs":[{"name":"constantbuffervar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"constantbuffervar"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"constantbuffervar"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"constantbuffervar"}],"output":{"name":"constantbuffervar"}}],[11,"fmt","","",119,{"inputs":[{"name":"texturevar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"texturevar"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"texturevar"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"texturevar"}],"output":{"name":"texturevar"}}],[11,"fmt","","",120,{"inputs":[{"name":"unorderedvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"unorderedvar"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"unorderedvar"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"unorderedvar"}],"output":{"name":"unorderedvar"}}],[11,"fmt","","",121,{"inputs":[{"name":"samplervar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"samplervar"}],"output":{"name":"samplervar"}}],[11,"fmt","","",122,{"inputs":[{"name":"outputvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"outputvar"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"outputvar"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"outputvar"}],"output":{"name":"outputvar"}}],[11,"fmt","","",123,{"inputs":[{"name":"programinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",123,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"programinfo"}],"output":{"name":"programinfo"}}],[11,"fmt","","",124,{"inputs":[{"name":"compatibilityerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"compatibilityerror"}],"output":{"name":"compatibilityerror"}}],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored\nin this variable.",117,{"inputs":[{"name":"constvar"},{"name":"uniformvalue"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"createshadererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",125,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"createshadererror"}],"output":{"name":"createshadererror"}}],[11,"eq","gfx_core::tex","",126,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",126,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",127,{"inputs":[{"name":"aamode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"aamode"}],"output":{"name":"aamode"}}],[11,"hash","","",127,null],[11,"partial_cmp","","",127,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"option"}}],[11,"lt","","",127,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"le","","",127,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"gt","","",127,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ge","","",127,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"eq","","",127,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"cmp","","",127,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"ordering"}}],[11,"from","","",127,{"inputs":[{"name":"u8"}],"output":{"name":"aamode"}}],[11,"get_num_fragments","","Return the number of actual data fragments stored per texel.",127,{"inputs":[{"name":"aamode"}],"output":{"name":"u8"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",127,{"inputs":[{"name":"aamode"}],"output":{"name":"bool"}}],[11,"fmt","","",128,{"inputs":[{"name":"filtermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"filtermethod"}],"output":{"name":"filtermethod"}}],[11,"hash","","",128,null],[11,"partial_cmp","","",128,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"option"}}],[11,"lt","","",128,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"le","","",128,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"gt","","",128,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ge","","",128,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"eq","","",128,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"cmp","","",128,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"ordering"}}],[11,"fmt","","",129,{"inputs":[{"name":"cubeface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"cubeface"}],"output":{"name":"cubeface"}}],[11,"hash","","",129,null],[11,"partial_cmp","","",129,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"option"}}],[11,"eq","","",129,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"cmp","","",129,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"ordering"}}],[11,"fmt","","",130,{"inputs":[{"name":"kind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"kind"}],"output":{"name":"kind"}}],[11,"hash","","",130,null],[11,"partial_cmp","","",130,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"option"}}],[11,"lt","","",130,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"le","","",130,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"gt","","",130,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ge","","",130,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"eq","","",130,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"cmp","","",130,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"ordering"}}],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",130,null],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",130,null],[11,"get_num_levels","","Count the number of mipmap levels.",130,{"inputs":[{"name":"kind"}],"output":{"name":"u8"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",130,{"inputs":[{"name":"kind"}],"output":{"name":"option"}}],[11,"is_cube","","Check if it&#39;s one of the cube kinds.",130,{"inputs":[{"name":"kind"}],"output":{"name":"bool"}}],[11,"fmt","","",131,{"inputs":[{"name":"imageinfocommon"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"imageinfocommon"}],"output":{"name":"imageinfocommon"}}],[11,"hash","","",131,null],[11,"partial_cmp","","",131,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"option"}}],[11,"lt","","",131,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"le","","",131,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"gt","","",131,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ge","","",131,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"cmp","","",131,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"ordering"}}],[11,"get_texel_count","","Get the total number of texels.",131,{"inputs":[{"name":"imageinfocommon"}],"output":{"name":"usize"}}],[11,"convert","","Convert into a differently typed format.",131,{"inputs":[{"name":"imageinfocommon"},{"name":"t"}],"output":{"name":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",131,null],[11,"fmt","","",132,{"inputs":[{"name":"wrapmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"wrapmode"}],"output":{"name":"wrapmode"}}],[11,"hash","","",132,null],[11,"partial_cmp","","",132,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"option"}}],[11,"eq","","",132,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"cmp","","",132,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"option"}}],[11,"lt","","",133,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"le","","",133,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"gt","","",133,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ge","","",133,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"eq","","",133,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"hash","","",133,null],[11,"fmt","","",133,{"inputs":[{"name":"lod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"lod"}],"output":{"name":"lod"}}],[11,"from","","",133,{"inputs":[{"name":"f32"}],"output":{"name":"lod"}}],[11,"into","","",133,{"inputs":[{"name":"lod"}],"output":{"name":"f32"}}],[11,"partial_cmp","","",134,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"option"}}],[11,"lt","","",134,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"le","","",134,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"gt","","",134,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ge","","",134,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"eq","","",134,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"fmt","","",134,{"inputs":[{"name":"packedcolor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"packedcolor"}],"output":{"name":"packedcolor"}}],[11,"from","","",134,null],[11,"into","","",134,null],[11,"partial_cmp","","",135,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"option"}}],[11,"lt","","",135,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"le","","",135,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"gt","","",135,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ge","","",135,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"eq","","",135,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"hash","","",135,null],[11,"fmt","","",135,{"inputs":[{"name":"samplerinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"samplerinfo"}],"output":{"name":"samplerinfo"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD\nmodifications.",135,{"inputs":[{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[11,"fmt","","",136,{"inputs":[{"name":"descriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"descriptor"}],"output":{"name":"descriptor"}}],[11,"hash","","",136,null],[11,"partial_cmp","","",136,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"option"}}],[11,"lt","","",136,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"le","","",136,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"gt","","",136,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ge","","",136,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"eq","","",136,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"cmp","","",136,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"ordering"}}],[11,"to_image_info","","Get image info for a given mip.",136,{"inputs":[{"name":"descriptor"},{"name":"u8"}],"output":{"name":"imageinfocommon"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",136,{"inputs":[{"name":"descriptor"},{"name":"channeltype"},{"name":"u8"}],"output":{"name":"imageinfocommon"}}],[11,"fmt","","",137,{"inputs":[{"name":"resourcedesc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"resourcedesc"}],"output":{"name":"resourcedesc"}}],[11,"hash","","",137,null],[11,"partial_cmp","","",137,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"option"}}],[11,"lt","","",137,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"le","","",137,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"gt","","",137,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ge","","",137,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"eq","","",137,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"cmp","","",137,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"ordering"}}],[11,"fmt","","",138,{"inputs":[{"name":"renderdesc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"renderdesc"}],"output":{"name":"renderdesc"}}],[11,"hash","","",138,null],[11,"partial_cmp","","",138,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"option"}}],[11,"lt","","",138,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"le","","",138,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"gt","","",138,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ge","","",138,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"eq","","",138,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"cmp","","",138,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"ordering"}}],[11,"hash","","",139,null],[11,"cmp","","",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"option"}}],[11,"lt","","",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"le","","",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"gt","","",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ge","","",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"eq","","",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"depthstencilflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",139,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",139,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",139,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",139,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",139,{"inputs":[{"name":"u8"}],"output":{"name":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",139,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",139,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",139,null],[11,"remove","","Removes the specified flags in-place.",139,null],[11,"toggle","","Toggles the specified flags in-place.",139,null],[11,"bitor","","Returns the union of the two sets of flags.",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitor_assign","","Adds the set of flags.",139,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",139,null],[11,"bitand","","Returns the intersection between the two sets of flags.",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",139,null],[11,"sub","","Returns the set difference of the two sets of flags.",139,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",139,null],[11,"not","","Returns the complement of this set of flags.",139,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"from_iter","","",139,{"inputs":[{"name":"t"}],"output":{"name":"depthstencilflags"}}],[11,"fmt","","",140,{"inputs":[{"name":"depthstencildesc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"depthstencildesc"}],"output":{"name":"depthstencildesc"}}],[11,"hash","","",140,null],[11,"partial_cmp","","",140,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"option"}}],[11,"lt","","",140,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"le","","",140,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"gt","","",140,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ge","","",140,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"eq","","",140,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"cmp","","",140,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"ordering"}}],[11,"from","","",140,{"inputs":[{"name":"renderdesc"}],"output":{"name":"depthstencildesc"}}],[11,"reference","gfx_core","",141,null],[11,"reference","","",142,null],[11,"reference","","",143,null],[11,"reference","","",144,null],[11,"reference","","",145,null],[11,"get_usage","","Return the aggregated stage usage for the set.",146,{"inputs":[{"name":"shaderset"}],"output":{"name":"usage"}}],[11,"fmt","","",147,{"inputs":[{"name":"capabilities"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"capabilities"}],"output":{"name":"capabilities"}}],[11,"eq","","",148,{"inputs":[{"name":"primitive"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"hash","","",148,null],[11,"fmt","","",148,{"inputs":[{"name":"primitive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"primitive"}],"output":{"name":"primitive"}}],[11,"fmt","","",149,{"inputs":[{"name":"indextype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"indextype"}],"output":{"name":"indextype"}}],[11,"hash","","",149,null],[11,"partial_cmp","","",149,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"option"}}],[11,"eq","","",149,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"cmp","","",149,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"ordering"}}],[8,"Device","gfx","An interface for performing draw calls using a specific graphics API",null,null],[16,"Resources","","Associated resources type.",150,null],[16,"CommandBuffer","","Associated command buffer type.",150,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation.",150,{"inputs":[{"name":"device"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",150,null],[10,"submit","","Submit a command buffer for execution.",150,null],[10,"cleanup","","Cleanup unused resources, to be called between frames.",150,null],[8,"Resources","","Resources pertaining to a specific API.",null,null],[16,"Buffer","","",151,null],[16,"Shader","","",151,null],[16,"Program","","",151,null],[16,"PipelineStateObject","","",151,null],[16,"Texture","","",151,null],[16,"ShaderResourceView","","",151,null],[16,"UnorderedAccessView","","",151,null],[16,"RenderTargetView","","",151,null],[16,"DepthStencilView","","",151,null],[16,"Sampler","","",151,null],[16,"Fence","","",151,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",148,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d,\ne]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",148,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a &quot;path&quot; of\nlines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line\nline, and `b` and `c` form a line.",148,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`,\n`a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",148,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c,\nd]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",148,null],[6,"VertexCount","","",null,null],[6,"InstanceCount","","",null,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",146,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",146,null],[3,"VertexShader","","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[0,"format","","Universal format specification.\nApplicable to textures, views, and vertex buffers.",null,null],[4,"ChannelType","gfx::format","Type of a surface channel. This is how we interpret the\nstorage allocated with `SurfaceType`.",null,null],[13,"Int","","",35,null],[13,"Uint","","",35,null],[13,"Inorm","","",35,null],[13,"Unorm","","",35,null],[13,"Float","","",35,null],[13,"Srgb","","",35,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only\ncarry information about the number of bits per each channel.\nThe actual types are up to the views to decide and interpret.\nThe actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",42,null],[13,"R4_G4_B4_A4","","",42,null],[13,"R5_G5_B5_A1","","",42,null],[13,"R5_G6_B5","","",42,null],[13,"R8","","",42,null],[13,"R8_G8","","",42,null],[13,"R8_G8_B8_A8","","",42,null],[13,"R10_G10_B10_A2","","",42,null],[13,"R11_G11_B10","","",42,null],[13,"R16","","",42,null],[13,"R16_G16","","",42,null],[13,"R16_G16_B16","","",42,null],[13,"R16_G16_B16_A16","","",42,null],[13,"R32","","",42,null],[13,"R32_G32","","",42,null],[13,"R32_G32_B32","","",42,null],[13,"R32_G32_B32_A32","","",42,null],[13,"D16","","",42,null],[13,"D24","","",42,null],[13,"D24_S8","","",42,null],[13,"D32","","",42,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto\ndifferent physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",64,null],[13,"One","","",64,null],[13,"X","","",64,null],[13,"Y","","",64,null],[13,"Z","","",64,null],[13,"W","","",64,null],[3,"Swizzle","","Channel swizzle configuration for the resource views.\nNote: It&#39;s not currently mirrored at compile-time,\nthus providing less safety and convenience.",null,null],[12,"0","","",65,null],[12,"1","","",65,null],[12,"2","","",65,null],[12,"3","","",65,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",66,null],[12,"1","","",66,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",152,null],[10,"get_surface_type","","Return the run-time value of the type.",152,{"inputs":[],"output":{"name":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel.\nFor example, normalized integers are visible as floats.",153,null],[10,"get_channel_type","","Return the run-time value of the type.",153,{"inputs":[],"output":{"name":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",154,null],[16,"Channel","","Associated channel type.",154,null],[16,"View","","Shader view type of this format.",154,null],[11,"get_format","","Return the run-time value of the type.",154,{"inputs":[],"output":{"name":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[3,"U8Norm","","",null,null],[12,"0","","",67,null],[3,"I8Norm","","",null,null],[12,"0","","",68,null],[3,"U16Norm","","",null,null],[12,"0","","",69,null],[3,"I16Norm","","",null,null],[12,"0","","",70,null],[3,"F16","","",null,null],[12,"0","","",71,null],[6,"Vec1","","",null,null],[6,"Vec2","","",null,null],[6,"Vec3","","",null,null],[6,"Vec4","","",null,null],[6,"Rgba8","","",null,null],[6,"Srgba8","","",null,null],[6,"Rgb10a2F","","",null,null],[6,"Rgba16F","","",null,null],[6,"Rgba32F","","",null,null],[6,"Depth","","",null,null],[6,"DepthStencil","","",null,null],[6,"Depth32F","","",null,null],[0,"handle","gfx","Device resource handles",null,null],[3,"RawBuffer","gfx::handle","Raw (untyped) Buffer Handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture object",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer.\nSeals actual resource names behind the interface, automatically\nreferencing them both by the Factory on resource creation\nand the Renderer during CommandBuffer population.",null,null],[8,"Producer","","A service trait to be used by the device implementation",null,null],[10,"make_buffer","","",155,null],[10,"make_shader","","",155,null],[10,"make_program","","",155,null],[10,"make_pso","","",155,null],[10,"make_texture","","",155,null],[10,"make_buffer_srv","","",155,null],[10,"make_texture_srv","","",155,null],[10,"make_buffer_uav","","",155,null],[10,"make_texture_uav","","",155,null],[10,"make_rtv","","",155,null],[10,"make_dsv","","",155,null],[10,"make_sampler","","",155,null],[10,"make_fence","","",155,null],[10,"clean_with","","Walk through all the handles, keep ones that are reference elsewhere\nand call the provided delete function (resource-specific) for others",155,null],[0,"tex","gfx","Texture creation and modification.",null,null],[4,"Error","gfx::tex","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",126,null],[13,"Kind","","The kind doesn&#39;t support a particular operation.",126,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",126,null],[13,"Size","","Unsupported size in one of the dimensions.",126,null],[13,"Data","","The given data has a different size than the target texture slice.",126,null],[6,"Size","","",null,null],[6,"Bits","","",null,null],[6,"NumSamples","","",null,null],[6,"NumFragments","","",null,null],[6,"Dimensions","","",null,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",127,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",127,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",127,null],[4,"FilterMethod","","How to [filter](https://en.wikipedia.org/wiki/Texture_filtering) the\ntexture when sampling. They correspond to increasing levels of quality,\nbut also cost. They &quot;layer&quot; on top of each other: it is not possible to\nhave bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",128,null],[13,"Mipmap","","Add simple mipmapping.",128,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase\nquality.",128,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",128,null],[13,"Anisotropic","","Anisotropic filtering with a given &quot;max&quot;, must be between 1 and 16,\ninclusive.",128,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",129,null],[13,"NegX","","",129,null],[13,"PosY","","",129,null],[13,"NegY","","",129,null],[13,"PosZ","","",129,null],[13,"NegZ","","",129,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",130,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels\nin a different row are not sampled.",130,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",130,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in\na different depth level are not sampled.",130,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",130,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",130,null],[13,"CubeArray","","An array of Cube textures.",130,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",131,null],[12,"yoffset","","",131,null],[12,"zoffset","","",131,null],[12,"width","","",131,null],[12,"height","","",131,null],[12,"depth","","",131,null],[12,"format","","Format of each texel.",131,null],[12,"mipmap","","Which mipmap to select.",131,null],[6,"RawImageInfo","","",null,null],[6,"NewImageInfo","","",null,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is\nthe default.",132,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",132,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",132,null],[13,"Border","","Use border color.",132,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",134,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",135,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL\nspeak).",135,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For\nexample, if it would select mipmap level 2 and lod_bias is 1, it will\nuse mipmap level 3.",135,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",135,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",135,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",135,null],[3,"Descriptor","","Texture storage descriptor.",null,null],[12,"kind","","",136,null],[12,"levels","","",136,null],[12,"format","","",136,null],[12,"bind","","",136,null],[12,"usage","","",136,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",137,null],[12,"min","","",137,null],[12,"max","","",137,null],[12,"swizzle","","",137,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",138,null],[12,"level","","",138,null],[12,"layer","","",138,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[17,"RO_DEPTH","","Depth is read-only in the view.",null,null],[17,"RO_STENCIL","","Stencil is read-only in the view.",null,null],[17,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",140,null],[12,"layer","","",140,null],[12,"flags","","",140,null],[6,"Layer","","",null,null],[6,"Level","","",null,null],[8,"Factory","gfx","A `Factory` is responsible for creating and managing resources for the context it was created\nwith. ",null,null],[16,"Mapper","","Associated mapper type",156,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being\nused.",156,{"inputs":[{"name":"factory"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",156,{"inputs":[{"name":"factory"},{"name":"bufferinfo"}],"output":{"name":"result"}}],[10,"create_buffer_const_raw","","",156,null],[11,"create_buffer_const","","",156,null],[11,"create_buffer_dynamic","","",156,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"}],"output":{"name":"result"}}],[11,"create_buffer_staging","","",156,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"},{"name":"mapaccess"}],"output":{"name":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the\n`FactoryExt` trait and `pso` module, both in the `gfx` crate.",156,{"inputs":[{"name":"factory"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",156,{"inputs":[{"name":"factory"},{"name":"shaderset"}],"output":{"name":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader\n`Program`.",156,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",156,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",156,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment\nshader.",156,null],[10,"create_sampler","","",156,{"inputs":[{"name":"factory"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"map_buffer_raw","","",156,null],[10,"unmap_buffer_raw","","",156,null],[10,"map_buffer_readable","","",156,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"readable"}}],[10,"map_buffer_writable","","",156,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"writable"}}],[10,"map_buffer_rw","","",156,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"rw"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint,\nrequired to assist backends that have no concept of typeless formats (OpenGL).\nThe initial data, if given, has to be provided for all mip levels and slices:\nSlice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",156,{"inputs":[{"name":"factory"},{"name":"descriptor"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawtexture"}],"output":{"name":"result"}}],[10,"view_texture_as_render_target_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_texture","","",156,{"inputs":[{"name":"factory"},{"name":"kind"},{"name":"u8"},{"name":"bind"},{"name":"usage"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource","","",156,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access","","",156,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource","","",156,null],[11,"view_texture_as_unordered_access","","",156,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target","","",156,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil","","",156,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"},{"name":"depthstencilflags"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",156,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_texture_const_u8","","",156,null],[11,"create_texture_const","","",156,null],[11,"create_render_target","","",156,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil","","",156,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil_view_only","","",156,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[4,"Usage","","A hint as to how this buffer/texture will be used.",null,null],[13,"GpuOnly","","GPU: read + write, CPU: copy. Optimal for render targets.",28,null],[13,"Const","","GPU: read, CPU: none. Optimal for resourced textures/buffers.",28,null],[13,"Dynamic","","GPU: read, CPU: write.",28,null],[13,"CpuOnly","","GPU: copy, CPU: as specified. Used as a staging buffer,\nto be copied back and forth with on-GPU targets.",28,null],[3,"Bind","","Bind flags",null,null],[4,"MapAccess","","Specifies the access allowed to a buffer mapping.",null,null],[13,"Readable","","Only allow reads.",25,null],[13,"Writable","","Only allow writes.",25,null],[13,"RW","","Allow full access.",25,null],[4,"ResourceViewError","","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag does not present in the texture.",32,null],[13,"Channel","","Selected channel type is not supported for this texture.",32,null],[13,"Unsupported","","The backend refused for some reason.",32,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag does not present in the texture.",33,null],[13,"BadLevel","","Selected mip level doesn&#39;t exist.",33,null],[13,"BadLayer","","Selected array layer doesn&#39;t exist.",33,null],[13,"Channel","","Selected channel type is not supported for this texture.",33,null],[13,"Unsupported","","The backend refused for some reason.",33,null],[4,"BufferRole","","Role of the memory buffer. GLES doesn&#39;t allow chaning bind points for buffers.",null,null],[13,"Vertex","","Generic vertex buffer",27,null],[13,"Index","","Index buffer",27,null],[13,"Uniform","","Uniform block buffer",27,null],[3,"BufferInfo","","An information block that is immutable and associated with each buffer.",null,null],[12,"role","","Role",29,null],[12,"usage","","Usage hint",29,null],[12,"bind","","Bind flags",29,null],[12,"size","","Size in bytes",29,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers\nthat you use via shader resource / unordered access views.",29,null],[4,"BufferError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",30,null],[13,"Other","","Unknown other error.",30,null],[4,"BufferUpdateError","","An error happening on buffer updates.",null,null],[13,"OutOfBounds","","Trying to change the contents outside of the allocation.",31,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",34,null],[13,"Resource","","Failed to create SRV or UAV.",34,null],[13,"Target","","Failed to create RTV or DSV.",34,null],[17,"RENDER_TARGET","","The resource can be rendered into.",null,null],[17,"DEPTH_STENCIL","","The resource can serve as a depth/stencil target.",null,null],[17,"SHADER_RESOURCE","","The resource can be bound to the shader for reading.",null,null],[17,"UNORDERED_ACCESS","","The resource can be bound to the shader for writing.",null,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an\nefficient API-specific manner, to be ready for execution on the device.",null,null],[10,"clone_empty","","Clone as an empty buffer",157,{"inputs":[{"name":"commandbuffer"}],"output":{"name":"self"}}],[10,"reset","","Reset the command buffer contents, retain the allocated storage",157,null],[10,"bind_pipeline_state","","Bind a pipeline state object",157,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",157,null],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",157,null],[10,"bind_global_constant","","Bind a global constant",157,null],[10,"bind_resource_views","","Bind a complete set of shader resource views",157,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",157,null],[10,"bind_samplers","","Bind a complete set of samplers",157,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple\ncolors views and an optional depth/stencil view.",157,null],[10,"bind_index","","Bind an index buffer",157,null],[10,"set_scissor","","Set scissor rectangle",157,null],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",157,null],[10,"update_buffer","","Update a vertex/index/uniform buffer",157,null],[10,"update_texture","","Update a texture",157,null],[10,"generate_mipmap","","",157,null],[10,"clear_color","","Clear color target",157,null],[10,"clear_depth_stencil","","",157,null],[10,"call_draw","","Draw a primitive",157,null],[10,"call_draw_indexed","","Draw a primitive with index buffer",157,null],[6,"InstanceOption","","",null,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",123,null],[12,"globals","","Global constants in the program",123,null],[12,"constant_buffers","","Constant buffers in the program",123,null],[12,"textures","","Textures in the program",123,null],[12,"unordereds","","Unordered access resources in the program",123,null],[12,"samplers","","Samplers in the program",123,null],[12,"outputs","","Output targets in the program",123,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are\nunable to actually get the output variable info",123,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",114,null],[13,"F32","","",114,null],[13,"I32Vector2","","",114,null],[13,"I32Vector3","","",114,null],[13,"I32Vector4","","",114,null],[13,"F32Vector2","","",114,null],[13,"F32Vector3","","",114,null],[13,"F32Vector4","","",114,null],[13,"F32Matrix2","","",114,null],[13,"F32Matrix3","","",114,null],[13,"F32Matrix4","","",114,null],[3,"Encoder","","Graphics Command Encoder",null,null],[3,"Slice","","A `Slice` dictates in which and in what order vertices get processed. It is required for\nprocessing a PSO.",null,null],[12,"start","","The start index of the index-buffer. Processing will start at this location in the\nindex-buffer. ",158,null],[12,"end","","The end index in the index-buffer. Processing will stop at this location (exclusive) in\nthe index buffer.",158,null],[12,"base_vertex","","This is the index of the first vertex in the `VertexBuffer`. This value will be added to\nevery index in the index-buffer, effectively moving the start of the `VertexBuffer` to this\nbase-vertex.",158,null],[12,"instances","","Instancing configuration.",158,null],[12,"buffer","","Represents the type of index-buffer used.",158,null],[4,"UpdateError","","An error occuring in buffer/texture updates.",null,null],[13,"OutOfBounds","","",159,null],[12,"target","gfx::UpdateError","",159,null],[12,"source","","",159,null],[13,"UnitCountMismatch","gfx","",159,null],[12,"target","gfx::UpdateError","",159,null],[12,"slice","","",159,null],[4,"PipelineStateError","gfx","Error creating a PipelineState",null,null],[13,"Program","","Shader program failed to link.",160,null],[13,"DescriptorInit","","Unable to create PSO descriptor due to mismatched formats.",160,null],[13,"DeviceCreate","","Device failed to create the handle give the descriptor.",160,null],[4,"IndexBuffer","","Type of index-buffer used in a Slice.",null,null],[13,"Auto","","Represents a hypothetical index-buffer from 0 to infinity. In other words, all vertices\nget processed in order.",161,null],[13,"Index16","","An index-buffer with unsigned 16 bit indices.",161,null],[13,"Index32","","An index-buffer with unsigned 32 bit indices.",161,null],[0,"traits","","public re-exported traits",null,null],[8,"Device","gfx::traits","An interface for performing draw calls using a specific graphics API",null,null],[16,"Resources","","Associated resources type.",150,null],[16,"CommandBuffer","","Associated command buffer type.",150,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation.",150,{"inputs":[{"name":"device"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",150,null],[10,"submit","","Submit a command buffer for execution.",150,null],[10,"cleanup","","Cleanup unused resources, to be called between frames.",150,null],[8,"Factory","","A `Factory` is responsible for creating and managing resources for the context it was created\nwith. ",null,null],[16,"Mapper","","Associated mapper type",156,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being\nused.",156,{"inputs":[{"name":"factory"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",156,{"inputs":[{"name":"factory"},{"name":"bufferinfo"}],"output":{"name":"result"}}],[10,"create_buffer_const_raw","","",156,null],[11,"create_buffer_const","","",156,null],[11,"create_buffer_dynamic","","",156,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"}],"output":{"name":"result"}}],[11,"create_buffer_staging","","",156,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"},{"name":"mapaccess"}],"output":{"name":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the\n`FactoryExt` trait and `pso` module, both in the `gfx` crate.",156,{"inputs":[{"name":"factory"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",156,{"inputs":[{"name":"factory"},{"name":"shaderset"}],"output":{"name":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader\n`Program`.",156,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",156,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",156,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment\nshader.",156,null],[10,"create_sampler","","",156,{"inputs":[{"name":"factory"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"map_buffer_raw","","",156,null],[10,"unmap_buffer_raw","","",156,null],[10,"map_buffer_readable","","",156,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"readable"}}],[10,"map_buffer_writable","","",156,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"writable"}}],[10,"map_buffer_rw","","",156,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"rw"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint,\nrequired to assist backends that have no concept of typeless formats (OpenGL).\nThe initial data, if given, has to be provided for all mip levels and slices:\nSlice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",156,{"inputs":[{"name":"factory"},{"name":"descriptor"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawtexture"}],"output":{"name":"result"}}],[10,"view_texture_as_render_target_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",156,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_texture","","",156,{"inputs":[{"name":"factory"},{"name":"kind"},{"name":"u8"},{"name":"bind"},{"name":"usage"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource","","",156,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access","","",156,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource","","",156,null],[11,"view_texture_as_unordered_access","","",156,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target","","",156,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil","","",156,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"},{"name":"depthstencilflags"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",156,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_texture_const_u8","","",156,null],[11,"create_texture_const","","",156,null],[11,"create_render_target","","",156,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil","","",156,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil_view_only","","",156,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[8,"DeviceFence","","Extension to the Device that allows for submitting of commands\naround a fence",null,null],[10,"fenced_submit","","Submit a command buffer to the stream creating a fence\nthe fence is signaled after the GPU has executed all commands\nin the buffer",162,null],[10,"fence_wait","","Wait on the supplied fence stalling the current thread until\nthe fence is satisfied",162,null],[8,"FactoryExt","","This trait is responsible for creating and managing graphics resources, much like the `Factory`\ntrait in the `gfx` crate. Every `Factory` automatically implements `FactoryExt`. ",null,null],[11,"create_vertex_buffer","","Create a vertex buffer from the supplied data. A `Slice` will have to manually be\nconstructed.",163,null],[11,"create_vertex_buffer_with_slice","","Shorthand for creating a new vertex buffer from the supplied vertices, together with a\n`Slice` from the supplied indices.",163,null],[11,"create_constant_buffer","","Create a constant buffer for `num` identical elements of type `T`.",163,{"inputs":[{"name":"factoryext"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",163,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",163,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a\nshader `Program`.  ",163,{"inputs":[{"name":"factoryext"},{"name":"shaderset"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a\nprimitive type and a `Rasterizer`.",163,{"inputs":[{"name":"factoryext"},{"name":"program"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a\nshader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable\nof rendering triangle faces without culling.",163,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",163,{"inputs":[{"name":"factoryext"}],"output":{"name":"sampler"}}],[11,"eq","gfx","",159,{"inputs":[{"name":"updateerror"},{"name":"updateerror"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"updateerror"},{"name":"updateerror"}],"output":{"name":"bool"}}],[11,"fmt","","",159,{"inputs":[{"name":"updateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"updateerror"}],"output":{"name":"updateerror"}}],[11,"from","","",164,{"inputs":[{"name":"c"}],"output":{"name":"encoder"}}],[11,"flush","","Submits the commands in this `Encoder`&#39;s internal `CommandBuffer` to the GPU, so they can\nbe executed. ",164,{"inputs":[{"name":"encoder"},{"name":"d"}],"output":null}],[11,"clone_empty","","Clone the renderer shared data but ignore the commands.",164,{"inputs":[{"name":"encoder"}],"output":{"name":"encoder"}}],[11,"update_buffer","","Update a buffer with a slice of data.",164,null],[11,"update_constant_buffer","","Update a buffer with a single structure.",164,{"inputs":[{"name":"encoder"},{"name":"buffer"},{"name":"t"}],"output":null}],[11,"update_texture","","Update the contents of a texture.",164,null],[11,"clear","","Clears the supplied `RenderTargetView` to the supplied `ClearColor`.",164,{"inputs":[{"name":"encoder"},{"name":"rendertargetview"},{"name":"view"}],"output":null}],[11,"clear_depth","","Clear a depth view with a specified value.",164,{"inputs":[{"name":"encoder"},{"name":"depthstencilview"},{"name":"depth"}],"output":null}],[11,"clear_stencil","","Clear a stencil view with a specified value.",164,{"inputs":[{"name":"encoder"},{"name":"depthstencilview"},{"name":"stencil"}],"output":null}],[11,"draw","","Draws a `slice::Slice` using a pipeline state object, and its matching `Data` structure.",164,{"inputs":[{"name":"encoder"},{"name":"slice"},{"name":"pipelinestate"},{"name":"d"}],"output":null}],[11,"create_vertex_buffer","gfx::factory","Create a vertex buffer from the supplied data. A `Slice` will have to manually be\nconstructed.",163,null],[11,"create_vertex_buffer_with_slice","","Shorthand for creating a new vertex buffer from the supplied vertices, together with a\n`Slice` from the supplied indices.",163,null],[11,"create_constant_buffer","","Create a constant buffer for `num` identical elements of type `T`.",163,{"inputs":[{"name":"factoryext"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",163,null],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",163,null],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a\nshader `Program`.  ",163,{"inputs":[{"name":"factoryext"},{"name":"shaderset"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a\nprimitive type and a `Rasterizer`.",163,{"inputs":[{"name":"factoryext"},{"name":"program"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a\nshader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable\nof rendering triangle faces without culling.",163,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",163,{"inputs":[{"name":"factoryext"}],"output":{"name":"sampler"}}],[11,"fmt","gfx","",160,{"inputs":[{"name":"pipelinestateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"pipelinestateerror"},{"name":"pipelinestateerror"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"pipelinestateerror"},{"name":"pipelinestateerror"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"pipelinestateerror"}],"output":{"name":"pipelinestateerror"}}],[11,"eq","","",158,{"inputs":[{"name":"slice"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"slice"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"fmt","","",158,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"new_match_vertex_buffer","","Creates a new `Slice` to match the supplied vertex buffer, from start to end, in order.",158,{"inputs":[{"name":"buffer"}],"output":{"name":"self"}}],[11,"get_prim_count","","Calculates the number of primitives of the specified type in this `Slice`.",158,{"inputs":[{"name":"slice"},{"name":"primitive"}],"output":{"name":"u32"}}],[11,"eq","","",161,{"inputs":[{"name":"indexbuffer"},{"name":"indexbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"indexbuffer"},{"name":"indexbuffer"}],"output":{"name":"bool"}}],[11,"fmt","","",161,{"inputs":[{"name":"indexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indexbuffer"}}],[11,"default","","",161,{"inputs":[],"output":{"name":"self"}}],[11,"into_index_buffer","","",161,{"inputs":[{"name":"indexbuffer"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"into_index_buffer","gfx::handle","",73,{"inputs":[{"name":"buffer"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[11,"into_index_buffer","","",73,{"inputs":[{"name":"buffer"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[0,"pso","gfx","A typed high-level graphics pipeline interface.",null,null],[3,"Descriptor","gfx::pso","All the information surrounding a shader program that is required\nfor PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",97,null],[12,"rasterizer","","Rasterizer setup",97,null],[12,"scissor","","Enable scissor test",97,null],[12,"attributes","","Vertex attributes",97,null],[12,"color_targets","","Render target views (RTV)",97,null],[12,"depth_stencil","","Depth stencil view (DSV)",97,null],[3,"RawDataSet","","A complete set of raw data that needs to be specified at run-time\nwhenever we draw something with a PSO. This is what &quot;data&quot; struct\ngets transformed into when we call `encoder.draw(...)` with it.\nIt doesn&#39;t have any typing information, since PSO knows what\nformat and layout to expect from each resource.",null,null],[12,"vertex_buffers","","",165,null],[12,"constant_buffers","","",165,null],[12,"global_constants","","",165,null],[12,"resource_views","","",165,null],[12,"unordered_views","","",165,null],[12,"samplers","","",165,null],[12,"pixel_targets","","",165,null],[12,"ref_values","","",165,null],[12,"scissor","","",165,null],[3,"PipelineState","","A strongly typed Pipleline State Object. See the module documentation for more information.",null,null],[4,"InitError","","Failure to initilize the link between the shader and the data.",null,null],[13,"VertexImport","","Vertex attribute mismatch.",166,null],[13,"ConstantBuffer","","Constant buffer mismatch.",166,null],[13,"GlobalConstant","","Global constant mismatch.",166,null],[13,"ResourceView","","Shader resource view mismatch.",166,null],[13,"UnorderedView","","Unordered access view mismatch.",166,null],[13,"Sampler","","Sampler mismatch.",166,null],[13,"PixelExport","","Pixel target mismatch.",166,null],[0,"buffer","","Buffer components for a PSO.",null,null],[3,"Element","gfx::pso::buffer","A struct element descriptor.",null,null],[12,"format","","Element format",96,null],[12,"offset","","Offset from the beginning of the container, in bytes",96,null],[12,"stride","","Total container size, in bytes",96,null],[6,"ElemOffset","","",null,null],[6,"ElemStride","","",null,null],[6,"InstanceRate","","",null,null],[3,"VertexBufferCommon","","Service struct to simplify the implementations of `VertexBuffer` and `InstanceBuffer`.",null,null],[3,"RawVertexBuffer","","Raw vertex/instance buffer component.\n- init: ?\n- data: `RawBuffer`",null,null],[3,"ConstantBuffer","","Constant buffer component.\n- init: `&amp;str` = name of the buffer\n- data: `Buffer&lt;T&gt;`",null,null],[3,"Global","","Global (uniform) constant component. Describes a free-standing value passed into\nthe shader, which is not enclosed into any constant buffer. Deprecated in DX10 and higher.\n- init: `&amp;str` = name of the constant\n- data: `T` = value",null,null],[6,"VertexBuffer","","Vertex buffer component. Advanced per vertex.\n- init: `()`\n- data: `Buffer&lt;T&gt;`",null,null],[6,"InstanceBuffer","","Instance buffer component. Same as the vertex buffer but advances per instance.",null,null],[8,"Structure","","A trait to be implemented by any struct having the layout described\nin the graphics API, like a vertex buffer.",null,null],[10,"query","","Get the layout of an element by name.",167,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",168,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",168,{"inputs":[{"name":"vertexbuffercommon"}],"output":{"name":"bool"}}],[11,"link_input","","",168,{"inputs":[{"name":"vertexbuffercommon"},{"name":"attributevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",168,{"inputs":[{"name":"vertexbuffercommon"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",169,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",169,{"inputs":[{"name":"rawvertexbuffer"}],"output":{"name":"bool"}}],[11,"link_input","","",169,{"inputs":[{"name":"rawvertexbuffer"},{"name":"attributevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",169,{"inputs":[{"name":"rawvertexbuffer"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",170,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",170,{"inputs":[{"name":"constantbuffer"}],"output":{"name":"bool"}}],[11,"link_constant_buffer","","",170,{"inputs":[{"name":"constantbuffer"},{"name":"constantbuffervar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",170,{"inputs":[{"name":"constantbuffer"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",171,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",171,{"inputs":[{"name":"global"}],"output":{"name":"bool"}}],[11,"link_global_constant","","",171,{"inputs":[{"name":"global"},{"name":"constvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",171,{"inputs":[{"name":"global"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[0,"resource","gfx::pso","Resource components for a PSO.",null,null],[3,"ShaderResource","gfx::pso::resource","Shader resource component (SRV). Typically is a view into some texture,\nbut can also be a buffer.\n- init: `&amp;str` = name of the resource\n- data: `ShaderResourceView&lt;T&gt;`",null,null],[3,"RawShaderResource","","Raw (untyped) shader resource (SRV).\n- init: `&amp;str` = name of the resource. This may change in the future.\n- data: `RawShaderResourceView`",null,null],[3,"UnorderedAccess","","Unordered access component (UAV). A writable resource (texture/buffer)\nwith no defined access order across simultaneously executing shaders.\nSupported on DX10 and higher.\n- init: `&amp;str` = name of the resource\n- data: `UnorderedAccessView&lt;T&gt;`",null,null],[3,"Sampler","","Sampler component.\n- init: `&amp;str` = name of the sampler\n- data: `Sampler`",null,null],[3,"TextureSampler","","A convenience type for a texture paired with a sampler.\nIt only makes sense for DX9 class hardware, where every texture by default\nis bundled with a sampler, hence they are represented by the same name.\nIn DX10 and higher samplers are totally separated from the textures.\n- init: `&amp;str` = name of the sampler/texture (assuming they match)\n- data: (`ShaderResourceView&lt;T&gt;`, `Sampler`)",null,null],[11,"new","","",172,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",172,{"inputs":[{"name":"shaderresource"}],"output":{"name":"bool"}}],[11,"link_resource_view","","",172,{"inputs":[{"name":"shaderresource"},{"name":"texturevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",172,{"inputs":[{"name":"shaderresource"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",173,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",173,{"inputs":[{"name":"rawshaderresource"}],"output":{"name":"bool"}}],[11,"link_resource_view","","",173,{"inputs":[{"name":"rawshaderresource"},{"name":"texturevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",173,{"inputs":[{"name":"rawshaderresource"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",174,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",174,{"inputs":[{"name":"unorderedaccess"}],"output":{"name":"bool"}}],[11,"link_unordered_view","","",174,{"inputs":[{"name":"unorderedaccess"},{"name":"unorderedvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",174,{"inputs":[{"name":"unorderedaccess"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",175,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",175,{"inputs":[{"name":"sampler"}],"output":{"name":"bool"}}],[11,"link_sampler","","",175,{"inputs":[{"name":"sampler"},{"name":"samplervar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",175,{"inputs":[{"name":"sampler"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",176,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",176,{"inputs":[{"name":"texturesampler"}],"output":{"name":"bool"}}],[11,"link_resource_view","","",176,{"inputs":[{"name":"texturesampler"},{"name":"texturevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_sampler","","",176,{"inputs":[{"name":"texturesampler"},{"name":"samplervar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",176,{"inputs":[{"name":"texturesampler"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[0,"target","gfx::pso","Render target components for a PSO.",null,null],[3,"RenderTarget","gfx::pso::target","Render target component. Typically points to a color-formatted texture.\n- init: `&amp;str` = name of the target\n- data: `RenderTargetView&lt;T&gt;`",null,null],[3,"BlendTarget","","Render target component with active blending mode.\n- init: (`&amp;str`, `ColorMask`, `Blend` = blending state)\n- data: `RenderTargetView&lt;T&gt;`",null,null],[3,"RawRenderTarget","","Raw (untyped) render target component with optional blending.\n- init: (`&amp;str`, `Format`, `ColorMask`, `Option&lt;Blend&gt;`)\n- data: `RawRenderTargetView`",null,null],[3,"DepthTarget","","Depth target component.\n- init: `Depth` = depth state\n- data: `DepthStencilView&lt;T&gt;`",null,null],[3,"StencilTarget","","Stencil target component.\n- init: `Stencil` = stencil state\n- data: (`DepthStencilView&lt;T&gt;`, `(front, back)` = stencil reference values)",null,null],[3,"DepthStencilTarget","","Depth + stencil target component.\n- init: (`Depth` = depth state, `Stencil` = stencil state)\n- data: (`DepthStencilView&lt;T&gt;`, `(front, back)` = stencil reference values)",null,null],[3,"Scissor","","Scissor component. Sets up the scissor test for rendering.\n- init: `()`\n- data: `Rect` = target area",null,null],[3,"BlendRef","","Blend reference component. Sets up the reference color for blending.\n- init: `()`\n- data: `ColorValue`",null,null],[11,"new","","",177,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",177,{"inputs":[{"name":"rendertarget"}],"output":{"name":"bool"}}],[11,"link_output","","",177,{"inputs":[{"name":"rendertarget"},{"name":"outputvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",177,{"inputs":[{"name":"rendertarget"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",178,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",178,{"inputs":[{"name":"blendtarget"}],"output":{"name":"bool"}}],[11,"link_output","","",178,{"inputs":[{"name":"blendtarget"},{"name":"outputvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",178,{"inputs":[{"name":"blendtarget"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",179,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",179,{"inputs":[{"name":"rawrendertarget"}],"output":{"name":"bool"}}],[11,"link_output","","",179,{"inputs":[{"name":"rawrendertarget"},{"name":"outputvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",179,{"inputs":[{"name":"rawrendertarget"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",180,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",180,{"inputs":[{"name":"depthtarget"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",180,{"inputs":[{"name":"depthtarget"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",180,{"inputs":[{"name":"depthtarget"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",181,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",181,{"inputs":[{"name":"stenciltarget"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",181,{"inputs":[{"name":"stenciltarget"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",181,{"inputs":[{"name":"stenciltarget"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",182,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",182,{"inputs":[{"name":"depthstenciltarget"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",182,{"inputs":[{"name":"depthstenciltarget"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",182,{"inputs":[{"name":"depthstenciltarget"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",183,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",183,{"inputs":[{"name":"scissor"}],"output":{"name":"bool"}}],[11,"link_scissor","","",183,{"inputs":[{"name":"scissor"}],"output":{"name":"bool"}}],[11,"bind_to","","",183,{"inputs":[{"name":"scissor"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",184,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",184,{"inputs":[{"name":"blendref"}],"output":{"name":"bool"}}],[11,"bind_to","","",184,{"inputs":[{"name":"blendref"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[0,"bundle","gfx::pso","Combine slice data with pipeline state.",null,null],[3,"Bundle","gfx::pso::bundle","Slice-PSO bundle.",null,null],[12,"slice","","Slice",185,null],[12,"pso","","Pipeline state",185,null],[12,"data","","Pipeline data",185,null],[11,"new","","Create new Bundle",185,{"inputs":[{"name":"slice"},{"name":"pipelinestate"},{"name":"data"}],"output":{"name":"self"}}],[11,"encode","","Draw bundle using encoder.",185,{"inputs":[{"name":"bundle"},{"name":"encoder"}],"output":null}],[8,"PipelineInit","gfx::pso","A service trait implemented by the &quot;init&quot; structure of PSO.",null,null],[16,"Meta","","The associated &quot;meta&quot; struct.",186,null],[10,"link_to","","Attempt to map a PSO descriptor to a give shader program,\nrepresented by `ProgramInfo`. Returns an instance of the\n&quot;meta&quot; struct upon successful mapping.",186,{"inputs":[{"name":"pipelineinit"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"name":"result"}}],[8,"PipelineData","","a service trait implemented the &quot;data&quot; structure of PSO.",null,null],[16,"Meta","","The associated &quot;meta&quot; struct.",187,null],[10,"bake_to","","Dump all the contained data into the raw data set,\ngiven the mapping (&quot;meta&quot;), and a handle manager.",187,{"inputs":[{"name":"pipelinedata"},{"name":"rawdataset"},{"name":"meta"},{"name":"manager"}],"output":null}],[8,"DataLink","","The &quot;link&quot; logic portion of a PSO component.\nDefines the input data for the component.",null,null],[16,"Init","","The assotiated &quot;init&quot; type - a member of the PSO &quot;init&quot; struct.",188,null],[10,"new","","Create a new empty data link.",188,{"inputs":[],"output":{"name":"self"}}],[10,"is_active","","Check if this link is actually used by the shader.",188,{"inputs":[{"name":"datalink"}],"output":{"name":"bool"}}],[11,"link_input","","Attempt to link with a vertex attribute.",188,{"inputs":[{"name":"datalink"},{"name":"attributevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_constant_buffer","","Attempt to link with a constant buffer.",188,{"inputs":[{"name":"datalink"},{"name":"constantbuffervar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_global_constant","","Attempt to link with a global constant.",188,{"inputs":[{"name":"datalink"},{"name":"constvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_output","","Attempt to link with an output render target (RTV).",188,{"inputs":[{"name":"datalink"},{"name":"outputvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_depth_stencil","","Attempt to link with a depth-stencil target (DSV).",188,{"inputs":[{"name":"datalink"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_resource_view","","Attempt to link with a shader resource (SRV).",188,{"inputs":[{"name":"datalink"},{"name":"texturevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_unordered_view","","Attempt to link with an unordered access (UAV).",188,{"inputs":[{"name":"datalink"},{"name":"unorderedvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_sampler","","Attempt to link with a sampler.",188,{"inputs":[{"name":"datalink"},{"name":"samplervar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_scissor","","Attempt to enable scissor test.",188,{"inputs":[{"name":"datalink"}],"output":{"name":"bool"}}],[8,"DataBind","","The &quot;bind&quot; logic portion of the PSO component.\nDefines how the user data translates into the raw data set.",null,null],[16,"Data","","The associated &quot;data&quot; type - a member of the PSO &quot;data&quot; struct.",189,null],[10,"bind_to","","Dump the given data into the raw data set.",189,{"inputs":[{"name":"databind"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"fmt","","",165,{"inputs":[{"name":"rawdataset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create an empty data set.",165,{"inputs":[],"output":{"name":"rawdataset"}}],[11,"clear","","Clear all contained data.",165,{"inputs":[{"name":"rawdataset"}],"output":null}],[11,"fmt","","",166,{"inputs":[{"name":"initerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",166,{"inputs":[{"name":"initerror"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"initerror"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"initerror"}],"output":{"name":"initerror"}}],[11,"new","","Create a new PSO from a raw handle and the &quot;meta&quot; instance.",190,{"inputs":[{"name":"rawpipelinestate"},{"name":"primitive"},{"name":"m"}],"output":{"name":"pipelinestate"}}],[11,"get_handle","","Get a raw handle reference.",190,{"inputs":[{"name":"pipelinestate"}],"output":{"name":"rawpipelinestate"}}],[11,"get_meta","","Get a &quot;meta&quot; struct reference. Can be used by the user to check\nwhat resources are actually used and what not.",190,{"inputs":[{"name":"pipelinestate"}],"output":{"name":"m"}}],[0,"shade","gfx","Shaders\nShader parameter handling.",null,null],[6,"ConstFormat","gfx::shade","",null,null],[8,"Formatted","","A trait that statically links simple data types to\nconstant formats.",null,null],[10,"get_format","","Get the associated constant format.",191,null],[3,"Usage","","Parameter usage flags.",null,null],[0,"core","","Shader handling.",null,null],[6,"Dimension","gfx::shade::core","",null,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",104,null],[13,"NoArray","","",104,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",105,null],[13,"NoCompare","","",105,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",106,null],[13,"NoMultiSample","","",106,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",107,null],[13,"NoRect","","",107,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",108,null],[13,"RowMajor","","",108,null],[4,"TextureType","","A type of the texture variable.\nThis has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",109,null],[13,"D1","","Sample from a 1D texture",109,null],[13,"D2","","Sample from a 2D texture",109,null],[13,"D3","","Sample from a 3D texture",109,null],[13,"Cube","","Sample from a cubemap.",109,null],[3,"SamplerType","","A type of the sampler variable.",null,null],[12,"0","","",110,null],[12,"1","","",110,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",111,null],[13,"U32","","",111,null],[13,"F32","","",111,null],[13,"F64","","",111,null],[13,"Bool","","",111,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",112,null],[13,"Vector","","A vector with `Dimension` components.",112,null],[13,"Matrix","","A matrix.",112,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",113,null],[13,"Geometry","","",113,null],[13,"Pixel","","",113,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[6,"Location","","",null,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",114,null],[13,"F32","","",114,null],[13,"I32Vector2","","",114,null],[13,"I32Vector3","","",114,null],[13,"I32Vector4","","",114,null],[13,"F32Vector2","","",114,null],[13,"F32Vector3","","",114,null],[13,"F32Vector4","","",114,null],[13,"F32Matrix2","","",114,null],[13,"F32Matrix3","","",114,null],[13,"F32Matrix4","","",114,null],[6,"ConstFormat","","",null,null],[8,"BaseTyped","","A trait that statically links simple data types to\nbase types of the shader constants.",null,null],[10,"get_base_type","","",192,{"inputs":[],"output":{"name":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to\nconstant formats.",null,null],[10,"get_format","","Get the associated constant format.",191,null],[3,"Usage","","Parameter usage flags.",null,null],[17,"VERTEX","","Used by the vertex shader",null,null],[17,"GEOMETRY","","Used by the geometry shader",null,null],[17,"PIXEL","","Used by the pixel shader",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",116,null],[12,"slot","","Slot of the vertex attribute.",116,null],[12,"base_type","","Type that this attribute is composed of.",116,null],[12,"container","","&quot;Scalarness&quot; of this attribute.",116,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn&#39;t vary",null,null],[12,"name","","Name of this constant.",117,null],[12,"location","","Location of this constant in the program.",117,null],[12,"count","","Number of elements this constant represents.",117,null],[12,"base_type","","Type that this constant is composed of",117,null],[12,"container","","&quot;Scalarness&quot; of this constant.",117,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",118,null],[12,"slot","","Slot of the constant buffer.",118,null],[12,"size","","Size (in bytes) of this buffer&#39;s data.",118,null],[12,"usage","","What program stage this buffer is used in.",118,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",119,null],[12,"slot","","Slot of this texture variable.",119,null],[12,"base_type","","Base type for the texture.",119,null],[12,"ty","","Type of this texture.",119,null],[12,"usage","","What program stage this texture is used in.",119,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",120,null],[12,"slot","","Slot of this unordered variable.",120,null],[12,"usage","","What program stage this UAV is used in.",120,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",121,null],[12,"slot","","Slot of this sampler variable.",121,null],[12,"ty","","Type of this sampler.",121,null],[12,"usage","","What program stage this texture is used in.",121,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",122,null],[12,"slot","","Output color target index.",122,null],[12,"base_type","","Type of the output component.",122,null],[12,"container","","&quot;Scalarness&quot; of this output.",122,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",123,null],[12,"globals","","Global constants in the program",123,null],[12,"constant_buffers","","Constant buffers in the program",123,null],[12,"textures","","Textures in the program",123,null],[12,"unordereds","","Unordered access resources in the program",123,null],[12,"samplers","","Samplers in the program",123,null],[12,"outputs","","Output targets in the program",123,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are\nunable to actually get the output variable info",123,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",124,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",124,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4,\netc)",124,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",125,null],[13,"StageNotSupported","","The device does not support the shader stage.",125,null],[13,"CompilationFailed","","The shader failed to compile.",125,null],[6,"CreateProgramError","","",null,null],[4,"ProgramError","gfx::shade","Program linking error",null,null],[13,"Vertex","","Unable to compile the vertex shader",193,null],[13,"Pixel","","Unable to compile the pixel shader",193,null],[13,"Link","","Unable to link",193,null],[8,"ToUniform","","",null,null],[10,"convert","","",194,{"inputs":[{"name":"touniform"}],"output":{"name":"uniformvalue"}}],[11,"fmt","","",193,{"inputs":[{"name":"programerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",193,{"inputs":[{"name":"programerror"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"programerror"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"clone","","",193,{"inputs":[{"name":"programerror"}],"output":{"name":"programerror"}}],[0,"macros","gfx","Convenience macros\nVarious helper macros.",null,null],[8,"IntoIndexBuffer","","A helper trait to create `IndexBuffers` from different kinds of data.",null,null],[10,"into_index_buffer","","Turns self into an `IndexBuffer`.",195,{"inputs":[{"name":"intoindexbuffer"},{"name":"f"}],"output":{"name":"indexbuffer"}}],[14,"gfx_pipeline_inner!","","",null,null],[14,"gfx_pipeline_base!","","",null,null],[14,"gfx_pipeline!","","",null,null],[14,"gfx_impl_struct!","","",null,null],[14,"gfx_vertex_struct!","","",null,null],[14,"gfx_constant_struct!","","",null,null],[14,"gfx_format!","","",null,null],[14,"gfx_defines!","","Defines vertex, constant and pipeline formats in one block",null,null]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"MultiSample"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"ColorMask"],[3,"Color"],[3,"RefValues"],[3,"Rect"],[3,"Mirror"],[4,"ClearColor"],[4,"DummyResources"],[3,"DummyDevice"],[3,"DummyCommandBuffer"],[4,"MapAccess"],[3,"Bind"],[4,"BufferRole"],[4,"Usage"],[3,"BufferInfo"],[4,"BufferError"],[4,"BufferUpdateError"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[4,"ChannelType"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"SurfaceType"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[4,"ChannelSource"],[3,"Swizzle"],[3,"Format"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[3,"RawBuffer"],[3,"Buffer"],[3,"Shader"],[3,"Program"],[3,"RawPipelineState"],[3,"RawTexture"],[3,"Texture"],[3,"RawShaderResourceView"],[3,"ShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[3,"Sampler"],[3,"Fence"],[3,"Manager"],[3,"Readable"],[3,"Writable"],[3,"RW"],[3,"CreationError"],[3,"ColorInfo"],[3,"DepthStencilInfo"],[3,"Element"],[3,"Descriptor"],[3,"VertexBufferSet"],[3,"ConstantBufferParam"],[3,"ResourceViewParam"],[3,"UnorderedViewParam"],[3,"SamplerParam"],[3,"PixelTargetSet"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[3,"SamplerType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[3,"Usage"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[3,"ProgramInfo"],[4,"CompatibilityError"],[4,"CreateShaderError"],[4,"Error"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[3,"ImageInfoCommon"],[4,"WrapMode"],[3,"Lod"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Descriptor"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilFlags"],[3,"DepthStencilDesc"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"],[4,"ShaderSet"],[3,"Capabilities"],[4,"Primitive"],[4,"IndexType"],[8,"Device"],[8,"Resources"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[8,"Producer"],[8,"Factory"],[8,"CommandBuffer"],[3,"Slice"],[4,"UpdateError"],[4,"PipelineStateError"],[4,"IndexBuffer"],[8,"DeviceFence"],[8,"FactoryExt"],[3,"Encoder"],[3,"RawDataSet"],[4,"InitError"],[8,"Structure"],[3,"VertexBufferCommon"],[3,"RawVertexBuffer"],[3,"ConstantBuffer"],[3,"Global"],[3,"ShaderResource"],[3,"RawShaderResource"],[3,"UnorderedAccess"],[3,"Sampler"],[3,"TextureSampler"],[3,"RenderTarget"],[3,"BlendTarget"],[3,"RawRenderTarget"],[3,"DepthTarget"],[3,"StencilTarget"],[3,"DepthStencilTarget"],[3,"Scissor"],[3,"BlendRef"],[3,"Bundle"],[8,"PipelineInit"],[8,"PipelineData"],[8,"DataLink"],[8,"DataBind"],[3,"PipelineState"],[8,"Formatted"],[8,"BaseTyped"],[4,"ProgramError"],[8,"ToUniform"],[8,"IntoIndexBuffer"]]};
searchIndex["gfx_core"] = {"doc":"Low-level graphics abstraction for Rust. Mostly operates on data, not types.\nDesigned for use by libraries and higher-level abstractions only.","items":[[0,"state","gfx_core","Fixed-function hardware state.",null,null],[11,"fmt","draw_state::state","",0,{"inputs":[{"name":"frontface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"frontface"}],"output":{"name":"frontface"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"offset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"offset"}],"output":{"name":"offset"}}],[11,"cmp","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"option"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"cullface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"cullface"}],"output":{"name":"cullface"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"rastermethod"}],"output":{"name":"rastermethod"}}],[11,"cmp","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"multisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"multisample"}],"output":{"name":"multisample"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"rasterizer"}],"output":{"name":"rasterizer"}}],[11,"new_fill","","Create a new filling rasterizer.",5,{"inputs":[],"output":{"name":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",5,{"inputs":[{"name":"rasterizer"}],"output":{"name":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",5,{"inputs":[{"name":"rasterizer"},{"name":"f32"},{"name":"i32"}],"output":{"name":"rasterizer"}}],[11,"cmp","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"comparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"comparison"}],"output":{"name":"comparison"}}],[11,"cmp","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"stencilop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"stencilop"}],"output":{"name":"stencilop"}}],[11,"cmp","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"stencilside"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"stencilside"}}],[11,"cmp","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"stencil"}}],[11,"new","","Create a new stencil state with a given function.",9,null],[11,"cmp","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"depth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"depth"}}],[11,"cmp","","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"option"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"equation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"equation"}],"output":{"name":"equation"}}],[11,"cmp","","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"blendvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"blendvalue"}],"output":{"name":"blendvalue"}}],[11,"cmp","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"factor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"factor"}],"output":{"name":"factor"}}],[11,"fmt","","",14,{"inputs":[{"name":"blendchannel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"hash","","",14,null],[11,"partial_cmp","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"eq","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"blend"}}],[11,"new","","Create a new blend state with a given equation.",15,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"fmt","","",15,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"cmp","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"eq","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"colormask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",16,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",16,null],[11,"remove","","Removes the specified flags in-place.",16,null],[11,"toggle","","Toggles the specified flags in-place.",16,null],[11,"bitor","","Returns the union of the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",16,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitxor_assign","","Toggles the set of flags.",16,null],[11,"bitand","","Returns the intersection between the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",16,null],[11,"sub","","Returns the set difference of the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"sub_assign","","Disables all flags enabled in the set.",16,null],[11,"not","","Returns the complement of this set of flags.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"color"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"color"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"refvalues"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"refvalues"}],"output":{"name":"refvalues"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"refvalues"}}],[11,"partial_cmp","draw_state::target","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"hash","","",20,null],[11,"cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"eq","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"mirror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,null],[11,"remove","","Removes the specified flags in-place.",20,null],[11,"toggle","","Toggles the specified flags in-place.",20,null],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitor_assign","","Adds the set of flags.",20,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitxor_assign","","Toggles the set of flags.",20,null],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",20,null],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"sub_assign","","Disables all flags enabled in the set.",20,null],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}],[4,"FrontFace","gfx_core::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","",null,null],[6,"OffsetSlope","","",null,null],[6,"OffsetUnits","","",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",5,null],[12,"cull_face","","Which face should be culled.",5,null],[12,"method","","How to rasterize this primitive.",5,null],[12,"offset","","Any polygon offset to apply.",5,null],[12,"samples","","Multi-sampling mode.",5,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",6,null],[13,"Less","","`x &lt; y`",6,null],[13,"LessEqual","","`x &lt;= y`",6,null],[13,"Equal","","`x == y`",6,null],[13,"GreaterEqual","","`x &gt;= y`",6,null],[13,"Greater","","`x &gt; y`",6,null],[13,"NotEqual","","`x != y`",6,null],[13,"Always","","`true`",6,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",7,null],[13,"Zero","","Set the value in the stencil buffer to zero.",7,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",7,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",7,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",7,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",7,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",7,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",7,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",8,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",8,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",8,null],[12,"op_fail","","What operation to do if the stencil test fails.",8,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",8,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",8,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",9,null],[12,"back","","",9,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",10,null],[12,"write","","Specify whether to write to the depth buffer or not.",10,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",11,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",11,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",11,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",11,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",11,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",12,null],[13,"SourceAlpha","","",12,null],[13,"DestColor","","",12,null],[13,"DestAlpha","","",12,null],[13,"ConstColor","","",12,null],[13,"ConstAlpha","","",12,null],[4,"Factor","","",null,null],[13,"Zero","","",13,null],[13,"One","","",13,null],[13,"SourceAlphaSaturated","","",13,null],[13,"ZeroPlus","","",13,null],[13,"OneMinus","","",13,null],[3,"BlendChannel","","",null,null],[12,"equation","","",14,null],[12,"source","","",14,null],[12,"destination","","",14,null],[3,"Blend","","",null,null],[12,"color","","",15,null],[12,"alpha","","",15,null],[3,"ColorMask","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",17,null],[12,"blend","","Optional blending.",17,null],[3,"RefValues","","The complete set of the rasterizer reference values.\nSwitching these doesn&#39;t roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",18,null],[12,"blend","","Constant blend color.",18,null],[0,"target","gfx_core","Render target specification.",null,null],[6,"Layer","gfx_core::target","",null,null],[6,"Level","","",null,null],[6,"Depth","","",null,null],[6,"Stencil","","",null,null],[3,"Rect","","A screen space rectangle",null,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"w","","",19,null],[12,"h","","",19,null],[6,"ColorValue","","",null,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[17,"MIRROR_X","","",null,null],[17,"MIRROR_Y","","",null,null],[3,"VertexShader","gfx_core","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[3,"Capabilities","","Features that the device supports.",null,null],[12,"max_vertex_count","","",21,null],[12,"max_index_count","","",21,null],[12,"max_texture_size","","",21,null],[12,"instance_base_supported","","",21,null],[12,"instance_call_supported","","",21,null],[12,"instance_rate_supported","","",21,null],[12,"vertex_base_supported","","",21,null],[12,"srgb_color_supported","","",21,null],[12,"constant_buffer_supported","","",21,null],[12,"unordered_access_view_supported","","",21,null],[12,"separate_blending_slots_supported","","",21,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",22,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",22,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",23,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d,\ne]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",23,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a &quot;path&quot; of\nlines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line\nline, and `b` and `c` form a line.",23,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`,\n`a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",23,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c,\nd]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",23,null],[4,"IndexType","","A type of each index value in the slice&#39;s index buffer",null,null],[13,"U16","","",24,null],[13,"U32","","",24,null],[0,"draw","","Command Buffer device interface",null,null],[4,"ClearColor","gfx_core::draw","A universal clear color supporting integet formats\nas well as the standard floating-point.",null,null],[13,"Float","","Standard floating-point vec4 color",25,null],[13,"Int","","Integer vector to clear ivec4 targets.",25,null],[13,"Uint","","Unsigned int vector to clear uvec4 targets.",25,null],[6,"InstanceOption","","Optional instance parameters",null,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an\nefficient API-specific manner, to be ready for execution on the device.",null,null],[10,"clone_empty","","Clone as an empty buffer",26,{"inputs":[{"name":"commandbuffer"}],"output":{"name":"self"}}],[10,"reset","","Reset the command buffer contents, retain the allocated storage",26,{"inputs":[{"name":"commandbuffer"}],"output":null}],[10,"bind_pipeline_state","","Bind a pipeline state object",26,{"inputs":[{"name":"commandbuffer"},{"name":"pipelinestateobject"}],"output":null}],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",26,{"inputs":[{"name":"commandbuffer"},{"name":"vertexbufferset"}],"output":null}],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",26,null],[10,"bind_global_constant","","Bind a global constant",26,{"inputs":[{"name":"commandbuffer"},{"name":"location"},{"name":"uniformvalue"}],"output":null}],[10,"bind_resource_views","","Bind a complete set of shader resource views",26,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",26,null],[10,"bind_samplers","","Bind a complete set of samplers",26,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple\ncolors views and an optional depth/stencil view.",26,{"inputs":[{"name":"commandbuffer"},{"name":"pixeltargetset"}],"output":null}],[10,"bind_index","","Bind an index buffer",26,{"inputs":[{"name":"commandbuffer"},{"name":"buffer"},{"name":"indextype"}],"output":null}],[10,"set_scissor","","Set scissor rectangle",26,{"inputs":[{"name":"commandbuffer"},{"name":"rect"}],"output":null}],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",26,{"inputs":[{"name":"commandbuffer"},{"name":"refvalues"}],"output":null}],[10,"update_buffer","","Update a vertex/index/uniform buffer",26,null],[10,"update_texture","","Update a texture",26,null],[10,"generate_mipmap","","",26,{"inputs":[{"name":"commandbuffer"},{"name":"shaderresourceview"}],"output":null}],[10,"clear_color","","Clear color target",26,{"inputs":[{"name":"commandbuffer"},{"name":"rendertargetview"},{"name":"clearcolor"}],"output":null}],[10,"clear_depth_stencil","","",26,{"inputs":[{"name":"commandbuffer"},{"name":"depthstencilview"},{"name":"option"},{"name":"option"}],"output":null}],[10,"call_draw","","Draw a primitive",26,{"inputs":[{"name":"commandbuffer"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[10,"call_draw_indexed","","Draw a primitive with index buffer",26,{"inputs":[{"name":"commandbuffer"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[11,"partial_cmp","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"clearcolor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"clearcolor"}],"output":{"name":"clearcolor"}}],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,{"inputs":[{"name":"f32"}],"output":{"name":"clearcolor"}}],[11,"from","","",25,{"inputs":[{"name":"i32"}],"output":{"name":"clearcolor"}}],[11,"from","","",25,{"inputs":[{"name":"u32"}],"output":{"name":"clearcolor"}}],[0,"dummy","gfx_core","Dummy backend implementation to test the code for compile errors\noutside of the graphics development environment.",null,null],[3,"DummyDevice","gfx_core::dummy","Dummy device which does minimal work, just to allow testing\ngfx-rs apps for compilation.",null,null],[3,"DummyCommandBuffer","","Dummy command buffer, which ignores all the calls.",null,null],[4,"DummyResources","","Dummy resources phantom type",null,null],[11,"eq","","",27,{"inputs":[{"name":"dummyresources"},{"name":"dummyresources"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"dummyresources"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"dummyresources"}],"output":{"name":"dummyresources"}}],[11,"new","","Create a new dummy device",28,{"inputs":[],"output":{"name":"dummydevice"}}],[11,"clone_empty","","",29,{"inputs":[{"name":"dummycommandbuffer"}],"output":{"name":"dummycommandbuffer"}}],[11,"reset","","",29,{"inputs":[{"name":"dummycommandbuffer"}],"output":null}],[11,"bind_pipeline_state","","",29,null],[11,"bind_vertex_buffers","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"vertexbufferset"}],"output":null}],[11,"bind_constant_buffers","","",29,null],[11,"bind_global_constant","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"location"},{"name":"uniformvalue"}],"output":null}],[11,"bind_resource_views","","",29,null],[11,"bind_unordered_views","","",29,null],[11,"bind_samplers","","",29,null],[11,"bind_pixel_targets","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"pixeltargetset"}],"output":null}],[11,"bind_index","","",29,null],[11,"set_scissor","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"rect"}],"output":null}],[11,"set_ref_values","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"refvalues"}],"output":null}],[11,"update_buffer","","",29,null],[11,"update_texture","","",29,null],[11,"generate_mipmap","","",29,null],[11,"clear_color","","",29,null],[11,"clear_depth_stencil","","",29,null],[11,"call_draw","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[11,"call_draw_indexed","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[11,"get_capabilities","","",28,{"inputs":[{"name":"dummydevice"}],"output":{"name":"capabilities"}}],[11,"pin_submitted_resources","","",28,{"inputs":[{"name":"dummydevice"},{"name":"manager"}],"output":null}],[11,"submit","","",28,{"inputs":[{"name":"dummydevice"},{"name":"dummycommandbuffer"}],"output":null}],[11,"cleanup","","",28,{"inputs":[{"name":"dummydevice"}],"output":null}],[0,"factory","gfx_core","Resource factory",null,null],[3,"Bind","gfx_core::factory","Bind flags",null,null],[3,"BufferInfo","","An information block that is immutable and associated with each buffer.",null,null],[12,"role","","Role",30,null],[12,"usage","","Usage hint",30,null],[12,"bind","","Bind flags",30,null],[12,"size","","Size in bytes",30,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers\nthat you use via shader resource / unordered access views.",30,null],[4,"MapAccess","","Specifies the access allowed to a buffer mapping.",null,null],[13,"Readable","","Only allow reads.",31,null],[13,"Writable","","Only allow writes.",31,null],[13,"RW","","Allow full access.",31,null],[4,"BufferRole","","Role of the memory buffer. GLES doesn&#39;t allow chaning bind points for buffers.",null,null],[13,"Vertex","","Generic vertex buffer",32,null],[13,"Index","","Index buffer",32,null],[13,"Uniform","","Uniform block buffer",32,null],[4,"Usage","","A hint as to how this buffer/texture will be used.",null,null],[13,"GpuOnly","","GPU: read + write, CPU: copy. Optimal for render targets.",33,null],[13,"Const","","GPU: read, CPU: none. Optimal for resourced textures/buffers.",33,null],[13,"Dynamic","","GPU: read, CPU: write.",33,null],[13,"CpuOnly","","GPU: copy, CPU: as specified. Used as a staging buffer,\nto be copied back and forth with on-GPU targets.",33,null],[4,"BufferError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",34,null],[13,"Other","","Unknown other error.",34,null],[4,"BufferUpdateError","","An error happening on buffer updates.",null,null],[13,"OutOfBounds","","Trying to change the contents outside of the allocation.",35,null],[4,"ResourceViewError","","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag does not present in the texture.",36,null],[13,"Channel","","Selected channel type is not supported for this texture.",36,null],[13,"Unsupported","","The backend refused for some reason.",36,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag does not present in the texture.",37,null],[13,"BadLevel","","Selected mip level doesn&#39;t exist.",37,null],[13,"BadLayer","","Selected array layer doesn&#39;t exist.",37,null],[13,"Channel","","Selected channel type is not supported for this texture.",37,null],[13,"Unsupported","","The backend refused for some reason.",37,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",38,null],[13,"Resource","","Failed to create SRV or UAV.",38,null],[13,"Target","","Failed to create RTV or DSV.",38,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[17,"RENDER_TARGET","","The resource can be rendered into.",null,null],[17,"DEPTH_STENCIL","","The resource can serve as a depth/stencil target.",null,null],[17,"SHADER_RESOURCE","","The resource can be bound to the shader for reading.",null,null],[17,"UNORDERED_ACCESS","","The resource can be bound to the shader for writing.",null,null],[8,"Typed","","A service trait used to get the raw data out of\nstrong types. Not meant for public use.",null,null],[16,"Raw","","The raw type behind the phantom.",39,null],[10,"new","","Crete a new phantom from the raw type.",39,{"inputs":[{"name":"raw"}],"output":{"name":"self"}}],[10,"raw","","Get an internal reference to the raw type.",39,{"inputs":[{"name":"typed"}],"output":{"name":"raw"}}],[8,"Factory","","A `Factory` is responsible for creating and managing resources for the context it was created\nwith. ",null,null],[16,"Mapper","","Associated mapper type",40,null],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being\nused.",40,{"inputs":[{"name":"factory"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",40,{"inputs":[{"name":"factory"},{"name":"bufferinfo"}],"output":{"name":"result"}}],[10,"create_buffer_const_raw","","",40,null],[11,"create_buffer_const","","",40,null],[11,"create_buffer_dynamic","","",40,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"}],"output":{"name":"result"}}],[11,"create_buffer_staging","","",40,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"},{"name":"mapaccess"}],"output":{"name":"result"}}],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the\n`FactoryExt` trait and `pso` module, both in the `gfx` crate.",40,{"inputs":[{"name":"factory"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",40,{"inputs":[{"name":"factory"},{"name":"shaderset"}],"output":{"name":"result"}}],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader\n`Program`.",40,null],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",40,null],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",40,null],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment\nshader.",40,null],[10,"create_sampler","","",40,{"inputs":[{"name":"factory"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"map_buffer_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawbuffer"},{"name":"mapaccess"}],"output":{"name":"mapper"}}],[10,"unmap_buffer_raw","","",40,{"inputs":[{"name":"factory"},{"name":"mapper"}],"output":null}],[10,"map_buffer_readable","","",40,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"readable"}}],[10,"map_buffer_writable","","",40,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"writable"}}],[10,"map_buffer_rw","","",40,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"rw"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint,\nrequired to assist backends that have no concept of typeless formats (OpenGL).\nThe initial data, if given, has to be provided for all mip levels and slices:\nSlice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",40,{"inputs":[{"name":"factory"},{"name":"descriptor"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawtexture"}],"output":{"name":"result"}}],[10,"view_texture_as_render_target_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_texture","","",40,{"inputs":[{"name":"factory"},{"name":"kind"},{"name":"level"},{"name":"bind"},{"name":"usage"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource","","",40,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access","","",40,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource","","",40,null],[11,"view_texture_as_unordered_access","","",40,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target","","",40,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"level"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil","","",40,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"level"},{"name":"option"},{"name":"depthstencilflags"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",40,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_texture_const_u8","","",40,null],[11,"create_texture_const","","",40,null],[11,"create_render_target","","",40,{"inputs":[{"name":"factory"},{"name":"size"},{"name":"size"}],"output":{"name":"result"}}],[11,"create_depth_stencil","","",40,{"inputs":[{"name":"factory"},{"name":"size"},{"name":"size"}],"output":{"name":"result"}}],[11,"create_depth_stencil_view_only","","",40,{"inputs":[{"name":"factory"},{"name":"size"},{"name":"size"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"mapaccess"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"mapaccess"}],"output":{"name":"mapaccess"}}],[11,"hash","","",31,null],[11,"partial_cmp","","",31,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"option"}}],[11,"eq","","",31,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"bool"}}],[11,"cmp","","",31,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"ordering"}}],[11,"hash","","",41,null],[11,"cmp","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"bind"}],"output":{"name":"bind"}}],[11,"eq","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"bind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",41,{"inputs":[],"output":{"name":"bind"}}],[11,"all","","Returns the set containing all flags.",41,{"inputs":[],"output":{"name":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",41,{"inputs":[{"name":"bind"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",41,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",41,{"inputs":[{"name":"u8"}],"output":{"name":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",41,{"inputs":[{"name":"bind"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",41,{"inputs":[{"name":"bind"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitor_assign","","Adds the set of flags.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitxor_assign","","Toggles the set of flags.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"sub_assign","","Disables all flags enabled in the set.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",41,{"inputs":[{"name":"bind"}],"output":{"name":"bind"}}],[11,"from_iter","","",41,{"inputs":[{"name":"t"}],"output":{"name":"bind"}}],[11,"eq","","",32,{"inputs":[{"name":"bufferrole"},{"name":"bufferrole"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"bufferrole"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"bufferrole"}],"output":{"name":"bufferrole"}}],[11,"fmt","","",33,{"inputs":[{"name":"usage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[11,"hash","","",33,null],[11,"partial_cmp","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"cmp","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"eq","","",30,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"bufferinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"bufferinfo"}],"output":{"name":"bufferinfo"}}],[11,"eq","","",34,{"inputs":[{"name":"buffererror"},{"name":"buffererror"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"buffererror"},{"name":"buffererror"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"buffererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"buffererror"}],"output":{"name":"buffererror"}}],[11,"fmt","","",35,{"inputs":[{"name":"bufferupdateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"bufferupdateerror"},{"name":"bufferupdateerror"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"bufferupdateerror"}],"output":{"name":"bufferupdateerror"}}],[11,"fmt","","",36,{"inputs":[{"name":"resourceviewerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"resourceviewerror"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"resourceviewerror"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"resourceviewerror"}}],[11,"fmt","","",37,{"inputs":[{"name":"targetviewerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"targetviewerror"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"targetviewerror"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"targetviewerror"}}],[11,"fmt","","",38,{"inputs":[{"name":"combinederror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"combinederror"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"combinederror"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"combinederror"}],"output":{"name":"combinederror"}}],[11,"from","","",38,{"inputs":[{"name":"error"}],"output":{"name":"combinederror"}}],[11,"from","","",38,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"combinederror"}}],[11,"from","","",38,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"combinederror"}}],[0,"format","gfx_core","Universal format specification.\nApplicable to textures, views, and vertex buffers.",null,null],[3,"Swizzle","gfx_core::format","Channel swizzle configuration for the resource views.\nNote: It&#39;s not currently mirrored at compile-time,\nthus providing less safety and convenience.",null,null],[12,"0","","",42,null],[12,"1","","",42,null],[12,"2","","",42,null],[12,"3","","",42,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",43,null],[12,"1","","",43,null],[3,"U8Norm","","",null,null],[12,"0","","",44,null],[3,"I8Norm","","",null,null],[12,"0","","",45,null],[3,"U16Norm","","",null,null],[12,"0","","",46,null],[3,"I16Norm","","",null,null],[12,"0","","",47,null],[3,"F16","","",null,null],[12,"0","","",48,null],[4,"ChannelType","","Type of a surface channel. This is how we interpret the\nstorage allocated with `SurfaceType`.",null,null],[13,"Int","","",49,null],[13,"Uint","","",49,null],[13,"Inorm","","",49,null],[13,"Unorm","","",49,null],[13,"Float","","",49,null],[13,"Srgb","","",49,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only\ncarry information about the number of bits per each channel.\nThe actual types are up to the views to decide and interpret.\nThe actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",50,null],[13,"R4_G4_B4_A4","","",50,null],[13,"R5_G5_B5_A1","","",50,null],[13,"R5_G6_B5","","",50,null],[13,"R8","","",50,null],[13,"R8_G8","","",50,null],[13,"R8_G8_B8_A8","","",50,null],[13,"R10_G10_B10_A2","","",50,null],[13,"R11_G11_B10","","",50,null],[13,"R16","","",50,null],[13,"R16_G16","","",50,null],[13,"R16_G16_B16","","",50,null],[13,"R16_G16_B16_A16","","",50,null],[13,"R32","","",50,null],[13,"R32_G32","","",50,null],[13,"R32_G32_B32","","",50,null],[13,"R32_G32_B32_A32","","",50,null],[13,"D16","","",50,null],[13,"D24","","",50,null],[13,"D24_S8","","",50,null],[13,"D32","","",50,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto\ndifferent physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",51,null],[13,"One","","",51,null],[13,"X","","",51,null],[13,"Y","","",51,null],[13,"Z","","",51,null],[13,"W","","",51,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components\nand 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",52,null],[10,"get_surface_type","","Return the run-time value of the type.",52,{"inputs":[],"output":{"name":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel.\nFor example, normalized integers are visible as floats.",53,null],[10,"get_channel_type","","Return the run-time value of the type.",53,{"inputs":[],"output":{"name":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",54,null],[16,"Channel","","Associated channel type.",54,null],[16,"View","","Shader view type of this format.",54,null],[11,"get_format","","Return the run-time value of the type.",54,{"inputs":[],"output":{"name":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[11,"fmt","","",49,{"inputs":[{"name":"channeltype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"channeltype"}],"output":{"name":"channeltype"}}],[11,"hash","","",49,null],[11,"partial_cmp","","",49,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"option"}}],[11,"eq","","",49,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"bool"}}],[11,"cmp","","",49,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"ordering"}}],[11,"fmt","","",55,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"hash","","",55,null],[11,"partial_cmp","","",55,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"option"}}],[11,"eq","","",55,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"bool"}}],[11,"cmp","","",55,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",55,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",56,{"inputs":[{"name":"uint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"uint"}],"output":{"name":"uint"}}],[11,"hash","","",56,null],[11,"partial_cmp","","",56,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"option"}}],[11,"eq","","",56,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",56,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",57,{"inputs":[{"name":"inorm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"inorm"}],"output":{"name":"inorm"}}],[11,"hash","","",57,null],[11,"partial_cmp","","",57,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"option"}}],[11,"eq","","",57,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",57,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",58,{"inputs":[{"name":"unorm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"unorm"}],"output":{"name":"unorm"}}],[11,"hash","","",58,null],[11,"partial_cmp","","",58,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"option"}}],[11,"eq","","",58,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",58,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",59,{"inputs":[{"name":"float"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"float"}],"output":{"name":"float"}}],[11,"hash","","",59,null],[11,"partial_cmp","","",59,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"option"}}],[11,"eq","","",59,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"bool"}}],[11,"cmp","","",59,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",59,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",60,{"inputs":[{"name":"srgb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"srgb"}],"output":{"name":"srgb"}}],[11,"hash","","",60,null],[11,"partial_cmp","","",60,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"option"}}],[11,"eq","","",60,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",60,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",50,{"inputs":[{"name":"surfacetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"surfacetype"}],"output":{"name":"surfacetype"}}],[11,"hash","","",50,null],[11,"partial_cmp","","",50,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"option"}}],[11,"eq","","",50,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"bool"}}],[11,"cmp","","",50,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"ordering"}}],[11,"get_total_bits","","Return the total number of bits for this format.",50,{"inputs":[{"name":"surfacetype"}],"output":{"name":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",50,{"inputs":[{"name":"surfacetype"}],"output":{"name":"u8"}}],[11,"fmt","","",61,{"inputs":[{"name":"r4_g4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"r4_g4"}],"output":{"name":"r4_g4"}}],[11,"hash","","",61,null],[11,"partial_cmp","","",61,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"option"}}],[11,"eq","","",61,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",61,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",62,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"r4_g4_b4_a4"}],"output":{"name":"r4_g4_b4_a4"}}],[11,"hash","","",62,null],[11,"partial_cmp","","",62,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"option"}}],[11,"eq","","",62,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"bool"}}],[11,"cmp","","",62,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",62,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",63,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"r5_g5_b5_a1"}],"output":{"name":"r5_g5_b5_a1"}}],[11,"hash","","",63,null],[11,"partial_cmp","","",63,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"option"}}],[11,"eq","","",63,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"bool"}}],[11,"cmp","","",63,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",63,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",64,{"inputs":[{"name":"r5_g6_b5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"r5_g6_b5"}],"output":{"name":"r5_g6_b5"}}],[11,"hash","","",64,null],[11,"partial_cmp","","",64,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"option"}}],[11,"eq","","",64,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"bool"}}],[11,"cmp","","",64,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",64,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",65,{"inputs":[{"name":"r8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"r8"}],"output":{"name":"r8"}}],[11,"hash","","",65,null],[11,"partial_cmp","","",65,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"option"}}],[11,"eq","","",65,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"bool"}}],[11,"cmp","","",65,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",65,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",66,{"inputs":[{"name":"r8_g8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"r8_g8"}],"output":{"name":"r8_g8"}}],[11,"hash","","",66,null],[11,"partial_cmp","","",66,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"option"}}],[11,"eq","","",66,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"bool"}}],[11,"cmp","","",66,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",66,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",67,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"r8_g8_b8_a8"}],"output":{"name":"r8_g8_b8_a8"}}],[11,"hash","","",67,null],[11,"partial_cmp","","",67,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"option"}}],[11,"eq","","",67,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"bool"}}],[11,"cmp","","",67,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",67,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",68,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"r10_g10_b10_a2"}],"output":{"name":"r10_g10_b10_a2"}}],[11,"hash","","",68,null],[11,"partial_cmp","","",68,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"option"}}],[11,"eq","","",68,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",68,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",69,{"inputs":[{"name":"r11_g11_b10"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"r11_g11_b10"}],"output":{"name":"r11_g11_b10"}}],[11,"hash","","",69,null],[11,"partial_cmp","","",69,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"option"}}],[11,"eq","","",69,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"bool"}}],[11,"cmp","","",69,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",69,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",70,{"inputs":[{"name":"r16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"r16"}],"output":{"name":"r16"}}],[11,"hash","","",70,null],[11,"partial_cmp","","",70,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"option"}}],[11,"eq","","",70,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"bool"}}],[11,"cmp","","",70,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",70,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",71,{"inputs":[{"name":"r16_g16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"r16_g16"}],"output":{"name":"r16_g16"}}],[11,"hash","","",71,null],[11,"partial_cmp","","",71,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"option"}}],[11,"eq","","",71,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",71,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",72,{"inputs":[{"name":"r16_g16_b16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"r16_g16_b16"}],"output":{"name":"r16_g16_b16"}}],[11,"hash","","",72,null],[11,"partial_cmp","","",72,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"bool"}}],[11,"cmp","","",72,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",72,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",73,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"r16_g16_b16_a16"}],"output":{"name":"r16_g16_b16_a16"}}],[11,"hash","","",73,null],[11,"partial_cmp","","",73,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"option"}}],[11,"eq","","",73,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"bool"}}],[11,"cmp","","",73,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",73,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",74,{"inputs":[{"name":"r32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"r32"}],"output":{"name":"r32"}}],[11,"hash","","",74,null],[11,"partial_cmp","","",74,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"bool"}}],[11,"cmp","","",74,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",74,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",75,{"inputs":[{"name":"r32_g32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"r32_g32"}],"output":{"name":"r32_g32"}}],[11,"hash","","",75,null],[11,"partial_cmp","","",75,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"option"}}],[11,"eq","","",75,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"bool"}}],[11,"cmp","","",75,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",75,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",76,{"inputs":[{"name":"r32_g32_b32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"r32_g32_b32"}],"output":{"name":"r32_g32_b32"}}],[11,"hash","","",76,null],[11,"partial_cmp","","",76,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"option"}}],[11,"eq","","",76,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"bool"}}],[11,"cmp","","",76,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",76,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",77,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"r32_g32_b32_a32"}],"output":{"name":"r32_g32_b32_a32"}}],[11,"hash","","",77,null],[11,"partial_cmp","","",77,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"option"}}],[11,"eq","","",77,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"bool"}}],[11,"cmp","","",77,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",77,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",78,{"inputs":[{"name":"d16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"d16"}],"output":{"name":"d16"}}],[11,"hash","","",78,null],[11,"partial_cmp","","",78,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"option"}}],[11,"eq","","",78,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"bool"}}],[11,"cmp","","",78,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",78,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",79,{"inputs":[{"name":"d24"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"d24"}],"output":{"name":"d24"}}],[11,"hash","","",79,null],[11,"partial_cmp","","",79,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"option"}}],[11,"eq","","",79,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"bool"}}],[11,"cmp","","",79,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",79,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",80,{"inputs":[{"name":"d24_s8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"d24_s8"}],"output":{"name":"d24_s8"}}],[11,"hash","","",80,null],[11,"partial_cmp","","",80,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"option"}}],[11,"eq","","",80,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"bool"}}],[11,"cmp","","",80,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",80,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",81,{"inputs":[{"name":"d32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"d32"}],"output":{"name":"d32"}}],[11,"hash","","",81,null],[11,"partial_cmp","","",81,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"option"}}],[11,"eq","","",81,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"bool"}}],[11,"cmp","","",81,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",81,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",51,{"inputs":[{"name":"channelsource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"channelsource"}],"output":{"name":"channelsource"}}],[11,"hash","","",51,null],[11,"partial_cmp","","",51,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"option"}}],[11,"eq","","",51,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"ordering"}}],[11,"fmt","","",42,{"inputs":[{"name":"swizzle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"swizzle"}],"output":{"name":"swizzle"}}],[11,"hash","","",42,null],[11,"partial_cmp","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"cmp","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"ordering"}}],[11,"new","","Create a new swizzle where each channel is unmapped.",42,{"inputs":[],"output":{"name":"swizzle"}}],[11,"fmt","","",43,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"hash","","",43,null],[11,"partial_cmp","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"fmt","","",44,{"inputs":[{"name":"u8norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"u8norm"}],"output":{"name":"u8norm"}}],[11,"hash","","",44,null],[11,"partial_cmp","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"ordering"}}],[11,"from","","",44,{"inputs":[{"name":"u8"}],"output":{"name":"u8norm"}}],[11,"cast2","","Convert a 2-element slice.",44,null],[11,"cast3","","Convert a 3-element slice.",44,null],[11,"cast4","","Convert a 4-element slice.",44,null],[11,"cast_slice","","Convert a generic slice by transmutation.",44,null],[11,"fmt","","",45,{"inputs":[{"name":"i8norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"i8norm"}],"output":{"name":"i8norm"}}],[11,"hash","","",45,null],[11,"partial_cmp","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"cmp","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"ordering"}}],[11,"from","","",45,{"inputs":[{"name":"i8"}],"output":{"name":"i8norm"}}],[11,"cast2","","Convert a 2-element slice.",45,null],[11,"cast3","","Convert a 3-element slice.",45,null],[11,"cast4","","Convert a 4-element slice.",45,null],[11,"cast_slice","","Convert a generic slice by transmutation.",45,null],[11,"fmt","","",46,{"inputs":[{"name":"u16norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"u16norm"}],"output":{"name":"u16norm"}}],[11,"hash","","",46,null],[11,"partial_cmp","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"cmp","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"ordering"}}],[11,"from","","",46,{"inputs":[{"name":"u16"}],"output":{"name":"u16norm"}}],[11,"cast2","","Convert a 2-element slice.",46,null],[11,"cast3","","Convert a 3-element slice.",46,null],[11,"cast4","","Convert a 4-element slice.",46,null],[11,"cast_slice","","Convert a generic slice by transmutation.",46,null],[11,"fmt","","",47,{"inputs":[{"name":"i16norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"i16norm"}],"output":{"name":"i16norm"}}],[11,"hash","","",47,null],[11,"partial_cmp","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"option"}}],[11,"lt","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"le","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"gt","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ge","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"cmp","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"ordering"}}],[11,"from","","",47,{"inputs":[{"name":"i16"}],"output":{"name":"i16norm"}}],[11,"cast2","","Convert a 2-element slice.",47,null],[11,"cast3","","Convert a 3-element slice.",47,null],[11,"cast4","","Convert a 4-element slice.",47,null],[11,"cast_slice","","Convert a generic slice by transmutation.",47,null],[11,"fmt","","",48,{"inputs":[{"name":"f16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"f16"}],"output":{"name":"f16"}}],[11,"hash","","",48,null],[11,"partial_cmp","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"cmp","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"ordering"}}],[11,"from","","",48,{"inputs":[{"name":"u16"}],"output":{"name":"f16"}}],[11,"cast2","","Convert a 2-element slice.",48,null],[11,"cast3","","Convert a 3-element slice.",48,null],[11,"cast4","","Convert a 4-element slice.",48,null],[11,"cast_slice","","Convert a generic slice by transmutation.",48,null],[0,"handle","gfx_core","Device resource handles",null,null],[3,"RawBuffer","gfx_core::handle","Raw (untyped) Buffer Handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture object",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer.\nSeals actual resource names behind the interface, automatically\nreferencing them both by the Factory on resource creation\nand the Renderer during CommandBuffer population.",null,null],[8,"Producer","","A service trait to be used by the device implementation",null,null],[10,"make_buffer","","",82,{"inputs":[{"name":"producer"},{"name":"buffer"},{"name":"bufferinfo"}],"output":{"name":"rawbuffer"}}],[10,"make_shader","","",82,{"inputs":[{"name":"producer"},{"name":"shader"}],"output":{"name":"shader"}}],[10,"make_program","","",82,{"inputs":[{"name":"producer"},{"name":"program"},{"name":"programinfo"}],"output":{"name":"program"}}],[10,"make_pso","","",82,{"inputs":[{"name":"producer"},{"name":"pipelinestateobject"},{"name":"program"}],"output":{"name":"rawpipelinestate"}}],[10,"make_texture","","",82,{"inputs":[{"name":"producer"},{"name":"texture"},{"name":"descriptor"}],"output":{"name":"rawtexture"}}],[10,"make_buffer_srv","","",82,{"inputs":[{"name":"producer"},{"name":"shaderresourceview"},{"name":"rawbuffer"}],"output":{"name":"rawshaderresourceview"}}],[10,"make_texture_srv","","",82,{"inputs":[{"name":"producer"},{"name":"shaderresourceview"},{"name":"rawtexture"}],"output":{"name":"rawshaderresourceview"}}],[10,"make_buffer_uav","","",82,{"inputs":[{"name":"producer"},{"name":"unorderedaccessview"},{"name":"rawbuffer"}],"output":{"name":"rawunorderedaccessview"}}],[10,"make_texture_uav","","",82,{"inputs":[{"name":"producer"},{"name":"unorderedaccessview"},{"name":"rawtexture"}],"output":{"name":"rawunorderedaccessview"}}],[10,"make_rtv","","",82,{"inputs":[{"name":"producer"},{"name":"rendertargetview"},{"name":"rawtexture"},{"name":"dimensions"}],"output":{"name":"rawrendertargetview"}}],[10,"make_dsv","","",82,{"inputs":[{"name":"producer"},{"name":"depthstencilview"},{"name":"rawtexture"},{"name":"dimensions"}],"output":{"name":"rawdepthstencilview"}}],[10,"make_sampler","","",82,{"inputs":[{"name":"producer"},{"name":"sampler"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"make_fence","","",82,{"inputs":[{"name":"producer"},{"name":"fence"}],"output":{"name":"fence"}}],[10,"clean_with","","Walk through all the handles, keep ones that are reference elsewhere\nand call the provided delete function (resource-specific) for others",82,{"inputs":[{"name":"producer"},{"name":"t"},{"name":"a"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"},{"name":"f"},{"name":"g"},{"name":"h"},{"name":"i"},{"name":"j"},{"name":"k"}],"output":null}],[11,"eq","","",83,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"rawbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get raw buffer info",83,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"bufferinfo"}}],[11,"eq","","",84,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"buffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"buffer"}],"output":{"name":"buffer"}}],[11,"new","","",84,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"buffer"}}],[11,"raw","","",84,{"inputs":[{"name":"buffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get the associated information about the buffer",84,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferinfo"}}],[11,"len","","Get the number of elements in the buffer.",84,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"eq","","",85,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"shader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"shader"}],"output":{"name":"shader"}}],[11,"eq","","",86,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"program"}],"output":{"name":"program"}}],[11,"get_info","","Get program info",86,{"inputs":[{"name":"program"}],"output":{"name":"programinfo"}}],[11,"eq","","",87,{"inputs":[{"name":"rawpipelinestate"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"rawpipelinestate"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"rawpipelinestate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"rawpipelinestate"}],"output":{"name":"rawpipelinestate"}}],[11,"eq","","",88,{"inputs":[{"name":"rawtexture"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"rawtexture"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"rawtexture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"rawtexture"}],"output":{"name":"rawtexture"}}],[11,"eq","","",89,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"texture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"texture"}],"output":{"name":"texture"}}],[11,"get_info","","Get texture descriptor",88,{"inputs":[{"name":"rawtexture"}],"output":{"name":"descriptor"}}],[11,"new","","",89,{"inputs":[{"name":"rawtexture"}],"output":{"name":"texture"}}],[11,"raw","","",89,{"inputs":[{"name":"texture"}],"output":{"name":"rawtexture"}}],[11,"get_info","","Get texture descriptor",89,{"inputs":[{"name":"texture"}],"output":{"name":"descriptor"}}],[11,"eq","","",90,{"inputs":[{"name":"rawshaderresourceview"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"rawshaderresourceview"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"rawshaderresourceview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"rawshaderresourceview"}],"output":{"name":"rawshaderresourceview"}}],[11,"eq","","",91,{"inputs":[{"name":"shaderresourceview"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"shaderresourceview"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"shaderresourceview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"shaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"new","","",91,{"inputs":[{"name":"rawshaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"raw","","",91,{"inputs":[{"name":"shaderresourceview"}],"output":{"name":"rawshaderresourceview"}}],[11,"eq","","",92,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"rawunorderedaccessview"}],"output":{"name":"rawunorderedaccessview"}}],[11,"eq","","",93,{"inputs":[{"name":"unorderedaccessview"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"unorderedaccessview"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"unorderedaccessview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"unorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"new","","",93,{"inputs":[{"name":"rawunorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"raw","","",93,{"inputs":[{"name":"unorderedaccessview"}],"output":{"name":"rawunorderedaccessview"}}],[11,"eq","","",94,{"inputs":[{"name":"rawrendertargetview"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"rawrendertargetview"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"rawrendertargetview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"rawrendertargetview"}}],[11,"get_dimensions","","Get target dimensions",94,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"dimensions"}}],[11,"eq","","",95,{"inputs":[{"name":"rawdepthstencilview"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"rawdepthstencilview"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"rawdepthstencilview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"rawdepthstencilview"}}],[11,"get_dimensions","","Get target dimensions",95,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"dimensions"}}],[11,"eq","","",96,{"inputs":[{"name":"rendertargetview"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"rendertargetview"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"rendertargetview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"rendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"get_dimensions","","Get target dimensions",96,{"inputs":[{"name":"rendertargetview"}],"output":{"name":"dimensions"}}],[11,"new","","",96,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"raw","","",96,{"inputs":[{"name":"rendertargetview"}],"output":{"name":"rawrendertargetview"}}],[11,"eq","","",97,{"inputs":[{"name":"depthstencilview"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"depthstencilview"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"depthstencilview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"depthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"get_dimensions","","Get target dimensions",97,{"inputs":[{"name":"depthstencilview"}],"output":{"name":"dimensions"}}],[11,"new","","",97,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"raw","","",97,{"inputs":[{"name":"depthstencilview"}],"output":{"name":"rawdepthstencilview"}}],[11,"eq","","",98,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"fmt","","",98,{"inputs":[{"name":"sampler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"sampler"}],"output":{"name":"sampler"}}],[11,"get_info","","Get sampler info",98,{"inputs":[{"name":"sampler"}],"output":{"name":"samplerinfo"}}],[11,"eq","","",99,{"inputs":[{"name":"fence"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"fence"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"fmt","","",99,{"inputs":[{"name":"fence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"fence"}],"output":{"name":"fence"}}],[11,"make_buffer","","",100,{"inputs":[{"name":"manager"},{"name":"buffer"},{"name":"bufferinfo"}],"output":{"name":"rawbuffer"}}],[11,"make_shader","","",100,{"inputs":[{"name":"manager"},{"name":"shader"}],"output":{"name":"shader"}}],[11,"make_program","","",100,{"inputs":[{"name":"manager"},{"name":"program"},{"name":"programinfo"}],"output":{"name":"program"}}],[11,"make_pso","","",100,{"inputs":[{"name":"manager"},{"name":"pipelinestateobject"},{"name":"program"}],"output":{"name":"rawpipelinestate"}}],[11,"make_texture","","",100,{"inputs":[{"name":"manager"},{"name":"texture"},{"name":"descriptor"}],"output":{"name":"rawtexture"}}],[11,"make_buffer_srv","","",100,{"inputs":[{"name":"manager"},{"name":"shaderresourceview"},{"name":"rawbuffer"}],"output":{"name":"rawshaderresourceview"}}],[11,"make_texture_srv","","",100,{"inputs":[{"name":"manager"},{"name":"shaderresourceview"},{"name":"rawtexture"}],"output":{"name":"rawshaderresourceview"}}],[11,"make_buffer_uav","","",100,{"inputs":[{"name":"manager"},{"name":"unorderedaccessview"},{"name":"rawbuffer"}],"output":{"name":"rawunorderedaccessview"}}],[11,"make_texture_uav","","",100,{"inputs":[{"name":"manager"},{"name":"unorderedaccessview"},{"name":"rawtexture"}],"output":{"name":"rawunorderedaccessview"}}],[11,"make_rtv","","",100,{"inputs":[{"name":"manager"},{"name":"rendertargetview"},{"name":"rawtexture"},{"name":"dimensions"}],"output":{"name":"rawrendertargetview"}}],[11,"make_dsv","","",100,{"inputs":[{"name":"manager"},{"name":"depthstencilview"},{"name":"rawtexture"},{"name":"dimensions"}],"output":{"name":"rawdepthstencilview"}}],[11,"make_sampler","","",100,{"inputs":[{"name":"manager"},{"name":"sampler"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[11,"make_fence","","",100,{"inputs":[{"name":"manager"},{"name":"fence"}],"output":{"name":"fence"}}],[11,"clean_with","","",100,{"inputs":[{"name":"manager"},{"name":"t"},{"name":"a"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"},{"name":"f"},{"name":"g"},{"name":"h"},{"name":"i"},{"name":"j"},{"name":"k"}],"output":null}],[11,"new","","Create a new handle manager",100,{"inputs":[],"output":{"name":"manager"}}],[11,"clear","","Clear all references",100,{"inputs":[{"name":"manager"}],"output":null}],[11,"extend","","Extend with all references of another handle manager",100,{"inputs":[{"name":"manager"},{"name":"manager"}],"output":null}],[11,"count","","Count the total number of referenced resources",100,{"inputs":[{"name":"manager"}],"output":{"name":"usize"}}],[11,"ref_buffer","","Reference a buffer",100,{"inputs":[{"name":"manager"},{"name":"rawbuffer"}],"output":{"name":"buffer"}}],[11,"ref_shader","","Reference a shader",100,{"inputs":[{"name":"manager"},{"name":"shader"}],"output":{"name":"shader"}}],[11,"ref_program","","Reference a program",100,{"inputs":[{"name":"manager"},{"name":"program"}],"output":{"name":"program"}}],[11,"ref_pso","","Reference a pipeline state object",100,null],[11,"ref_texture","","Reference a texture",100,{"inputs":[{"name":"manager"},{"name":"rawtexture"}],"output":{"name":"texture"}}],[11,"ref_srv","","Reference a shader resource view",100,{"inputs":[{"name":"manager"},{"name":"rawshaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"ref_uav","","Reference an unordered access view",100,{"inputs":[{"name":"manager"},{"name":"rawunorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"ref_rtv","","Reference an RTV",100,{"inputs":[{"name":"manager"},{"name":"rawrendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"ref_dsv","","Reference a DSV",100,{"inputs":[{"name":"manager"},{"name":"rawdepthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"ref_sampler","","Reference a sampler",100,{"inputs":[{"name":"manager"},{"name":"sampler"}],"output":{"name":"sampler"}}],[11,"ref_fence","","Reference a fence",100,{"inputs":[{"name":"manager"},{"name":"fence"}],"output":{"name":"fence"}}],[0,"mapping","gfx_core","Memory mapping",null,null],[3,"Readable","gfx_core::mapping","A handle to a readable map, which can be sliced.",null,null],[3,"Writable","","A handle to a writable map, which only allows setting elements.",null,null],[3,"RW","","A handle to a complete readable/writable map, which can be sliced both ways.",null,null],[8,"Raw","","Unsafe operations for a buffer mapping",null,null],[10,"set","","Set the element at `index` to `val`. Not bounds-checked.",101,{"inputs":[{"name":"raw"},{"name":"usize"},{"name":"t"}],"output":null}],[10,"to_slice","","Returns a slice of the specified length.",101,null],[10,"to_mut_slice","","Returns a mutable slice of the specified length.",101,null],[8,"Builder","","A service trait with methods for mapping already implemented.\nTo be used by device back ends.",null,null],[16,"RawMapping","","",102,null],[10,"map_readable","","",102,{"inputs":[{"name":"builder"},{"name":"rawmapping"},{"name":"usize"}],"output":{"name":"readable"}}],[10,"map_writable","","",102,{"inputs":[{"name":"builder"},{"name":"rawmapping"},{"name":"usize"}],"output":{"name":"writable"}}],[10,"map_read_write","","",102,{"inputs":[{"name":"builder"},{"name":"rawmapping"},{"name":"usize"}],"output":{"name":"rw"}}],[11,"deref","","",103,null],[11,"drop","","",103,{"inputs":[{"name":"readable"}],"output":null}],[11,"set","","Set a value in the buffer",104,{"inputs":[{"name":"writable"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"to_mut_slice","","Returns a mutable slice of the specified length.",104,null],[11,"drop","","",104,{"inputs":[{"name":"writable"}],"output":null}],[11,"deref","","",105,null],[11,"deref_mut","","",105,null],[11,"drop","","",105,{"inputs":[{"name":"rw"}],"output":null}],[0,"pso","gfx_core","Raw Pipeline State Objects",null,null],[3,"CreationError","gfx_core::pso","Error types happening upon PSO creation on the device side.",null,null],[3,"ColorInfo","","Color output configuration of the PSO.",null,null],[12,"mask","","Color channel mask",106,null],[12,"color","","Optional color blending",106,null],[12,"alpha","","Optional alpha blending",106,null],[3,"DepthStencilInfo","","Depth and stencil state of the PSO.",null,null],[12,"depth","","Optional depth test configuration",107,null],[12,"front","","Optional stencil test on the front faces",107,null],[12,"back","","Optional stencil test on the back faces",107,null],[3,"Element","","A struct element descriptor.",null,null],[12,"format","","Element format",108,null],[12,"offset","","Offset from the beginning of the container, in bytes",108,null],[12,"stride","","Total container size, in bytes",108,null],[3,"Descriptor","","All the information surrounding a shader program that is required\nfor PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",109,null],[12,"rasterizer","","Rasterizer setup",109,null],[12,"scissor","","Enable scissor test",109,null],[12,"attributes","","Vertex attributes",109,null],[12,"color_targets","","Render target views (RTV)",109,null],[12,"depth_stencil","","Depth stencil view (DSV)",109,null],[3,"VertexBufferSet","","A complete set of vertex buffers to be used for vertex import in PSO.",null,null],[12,"0","","Array of buffer handles with offsets in them",110,null],[3,"ConstantBufferParam","","A constant buffer run-time parameter for PSO.",null,null],[12,"0","","",111,null],[12,"1","","",111,null],[12,"2","","",111,null],[3,"ResourceViewParam","","A shader resource view (SRV) run-time parameter for PSO.",null,null],[12,"0","","",112,null],[12,"1","","",112,null],[12,"2","","",112,null],[3,"UnorderedViewParam","","An unordered access view (UAV) run-time parameter for PSO.",null,null],[12,"0","","",113,null],[12,"1","","",113,null],[12,"2","","",113,null],[3,"SamplerParam","","A sampler run-time parameter for PSO.",null,null],[12,"0","","",114,null],[12,"1","","",114,null],[12,"2","","",114,null],[3,"PixelTargetSet","","A complete set of render targets to be used for pixel export in PSO.",null,null],[12,"colors","","Array of color target views",115,null],[12,"depth","","Depth target view",115,null],[12,"stencil","","Stencil target view",115,null],[12,"size","","Rendering dimensions",115,null],[6,"BufferOffset","","An offset inside a vertex buffer, in bytes.",null,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[6,"AttributeDesc","","PSO vertex attribute descriptor",null,null],[6,"ColorTargetDesc","","PSO color target descriptor",null,null],[6,"DepthStencilDesc","","PSO depth-stencil target descriptor",null,null],[11,"fmt","","",116,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"creationerror"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"eq","","",106,{"inputs":[{"name":"colorinfo"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"colorinfo"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[11,"hash","","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"colorinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"colorinfo"}],"output":{"name":"colorinfo"}}],[11,"from","","",106,{"inputs":[{"name":"colormask"}],"output":{"name":"colorinfo"}}],[11,"from","","",106,{"inputs":[{"name":"blend"}],"output":{"name":"colorinfo"}}],[11,"eq","","",107,{"inputs":[{"name":"depthstencilinfo"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"depthstencilinfo"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"hash","","",107,null],[11,"fmt","","",107,{"inputs":[{"name":"depthstencilinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"depthstencilinfo"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",107,{"inputs":[{"name":"depth"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",107,{"inputs":[{"name":"stencil"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",107,null],[11,"eq","","",108,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"bool"}}],[11,"hash","","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"element"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"element"}],"output":{"name":"element"}}],[11,"eq","","",109,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"hash","","",109,null],[11,"fmt","","",109,{"inputs":[{"name":"descriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"descriptor"}],"output":{"name":"descriptor"}}],[11,"new","","Create a new empty PSO descriptor.",109,{"inputs":[{"name":"primitive"},{"name":"rasterizer"}],"output":{"name":"descriptor"}}],[11,"fmt","","",110,{"inputs":[{"name":"vertexbufferset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"vertexbufferset"}],"output":{"name":"vertexbufferset"}}],[11,"new","","Create an empty set",110,{"inputs":[],"output":{"name":"vertexbufferset"}}],[11,"fmt","","",111,{"inputs":[{"name":"constantbufferparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"constantbufferparam"}],"output":{"name":"constantbufferparam"}}],[11,"fmt","","",112,{"inputs":[{"name":"resourceviewparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"resourceviewparam"}],"output":{"name":"resourceviewparam"}}],[11,"fmt","","",113,{"inputs":[{"name":"unorderedviewparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"unorderedviewparam"}],"output":{"name":"unorderedviewparam"}}],[11,"fmt","","",114,{"inputs":[{"name":"samplerparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"samplerparam"}],"output":{"name":"samplerparam"}}],[11,"fmt","","",115,{"inputs":[{"name":"pixeltargetset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"pixeltargetset"}],"output":{"name":"pixeltargetset"}}],[11,"new","","Create an empty set",115,{"inputs":[],"output":{"name":"pixeltargetset"}}],[11,"add_color","","Add a color view to the specified slot",115,{"inputs":[{"name":"pixeltargetset"},{"name":"colorslot"},{"name":"rendertargetview"},{"name":"dimensions"}],"output":null}],[11,"add_depth_stencil","","Add a depth or stencil view to the specified slot",115,{"inputs":[{"name":"pixeltargetset"},{"name":"depthstencilview"},{"name":"bool"},{"name":"bool"},{"name":"dimensions"}],"output":null}],[0,"shade","gfx_core","Shader handling.",null,null],[3,"SamplerType","gfx_core::shade","A type of the sampler variable.",null,null],[12,"0","","",117,null],[12,"1","","",117,null],[3,"Usage","","Parameter usage flags.",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",118,null],[12,"slot","","Slot of the vertex attribute.",118,null],[12,"base_type","","Type that this attribute is composed of.",118,null],[12,"container","","&quot;Scalarness&quot; of this attribute.",118,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn&#39;t vary",null,null],[12,"name","","Name of this constant.",119,null],[12,"location","","Location of this constant in the program.",119,null],[12,"count","","Number of elements this constant represents.",119,null],[12,"base_type","","Type that this constant is composed of",119,null],[12,"container","","&quot;Scalarness&quot; of this constant.",119,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",120,null],[12,"slot","","Slot of the constant buffer.",120,null],[12,"size","","Size (in bytes) of this buffer&#39;s data.",120,null],[12,"usage","","What program stage this buffer is used in.",120,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",121,null],[12,"slot","","Slot of this texture variable.",121,null],[12,"base_type","","Base type for the texture.",121,null],[12,"ty","","Type of this texture.",121,null],[12,"usage","","What program stage this texture is used in.",121,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",122,null],[12,"slot","","Slot of this unordered variable.",122,null],[12,"usage","","What program stage this UAV is used in.",122,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",123,null],[12,"slot","","Slot of this sampler variable.",123,null],[12,"ty","","Type of this sampler.",123,null],[12,"usage","","What program stage this texture is used in.",123,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",124,null],[12,"slot","","Output color target index.",124,null],[12,"base_type","","Type of the output component.",124,null],[12,"container","","&quot;Scalarness&quot; of this output.",124,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",125,null],[12,"globals","","Global constants in the program",125,null],[12,"constant_buffers","","Constant buffers in the program",125,null],[12,"textures","","Textures in the program",125,null],[12,"unordereds","","Unordered access resources in the program",125,null],[12,"samplers","","Samplers in the program",125,null],[12,"outputs","","Output targets in the program",125,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are\nunable to actually get the output variable info",125,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",126,null],[13,"NoArray","","",126,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",127,null],[13,"NoCompare","","",127,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",128,null],[13,"NoMultiSample","","",128,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",129,null],[13,"NoRect","","",129,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",130,null],[13,"RowMajor","","",130,null],[4,"TextureType","","A type of the texture variable.\nThis has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",131,null],[13,"D1","","Sample from a 1D texture",131,null],[13,"D2","","Sample from a 2D texture",131,null],[13,"D3","","Sample from a 3D texture",131,null],[13,"Cube","","Sample from a cubemap.",131,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",132,null],[13,"U32","","",132,null],[13,"F32","","",132,null],[13,"F64","","",132,null],[13,"Bool","","",132,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",133,null],[13,"Vector","","A vector with `Dimension` components.",133,null],[13,"Matrix","","A matrix.",133,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",134,null],[13,"Geometry","","",134,null],[13,"Pixel","","",134,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",135,null],[13,"F32","","",135,null],[13,"I32Vector2","","",135,null],[13,"I32Vector3","","",135,null],[13,"I32Vector4","","",135,null],[13,"F32Vector2","","",135,null],[13,"F32Vector3","","",135,null],[13,"F32Vector4","","",135,null],[13,"F32Matrix2","","",135,null],[13,"F32Matrix3","","",135,null],[13,"F32Matrix4","","",135,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",136,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",136,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4,\netc)",136,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",137,null],[13,"StageNotSupported","","The device does not support the shader stage.",137,null],[13,"CompilationFailed","","The shader failed to compile.",137,null],[6,"Dimension","","Number of components in a container type (vectors/matrices)",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[6,"CreateProgramError","","An error type for creating programs.",null,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[17,"VERTEX","","Used by the vertex shader",null,null],[17,"GEOMETRY","","Used by the geometry shader",null,null],[17,"PIXEL","","Used by the pixel shader",null,null],[8,"BaseTyped","","A trait that statically links simple data types to\nbase types of the shader constants.",null,null],[10,"get_base_type","","",138,{"inputs":[],"output":{"name":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to\nconstant formats.",null,null],[10,"get_format","","Get the associated constant format.",139,{"inputs":[],"output":{"name":"constformat"}}],[11,"fmt","","",126,{"inputs":[{"name":"isarray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"isarray"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"isarray"}],"output":{"name":"isarray"}}],[11,"fmt","","",127,{"inputs":[{"name":"iscomparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"iscomparison"},{"name":"iscomparison"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"iscomparison"}],"output":{"name":"iscomparison"}}],[11,"fmt","","",128,{"inputs":[{"name":"ismultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"ismultisample"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"ismultisample"}],"output":{"name":"ismultisample"}}],[11,"fmt","","",129,{"inputs":[{"name":"isrect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"isrect"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"isrect"}],"output":{"name":"isrect"}}],[11,"fmt","","",130,{"inputs":[{"name":"matrixformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",130,{"inputs":[{"name":"matrixformat"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"matrixformat"}],"output":{"name":"matrixformat"}}],[11,"fmt","","",131,{"inputs":[{"name":"texturetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"texturetype"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"texturetype"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"texturetype"}],"output":{"name":"texturetype"}}],[11,"can_sample","","Check if this texture can be used with a sampler.",131,{"inputs":[{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"fmt","","",117,{"inputs":[{"name":"samplertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",117,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"samplertype"}],"output":{"name":"samplertype"}}],[11,"fmt","","",132,{"inputs":[{"name":"basetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"basetype"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"basetype"}],"output":{"name":"basetype"}}],[11,"fmt","","",133,{"inputs":[{"name":"containertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",133,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"containertype"}],"output":{"name":"containertype"}}],[11,"eq","","",134,{"inputs":[{"name":"stage"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"fmt","","",134,{"inputs":[{"name":"stage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"stage"}],"output":{"name":"stage"}}],[11,"clone","","",135,{"inputs":[{"name":"uniformvalue"}],"output":{"name":"uniformvalue"}}],[11,"fmt","","",135,{"inputs":[{"name":"uniformvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",140,null],[11,"cmp","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"option"}}],[11,"lt","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[11,"eq","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"fmt","","",140,{"inputs":[{"name":"usage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",140,{"inputs":[],"output":{"name":"usage"}}],[11,"all","","Returns the set containing all flags.",140,{"inputs":[],"output":{"name":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",140,{"inputs":[{"name":"usage"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",140,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",140,{"inputs":[{"name":"u8"}],"output":{"name":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",140,{"inputs":[{"name":"usage"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",140,{"inputs":[{"name":"usage"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitor_assign","","Adds the set of flags.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitxor_assign","","Toggles the set of flags.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"sub_assign","","Disables all flags enabled in the set.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",140,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[11,"from_iter","","",140,{"inputs":[{"name":"t"}],"output":{"name":"usage"}}],[11,"from","","",140,{"inputs":[{"name":"stage"}],"output":{"name":"usage"}}],[11,"fmt","","",118,{"inputs":[{"name":"attributevar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"attributevar"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"attributevar"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"attributevar"}],"output":{"name":"attributevar"}}],[11,"fmt","","",119,{"inputs":[{"name":"constvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"constvar"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"constvar"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"constvar"}],"output":{"name":"constvar"}}],[11,"fmt","","",120,{"inputs":[{"name":"constantbuffervar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"constantbuffervar"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"constantbuffervar"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"constantbuffervar"}],"output":{"name":"constantbuffervar"}}],[11,"fmt","","",121,{"inputs":[{"name":"texturevar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"texturevar"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"texturevar"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"texturevar"}],"output":{"name":"texturevar"}}],[11,"fmt","","",122,{"inputs":[{"name":"unorderedvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"unorderedvar"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"unorderedvar"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"unorderedvar"}],"output":{"name":"unorderedvar"}}],[11,"fmt","","",123,{"inputs":[{"name":"samplervar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",123,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"samplervar"}],"output":{"name":"samplervar"}}],[11,"fmt","","",124,{"inputs":[{"name":"outputvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"outputvar"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"outputvar"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"outputvar"}],"output":{"name":"outputvar"}}],[11,"fmt","","",125,{"inputs":[{"name":"programinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",125,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"programinfo"}],"output":{"name":"programinfo"}}],[11,"fmt","","",136,{"inputs":[{"name":"compatibilityerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"compatibilityerror"}],"output":{"name":"compatibilityerror"}}],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored\nin this variable.",119,{"inputs":[{"name":"constvar"},{"name":"uniformvalue"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"createshadererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",137,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"createshadererror"}],"output":{"name":"createshadererror"}}],[0,"tex","gfx_core","Texture creation and modification.",null,null],[6,"Layer","gfx_core::tex","",null,null],[6,"Level","","",null,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",141,null],[12,"yoffset","","",141,null],[12,"zoffset","","",141,null],[12,"width","","",141,null],[12,"height","","",141,null],[12,"depth","","",141,null],[12,"format","","Format of each texel.",141,null],[12,"mipmap","","Which mipmap to select.",141,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",142,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",143,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL\nspeak).",143,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For\nexample, if it would select mipmap level 2 and lod_bias is 1, it will\nuse mipmap level 3.",143,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",143,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",143,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",143,null],[3,"Descriptor","","Texture storage descriptor.",null,null],[12,"kind","","",144,null],[12,"levels","","",144,null],[12,"format","","",144,null],[12,"bind","","",144,null],[12,"usage","","",144,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",145,null],[12,"min","","",145,null],[12,"max","","",145,null],[12,"swizzle","","",145,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",146,null],[12,"level","","",146,null],[12,"layer","","",146,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",147,null],[12,"layer","","",147,null],[12,"flags","","",147,null],[4,"Error","","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",148,null],[13,"Kind","","The kind doesn&#39;t support a particular operation.",148,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",148,null],[13,"Size","","Unsupported size in one of the dimensions.",148,null],[13,"Data","","The given data has a different size than the target texture slice.",148,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",149,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",149,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",149,null],[4,"FilterMethod","","How to [filter](https://en.wikipedia.org/wiki/Texture_filtering) the\ntexture when sampling. They correspond to increasing levels of quality,\nbut also cost. They &quot;layer&quot; on top of each other: it is not possible to\nhave bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",150,null],[13,"Mipmap","","Add simple mipmapping.",150,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase\nquality.",150,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",150,null],[13,"Anisotropic","","Anisotropic filtering with a given &quot;max&quot;, must be between 1 and 16,\ninclusive.",150,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",151,null],[13,"NegX","","",151,null],[13,"PosY","","",151,null],[13,"NegY","","",151,null],[13,"PosZ","","",151,null],[13,"NegZ","","",151,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",152,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels\nin a different row are not sampled.",152,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",152,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in\na different depth level are not sampled.",152,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",152,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",152,null],[13,"CubeArray","","An array of Cube textures.",152,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is\nthe default.",153,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",153,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",153,null],[13,"Border","","Use border color.",153,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec.\nThe format is suppsed to come from compile-time information\nas opposed to run-time enum values.",null,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[17,"RO_DEPTH","","Depth is read-only in the view.",null,null],[17,"RO_STENCIL","","Stencil is read-only in the view.",null,null],[17,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",null,null],[11,"eq","","",148,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",148,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",149,{"inputs":[{"name":"aamode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"aamode"}],"output":{"name":"aamode"}}],[11,"hash","","",149,null],[11,"partial_cmp","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"option"}}],[11,"lt","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"le","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"gt","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ge","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"eq","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"cmp","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"ordering"}}],[11,"from","","",149,{"inputs":[{"name":"numsamples"}],"output":{"name":"aamode"}}],[11,"get_num_fragments","","Return the number of actual data fragments stored per texel.",149,{"inputs":[{"name":"aamode"}],"output":{"name":"numfragments"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",149,{"inputs":[{"name":"aamode"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"filtermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"filtermethod"}],"output":{"name":"filtermethod"}}],[11,"hash","","",150,null],[11,"partial_cmp","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"option"}}],[11,"lt","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"le","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"gt","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ge","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"eq","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"cmp","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"ordering"}}],[11,"fmt","","",151,{"inputs":[{"name":"cubeface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"cubeface"}],"output":{"name":"cubeface"}}],[11,"hash","","",151,null],[11,"partial_cmp","","",151,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"option"}}],[11,"eq","","",151,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"cmp","","",151,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"ordering"}}],[11,"fmt","","",152,{"inputs":[{"name":"kind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"kind"}],"output":{"name":"kind"}}],[11,"hash","","",152,null],[11,"partial_cmp","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"option"}}],[11,"lt","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"le","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"gt","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ge","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"eq","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"cmp","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"ordering"}}],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",152,{"inputs":[{"name":"kind"}],"output":{"name":"dimensions"}}],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",152,{"inputs":[{"name":"kind"},{"name":"level"}],"output":{"name":"dimensions"}}],[11,"get_num_levels","","Count the number of mipmap levels.",152,{"inputs":[{"name":"kind"}],"output":{"name":"level"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",152,{"inputs":[{"name":"kind"}],"output":{"name":"option"}}],[11,"is_cube","","Check if it&#39;s one of the cube kinds.",152,{"inputs":[{"name":"kind"}],"output":{"name":"bool"}}],[11,"fmt","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"imageinfocommon"}],"output":{"name":"imageinfocommon"}}],[11,"hash","","",141,null],[11,"partial_cmp","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"option"}}],[11,"lt","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"le","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"gt","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ge","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"eq","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"cmp","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"ordering"}}],[11,"get_texel_count","","Get the total number of texels.",141,{"inputs":[{"name":"imageinfocommon"}],"output":{"name":"usize"}}],[11,"convert","","Convert into a differently typed format.",141,{"inputs":[{"name":"imageinfocommon"},{"name":"t"}],"output":{"name":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",141,{"inputs":[{"name":"imageinfocommon"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"fmt","","",153,{"inputs":[{"name":"wrapmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"wrapmode"}],"output":{"name":"wrapmode"}}],[11,"hash","","",153,null],[11,"partial_cmp","","",153,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"option"}}],[11,"eq","","",153,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"cmp","","",153,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"option"}}],[11,"lt","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"le","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"gt","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ge","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"eq","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"hash","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"lod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"lod"}],"output":{"name":"lod"}}],[11,"from","","",154,{"inputs":[{"name":"f32"}],"output":{"name":"lod"}}],[11,"into","","",154,{"inputs":[{"name":"lod"}],"output":{"name":"f32"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"option"}}],[11,"lt","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"le","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"gt","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ge","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"eq","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"hash","","",142,null],[11,"fmt","","",142,{"inputs":[{"name":"packedcolor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"packedcolor"}],"output":{"name":"packedcolor"}}],[11,"from","","",142,null],[11,"into","","",142,null],[11,"partial_cmp","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"option"}}],[11,"lt","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"le","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"gt","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ge","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"eq","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"hash","","",143,null],[11,"fmt","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"samplerinfo"}],"output":{"name":"samplerinfo"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD\nmodifications.",143,{"inputs":[{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[11,"fmt","","",144,{"inputs":[{"name":"descriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"descriptor"}],"output":{"name":"descriptor"}}],[11,"hash","","",144,null],[11,"partial_cmp","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"option"}}],[11,"lt","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"le","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"gt","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ge","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"eq","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"cmp","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"ordering"}}],[11,"to_image_info","","Get image info for a given mip.",144,{"inputs":[{"name":"descriptor"},{"name":"level"}],"output":{"name":"newimageinfo"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",144,{"inputs":[{"name":"descriptor"},{"name":"channeltype"},{"name":"level"}],"output":{"name":"rawimageinfo"}}],[11,"fmt","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"resourcedesc"}],"output":{"name":"resourcedesc"}}],[11,"hash","","",145,null],[11,"partial_cmp","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"option"}}],[11,"lt","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"le","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"gt","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ge","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"eq","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"cmp","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"ordering"}}],[11,"fmt","","",146,{"inputs":[{"name":"renderdesc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"renderdesc"}],"output":{"name":"renderdesc"}}],[11,"hash","","",146,null],[11,"partial_cmp","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"option"}}],[11,"lt","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"le","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"gt","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ge","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"eq","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"cmp","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"ordering"}}],[11,"hash","","",155,null],[11,"cmp","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"option"}}],[11,"lt","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"le","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"gt","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ge","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"eq","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",155,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",155,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",155,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",155,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",155,{"inputs":[{"name":"u8"}],"output":{"name":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",155,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",155,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitor_assign","","Adds the set of flags.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",155,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"from_iter","","",155,{"inputs":[{"name":"t"}],"output":{"name":"depthstencilflags"}}],[11,"fmt","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"depthstencildesc"}],"output":{"name":"depthstencildesc"}}],[11,"hash","","",147,null],[11,"partial_cmp","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"option"}}],[11,"lt","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"le","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"gt","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ge","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"eq","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"cmp","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"ordering"}}],[11,"from","","",147,{"inputs":[{"name":"renderdesc"}],"output":{"name":"depthstencildesc"}}],[6,"VertexCount","gfx_core","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[6,"AttributeSlot","","Slot for an attribute.",null,null],[6,"ConstantBufferSlot","","Slot for a constant buffer object.",null,null],[6,"ResourceViewSlot","","Slot for a shader resource view.",null,null],[6,"UnorderedViewSlot","","Slot for an unordered access object.",null,null],[6,"ColorSlot","","Slot for an active color buffer.",null,null],[6,"SamplerSlot","","Slot for a sampler.",null,null],[17,"MAX_VERTEX_ATTRIBUTES","","Compile-time maximum number of vertex attributes.",null,null],[17,"MAX_COLOR_TARGETS","","Compile-time maximum number of color targets.",null,null],[17,"MAX_CONSTANT_BUFFERS","","Compile-time maximum number of constant buffers.",null,null],[17,"MAX_RESOURCE_VIEWS","","Compile-time maximum number of shader resource views (SRV).",null,null],[17,"MAX_UNORDERED_VIEWS","","Compile-time maximum number of unordered access views (UAV).",null,null],[17,"MAX_SAMPLERS","","Compile-time maximum number of samplers.",null,null],[8,"Resources","","Resources pertaining to a specific API.",null,null],[16,"Buffer","","",156,null],[16,"Shader","","",156,null],[16,"Program","","",156,null],[16,"PipelineStateObject","","",156,null],[16,"Texture","","",156,null],[16,"ShaderResourceView","","",156,null],[16,"UnorderedAccessView","","",156,null],[16,"RenderTargetView","","",156,null],[16,"DepthStencilView","","",156,null],[16,"Sampler","","",156,null],[16,"Fence","","",156,null],[8,"Device","","An interface for performing draw calls using a specific graphics API",null,null],[16,"Resources","","Associated resources type.",157,null],[16,"CommandBuffer","","Associated command buffer type.",157,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation.",157,{"inputs":[{"name":"device"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",157,{"inputs":[{"name":"device"},{"name":"manager"}],"output":null}],[10,"submit","","Submit a command buffer for execution.",157,{"inputs":[{"name":"device"},{"name":"commandbuffer"}],"output":null}],[10,"cleanup","","Cleanup unused resources, to be called between frames.",157,{"inputs":[{"name":"device"}],"output":null}],[8,"DeviceFence","","Extension to the Device that allows for submitting of commands\naround a fence",null,null],[10,"fenced_submit","","Submit a command buffer to the stream creating a fence\nthe fence is signaled after the GPU has executed all commands\nin the buffer",158,{"inputs":[{"name":"devicefence"},{"name":"commandbuffer"},{"name":"option"}],"output":{"name":"fence"}}],[10,"fence_wait","","Wait on the supplied fence stalling the current thread until\nthe fence is satisfied",158,{"inputs":[{"name":"devicefence"},{"name":"fence"}],"output":null}],[11,"reference","","",159,{"inputs":[{"name":"vertexshader"},{"name":"manager"}],"output":{"name":"shader"}}],[11,"reference","","",160,{"inputs":[{"name":"hullshader"},{"name":"manager"}],"output":{"name":"shader"}}],[11,"reference","","",161,{"inputs":[{"name":"domainshader"},{"name":"manager"}],"output":{"name":"shader"}}],[11,"reference","","",162,{"inputs":[{"name":"geometryshader"},{"name":"manager"}],"output":{"name":"shader"}}],[11,"reference","","",163,{"inputs":[{"name":"pixelshader"},{"name":"manager"}],"output":{"name":"shader"}}],[11,"get_usage","","Return the aggregated stage usage for the set.",22,{"inputs":[{"name":"shaderset"}],"output":{"name":"usage"}}],[11,"fmt","","",21,{"inputs":[{"name":"capabilities"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"capabilities"}],"output":{"name":"capabilities"}}],[11,"eq","","",23,{"inputs":[{"name":"primitive"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"primitive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"primitive"}],"output":{"name":"primitive"}}],[11,"fmt","","",24,{"inputs":[{"name":"indextype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"indextype"}],"output":{"name":"indextype"}}],[11,"hash","","",24,null],[11,"partial_cmp","","",24,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"option"}}],[11,"eq","","",24,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"ordering"}}]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"MultiSample"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"ColorMask"],[3,"Color"],[3,"RefValues"],[3,"Rect"],[3,"Mirror"],[3,"Capabilities"],[4,"ShaderSet"],[4,"Primitive"],[4,"IndexType"],[4,"ClearColor"],[8,"CommandBuffer"],[4,"DummyResources"],[3,"DummyDevice"],[3,"DummyCommandBuffer"],[3,"BufferInfo"],[4,"MapAccess"],[4,"BufferRole"],[4,"Usage"],[4,"BufferError"],[4,"BufferUpdateError"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"Typed"],[8,"Factory"],[3,"Bind"],[3,"Swizzle"],[3,"Format"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[8,"Producer"],[3,"RawBuffer"],[3,"Buffer"],[3,"Shader"],[3,"Program"],[3,"RawPipelineState"],[3,"RawTexture"],[3,"Texture"],[3,"RawShaderResourceView"],[3,"ShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[3,"Sampler"],[3,"Fence"],[3,"Manager"],[8,"Raw"],[8,"Builder"],[3,"Readable"],[3,"Writable"],[3,"RW"],[3,"ColorInfo"],[3,"DepthStencilInfo"],[3,"Element"],[3,"Descriptor"],[3,"VertexBufferSet"],[3,"ConstantBufferParam"],[3,"ResourceViewParam"],[3,"UnorderedViewParam"],[3,"SamplerParam"],[3,"PixelTargetSet"],[3,"CreationError"],[3,"SamplerType"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[3,"ProgramInfo"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[4,"CompatibilityError"],[4,"CreateShaderError"],[8,"BaseTyped"],[8,"Formatted"],[3,"Usage"],[3,"ImageInfoCommon"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Descriptor"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[4,"Error"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"WrapMode"],[3,"Lod"],[3,"DepthStencilFlags"],[8,"Resources"],[8,"Device"],[8,"DeviceFence"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"]]};
searchIndex["freetype"] = {"doc":"","items":[[11,"clone","freetype_sys","",0,{"inputs":[{"name":"ft_vector"}],"output":{"name":"ft_vector"}}],[11,"clone","","",1,{"inputs":[{"name":"ft_bbox"}],"output":{"name":"ft_bbox"}}],[11,"clone","","",2,{"inputs":[{"name":"ft_matrix"}],"output":{"name":"ft_matrix"}}],[11,"clone","","",3,{"inputs":[{"name":"ft_unitvector"}],"output":{"name":"ft_unitvector"}}],[11,"clone","","",4,{"inputs":[{"name":"ft_size_metrics"}],"output":{"name":"ft_size_metrics"}}],[11,"clone","","",5,{"inputs":[{"name":"ft_glyph_metrics"}],"output":{"name":"ft_glyph_metrics"}}],[11,"clone","","",6,{"inputs":[{"name":"ft_parameter"}],"output":{"name":"ft_parameter"}}],[11,"clone","","",7,{"inputs":[{"name":"ft_bitmap_size"}],"output":{"name":"ft_bitmap_size"}}],[11,"clone","","",8,{"inputs":[{"name":"tt_os2"}],"output":{"name":"tt_os2"}}],[11,"clone","","",9,{"inputs":[{"name":"ft_charmaprec"}],"output":{"name":"ft_charmaprec"}}],[11,"clone","","",10,{"inputs":[{"name":"ft_listrec"}],"output":{"name":"ft_listrec"}}],[11,"clone","","",11,{"inputs":[{"name":"ft_size_requestrec"}],"output":{"name":"ft_size_requestrec"}}],[6,"FT_Byte","freetype::ffi","",null,null],[6,"FT_Bytes","","",null,null],[6,"FT_Char","","",null,null],[6,"FT_Int","","",null,null],[6,"FT_UInt","","",null,null],[6,"FT_Int16","","",null,null],[6,"FT_UInt16","","",null,null],[6,"FT_Int32","","",null,null],[6,"FT_UInt32","","",null,null],[6,"FT_Int64","","",null,null],[6,"FT_UInt64","","",null,null],[6,"FT_Short","","",null,null],[6,"FT_UShort","","",null,null],[6,"FT_Long","","",null,null],[6,"FT_ULong","","",null,null],[6,"FT_Bool","","",null,null],[6,"FT_Offset","","",null,null],[6,"FT_PtrDist","","",null,null],[6,"FT_String","","",null,null],[6,"FT_Tag","","",null,null],[6,"FT_Error","","",null,null],[6,"FT_Fixed","","",null,null],[6,"FT_Pointer","","",null,null],[6,"FT_Pos","","",null,null],[6,"FT_FWord","","",null,null],[6,"FT_UFWord","","",null,null],[6,"FT_F2Dot14","","",null,null],[6,"FT_F26Dot6","","",null,null],[6,"FT_Generic_Finalizer","","",null,null],[6,"FT_StreamDesc","","",null,null],[6,"FT_Stream_IoFunc","","",null,null],[6,"FT_Stream_CloseFunc","","",null,null],[6,"FT_Alloc_Func","","",null,null],[6,"FT_Free_Func","","",null,null],[6,"FT_Realloc_Func","","",null,null],[8,"FTErrorMethods","","",null,null],[10,"succeeded","","",12,{"inputs":[{"name":"fterrormethods"}],"output":{"name":"bool"}}],[3,"FT_Vector","","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"FT_BBox","","",null,null],[12,"xMin","","",1,null],[12,"yMin","","",1,null],[12,"xMax","","",1,null],[12,"yMax","","",1,null],[3,"FT_Matrix","","",null,null],[12,"xx","","",2,null],[12,"xy","","",2,null],[12,"yx","","",2,null],[12,"yy","","",2,null],[3,"FT_UnitVector","","",null,null],[12,"x","","",3,null],[12,"y","","",3,null],[3,"FT_Bitmap","","",null,null],[12,"rows","","",13,null],[12,"width","","",13,null],[12,"pitch","","",13,null],[12,"buffer","","",13,null],[12,"num_grays","","",13,null],[12,"pixel_mode","","",13,null],[12,"palette_mode","","",13,null],[12,"palette","","",13,null],[3,"FT_Data","","",null,null],[12,"pointer","","",14,null],[12,"length","","",14,null],[3,"FT_Generic","","",null,null],[12,"data","","",15,null],[12,"finalizer","","",15,null],[3,"FT_Size_Metrics","","",null,null],[12,"x_ppem","","",4,null],[12,"y_ppem","","",4,null],[12,"x_scale","","",4,null],[12,"y_scale","","",4,null],[12,"ascender","","",4,null],[12,"descender","","",4,null],[12,"height","","",4,null],[12,"max_advance","","",4,null],[3,"FT_Outline","","",null,null],[12,"n_contours","","",16,null],[12,"n_points","","",16,null],[12,"points","","",16,null],[12,"tags","","",16,null],[12,"contours","","",16,null],[12,"flags","","",16,null],[3,"FT_Glyph_Metrics","","",null,null],[12,"width","","",5,null],[12,"height","","",5,null],[12,"horiBearingX","","",5,null],[12,"horiBearingY","","",5,null],[12,"horiAdvance","","",5,null],[12,"vertBearingX","","",5,null],[12,"vertBearingY","","",5,null],[12,"vertAdvance","","",5,null],[3,"FT_Parameter","","",null,null],[12,"tag","","",6,null],[12,"data","","",6,null],[3,"FT_Open_Args","","",null,null],[12,"flags","","",17,null],[12,"memory_base","","",17,null],[12,"memory_size","","",17,null],[12,"pathname","","",17,null],[12,"stream","","",17,null],[12,"driver","","",17,null],[12,"num_params","","",17,null],[12,"params","","",17,null],[3,"FT_Bitmap_Size","","",null,null],[12,"height","","",7,null],[12,"width","","",7,null],[12,"size","","",7,null],[12,"x_ppem","","",7,null],[12,"y_ppem","","",7,null],[3,"TT_OS2","","",null,null],[12,"version","","",8,null],[12,"xAvgCharWidth","","",8,null],[12,"usWeightClass","","",8,null],[12,"usWidthClass","","",8,null],[12,"fsType","","",8,null],[12,"ySubscriptXSize","","",8,null],[12,"ySubscriptYSize","","",8,null],[12,"ySubscriptXOffset","","",8,null],[12,"ySubscriptYOffset","","",8,null],[12,"ySuperscriptXSize","","",8,null],[12,"ySuperscriptYSize","","",8,null],[12,"ySuperscriptXOffset","","",8,null],[12,"ySuperscriptYOffset","","",8,null],[12,"yStrikeoutSize","","",8,null],[12,"yStrikeoutPosition","","",8,null],[12,"sFamilyClass","","",8,null],[12,"panose","","",8,null],[12,"ulUnicodeRange1","","",8,null],[12,"ulUnicodeRange2","","",8,null],[12,"ulUnicodeRange3","","",8,null],[12,"ulUnicodeRange4","","",8,null],[12,"ulCodePageRange1","","",8,null],[12,"ulCodePageRange2","","",8,null],[12,"sxHeight","","",8,null],[12,"sCapHeight","","",8,null],[12,"usDefaultChar","","",8,null],[12,"usBreakChar","","",8,null],[12,"usMaxContext","","",8,null],[6,"enum_FT_Sfnt_Tag_","","",null,null],[17,"ft_sfnt_head","","",null,null],[17,"ft_sfnt_maxp","","",null,null],[17,"ft_sfnt_os2","","",null,null],[17,"ft_sfnt_hhea","","",null,null],[17,"ft_sfnt_vhea","","",null,null],[17,"ft_sfnt_post","","",null,null],[17,"ft_sfnt_pclt","","",null,null],[17,"ft_sfnt_max","","",null,null],[6,"FT_Sfnt_Tag","","",null,null],[6,"FT_Pixel_Mode","","",null,null],[17,"FT_PIXEL_MODE_NONE","","",null,null],[17,"FT_PIXEL_MODE_MONO","","",null,null],[17,"FT_PIXEL_MODE_GRAY","","",null,null],[17,"FT_PIXEL_MODE_GRAY2","","",null,null],[17,"FT_PIXEL_MODE_GRAY4","","",null,null],[17,"FT_PIXEL_MODE_LCD","","",null,null],[17,"FT_PIXEL_MODE_LCD_V","","",null,null],[17,"FT_PIXEL_MODE_BGRA","","",null,null],[17,"FT_PIXEL_MODE_MAX","","",null,null],[6,"FT_Glyph_Format","","",null,null],[17,"FT_GLYPH_FORMAT_NONE","","",null,null],[17,"FT_GLYPH_FORMAT_COMPOSITE","","",null,null],[17,"FT_GLYPH_FORMAT_BITMAP","","",null,null],[17,"FT_GLYPH_FORMAT_OUTLINE","","",null,null],[17,"FT_GLYPH_FORMAT_PLOTTER","","",null,null],[6,"FT_Render_Mode","","",null,null],[17,"FT_RENDER_MODE_NORMAL","","",null,null],[17,"FT_RENDER_MODE_LIGHT","","",null,null],[17,"FT_RENDER_MODE_MONO","","",null,null],[17,"FT_RENDER_MODE_LCD","","",null,null],[17,"FT_RENDER_MODE_LCD_V","","",null,null],[17,"FT_RENDER_MODE_MAX","","",null,null],[6,"FT_Encoding","","",null,null],[17,"FT_ENCODING_NONE","","",null,null],[17,"FT_ENCODING_MS_SYMBOL","","",null,null],[17,"FT_ENCODING_UNICODE","","",null,null],[17,"FT_ENCODING_SJIS","","",null,null],[17,"FT_ENCODING_GB2312","","",null,null],[17,"FT_ENCODING_BIG5","","",null,null],[17,"FT_ENCODING_WANSUNG","","",null,null],[17,"FT_ENCODING_JOHAB","","",null,null],[17,"FT_ENCODING_MS_SJIS","","",null,null],[17,"FT_ENCODING_MS_GB2312","","",null,null],[17,"FT_ENCODING_MS_BIG5","","",null,null],[17,"FT_ENCODING_MS_WANSUNG","","",null,null],[17,"FT_ENCODING_MS_JOHAB","","",null,null],[17,"FT_ENCODING_ADOBE_STANDARD","","",null,null],[17,"FT_ENCODING_ADOBE_EXPERT","","",null,null],[17,"FT_ENCODING_ADOBE_CUSTOM","","",null,null],[17,"FT_ENCODING_ADOBE_LATIN_1","","",null,null],[17,"FT_ENCODING_OLD_LATIN_2","","",null,null],[17,"FT_ENCODING_APPLE_ROMAN","","",null,null],[6,"FT_Size_Request_Type","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_NOMINAL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_REAL_DIM","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_BBOX","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_CELL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_SCALES","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_MAX","","",null,null],[6,"FT_Kerning_Mode","","",null,null],[17,"FT_KERNING_DEFAULT","","",null,null],[17,"FT_KERNING_UNFITTED","","",null,null],[17,"FT_KERNING_UNSCALED","","",null,null],[6,"FT_Glyph_BBox_Mode","","",null,null],[17,"FT_GLYPH_BBOX_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_SUBPIXELS","","",null,null],[17,"FT_GLYPH_BBOX_GRIDFIT","","",null,null],[17,"FT_GLYPH_BBOX_TRUNCATE","","",null,null],[17,"FT_GLYPH_BBOX_PIXELS","","",null,null],[17,"FT_FACE_FLAG_SCALABLE","","",null,null],[17,"FT_FACE_FLAG_FIXED_SIZES","","",null,null],[17,"FT_FACE_FLAG_FIXED_WIDTH","","",null,null],[17,"FT_FACE_FLAG_SFNT","","",null,null],[17,"FT_FACE_FLAG_HORIZONTAL","","",null,null],[17,"FT_FACE_FLAG_VERTICAL","","",null,null],[17,"FT_FACE_FLAG_KERNING","","",null,null],[17,"FT_FACE_FLAG_FAST_GLYPHS","","",null,null],[17,"FT_FACE_FLAG_MULTIPLE_MASTERS","","",null,null],[17,"FT_FACE_FLAG_GLYPH_NAMES","","",null,null],[17,"FT_FACE_FLAG_EXTERNAL_STREAM","","",null,null],[17,"FT_FACE_FLAG_HINTER","","",null,null],[17,"FT_FACE_FLAG_CID_KEYED","","",null,null],[17,"FT_FACE_FLAG_TRICKY","","",null,null],[17,"FT_FACE_FLAG_COLOR","","",null,null],[17,"FT_STYLE_FLAG_ITALIC","","",null,null],[17,"FT_STYLE_FLAG_BOLD","","",null,null],[17,"FT_OPEN_MEMORY","","",null,null],[17,"FT_OPEN_STREAM","","",null,null],[17,"FT_OPEN_PATHNAME","","",null,null],[17,"FT_OPEN_DRIVER","","",null,null],[17,"FT_OPEN_PARAMS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES","","",null,null],[17,"FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID","","",null,null],[17,"FT_SUBGLYPH_FLAG_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_XY_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_2X2","","",null,null],[17,"FT_SUBGLYPH_FLAG_USE_MY_METRICS","","",null,null],[17,"FT_LOAD_DEFAULT","","",null,null],[17,"FT_LOAD_NO_SCALE","","",null,null],[17,"FT_LOAD_NO_HINTING","","",null,null],[17,"FT_LOAD_RENDER","","",null,null],[17,"FT_LOAD_NO_BITMAP","","",null,null],[17,"FT_LOAD_VERTICAL_LAYOUT","","",null,null],[17,"FT_LOAD_FORCE_AUTOHINT","","",null,null],[17,"FT_LOAD_CROP_BITMAP","","",null,null],[17,"FT_LOAD_PEDANTIC","","",null,null],[17,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","","",null,null],[17,"FT_LOAD_NO_RECURSE","","",null,null],[17,"FT_LOAD_IGNORE_TRANSFORM","","",null,null],[17,"FT_LOAD_MONOCHROME","","",null,null],[17,"FT_LOAD_LINEAR_DESIGN","","",null,null],[17,"FT_LOAD_NO_AUTOHINT","","",null,null],[17,"FT_LOAD_COLOR","","",null,null],[17,"FT_LOAD_TARGET_NORMAL","","",null,null],[17,"FT_LOAD_TARGET_LIGHT","","",null,null],[17,"FT_LOAD_TARGET_MONO","","",null,null],[17,"FT_LOAD_TARGET_LCD","","",null,null],[17,"FT_LOAD_TARGET_LCD_V","","",null,null],[17,"FT_FSTYPE_INSTALLABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING","","",null,null],[17,"FT_FSTYPE_EDITABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_NO_SUBSETTING","","",null,null],[17,"FT_FSTYPE_BITMAP_EMBEDDING_ONLY","","",null,null],[17,"FT_Err_Ok","","",null,null],[17,"FT_Err_Cannot_Open_Resource","","",null,null],[17,"FT_Err_Unknown_File_Format","","",null,null],[17,"FT_Err_Invalid_File_Format","","",null,null],[17,"FT_Err_Invalid_Version","","",null,null],[17,"FT_Err_Lower_Module_Version","","",null,null],[17,"FT_Err_Invalid_Argument","","",null,null],[17,"FT_Err_Unimplemented_Feature","","",null,null],[17,"FT_Err_Invalid_Table","","",null,null],[17,"FT_Err_Invalid_Offset","","",null,null],[17,"FT_Err_Array_Too_Large","","",null,null],[17,"FT_Err_Missing_Module","","",null,null],[17,"FT_Err_Missing_Property","","",null,null],[17,"FT_Err_Invalid_Glyph_Index","","",null,null],[17,"FT_Err_Invalid_Character_Code","","",null,null],[17,"FT_Err_Invalid_Glyph_Format","","",null,null],[17,"FT_Err_Cannot_Render_Glyph","","",null,null],[17,"FT_Err_Invalid_Outline","","",null,null],[17,"FT_Err_Invalid_Composite","","",null,null],[17,"FT_Err_Too_Many_Hints","","",null,null],[17,"FT_Err_Invalid_Pixel_Size","","",null,null],[17,"FT_Err_Invalid_Handle","","",null,null],[17,"FT_Err_Invalid_Library_Handle","","",null,null],[17,"FT_Err_Invalid_Driver_Handle","","",null,null],[17,"FT_Err_Invalid_Face_Handle","","",null,null],[17,"FT_Err_Invalid_Size_Handle","","",null,null],[17,"FT_Err_Invalid_Slot_Handle","","",null,null],[17,"FT_Err_Invalid_CharMap_Handle","","",null,null],[17,"FT_Err_Invalid_Cache_Handle","","",null,null],[17,"FT_Err_Invalid_Stream_Handle","","",null,null],[17,"FT_Err_Too_Many_Drivers","","",null,null],[17,"FT_Err_Too_Many_Extensions","","",null,null],[17,"FT_Err_Out_Of_Memory","","",null,null],[17,"FT_Err_Unlisted_Object","","",null,null],[17,"FT_Err_Cannot_Open_Stream","","",null,null],[17,"FT_Err_Invalid_Stream_Seek","","",null,null],[17,"FT_Err_Invalid_Stream_Skip","","",null,null],[17,"FT_Err_Invalid_Stream_Read","","",null,null],[17,"FT_Err_Invalid_Stream_Operation","","",null,null],[17,"FT_Err_Invalid_Frame_Operation","","",null,null],[17,"FT_Err_Nested_Frame_Access","","",null,null],[17,"FT_Err_Invalid_Frame_Read","","",null,null],[17,"FT_Err_Raster_Uninitialized","","",null,null],[17,"FT_Err_Raster_Corrupted","","",null,null],[17,"FT_Err_Raster_Overflow","","",null,null],[17,"FT_Err_Raster_Negative_Height","","",null,null],[17,"FT_Err_Too_Many_Caches","","",null,null],[17,"FT_Err_Invalid_Opcode","","",null,null],[17,"FT_Err_Too_Few_Arguments","","",null,null],[17,"FT_Err_Stack_Overflow","","",null,null],[17,"FT_Err_Code_Overflow","","",null,null],[17,"FT_Err_Bad_Argument","","",null,null],[17,"FT_Err_Divide_By_Zero","","",null,null],[17,"FT_Err_Invalid_Reference","","",null,null],[17,"FT_Err_Debug_OpCode","","",null,null],[17,"FT_Err_ENDF_In_Exec_Stream","","",null,null],[17,"FT_Err_Nested_DEFS","","",null,null],[17,"FT_Err_Invalid_CodeRange","","",null,null],[17,"FT_Err_Execution_Too_Long","","",null,null],[17,"FT_Err_Too_Many_Function_Defs","","",null,null],[17,"FT_Err_Too_Many_Instruction_Defs","","",null,null],[17,"FT_Err_Table_Missing","","",null,null],[17,"FT_Err_Horiz_Header_Missing","","",null,null],[17,"FT_Err_Locations_Missing","","",null,null],[17,"FT_Err_Name_Table_Missing","","",null,null],[17,"FT_Err_CMap_Table_Missing","","",null,null],[17,"FT_Err_Hmtx_Table_Missing","","",null,null],[17,"FT_Err_Post_Table_Missing","","",null,null],[17,"FT_Err_Invalid_Horiz_Metrics","","",null,null],[17,"FT_Err_Invalid_CharMap_Format","","",null,null],[17,"FT_Err_Invalid_PPem","","",null,null],[17,"FT_Err_Invalid_Vert_Metrics","","",null,null],[17,"FT_Err_Could_Not_Find_Context","","",null,null],[17,"FT_Err_Invalid_Post_Table_Format","","",null,null],[17,"FT_Err_Invalid_Post_Table","","",null,null],[17,"FT_Err_Syntax_Error","","",null,null],[17,"FT_Err_Stack_Underflow","","",null,null],[17,"FT_Err_Ignore","","",null,null],[17,"FT_Err_No_Unicode_Glyph_Name","","",null,null],[17,"FT_Err_Missing_Startfont_Field","","",null,null],[17,"FT_Err_Missing_Font_Field","","",null,null],[17,"FT_Err_Missing_Size_Field","","",null,null],[17,"FT_Err_Missing_Fontboundingbox_Field","","",null,null],[17,"FT_Err_Missing_Chars_Field","","",null,null],[17,"FT_Err_Missing_Startchar_Field","","",null,null],[17,"FT_Err_Missing_Encoding_Field","","",null,null],[17,"FT_Err_Missing_Bbx_Field","","",null,null],[17,"FT_Err_Bbx_Too_Big","","",null,null],[17,"FT_Err_Corrupted_Font_Header","","",null,null],[17,"FT_Err_Corrupted_Font_Glyphs","","",null,null],[17,"FT_Err_Max","","",null,null],[6,"FT_Library","","",null,null],[6,"FT_Face","","",null,null],[6,"FT_Size","","",null,null],[6,"FT_GlyphSlot","","",null,null],[6,"FT_CharMap","","",null,null],[6,"FT_Module","","",null,null],[6,"FT_Driver","","",null,null],[6,"FT_Renderer","","",null,null],[6,"FT_Size_Internal","","",null,null],[6,"FT_SubGlyph","","",null,null],[6,"FT_Slot_Internal","","",null,null],[6,"FT_Size_Request","","",null,null],[6,"FT_Face_Internal","","",null,null],[6,"FT_Stream","","",null,null],[6,"FT_Memory","","",null,null],[6,"FT_ListNode","","",null,null],[6,"FT_Glyph","","",null,null],[6,"FT_BitmapGlyph","","",null,null],[6,"FT_OutlineGlyph","","",null,null],[6,"TT_OS2_Internal","","",null,null],[6,"FT_LibraryRec","","",null,null],[6,"FT_ModuleRec","","",null,null],[6,"FT_DriverRec","","",null,null],[6,"FT_RendererRec","","",null,null],[6,"FT_Size_InternalRec","","",null,null],[6,"FT_SubGlyphRec","","",null,null],[6,"FT_Slot_InternalRec","","",null,null],[6,"FT_Face_InternalRec","","",null,null],[3,"FT_CharMapRec","","",null,null],[12,"face","","",9,null],[12,"encoding","","",9,null],[12,"platform_id","","",9,null],[12,"encoding_id","","",9,null],[3,"FT_FaceRec","","",null,null],[12,"num_faces","","",18,null],[12,"face_index","","",18,null],[12,"face_flags","","",18,null],[12,"style_flags","","",18,null],[12,"num_glyphs","","",18,null],[12,"family_name","","",18,null],[12,"style_name","","",18,null],[12,"num_fixed_sizes","","",18,null],[12,"available_sizes","","",18,null],[12,"num_charmaps","","",18,null],[12,"charmaps","","",18,null],[12,"generic","","",18,null],[12,"bbox","","",18,null],[12,"units_per_EM","","",18,null],[12,"ascender","","",18,null],[12,"descender","","",18,null],[12,"height","","",18,null],[12,"max_advance_width","","",18,null],[12,"max_advance_height","","",18,null],[12,"underline_position","","",18,null],[12,"underline_thickness","","",18,null],[12,"glyph","","",18,null],[12,"size","","",18,null],[12,"charmap","","",18,null],[12,"driver","","",18,null],[12,"memory","","",18,null],[12,"stream","","",18,null],[12,"sizes_list","","",18,null],[12,"autohint","","",18,null],[12,"extensions","","",18,null],[12,"internal","","",18,null],[3,"FT_GlyphSlotRec","","",null,null],[12,"library","","",19,null],[12,"face","","",19,null],[12,"next","","",19,null],[12,"reserved","","",19,null],[12,"generic","","",19,null],[12,"metrics","","",19,null],[12,"linearHoriAdvance","","",19,null],[12,"linearVertAdvance","","",19,null],[12,"advance","","",19,null],[12,"format","","",19,null],[12,"bitmap","","",19,null],[12,"bitmap_left","","",19,null],[12,"bitmap_top","","",19,null],[12,"outline","","",19,null],[12,"num_subglyphs","","",19,null],[12,"subglyphs","","",19,null],[12,"control_data","","",19,null],[12,"control_len","","",19,null],[12,"lsb_delta","","",19,null],[12,"rsb_delta","","",19,null],[12,"other","","",19,null],[12,"internal","","",19,null],[3,"FT_SizeRec","","",null,null],[12,"face","","",20,null],[12,"generic","","",20,null],[12,"metrics","","",20,null],[12,"internal","","",20,null],[3,"FT_StreamRec","","",null,null],[12,"base","","",21,null],[12,"size","","",21,null],[12,"pos","","",21,null],[12,"descriptor","","",21,null],[12,"pathname","","",21,null],[12,"read","","",21,null],[12,"close","","",21,null],[12,"memory","","",21,null],[12,"cursor","","",21,null],[12,"limit","","",21,null],[3,"FT_MemoryRec","","",null,null],[12,"user","","",22,null],[12,"alloc","","",22,null],[12,"free","","",22,null],[12,"realloc","","",22,null],[3,"FT_ListRec","","",null,null],[12,"head","","",10,null],[12,"tail","","",10,null],[3,"FT_ListNodeRec","","",null,null],[12,"prev","","",23,null],[12,"next","","",23,null],[12,"data","","",23,null],[3,"FT_Size_RequestRec","","",null,null],[12,"size_request_type","","",11,null],[12,"width","","",11,null],[12,"height","","",11,null],[12,"horiResolution","","",11,null],[12,"vertResolution","","",11,null],[3,"FT_GlyphRec","","",null,null],[12,"library","","",24,null],[12,"clazz","","",24,null],[12,"format","","",24,null],[12,"advance","","",24,null],[3,"FT_BitmapGlyphRec","","",null,null],[12,"root","","",25,null],[12,"left","","",25,null],[12,"top","","",25,null],[12,"bitmap","","",25,null],[3,"FT_OutlineGlyphRec","","",null,null],[12,"root","","",26,null],[12,"outline","","",26,null],[5,"FT_HAS_HORIZONTAL","","",null,null],[5,"FT_HAS_VERTICAL","","",null,null],[5,"FT_HAS_KERNING","","",null,null],[5,"FT_IS_SCALABLE","","",null,null],[5,"FT_IS_SFNT","","",null,null],[5,"FT_IS_FIXED_WIDTH","","",null,null],[5,"FT_HAS_FIXED_SIZES","","",null,null],[5,"FT_HAS_GLYPH_NAMES","","",null,null],[5,"FT_HAS_MULTIPLE_MASTERS","","",null,null],[5,"FT_IS_CID_KEYED","","",null,null],[5,"FT_IS_TRICKY","","",null,null],[5,"FT_HAS_COLOR","","",null,null],[5,"FT_Get_Sfnt_Table","","",null,null],[5,"FT_Init_FreeType","","",null,null],[5,"FT_Done_FreeType","","",null,null],[5,"FT_New_Library","","",null,null],[5,"FT_Done_Library","","",null,null],[5,"FT_Reference_Library","","",null,null],[5,"FT_Add_Default_Modules","","",null,null],[5,"FT_New_Face","","",null,null],[5,"FT_New_Memory_Face","","",null,null],[5,"FT_Open_Face","","",null,null],[5,"FT_Attach_File","","",null,null],[5,"FT_Attach_Stream","","",null,null],[5,"FT_Reference_Face","","",null,null],[5,"FT_Done_Face","","",null,null],[5,"FT_Select_Size","","",null,null],[5,"FT_Request_Size","","",null,null],[5,"FT_Set_Char_Size","","",null,null],[5,"FT_Set_Pixel_Sizes","","",null,null],[5,"FT_Load_Glyph","","",null,null],[5,"FT_Load_Char","","",null,null],[5,"FT_Set_Transform","","",null,null],[5,"FT_Render_Glyph","","",null,null],[5,"FT_Get_Kerning","","",null,null],[5,"FT_Get_Track_Kerning","","",null,null],[5,"FT_Get_Glyph_Name","","",null,null],[5,"FT_Get_Postscript_Name","","",null,null],[5,"FT_Select_CharMap","","",null,null],[5,"FT_Set_Charmap","","",null,null],[5,"FT_Get_Charmap_Index","","",null,null],[5,"FT_Get_Char_Index","","",null,null],[5,"FT_Get_First_Char","","",null,null],[5,"FT_Get_Next_Char","","",null,null],[5,"FT_Get_Name_Index","","",null,null],[5,"FT_Get_SubGlyph_Info","","",null,null],[5,"FT_Get_FSType_Flags","","",null,null],[5,"FT_Get_Glyph","","",null,null],[5,"FT_Glyph_Copy","","",null,null],[5,"FT_Glyph_Transform","","",null,null],[5,"FT_Glyph_Get_CBox","","",null,null],[5,"FT_Glyph_To_Bitmap","","",null,null],[5,"FT_Done_Glyph","","",null,null],[5,"FT_MulDiv","","",null,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"FT_MulFix","","",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"FT_DivFix","","",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"FT_RoundFix","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"FT_CeilFix","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"FT_FloorFix","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[0,"bitmap","freetype","",null,null],[3,"Bitmap","freetype::bitmap","",null,null],[4,"PixelMode","","An enumeration type used to describe the format of pixels in a given bitmap. Note that\nadditional formats may be added in the future.",null,null],[13,"None","","This value is reserved.",27,null],[13,"Mono","","A monochrome bitmap, using 1 bit per pixel. Note that pixels are\nstored in most-significant order (MSB), which means that the left-most\npixel in a byte has value 128.",27,null],[13,"Gray","","An 8-bit bitmap, generally used to represent anti-aliased glyph images.\nEach pixel is stored in one byte. Note that the number of `gray`\nlevels is stored in the `num_grays` field of the FT_Bitmap structure\n(it generally is 256).",27,null],[13,"Gray2","","A 2-bit per pixel bitmap, used to represent embedded anti-aliased\nbitmaps in font files according to the OpenType specification. We\nhaven&#39;t found a single font using this format, however.",27,null],[13,"Gray4","","A 4-bit per pixel bitmap, representing embedded anti-aliased bitmaps in\nfont files according to the OpenType specification. We haven&#39;t found a\nsingle font using this format, however.",27,null],[13,"Lcd","","An 8-bit bitmap, representing RGB or BGR decimated glyph images used\nfor display on LCD displays; the bitmap is three times wider than the\noriginal glyph image. See also FT_RENDER_MODE_LCD.",27,null],[13,"LcdV","","An 8-bit bitmap, representing RGB or BGR decimated glyph images used for\ndisplay on rotated LCD displays; the bitmap is three times taller than\nthe original glyph image. See also FT_RENDER_MODE_LCD_V.",27,null],[13,"Bgra","","An image with four 8-bit channels per pixel, representing a color image\n(such as emoticons) with alpha channel. For each pixel, the format is\nBGRA, which means, the blue channel comes first in memory. The color\nchannels are pre-multiplied and in the sRGB colorspace. For example,\nfull red at half-translucent opacity will be represented as\n`00,00,80,80`, not `00,00,FF,80`. See also FT_LOAD_COLOR.",27,null],[11,"eq","","",27,{"inputs":[{"name":"pixelmode"},{"name":"pixelmode"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"pixelmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"pixelmode"}],"output":{"name":"pixelmode"}}],[11,"from_raw","","",28,null],[11,"buffer","","A typeless pointer to the bitmap buffer. This value should be aligned\non 32-bit boundaries in most cases.",28,null],[11,"width","","The number of pixels in bitmap row.",28,{"inputs":[{"name":"bitmap"}],"output":{"name":"i32"}}],[11,"rows","","The number of bitmap rows.",28,{"inputs":[{"name":"bitmap"}],"output":{"name":"i32"}}],[11,"raw","","",28,{"inputs":[{"name":"bitmap"}],"output":{"name":"ft_bitmap"}}],[11,"pixel_mode","","The pixel mode, i.e., how pixel bits are stored. See `PixelMode` for\npossible values.",28,{"inputs":[{"name":"bitmap"}],"output":{"name":"ftresult"}}],[11,"pitch","","The pitch&#39;s absolute value is the number of bytes taken by one bitmap row, including\npadding. However, the pitch is positive when the bitmap has a ‘down’ flow, and negative\nwhen it has an ‘up’ flow. In all cases, the pitch is an offset to add to a bitmap pointer\nin order to go down one row.",28,{"inputs":[{"name":"bitmap"}],"output":{"name":"i32"}}],[0,"bitmap_glyph","freetype","",null,null],[3,"BitmapGlyph","freetype::bitmap_glyph","",null,null],[11,"clone","","",29,{"inputs":[{"name":"bitmapglyph"}],"output":{"name":"bitmapglyph"}}],[11,"from_raw","","",29,{"inputs":[{"name":"ft_bitmapglyph"}],"output":{"name":"self"}}],[11,"left","","",29,{"inputs":[{"name":"bitmapglyph"}],"output":{"name":"i32"}}],[11,"top","","",29,{"inputs":[{"name":"bitmapglyph"}],"output":{"name":"i32"}}],[11,"bitmap","","",29,{"inputs":[{"name":"bitmapglyph"}],"output":{"name":"bitmap"}}],[11,"raw","","",29,{"inputs":[{"name":"bitmapglyph"}],"output":{"name":"ft_bitmapglyphrec"}}],[0,"error","freetype","",null,null],[4,"Error","freetype::error","",null,null],[13,"Ok","","",30,null],[13,"CannotOpenResource","","",30,null],[13,"UnknownFileFormat","","",30,null],[13,"InvalidFileFormat","","",30,null],[13,"InvalidVersion","","",30,null],[13,"LowerModuleVersion","","",30,null],[13,"InvalidArgument","","",30,null],[13,"UnimplementedFeature","","",30,null],[13,"InvalidTable","","",30,null],[13,"InvalidOffset","","",30,null],[13,"ArrayTooLarge","","",30,null],[13,"MissingModule","","",30,null],[13,"MissingProperty","","",30,null],[13,"InvalidGlyphIndex","","",30,null],[13,"InvalidCharacterCode","","",30,null],[13,"InvalidGlyphFormat","","",30,null],[13,"CannotRenderGlyph","","",30,null],[13,"InvalidOutline","","",30,null],[13,"InvalidComposite","","",30,null],[13,"TooManyHints","","",30,null],[13,"InvalidPixelSize","","",30,null],[13,"InvalidHandle","","",30,null],[13,"InvalidLibraryHandle","","",30,null],[13,"InvalidDriverHandle","","",30,null],[13,"InvalidFaceHandle","","",30,null],[13,"InvalidSizeHandle","","",30,null],[13,"InvalidSlotHandle","","",30,null],[13,"InvalidCharMapHandle","","",30,null],[13,"InvalidCacheHandle","","",30,null],[13,"InvalidStreamHandle","","",30,null],[13,"TooManyDrivers","","",30,null],[13,"TooManyExtensions","","",30,null],[13,"OutOfMemory","","",30,null],[13,"UnlistedObject","","",30,null],[13,"CannotOpenStream","","",30,null],[13,"InvalidStreamSeek","","",30,null],[13,"InvalidStreamSkip","","",30,null],[13,"InvalidStreamRead","","",30,null],[13,"InvalidStreamOperation","","",30,null],[13,"InvalidFrameOperation","","",30,null],[13,"NestedFrameAccess","","",30,null],[13,"InvalidFrameRead","","",30,null],[13,"RasterUninitialized","","",30,null],[13,"RasterCorrupted","","",30,null],[13,"RasterOverflow","","",30,null],[13,"RasterNegativeHeight","","",30,null],[13,"TooManyCaches","","",30,null],[13,"InvalidOpcode","","",30,null],[13,"TooFewArguments","","",30,null],[13,"StackOverflow","","",30,null],[13,"CodeOverflow","","",30,null],[13,"BadArgument","","",30,null],[13,"DivideByZero","","",30,null],[13,"InvalidReference","","",30,null],[13,"DebugOpCode","","",30,null],[13,"ENDFInExecStream","","",30,null],[13,"NestedDEFS","","",30,null],[13,"InvalidCodeRange","","",30,null],[13,"ExecutionTooLong","","",30,null],[13,"TooManyFunctionDefs","","",30,null],[13,"TooManyInstructionDefs","","",30,null],[13,"TableMissing","","",30,null],[13,"HorizHeaderMissing","","",30,null],[13,"LocationsMissing","","",30,null],[13,"NameTableMissing","","",30,null],[13,"CMapTableMissing","","",30,null],[13,"HmtxTableMissing","","",30,null],[13,"PostTableMissing","","",30,null],[13,"InvalidHorizMetrics","","",30,null],[13,"InvalidCharMapFormat","","",30,null],[13,"InvalidPPem","","",30,null],[13,"InvalidVertMetrics","","",30,null],[13,"CouldNotFindContext","","",30,null],[13,"InvalidPostTableFormat","","",30,null],[13,"InvalidPostTable","","",30,null],[13,"Syntax","","",30,null],[13,"StackUnderflow","","",30,null],[13,"Ignore","","",30,null],[13,"NoUnicodeGlyphName","","",30,null],[13,"MissingStartfontField","","",30,null],[13,"MissingFontField","","",30,null],[13,"MissingSizeField","","",30,null],[13,"MissingFontboundingboxField","","",30,null],[13,"MissingCharsField","","",30,null],[13,"MissingStartcharField","","",30,null],[13,"MissingEncodingField","","",30,null],[13,"MissingBbxField","","",30,null],[13,"BbxTooBig","","",30,null],[13,"CorruptedFontHeader","","",30,null],[13,"CorruptedFontGlyphs","","",30,null],[13,"Max","","",30,null],[13,"UnexpectedPixelMode","","",30,null],[13,"InvalidPath","","",30,null],[13,"Unknown","","",30,null],[6,"FtResult","","",null,null],[11,"fmt","","",30,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",30,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[0,"face","freetype","",null,null],[3,"LoadFlag","freetype::face","",null,null],[3,"Face","","",null,null],[4,"KerningMode","","",null,null],[13,"KerningDefault","","",31,null],[13,"KerningUnfitted","","",31,null],[13,"KerningUnscaled","","",31,null],[17,"DEFAULT","","",null,null],[17,"NO_SCALE","","",null,null],[17,"NO_HINTING","","",null,null],[17,"RENDER","","",null,null],[17,"NO_BITMAP","","",null,null],[17,"VERTICAL_LAYOUT","","",null,null],[17,"FORCE_AUTOHINT","","",null,null],[17,"CROP_BITMAP","","",null,null],[17,"PEDANTIC","","",null,null],[17,"IGNORE_GLOBAL_ADVANCE_WITH","","",null,null],[17,"NO_RECURSE","","",null,null],[17,"IGNORE_TRANSFORM","","",null,null],[17,"MONOCHROME","","",null,null],[17,"LINEAR_DESIGN","","",null,null],[17,"NO_AUTOHINT","","",null,null],[17,"TARGET_NORMAL","","",null,null],[17,"TARGET_LIGHT","","",null,null],[17,"TARGET_MONO","","",null,null],[17,"TARGET_LCD","","",null,null],[17,"TARGET_LCD_V","","",null,null],[17,"COLOR","","",null,null],[11,"clone","","",31,{"inputs":[{"name":"kerningmode"}],"output":{"name":"kerningmode"}}],[11,"hash","","",32,null],[11,"cmp","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"eq","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"loadflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",32,{"inputs":[],"output":{"name":"loadflag"}}],[11,"all","","Returns the set containing all flags.",32,{"inputs":[],"output":{"name":"loadflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",32,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",32,{"inputs":[{"name":"i32"}],"output":{"name":"loadflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"bitor_assign","","Adds the set of flags.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"from_iter","","",32,{"inputs":[{"name":"t"}],"output":{"name":"loadflag"}}],[11,"hash","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"face"},{"name":"face"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"face"},{"name":"face"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"face"}],"output":{"name":"self"}}],[11,"from_raw","","",33,{"inputs":[{"name":"ft_library"},{"name":"ft_face"}],"output":{"name":"self"}}],[11,"attach_file","","",33,{"inputs":[{"name":"face"},{"name":"str"}],"output":{"name":"ftresult"}}],[11,"reference","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ftresult"}}],[11,"set_char_size","","",33,{"inputs":[{"name":"face"},{"name":"isize"},{"name":"isize"},{"name":"u32"},{"name":"u32"}],"output":{"name":"ftresult"}}],[11,"set_pixel_sizes","","",33,{"inputs":[{"name":"face"},{"name":"u32"},{"name":"u32"}],"output":{"name":"ftresult"}}],[11,"load_glyph","","",33,{"inputs":[{"name":"face"},{"name":"u32"},{"name":"loadflag"}],"output":{"name":"ftresult"}}],[11,"load_char","","",33,{"inputs":[{"name":"face"},{"name":"usize"},{"name":"loadflag"}],"output":{"name":"ftresult"}}],[11,"set_transform","","",33,{"inputs":[{"name":"face"},{"name":"matrix"},{"name":"vector"}],"output":null}],[11,"get_char_index","","",33,{"inputs":[{"name":"face"},{"name":"usize"}],"output":{"name":"u32"}}],[11,"get_kerning","","",33,{"inputs":[{"name":"face"},{"name":"u32"},{"name":"u32"},{"name":"kerningmode"}],"output":{"name":"ftresult"}}],[11,"glyph","","",33,{"inputs":[{"name":"face"}],"output":{"name":"glyphslot"}}],[11,"has_horizontal","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"has_vertical","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"has_kerning","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"is_scalable","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"is_sfnt","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"is_fixed_width","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"has_fixed_sizes","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"has_glyph_names","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"is_cid_keyed","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"is_tricky","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"has_color","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"raw","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_facerec"}}],[11,"raw_mut","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_facerec"}}],[11,"ascender","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"descender","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"em_size","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"height","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"max_advance_width","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"max_advance_height","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"underline_position","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"underline_thickness","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"family_name","","",33,{"inputs":[{"name":"face"}],"output":{"name":"option"}}],[11,"style_name","","",33,{"inputs":[{"name":"face"}],"output":{"name":"option"}}],[11,"size_metrics","","",33,{"inputs":[{"name":"face"}],"output":{"name":"option"}}],[11,"postscript_name","","",33,{"inputs":[{"name":"face"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"face"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",33,{"inputs":[{"name":"face"}],"output":null}],[0,"glyph","freetype","",null,null],[3,"Glyph","freetype::glyph","Represents a retrieved glyph from the library",null,null],[11,"from_raw","","Create a freetype-rs glyph object from c constituent parts",34,{"inputs":[{"name":"ft_library"},{"name":"ft_glyph"}],"output":{"name":"self"}}],[11,"transform","","Transform a glyph image if its format is scalable.",34,{"inputs":[{"name":"glyph"},{"name":"option"},{"name":"option"}],"output":{"name":"ftresult"}}],[11,"get_cbox","","Return a glyph&#39;s ‘control box’. The control box encloses all the outline&#39;s points,\nincluding Bézier control points. Though it coincides with the exact bounding box for most\nglyphs, it can be slightly larger in some situations (like when rotating an outline that\ncontains Bézier outside arcs).",34,{"inputs":[{"name":"glyph"},{"name":"ft_glyph_bbox_mode"}],"output":{"name":"bbox"}}],[11,"to_bitmap","","Convert a given glyph object to a bitmap glyph object.",34,{"inputs":[{"name":"glyph"},{"name":"rendermode"},{"name":"option"}],"output":{"name":"ftresult"}}],[11,"advance_x","","",34,{"inputs":[{"name":"glyph"}],"output":{"name":"isize"}}],[11,"advance_y","","",34,{"inputs":[{"name":"glyph"}],"output":{"name":"isize"}}],[11,"format","","An enumeration type used to describe the format of a given glyph image. Note that this\nversion of FreeType only supports two image formats, even though future font drivers will\nbe able to register their own format.",34,{"inputs":[{"name":"glyph"}],"output":{"name":"ft_glyph_format"}}],[11,"raw","","Get the underlying c glyph struct (The system actually calls this a GlyphRec because it can\nbe a different struct in different circumstances)",34,{"inputs":[{"name":"glyph"}],"output":{"name":"ft_glyphrec"}}],[11,"clone","","",34,{"inputs":[{"name":"glyph"}],"output":{"name":"self"}}],[11,"drop","","",34,{"inputs":[{"name":"glyph"}],"output":null}],[0,"glyph_slot","freetype","",null,null],[3,"SubGlyphInfo","freetype::glyph_slot","A description of a given subglyph returned by `GlyphSlot::get_subglyph_info`\nfunction.",null,null],[12,"index","","The glyph index of the subglyph.",35,null],[12,"flags","","The subglyph flags, see FT_SUBGLYPH_FLAG_XXX.",35,null],[12,"arg1","","The subglyph&#39;s first argument (if any).",35,null],[12,"arg2","","The subglyph&#39;s second argument (if any).",35,null],[12,"transfrom","","The subglyph transformation (if any).",35,null],[3,"GlyphSlot","","A struct encapsulating the space for a glyph within a `Library`",null,null],[11,"clone","","",35,{"inputs":[{"name":"subglyphinfo"}],"output":{"name":"subglyphinfo"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",36,null],[11,"eq","","",36,{"inputs":[{"name":"glyphslot"},{"name":"glyphslot"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"glyphslot"},{"name":"glyphslot"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"glyphslot"}],"output":{"name":"glyphslot"}}],[11,"from_raw","","Create a `GlyphSlot` from its constituent C parts",36,{"inputs":[{"name":"ft_library"},{"name":"ft_glyphslot"}],"output":{"name":"self"}}],[11,"render_glyph","","Convert a given glyph image to a bitmap. It does so by inspecting the glyph image format,\nfinding the relevant renderer, and invoking it.",36,{"inputs":[{"name":"glyphslot"},{"name":"rendermode"}],"output":{"name":"ftresult"}}],[11,"get_subglyph_info","","Retrieve a description of a given subglyph. Only use it if the glyph&#39;s format is\nFT_GLYPH_FORMAT_COMPOSITE; an error is returned otherwise.",36,{"inputs":[{"name":"glyphslot"},{"name":"u32"}],"output":{"name":"ftresult"}}],[11,"get_glyph","","Returns a glyph object, that is similar to a `GlyphSlot` but managed outside of the library",36,{"inputs":[{"name":"glyphslot"}],"output":{"name":"ftresult"}}],[11,"outline","","In freetype, the `Outline` object is a scalable glyph. This method unpacks a glyph into\nthis object, or returns `None` if the glyph has no `outline`",36,{"inputs":[{"name":"glyphslot"}],"output":{"name":"option"}}],[11,"bitmap","","This field is used as a bitmap descriptor when the slot format is FT_GLYPH_FORMAT_BITMAP.\nNote that the address and content of the bitmap buffer can change between calls of\nFT_Load_Glyph and a few other functions.",36,{"inputs":[{"name":"glyphslot"}],"output":{"name":"bitmap"}}],[11,"bitmap_left","","The bitmap&#39;s left bearing expressed in integer pixels. Only valid if the format is\nFT_GLYPH_FORMAT_BITMAP, this is, if the glyph slot contains a bitmap.",36,{"inputs":[{"name":"glyphslot"}],"output":{"name":"i32"}}],[11,"bitmap_top","","The bitmap&#39;s top bearing expressed in integer pixels. Remember that this is the distance\nfrom the baseline to the top-most glyph scanline, upwards y coordinates being positive.",36,{"inputs":[{"name":"glyphslot"}],"output":{"name":"i32"}}],[11,"advance","","This shorthand is, depending on FT_LOAD_IGNORE_TRANSFORM, the transformed (hinted) advance\nwidth for the glyph, in 26.6 fractional pixel format. As specified with\nFT_LOAD_VERTICAL_LAYOUT, it uses either the ‘horiAdvance’ or the ‘vertAdvance’ value of\n‘metrics’ field.",36,{"inputs":[{"name":"glyphslot"}],"output":{"name":"vector"}}],[11,"linear_hori_advance","","The advance width of the unhinted glyph. Its value is expressed in 16.16 fractional pixels,\nunless FT_LOAD_LINEAR_DESIGN is set when loading the glyph. This field can be important to\nperform correct WYSIWYG layout. Only relevant for outline glyphs.",36,{"inputs":[{"name":"glyphslot"}],"output":{"name":"ft_fixed"}}],[11,"linear_vert_advance","","The advance height of the unhinted glyph. Its value is expressed in 16.16 fractional\npixels, unless FT_LOAD_LINEAR_DESIGN is set when loading the glyph. This field can be\nimportant to perform correct WYSIWYG layout. Only relevant for outline glyphs.",36,{"inputs":[{"name":"glyphslot"}],"output":{"name":"ft_fixed"}}],[11,"metrics","","The metrics of the last loaded glyph in the slot. The returned values depend on the last\nload flags (see the FT_Load_Glyph API function) and can be expressed either in 26.6\nfractional pixels or font units.",36,{"inputs":[{"name":"glyphslot"}],"output":{"name":"glyphmetrics"}}],[11,"raw","","Get a pointer to the underlying c struct",36,{"inputs":[{"name":"glyphslot"}],"output":{"name":"ft_glyphslotrec"}}],[0,"library","freetype","",null,null],[3,"Library","freetype::library","",null,null],[11,"init","","This function is used to create a new FreeType library instance and add the default\nmodules. It returns a struct encapsulating the freetype library. The library is correctly\ndiscarded when the struct is dropped.",37,{"inputs":[],"output":{"name":"ftresult"}}],[11,"new_face","","Open a font file using its pathname. `face_index` should be 0 if there is only 1 font\nin the file.",37,{"inputs":[{"name":"library"},{"name":"p"},{"name":"isize"}],"output":{"name":"ftresult"}}],[11,"new_memory_face","","Similar to `new_face`, but loads file data from a byte array in memory",37,null],[11,"raw","","Get the underlying library object",37,{"inputs":[{"name":"library"}],"output":{"name":"ft_library"}}],[11,"get_memory","","Get the underlying memory management object",37,{"inputs":[{"name":"library"}],"output":{"name":"ft_memoryrec"}}],[11,"new_memory","","Set a new memory management object",37,{"inputs":[{"name":"library"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":null}],[11,"drop","","",37,{"inputs":[{"name":"library"}],"output":null}],[0,"outline","freetype","",null,null],[3,"Outline","freetype::outline","",null,null],[3,"CurveIterator","","",null,null],[3,"ContourIterator","","",null,null],[4,"Curve","","",null,null],[13,"Line","","",38,null],[13,"Bezier2","","",38,null],[13,"Bezier3","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"curve"}],"output":{"name":"curve"}}],[11,"from_raw","","",39,{"inputs":[{"name":"ft_outline"}],"output":{"name":"self"}}],[11,"points","","",39,null],[11,"tags","","",39,null],[11,"contours","","",39,null],[11,"contours_iter","","",39,{"inputs":[{"name":"outline"}],"output":{"name":"contouriterator"}}],[11,"from_raw","","",40,{"inputs":[{"name":"ft_outline"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"start","","",40,{"inputs":[{"name":"curveiterator"}],"output":{"name":"vector"}}],[11,"next","","",40,{"inputs":[{"name":"curveiterator"}],"output":{"name":"option"}}],[11,"from_raw","","",41,{"inputs":[{"name":"ft_outline"}],"output":{"name":"self"}}],[11,"next","","",41,{"inputs":[{"name":"contouriterator"}],"output":{"name":"option"}}],[0,"render_mode","freetype","",null,null],[4,"RenderMode","freetype::render_mode","",null,null],[13,"Normal","","",42,null],[13,"Light","","",42,null],[13,"Mono","","",42,null],[13,"Lcd","","",42,null],[13,"LcdV","","",42,null],[13,"Max","","",42,null],[11,"clone","","",42,{"inputs":[{"name":"rendermode"}],"output":{"name":"rendermode"}}],[0,"tt_os2","freetype","",null,null],[3,"TrueTypeOS2Table","freetype::tt_os2","",null,null],[11,"clone","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"truetypeos2table"}}],[11,"from_face","","",43,{"inputs":[{"name":"face"}],"output":{"name":"option"}}],[11,"version","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_ushort"}}],[11,"avg_char_width","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"us_weight_class","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_ushort"}}],[11,"us_width_class","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_ushort"}}],[11,"fs_type","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_subscript_x_size","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_subscript_y_size","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_subscript_x_offset","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_subscript_y_offset","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_superscript_x_size","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_superscript_y_size","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_superscript_x_offset","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_superscript_y_offset","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_strikeout_size","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_strikeout_position","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"s_family_class","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"x_height","","",43,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[6,"BBox","freetype","",null,null],[6,"GlyphMetrics","","",null,null],[6,"Matrix","","",null,null],[6,"Vector","","",null,null]],"paths":[[3,"FT_Vector"],[3,"FT_BBox"],[3,"FT_Matrix"],[3,"FT_UnitVector"],[3,"FT_Size_Metrics"],[3,"FT_Glyph_Metrics"],[3,"FT_Parameter"],[3,"FT_Bitmap_Size"],[3,"TT_OS2"],[3,"FT_CharMapRec"],[3,"FT_ListRec"],[3,"FT_Size_RequestRec"],[8,"FTErrorMethods"],[3,"FT_Bitmap"],[3,"FT_Data"],[3,"FT_Generic"],[3,"FT_Outline"],[3,"FT_Open_Args"],[3,"FT_FaceRec"],[3,"FT_GlyphSlotRec"],[3,"FT_SizeRec"],[3,"FT_StreamRec"],[3,"FT_MemoryRec"],[3,"FT_ListNodeRec"],[3,"FT_GlyphRec"],[3,"FT_BitmapGlyphRec"],[3,"FT_OutlineGlyphRec"],[4,"PixelMode"],[3,"Bitmap"],[3,"BitmapGlyph"],[4,"Error"],[4,"KerningMode"],[3,"LoadFlag"],[3,"Face"],[3,"Glyph"],[3,"SubGlyphInfo"],[3,"GlyphSlot"],[3,"Library"],[4,"Curve"],[3,"Outline"],[3,"CurveIterator"],[3,"ContourIterator"],[4,"RenderMode"],[3,"TrueTypeOS2Table"]]};
searchIndex["freetype_sys"] = {"doc":"","items":[[3,"FT_Vector","freetype_sys","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"FT_BBox","","",null,null],[12,"xMin","","",1,null],[12,"yMin","","",1,null],[12,"xMax","","",1,null],[12,"yMax","","",1,null],[3,"FT_Matrix","","",null,null],[12,"xx","","",2,null],[12,"xy","","",2,null],[12,"yx","","",2,null],[12,"yy","","",2,null],[3,"FT_UnitVector","","",null,null],[12,"x","","",3,null],[12,"y","","",3,null],[3,"FT_Bitmap","","",null,null],[12,"rows","","",4,null],[12,"width","","",4,null],[12,"pitch","","",4,null],[12,"buffer","","",4,null],[12,"num_grays","","",4,null],[12,"pixel_mode","","",4,null],[12,"palette_mode","","",4,null],[12,"palette","","",4,null],[3,"FT_Data","","",null,null],[12,"pointer","","",5,null],[12,"length","","",5,null],[3,"FT_Generic","","",null,null],[12,"data","","",6,null],[12,"finalizer","","",6,null],[3,"FT_Size_Metrics","","",null,null],[12,"x_ppem","","",7,null],[12,"y_ppem","","",7,null],[12,"x_scale","","",7,null],[12,"y_scale","","",7,null],[12,"ascender","","",7,null],[12,"descender","","",7,null],[12,"height","","",7,null],[12,"max_advance","","",7,null],[3,"FT_Outline","","",null,null],[12,"n_contours","","",8,null],[12,"n_points","","",8,null],[12,"points","","",8,null],[12,"tags","","",8,null],[12,"contours","","",8,null],[12,"flags","","",8,null],[3,"FT_Glyph_Metrics","","",null,null],[12,"width","","",9,null],[12,"height","","",9,null],[12,"horiBearingX","","",9,null],[12,"horiBearingY","","",9,null],[12,"horiAdvance","","",9,null],[12,"vertBearingX","","",9,null],[12,"vertBearingY","","",9,null],[12,"vertAdvance","","",9,null],[3,"FT_Parameter","","",null,null],[12,"tag","","",10,null],[12,"data","","",10,null],[3,"FT_Open_Args","","",null,null],[12,"flags","","",11,null],[12,"memory_base","","",11,null],[12,"memory_size","","",11,null],[12,"pathname","","",11,null],[12,"stream","","",11,null],[12,"driver","","",11,null],[12,"num_params","","",11,null],[12,"params","","",11,null],[3,"FT_Bitmap_Size","","",null,null],[12,"height","","",12,null],[12,"width","","",12,null],[12,"size","","",12,null],[12,"x_ppem","","",12,null],[12,"y_ppem","","",12,null],[3,"TT_OS2","","",null,null],[12,"version","","",13,null],[12,"xAvgCharWidth","","",13,null],[12,"usWeightClass","","",13,null],[12,"usWidthClass","","",13,null],[12,"fsType","","",13,null],[12,"ySubscriptXSize","","",13,null],[12,"ySubscriptYSize","","",13,null],[12,"ySubscriptXOffset","","",13,null],[12,"ySubscriptYOffset","","",13,null],[12,"ySuperscriptXSize","","",13,null],[12,"ySuperscriptYSize","","",13,null],[12,"ySuperscriptXOffset","","",13,null],[12,"ySuperscriptYOffset","","",13,null],[12,"yStrikeoutSize","","",13,null],[12,"yStrikeoutPosition","","",13,null],[12,"sFamilyClass","","",13,null],[12,"panose","","",13,null],[12,"ulUnicodeRange1","","",13,null],[12,"ulUnicodeRange2","","",13,null],[12,"ulUnicodeRange3","","",13,null],[12,"ulUnicodeRange4","","",13,null],[12,"ulCodePageRange1","","",13,null],[12,"ulCodePageRange2","","",13,null],[12,"sxHeight","","",13,null],[12,"sCapHeight","","",13,null],[12,"usDefaultChar","","",13,null],[12,"usBreakChar","","",13,null],[12,"usMaxContext","","",13,null],[3,"FT_CharMapRec","","",null,null],[12,"face","","",14,null],[12,"encoding","","",14,null],[12,"platform_id","","",14,null],[12,"encoding_id","","",14,null],[3,"FT_FaceRec","","",null,null],[12,"num_faces","","",15,null],[12,"face_index","","",15,null],[12,"face_flags","","",15,null],[12,"style_flags","","",15,null],[12,"num_glyphs","","",15,null],[12,"family_name","","",15,null],[12,"style_name","","",15,null],[12,"num_fixed_sizes","","",15,null],[12,"available_sizes","","",15,null],[12,"num_charmaps","","",15,null],[12,"charmaps","","",15,null],[12,"generic","","",15,null],[12,"bbox","","",15,null],[12,"units_per_EM","","",15,null],[12,"ascender","","",15,null],[12,"descender","","",15,null],[12,"height","","",15,null],[12,"max_advance_width","","",15,null],[12,"max_advance_height","","",15,null],[12,"underline_position","","",15,null],[12,"underline_thickness","","",15,null],[12,"glyph","","",15,null],[12,"size","","",15,null],[12,"charmap","","",15,null],[12,"driver","","",15,null],[12,"memory","","",15,null],[12,"stream","","",15,null],[12,"sizes_list","","",15,null],[12,"autohint","","",15,null],[12,"extensions","","",15,null],[12,"internal","","",15,null],[3,"FT_GlyphSlotRec","","",null,null],[12,"library","","",16,null],[12,"face","","",16,null],[12,"next","","",16,null],[12,"reserved","","",16,null],[12,"generic","","",16,null],[12,"metrics","","",16,null],[12,"linearHoriAdvance","","",16,null],[12,"linearVertAdvance","","",16,null],[12,"advance","","",16,null],[12,"format","","",16,null],[12,"bitmap","","",16,null],[12,"bitmap_left","","",16,null],[12,"bitmap_top","","",16,null],[12,"outline","","",16,null],[12,"num_subglyphs","","",16,null],[12,"subglyphs","","",16,null],[12,"control_data","","",16,null],[12,"control_len","","",16,null],[12,"lsb_delta","","",16,null],[12,"rsb_delta","","",16,null],[12,"other","","",16,null],[12,"internal","","",16,null],[3,"FT_SizeRec","","",null,null],[12,"face","","",17,null],[12,"generic","","",17,null],[12,"metrics","","",17,null],[12,"internal","","",17,null],[3,"FT_StreamRec","","",null,null],[12,"base","","",18,null],[12,"size","","",18,null],[12,"pos","","",18,null],[12,"descriptor","","",18,null],[12,"pathname","","",18,null],[12,"read","","",18,null],[12,"close","","",18,null],[12,"memory","","",18,null],[12,"cursor","","",18,null],[12,"limit","","",18,null],[3,"FT_MemoryRec","","",null,null],[12,"user","","",19,null],[12,"alloc","","",19,null],[12,"free","","",19,null],[12,"realloc","","",19,null],[3,"FT_ListRec","","",null,null],[12,"head","","",20,null],[12,"tail","","",20,null],[3,"FT_ListNodeRec","","",null,null],[12,"prev","","",21,null],[12,"next","","",21,null],[12,"data","","",21,null],[3,"FT_Size_RequestRec","","",null,null],[12,"size_request_type","","",22,null],[12,"width","","",22,null],[12,"height","","",22,null],[12,"horiResolution","","",22,null],[12,"vertResolution","","",22,null],[3,"FT_GlyphRec","","",null,null],[12,"library","","",23,null],[12,"clazz","","",23,null],[12,"format","","",23,null],[12,"advance","","",23,null],[3,"FT_BitmapGlyphRec","","",null,null],[12,"root","","",24,null],[12,"left","","",24,null],[12,"top","","",24,null],[12,"bitmap","","",24,null],[3,"FT_OutlineGlyphRec","","",null,null],[12,"root","","",25,null],[12,"outline","","",25,null],[5,"FT_HAS_HORIZONTAL","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_VERTICAL","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_KERNING","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_SCALABLE","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_SFNT","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_FIXED_WIDTH","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_FIXED_SIZES","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_GLYPH_NAMES","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_MULTIPLE_MASTERS","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_CID_KEYED","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_TRICKY","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_COLOR","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_Get_Sfnt_Table","","",null,null],[5,"FT_Init_FreeType","","",null,null],[5,"FT_Done_FreeType","","",null,null],[5,"FT_New_Library","","",null,null],[5,"FT_Done_Library","","",null,null],[5,"FT_Reference_Library","","",null,null],[5,"FT_Add_Default_Modules","","",null,null],[5,"FT_New_Face","","",null,null],[5,"FT_New_Memory_Face","","",null,null],[5,"FT_Open_Face","","",null,null],[5,"FT_Attach_File","","",null,null],[5,"FT_Attach_Stream","","",null,null],[5,"FT_Reference_Face","","",null,null],[5,"FT_Done_Face","","",null,null],[5,"FT_Select_Size","","",null,null],[5,"FT_Request_Size","","",null,null],[5,"FT_Set_Char_Size","","",null,null],[5,"FT_Set_Pixel_Sizes","","",null,null],[5,"FT_Load_Glyph","","",null,null],[5,"FT_Load_Char","","",null,null],[5,"FT_Set_Transform","","",null,null],[5,"FT_Render_Glyph","","",null,null],[5,"FT_Get_Kerning","","",null,null],[5,"FT_Get_Track_Kerning","","",null,null],[5,"FT_Get_Glyph_Name","","",null,null],[5,"FT_Get_Postscript_Name","","",null,null],[5,"FT_Select_CharMap","","",null,null],[5,"FT_Set_Charmap","","",null,null],[5,"FT_Get_Charmap_Index","","",null,null],[5,"FT_Get_Char_Index","","",null,null],[5,"FT_Get_First_Char","","",null,null],[5,"FT_Get_Next_Char","","",null,null],[5,"FT_Get_Name_Index","","",null,null],[5,"FT_Get_SubGlyph_Info","","",null,null],[5,"FT_Get_FSType_Flags","","",null,null],[5,"FT_Get_Glyph","","",null,null],[5,"FT_Glyph_Copy","","",null,null],[5,"FT_Glyph_Transform","","",null,null],[5,"FT_Glyph_Get_CBox","","",null,null],[5,"FT_Glyph_To_Bitmap","","",null,null],[5,"FT_Done_Glyph","","",null,null],[5,"FT_MulDiv","","",null,null],[5,"FT_MulFix","","",null,null],[5,"FT_DivFix","","",null,null],[5,"FT_RoundFix","","",null,null],[5,"FT_CeilFix","","",null,null],[5,"FT_FloorFix","","",null,null],[6,"FT_Byte","","",null,null],[6,"FT_Bytes","","",null,null],[6,"FT_Char","","",null,null],[6,"FT_Int","","",null,null],[6,"FT_UInt","","",null,null],[6,"FT_Int16","","",null,null],[6,"FT_UInt16","","",null,null],[6,"FT_Int32","","",null,null],[6,"FT_UInt32","","",null,null],[6,"FT_Int64","","",null,null],[6,"FT_UInt64","","",null,null],[6,"FT_Short","","",null,null],[6,"FT_UShort","","",null,null],[6,"FT_Long","","",null,null],[6,"FT_ULong","","",null,null],[6,"FT_Bool","","",null,null],[6,"FT_Offset","","",null,null],[6,"FT_PtrDist","","",null,null],[6,"FT_String","","",null,null],[6,"FT_Tag","","",null,null],[6,"FT_Error","","",null,null],[6,"FT_Fixed","","",null,null],[6,"FT_Pointer","","",null,null],[6,"FT_Pos","","",null,null],[6,"FT_FWord","","",null,null],[6,"FT_UFWord","","",null,null],[6,"FT_F2Dot14","","",null,null],[6,"FT_F26Dot6","","",null,null],[6,"FT_Generic_Finalizer","","",null,null],[6,"FT_StreamDesc","","",null,null],[6,"FT_Stream_IoFunc","","",null,null],[6,"FT_Stream_CloseFunc","","",null,null],[6,"FT_Alloc_Func","","",null,null],[6,"FT_Free_Func","","",null,null],[6,"FT_Realloc_Func","","",null,null],[6,"enum_FT_Sfnt_Tag_","","",null,null],[6,"FT_Sfnt_Tag","","",null,null],[6,"FT_Pixel_Mode","","",null,null],[6,"FT_Glyph_Format","","",null,null],[6,"FT_Render_Mode","","",null,null],[6,"FT_Encoding","","",null,null],[6,"FT_Size_Request_Type","","",null,null],[6,"FT_Kerning_Mode","","",null,null],[6,"FT_Glyph_BBox_Mode","","",null,null],[6,"FT_Library","","",null,null],[6,"FT_Face","","",null,null],[6,"FT_Size","","",null,null],[6,"FT_GlyphSlot","","",null,null],[6,"FT_CharMap","","",null,null],[6,"FT_Module","","",null,null],[6,"FT_Driver","","",null,null],[6,"FT_Renderer","","",null,null],[6,"FT_Size_Internal","","",null,null],[6,"FT_SubGlyph","","",null,null],[6,"FT_Slot_Internal","","",null,null],[6,"FT_Size_Request","","",null,null],[6,"FT_Face_Internal","","",null,null],[6,"FT_Stream","","",null,null],[6,"FT_Memory","","",null,null],[6,"FT_ListNode","","",null,null],[6,"FT_Glyph","","",null,null],[6,"FT_BitmapGlyph","","",null,null],[6,"FT_OutlineGlyph","","",null,null],[6,"TT_OS2_Internal","","",null,null],[6,"FT_LibraryRec","","",null,null],[6,"FT_ModuleRec","","",null,null],[6,"FT_DriverRec","","",null,null],[6,"FT_RendererRec","","",null,null],[6,"FT_Size_InternalRec","","",null,null],[6,"FT_SubGlyphRec","","",null,null],[6,"FT_Slot_InternalRec","","",null,null],[6,"FT_Face_InternalRec","","",null,null],[17,"ft_sfnt_head","","",null,null],[17,"ft_sfnt_maxp","","",null,null],[17,"ft_sfnt_os2","","",null,null],[17,"ft_sfnt_hhea","","",null,null],[17,"ft_sfnt_vhea","","",null,null],[17,"ft_sfnt_post","","",null,null],[17,"ft_sfnt_pclt","","",null,null],[17,"ft_sfnt_max","","",null,null],[17,"FT_PIXEL_MODE_NONE","","",null,null],[17,"FT_PIXEL_MODE_MONO","","",null,null],[17,"FT_PIXEL_MODE_GRAY","","",null,null],[17,"FT_PIXEL_MODE_GRAY2","","",null,null],[17,"FT_PIXEL_MODE_GRAY4","","",null,null],[17,"FT_PIXEL_MODE_LCD","","",null,null],[17,"FT_PIXEL_MODE_LCD_V","","",null,null],[17,"FT_PIXEL_MODE_BGRA","","",null,null],[17,"FT_PIXEL_MODE_MAX","","",null,null],[17,"FT_GLYPH_FORMAT_NONE","","",null,null],[17,"FT_GLYPH_FORMAT_COMPOSITE","","",null,null],[17,"FT_GLYPH_FORMAT_BITMAP","","",null,null],[17,"FT_GLYPH_FORMAT_OUTLINE","","",null,null],[17,"FT_GLYPH_FORMAT_PLOTTER","","",null,null],[17,"FT_RENDER_MODE_NORMAL","","",null,null],[17,"FT_RENDER_MODE_LIGHT","","",null,null],[17,"FT_RENDER_MODE_MONO","","",null,null],[17,"FT_RENDER_MODE_LCD","","",null,null],[17,"FT_RENDER_MODE_LCD_V","","",null,null],[17,"FT_RENDER_MODE_MAX","","",null,null],[17,"FT_ENCODING_NONE","","",null,null],[17,"FT_ENCODING_MS_SYMBOL","","",null,null],[17,"FT_ENCODING_UNICODE","","",null,null],[17,"FT_ENCODING_SJIS","","",null,null],[17,"FT_ENCODING_GB2312","","",null,null],[17,"FT_ENCODING_BIG5","","",null,null],[17,"FT_ENCODING_WANSUNG","","",null,null],[17,"FT_ENCODING_JOHAB","","",null,null],[17,"FT_ENCODING_MS_SJIS","","",null,null],[17,"FT_ENCODING_MS_GB2312","","",null,null],[17,"FT_ENCODING_MS_BIG5","","",null,null],[17,"FT_ENCODING_MS_WANSUNG","","",null,null],[17,"FT_ENCODING_MS_JOHAB","","",null,null],[17,"FT_ENCODING_ADOBE_STANDARD","","",null,null],[17,"FT_ENCODING_ADOBE_EXPERT","","",null,null],[17,"FT_ENCODING_ADOBE_CUSTOM","","",null,null],[17,"FT_ENCODING_ADOBE_LATIN_1","","",null,null],[17,"FT_ENCODING_OLD_LATIN_2","","",null,null],[17,"FT_ENCODING_APPLE_ROMAN","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_NOMINAL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_REAL_DIM","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_BBOX","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_CELL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_SCALES","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_MAX","","",null,null],[17,"FT_KERNING_DEFAULT","","",null,null],[17,"FT_KERNING_UNFITTED","","",null,null],[17,"FT_KERNING_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_SUBPIXELS","","",null,null],[17,"FT_GLYPH_BBOX_GRIDFIT","","",null,null],[17,"FT_GLYPH_BBOX_TRUNCATE","","",null,null],[17,"FT_GLYPH_BBOX_PIXELS","","",null,null],[17,"FT_FACE_FLAG_SCALABLE","","",null,null],[17,"FT_FACE_FLAG_FIXED_SIZES","","",null,null],[17,"FT_FACE_FLAG_FIXED_WIDTH","","",null,null],[17,"FT_FACE_FLAG_SFNT","","",null,null],[17,"FT_FACE_FLAG_HORIZONTAL","","",null,null],[17,"FT_FACE_FLAG_VERTICAL","","",null,null],[17,"FT_FACE_FLAG_KERNING","","",null,null],[17,"FT_FACE_FLAG_FAST_GLYPHS","","",null,null],[17,"FT_FACE_FLAG_MULTIPLE_MASTERS","","",null,null],[17,"FT_FACE_FLAG_GLYPH_NAMES","","",null,null],[17,"FT_FACE_FLAG_EXTERNAL_STREAM","","",null,null],[17,"FT_FACE_FLAG_HINTER","","",null,null],[17,"FT_FACE_FLAG_CID_KEYED","","",null,null],[17,"FT_FACE_FLAG_TRICKY","","",null,null],[17,"FT_FACE_FLAG_COLOR","","",null,null],[17,"FT_STYLE_FLAG_ITALIC","","",null,null],[17,"FT_STYLE_FLAG_BOLD","","",null,null],[17,"FT_OPEN_MEMORY","","",null,null],[17,"FT_OPEN_STREAM","","",null,null],[17,"FT_OPEN_PATHNAME","","",null,null],[17,"FT_OPEN_DRIVER","","",null,null],[17,"FT_OPEN_PARAMS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES","","",null,null],[17,"FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID","","",null,null],[17,"FT_SUBGLYPH_FLAG_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_XY_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_2X2","","",null,null],[17,"FT_SUBGLYPH_FLAG_USE_MY_METRICS","","",null,null],[17,"FT_LOAD_DEFAULT","","",null,null],[17,"FT_LOAD_NO_SCALE","","",null,null],[17,"FT_LOAD_NO_HINTING","","",null,null],[17,"FT_LOAD_RENDER","","",null,null],[17,"FT_LOAD_NO_BITMAP","","",null,null],[17,"FT_LOAD_VERTICAL_LAYOUT","","",null,null],[17,"FT_LOAD_FORCE_AUTOHINT","","",null,null],[17,"FT_LOAD_CROP_BITMAP","","",null,null],[17,"FT_LOAD_PEDANTIC","","",null,null],[17,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","","",null,null],[17,"FT_LOAD_NO_RECURSE","","",null,null],[17,"FT_LOAD_IGNORE_TRANSFORM","","",null,null],[17,"FT_LOAD_MONOCHROME","","",null,null],[17,"FT_LOAD_LINEAR_DESIGN","","",null,null],[17,"FT_LOAD_NO_AUTOHINT","","",null,null],[17,"FT_LOAD_COLOR","","",null,null],[17,"FT_LOAD_TARGET_NORMAL","","",null,null],[17,"FT_LOAD_TARGET_LIGHT","","",null,null],[17,"FT_LOAD_TARGET_MONO","","",null,null],[17,"FT_LOAD_TARGET_LCD","","",null,null],[17,"FT_LOAD_TARGET_LCD_V","","",null,null],[17,"FT_FSTYPE_INSTALLABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING","","",null,null],[17,"FT_FSTYPE_EDITABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_NO_SUBSETTING","","",null,null],[17,"FT_FSTYPE_BITMAP_EMBEDDING_ONLY","","",null,null],[17,"FT_Err_Ok","","",null,null],[17,"FT_Err_Cannot_Open_Resource","","",null,null],[17,"FT_Err_Unknown_File_Format","","",null,null],[17,"FT_Err_Invalid_File_Format","","",null,null],[17,"FT_Err_Invalid_Version","","",null,null],[17,"FT_Err_Lower_Module_Version","","",null,null],[17,"FT_Err_Invalid_Argument","","",null,null],[17,"FT_Err_Unimplemented_Feature","","",null,null],[17,"FT_Err_Invalid_Table","","",null,null],[17,"FT_Err_Invalid_Offset","","",null,null],[17,"FT_Err_Array_Too_Large","","",null,null],[17,"FT_Err_Missing_Module","","",null,null],[17,"FT_Err_Missing_Property","","",null,null],[17,"FT_Err_Invalid_Glyph_Index","","",null,null],[17,"FT_Err_Invalid_Character_Code","","",null,null],[17,"FT_Err_Invalid_Glyph_Format","","",null,null],[17,"FT_Err_Cannot_Render_Glyph","","",null,null],[17,"FT_Err_Invalid_Outline","","",null,null],[17,"FT_Err_Invalid_Composite","","",null,null],[17,"FT_Err_Too_Many_Hints","","",null,null],[17,"FT_Err_Invalid_Pixel_Size","","",null,null],[17,"FT_Err_Invalid_Handle","","",null,null],[17,"FT_Err_Invalid_Library_Handle","","",null,null],[17,"FT_Err_Invalid_Driver_Handle","","",null,null],[17,"FT_Err_Invalid_Face_Handle","","",null,null],[17,"FT_Err_Invalid_Size_Handle","","",null,null],[17,"FT_Err_Invalid_Slot_Handle","","",null,null],[17,"FT_Err_Invalid_CharMap_Handle","","",null,null],[17,"FT_Err_Invalid_Cache_Handle","","",null,null],[17,"FT_Err_Invalid_Stream_Handle","","",null,null],[17,"FT_Err_Too_Many_Drivers","","",null,null],[17,"FT_Err_Too_Many_Extensions","","",null,null],[17,"FT_Err_Out_Of_Memory","","",null,null],[17,"FT_Err_Unlisted_Object","","",null,null],[17,"FT_Err_Cannot_Open_Stream","","",null,null],[17,"FT_Err_Invalid_Stream_Seek","","",null,null],[17,"FT_Err_Invalid_Stream_Skip","","",null,null],[17,"FT_Err_Invalid_Stream_Read","","",null,null],[17,"FT_Err_Invalid_Stream_Operation","","",null,null],[17,"FT_Err_Invalid_Frame_Operation","","",null,null],[17,"FT_Err_Nested_Frame_Access","","",null,null],[17,"FT_Err_Invalid_Frame_Read","","",null,null],[17,"FT_Err_Raster_Uninitialized","","",null,null],[17,"FT_Err_Raster_Corrupted","","",null,null],[17,"FT_Err_Raster_Overflow","","",null,null],[17,"FT_Err_Raster_Negative_Height","","",null,null],[17,"FT_Err_Too_Many_Caches","","",null,null],[17,"FT_Err_Invalid_Opcode","","",null,null],[17,"FT_Err_Too_Few_Arguments","","",null,null],[17,"FT_Err_Stack_Overflow","","",null,null],[17,"FT_Err_Code_Overflow","","",null,null],[17,"FT_Err_Bad_Argument","","",null,null],[17,"FT_Err_Divide_By_Zero","","",null,null],[17,"FT_Err_Invalid_Reference","","",null,null],[17,"FT_Err_Debug_OpCode","","",null,null],[17,"FT_Err_ENDF_In_Exec_Stream","","",null,null],[17,"FT_Err_Nested_DEFS","","",null,null],[17,"FT_Err_Invalid_CodeRange","","",null,null],[17,"FT_Err_Execution_Too_Long","","",null,null],[17,"FT_Err_Too_Many_Function_Defs","","",null,null],[17,"FT_Err_Too_Many_Instruction_Defs","","",null,null],[17,"FT_Err_Table_Missing","","",null,null],[17,"FT_Err_Horiz_Header_Missing","","",null,null],[17,"FT_Err_Locations_Missing","","",null,null],[17,"FT_Err_Name_Table_Missing","","",null,null],[17,"FT_Err_CMap_Table_Missing","","",null,null],[17,"FT_Err_Hmtx_Table_Missing","","",null,null],[17,"FT_Err_Post_Table_Missing","","",null,null],[17,"FT_Err_Invalid_Horiz_Metrics","","",null,null],[17,"FT_Err_Invalid_CharMap_Format","","",null,null],[17,"FT_Err_Invalid_PPem","","",null,null],[17,"FT_Err_Invalid_Vert_Metrics","","",null,null],[17,"FT_Err_Could_Not_Find_Context","","",null,null],[17,"FT_Err_Invalid_Post_Table_Format","","",null,null],[17,"FT_Err_Invalid_Post_Table","","",null,null],[17,"FT_Err_Syntax_Error","","",null,null],[17,"FT_Err_Stack_Underflow","","",null,null],[17,"FT_Err_Ignore","","",null,null],[17,"FT_Err_No_Unicode_Glyph_Name","","",null,null],[17,"FT_Err_Missing_Startfont_Field","","",null,null],[17,"FT_Err_Missing_Font_Field","","",null,null],[17,"FT_Err_Missing_Size_Field","","",null,null],[17,"FT_Err_Missing_Fontboundingbox_Field","","",null,null],[17,"FT_Err_Missing_Chars_Field","","",null,null],[17,"FT_Err_Missing_Startchar_Field","","",null,null],[17,"FT_Err_Missing_Encoding_Field","","",null,null],[17,"FT_Err_Missing_Bbx_Field","","",null,null],[17,"FT_Err_Bbx_Too_Big","","",null,null],[17,"FT_Err_Corrupted_Font_Header","","",null,null],[17,"FT_Err_Corrupted_Font_Glyphs","","",null,null],[17,"FT_Err_Max","","",null,null],[8,"FTErrorMethods","","",null,null],[10,"succeeded","","",26,{"inputs":[{"name":"fterrormethods"}],"output":{"name":"bool"}}],[11,"succeeded","","",27,{"inputs":[{"name":"ft_error"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"ft_vector"}],"output":{"name":"ft_vector"}}],[11,"clone","","",1,{"inputs":[{"name":"ft_bbox"}],"output":{"name":"ft_bbox"}}],[11,"clone","","",2,{"inputs":[{"name":"ft_matrix"}],"output":{"name":"ft_matrix"}}],[11,"clone","","",3,{"inputs":[{"name":"ft_unitvector"}],"output":{"name":"ft_unitvector"}}],[11,"clone","","",7,{"inputs":[{"name":"ft_size_metrics"}],"output":{"name":"ft_size_metrics"}}],[11,"clone","","",9,{"inputs":[{"name":"ft_glyph_metrics"}],"output":{"name":"ft_glyph_metrics"}}],[11,"clone","","",10,{"inputs":[{"name":"ft_parameter"}],"output":{"name":"ft_parameter"}}],[11,"clone","","",12,{"inputs":[{"name":"ft_bitmap_size"}],"output":{"name":"ft_bitmap_size"}}],[11,"clone","","",13,{"inputs":[{"name":"tt_os2"}],"output":{"name":"tt_os2"}}],[11,"clone","","",14,{"inputs":[{"name":"ft_charmaprec"}],"output":{"name":"ft_charmaprec"}}],[11,"clone","","",20,{"inputs":[{"name":"ft_listrec"}],"output":{"name":"ft_listrec"}}],[11,"clone","","",22,{"inputs":[{"name":"ft_size_requestrec"}],"output":{"name":"ft_size_requestrec"}}]],"paths":[[3,"FT_Vector"],[3,"FT_BBox"],[3,"FT_Matrix"],[3,"FT_UnitVector"],[3,"FT_Bitmap"],[3,"FT_Data"],[3,"FT_Generic"],[3,"FT_Size_Metrics"],[3,"FT_Outline"],[3,"FT_Glyph_Metrics"],[3,"FT_Parameter"],[3,"FT_Open_Args"],[3,"FT_Bitmap_Size"],[3,"TT_OS2"],[3,"FT_CharMapRec"],[3,"FT_FaceRec"],[3,"FT_GlyphSlotRec"],[3,"FT_SizeRec"],[3,"FT_StreamRec"],[3,"FT_MemoryRec"],[3,"FT_ListRec"],[3,"FT_ListNodeRec"],[3,"FT_Size_RequestRec"],[3,"FT_GlyphRec"],[3,"FT_BitmapGlyphRec"],[3,"FT_OutlineGlyphRec"],[8,"FTErrorMethods"],[6,"FT_Error"]]};
searchIndex["libz_sys"] = {"doc":"","items":[[3,"gz_header","libz_sys","",null,null],[12,"text","","",0,null],[12,"time","","",0,null],[12,"xflags","","",0,null],[12,"os","","",0,null],[12,"extra","","",0,null],[12,"extra_len","","",0,null],[12,"extra_max","","",0,null],[12,"name","","",0,null],[12,"name_max","","",0,null],[12,"comment","","",0,null],[12,"comm_max","","",0,null],[12,"hcrc","","",0,null],[12,"done","","",0,null],[3,"z_stream","","",null,null],[12,"next_in","","",1,null],[12,"avail_in","","",1,null],[12,"total_in","","",1,null],[12,"next_out","","",1,null],[12,"avail_out","","",1,null],[12,"total_out","","",1,null],[12,"msg","","",1,null],[12,"state","","",1,null],[12,"zalloc","","",1,null],[12,"zfree","","",1,null],[12,"opaque","","",1,null],[12,"data_type","","",1,null],[12,"adler","","",1,null],[12,"reserved","","",1,null],[4,"gzFile_s","","",null,null],[4,"internal_state","","",null,null],[5,"adler32","","",null,null],[5,"adler32_combine","","",null,null],[5,"compress","","",null,null],[5,"compress2","","",null,null],[5,"compressBound","","",null,null],[5,"crc32","","",null,null],[5,"crc32_combine","","",null,null],[5,"deflate","","",null,null],[5,"deflateBound","","",null,null],[5,"deflateCopy","","",null,null],[5,"deflateEnd","","",null,null],[5,"deflateInit_","","",null,null],[5,"deflateInit2_","","",null,null],[5,"deflateParams","","",null,null],[5,"deflatePrime","","",null,null],[5,"deflateReset","","",null,null],[5,"deflateSetDictionary","","",null,null],[5,"deflateSetHeader","","",null,null],[5,"deflateTune","","",null,null],[5,"gzdirect","","",null,null],[5,"gzdopen","","",null,null],[5,"gzclearerr","","",null,null],[5,"gzclose","","",null,null],[5,"gzeof","","",null,null],[5,"gzerror","","",null,null],[5,"gzflush","","",null,null],[5,"gzgetc","","",null,null],[5,"gzgets","","",null,null],[5,"gzopen","","",null,null],[5,"gzputc","","",null,null],[5,"gzputs","","",null,null],[5,"gzread","","",null,null],[5,"gzrewind","","",null,null],[5,"gzseek","","",null,null],[5,"gzsetparams","","",null,null],[5,"gztell","","",null,null],[5,"gzungetc","","",null,null],[5,"gzwrite","","",null,null],[5,"inflate","","",null,null],[5,"inflateBack","","",null,null],[5,"inflateBackEnd","","",null,null],[5,"inflateBackInit_","","",null,null],[5,"inflateCopy","","",null,null],[5,"inflateEnd","","",null,null],[5,"inflateGetHeader","","",null,null],[5,"inflateInit_","","",null,null],[5,"inflateInit2_","","",null,null],[5,"inflateMark","","",null,null],[5,"inflatePrime","","",null,null],[5,"inflateReset","","",null,null],[5,"inflateReset2","","",null,null],[5,"inflateSetDictionary","","",null,null],[5,"inflateSync","","",null,null],[5,"uncompress","","",null,null],[5,"zlibCompileFlags","","",null,null],[5,"zlibVersion","","",null,null],[6,"alloc_func","","",null,null],[6,"Bytef","","",null,null],[6,"free_func","","",null,null],[6,"gzFile","","",null,null],[6,"in_func","","",null,null],[6,"out_func","","",null,null],[6,"uInt","","",null,null],[6,"uLong","","",null,null],[6,"uLongf","","",null,null],[6,"voidp","","",null,null],[6,"voidpc","","",null,null],[6,"voidpf","","",null,null],[6,"z_off_t","","",null,null],[6,"gz_headerp","","",null,null],[6,"z_streamp","","",null,null],[17,"Z_NO_FLUSH","","",null,null],[17,"Z_PARTIAL_FLUSH","","",null,null],[17,"Z_SYNC_FLUSH","","",null,null],[17,"Z_FULL_FLUSH","","",null,null],[17,"Z_FINISH","","",null,null],[17,"Z_BLOCK","","",null,null],[17,"Z_TREES","","",null,null],[17,"Z_OK","","",null,null],[17,"Z_STREAM_END","","",null,null],[17,"Z_NEED_DICT","","",null,null],[17,"Z_ERRNO","","",null,null],[17,"Z_STREAM_ERROR","","",null,null],[17,"Z_DATA_ERROR","","",null,null],[17,"Z_MEM_ERROR","","",null,null],[17,"Z_BUF_ERROR","","",null,null],[17,"Z_VERSION_ERROR","","",null,null],[17,"Z_NO_COMPRESSION","","",null,null],[17,"Z_BEST_SPEED","","",null,null],[17,"Z_BEST_COMPRESSION","","",null,null],[17,"Z_DEFAULT_COMPRESSION","","",null,null],[17,"Z_FILTERED","","",null,null],[17,"Z_HUFFMAN_ONLY","","",null,null],[17,"Z_RLE","","",null,null],[17,"Z_FIXED","","",null,null],[17,"Z_DEFAULT_STRATEGY","","",null,null],[17,"Z_BINARY","","",null,null],[17,"Z_TEXT","","",null,null],[17,"Z_ASCII","","",null,null],[17,"Z_UNKNOWN","","",null,null],[17,"Z_DEFLATED","","",null,null]],"paths":[[3,"gz_header"],[3,"z_stream"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"stat64","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",50,null],[12,"uc_link","","",50,null],[12,"uc_stack","","",50,null],[12,"uc_mcontext","","",50,null],[12,"uc_sigmask","","",50,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",51,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",51,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",51,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"hash","core::num","",52,null],[11,"default","","",52,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::dec2flt","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num","",54,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"clone","","",55,{"inputs":[{"name":"tryfrominterror"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",55,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",56,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",57,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",57,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",58,null],[11,"get","","Dereferences the content.",58,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",58,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",59,null],[11,"clone","","",59,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",60,null],[11,"eq","","",60,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",60,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",60,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",61,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",61,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",62,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",62,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",63,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",63,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",64,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",64,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",65,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",65,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",65,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"fmt","","",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"hash","core::cmp","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",67,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",67,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",68,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",68,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",69,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",70,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",73,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",74,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",70,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",70,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",70,null],[11,"swap","","Stores a value into the bool, returning the old value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",71,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",71,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",71,null],[11,"swap","","Stores a value into the isize, returning the old value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `isize` if the current value is the same as the `current` value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",71,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",72,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",72,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",72,null],[11,"swap","","Stores a value into the usize, returning the old value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",72,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",73,null],[11,"load","","Loads a value from the pointer.",73,null],[11,"store","","Stores a value into the pointer.",73,null],[11,"swap","","Stores a value into the pointer, returning the old value.",73,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",73,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",73,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",73,null],[11,"fmt","","",72,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",75,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",75,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",75,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",75,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",75,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"clone","","",75,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",75,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",75,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",77,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",77,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",77,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",77,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",77,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",77,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",77,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"clone","","",77,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",77,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"deref","","",78,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",78,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",78,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",78,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",79,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",79,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",79,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",79,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",80,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",80,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",80,null],[11,"default","","",80,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",81,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"next","","",81,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"fmt","","",82,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"next","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"count","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",82,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",82,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",83,null],[11,"next","","",83,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"fmt","","",84,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",84,null],[11,"next","","",84,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"fmt","core::iter::range","",85,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",63,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",62,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",65,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter::range","",85,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","","",85,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","","",85,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","core::ops","",62,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"fmt","core::iter::sources","",86,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",86,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next_back","","",86,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"fmt","","",87,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",87,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",87,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",87,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",88,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",88,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next_back","","",88,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",88,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"fmt","core::iter","",89,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",89,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"fmt","","",90,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",90,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next_back","","",90,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"fmt","","",91,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",91,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"fmt","","",92,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",92,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",92,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",92,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",92,{"inputs":[{"name":"chain"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",92,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"fmt","","",93,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",93,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"fmt","","",94,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",94,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"fmt","","",95,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",95,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"fmt","","",96,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",96,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"fmt","","",97,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"nth","","",97,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"fmt","","",98,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",98,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",98,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",98,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",99,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",99,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"clone","","",100,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"fmt","","",100,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",100,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"fmt","","",101,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",101,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",102,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",102,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"clone","","",103,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"fmt","","",103,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",103,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"clone","","",104,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"fmt","","",104,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",104,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"fmt","","",105,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",105,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"fmt","","",106,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",106,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"hash","core::option","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"fmt","","",107,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",108,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",108,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",109,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",109,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",51,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",110,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",111,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",112,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",112,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",112,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",112,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",112,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",112,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",112,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",112,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",112,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",112,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",112,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",112,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",112,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",112,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",112,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",112,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",112,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",112,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",112,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"fmt","","",113,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",113,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",114,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",114,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",115,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",115,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",112,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",116,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",116,null],[11,"next","","",116,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"count","","",116,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",116,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",116,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",116,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",117,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",117,null],[11,"next","","",117,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"count","","",117,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",117,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",117,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",117,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",118,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",118,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next_back","","",118,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",119,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",119,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"fmt","","",120,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",120,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next","","",121,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next","","",122,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next","","",123,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"fmt","","",124,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"count","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",124,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"fmt","","",125,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"count","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",125,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"fmt","","",126,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"count","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",126,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",127,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"fmt","","",128,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",128,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",129,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",129,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",130,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",130,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",131,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"haystack","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",131,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"eq","core::str","",132,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",132,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",133,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",133,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",133,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",134,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"next_back","","",134,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",134,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"fmt","","",135,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",135,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next_back","","",135,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",135,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"fmt","","",136,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"count","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",136,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",136,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"fmt","","",137,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",137,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",137,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",138,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",138,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",137,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",138,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",139,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",139,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"fmt","","",140,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",140,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",140,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",139,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",140,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",141,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",141,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",141,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"fmt","","",142,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",142,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",142,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"fmt","","",143,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",143,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",143,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"fmt","","",144,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",144,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",144,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",143,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",144,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",145,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",145,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",145,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"fmt","","",146,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",146,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",145,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",147,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",147,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"next_back","","",147,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"fmt","","",148,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"next","","",148,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"next_back","","",148,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"fmt","","",149,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","core::hash::sip","",150,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",150,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",150,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",150,null],[11,"finish","","",150,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",150,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",151,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_hasher","","",151,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",151,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",152,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",153,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",153,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",154,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",154,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",155,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",155,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",155,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",156,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",156,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",156,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",157,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",157,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",157,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"partial_cmp","core::fmt","",158,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"option"}}],[11,"eq","","",158,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"cmp","","",158,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"hash","","",158,null],[11,"default","","",158,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",158,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",159,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",159,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",160,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",160,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",160,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",160,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",160,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",160,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",160,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",160,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",160,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",60,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",75,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",161,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",161,null],[11,"clone","libc","",48,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",49,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",162,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",163,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",50,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",164,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",37,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",38,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",39,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",40,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",41,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",42,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",43,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",44,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",45,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",27,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",28,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",29,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",30,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",31,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",165,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",166,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",167,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",168,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",32,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",33,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",34,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",35,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",169,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",36,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",170,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",18,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",19,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",171,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",23,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",24,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",25,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",26,{"inputs":[{"name":"lconv"}],"output":{"name":"lconv"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["draw_state"] = {"doc":"Graphics state blocks for gfx-rs","items":[[0,"preset","draw_state","State presets",null,null],[0,"blend","draw_state::preset","Blending preset modes.",null,null],[17,"ADD","draw_state::preset::blend","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the\nvalue of the destination multiplied by the inverse of the source alpha channel. Has the\nusual transparency effect: mixes the two colors using a fraction of each one specified by\nthe alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color\nusing the source color as weight. Has an invert effect with the constant color\nas base and source color controlling displacement from the base color.\nA white source color and a white value results in plain invert.\nThe output alpha is same as destination alpha.",null,null],[0,"depth","draw_state::preset","Depth preset modes.",null,null],[17,"LESS_EQUAL_TEST","draw_state::preset::depth","&quot;&lt;=&quot; comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","&quot;&lt;=&quot; comparison with writable depth",null,null],[0,"state","draw_state","Fixed-function hardware state.",null,null],[3,"Offset","draw_state::state","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",1,null],[12,"cull_face","","Which face should be culled.",1,null],[12,"method","","How to rasterize this primitive.",1,null],[12,"offset","","Any polygon offset to apply.",1,null],[12,"samples","","Multi-sampling mode.",1,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",2,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",2,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",2,null],[12,"op_fail","","What operation to do if the stencil test fails.",2,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",2,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",2,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",3,null],[12,"back","","",3,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",4,null],[12,"write","","Specify whether to write to the depth buffer or not.",4,null],[3,"BlendChannel","","",null,null],[12,"equation","","",5,null],[12,"source","","",5,null],[12,"destination","","",5,null],[3,"Blend","","",null,null],[12,"color","","",6,null],[12,"alpha","","",6,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",7,null],[12,"blend","","Optional blending.",7,null],[3,"RefValues","","The complete set of the rasterizer reference values.\nSwitching these doesn&#39;t roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",8,null],[12,"blend","","Constant blend color.",8,null],[4,"FrontFace","","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",9,null],[13,"CounterClockwise","","Counter-clockwise winding order.",9,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",10,null],[13,"Front","","",10,null],[13,"Back","","",10,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",11,null],[13,"Line","","Rasterize as a line with the given width.",11,null],[13,"Fill","","Rasterize as a face.",11,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",12,null],[13,"Less","","`x &lt; y`",12,null],[13,"LessEqual","","`x &lt;= y`",12,null],[13,"Equal","","`x == y`",12,null],[13,"GreaterEqual","","`x &gt;= y`",12,null],[13,"Greater","","`x &gt; y`",12,null],[13,"NotEqual","","`x != y`",12,null],[13,"Always","","`true`",12,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",13,null],[13,"Zero","","Set the value in the stencil buffer to zero.",13,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",13,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",13,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",13,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",13,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",13,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",13,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",14,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",14,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",14,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",14,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",14,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",15,null],[13,"SourceAlpha","","",15,null],[13,"DestColor","","",15,null],[13,"DestAlpha","","",15,null],[13,"ConstColor","","",15,null],[13,"ConstAlpha","","",15,null],[4,"Factor","","",null,null],[13,"Zero","","",16,null],[13,"One","","",16,null],[13,"SourceAlphaSaturated","","",16,null],[13,"ZeroPlus","","",16,null],[13,"OneMinus","","",16,null],[6,"LineWidth","","Width of a line.\nCould be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor\nCould be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where\nthe unit is the minimal difference in the depth value\ndictated by the precision of the depth buffer.",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[11,"fmt","","",9,{"inputs":[{"name":"frontface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"frontface"}],"output":{"name":"frontface"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"eq","","",9,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"offset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"offset"}],"output":{"name":"offset"}}],[11,"cmp","","",10,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"option"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"cullface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"cullface"}],"output":{"name":"cullface"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"rastermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"rastermethod"}],"output":{"name":"rastermethod"}}],[11,"cmp","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"multisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"multisample"}],"output":{"name":"multisample"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"rasterizer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"rasterizer"}],"output":{"name":"rasterizer"}}],[11,"new_fill","","Create a new filling rasterizer.",1,{"inputs":[],"output":{"name":"rasterizer"}}],[11,"with_cull_back","","Add back face culling.",1,{"inputs":[{"name":"rasterizer"}],"output":{"name":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",1,{"inputs":[{"name":"rasterizer"},{"name":"f32"},{"name":"offsetunits"}],"output":{"name":"rasterizer"}}],[11,"cmp","","",12,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"comparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"comparison"}],"output":{"name":"comparison"}}],[11,"cmp","","",13,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"stencilop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"stencilop"}],"output":{"name":"stencilop"}}],[11,"cmp","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"stencilside"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"stencilside"}}],[11,"cmp","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"stencil"}}],[11,"new","","Create a new stencil state with a given function.",3,null],[11,"cmp","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"depth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"depth"}}],[11,"cmp","","",14,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"option"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"equation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"equation"}],"output":{"name":"equation"}}],[11,"cmp","","",15,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"blendvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"blendvalue"}],"output":{"name":"blendvalue"}}],[11,"cmp","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"factor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"factor"}],"output":{"name":"factor"}}],[11,"fmt","","",5,{"inputs":[{"name":"blendchannel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"eq","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"blend"}}],[11,"new","","Create a new blend state with a given equation.",6,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"fmt","","",6,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"cmp","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"eq","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"colormask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",18,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitor_assign","","Adds the set of flags.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitxor_assign","","Toggles the set of flags.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"sub_assign","","Disables all flags enabled in the set.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"color"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"color"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"refvalues"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"refvalues"}],"output":{"name":"refvalues"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"refvalues"}}],[0,"target","draw_state","Render target specification.",null,null],[3,"Rect","draw_state::target","A screen space rectangle",null,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"w","","",19,null],[12,"h","","",19,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[6,"ColorValue","","A color with floating-point components.",null,null],[17,"MIRROR_X","","",null,null],[17,"MIRROR_Y","","",null,null],[11,"partial_cmp","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"hash","","",20,null],[11,"cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"eq","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"mirror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitor_assign","","Adds the set of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitxor_assign","","Toggles the set of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"sub_assign","","Disables all flags enabled in the set.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}]],"paths":[[3,"Offset"],[3,"Rasterizer"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[4,"FrontFace"],[4,"CullFace"],[4,"RasterMethod"],[4,"Comparison"],[4,"StencilOp"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"MultiSample"],[3,"ColorMask"],[3,"Rect"],[3,"Mirror"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[0,"isize","bitflags::__core","The pointer-sized signed integer type.",null,null],[17,"MIN","bitflags::__core::isize","",null,null],[17,"MAX","","",null,null],[0,"i8","bitflags::__core","The 8-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i8","",null,null],[17,"MAX","","",null,null],[0,"i16","bitflags::__core","The 16-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i16","",null,null],[17,"MAX","","",null,null],[0,"i32","bitflags::__core","The 32-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i32","",null,null],[17,"MAX","","",null,null],[0,"i64","bitflags::__core","The 64-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i64","",null,null],[17,"MAX","","",null,null],[0,"usize","bitflags::__core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","bitflags::__core::usize","",null,null],[17,"MAX","","",null,null],[0,"u8","bitflags::__core","The 8-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u8","",null,null],[17,"MAX","","",null,null],[0,"u16","bitflags::__core","The 16-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u16","",null,null],[17,"MAX","","",null,null],[0,"u32","bitflags::__core","The 32-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u32","",null,null],[17,"MAX","","",null,null],[0,"u64","bitflags::__core","The 64-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u64","",null,null],[17,"MAX","","",null,null],[0,"f32","bitflags::__core","Operations and constants for 32-bits floats (`f32` type)",null,null],[17,"RADIX","bitflags::__core::f32","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MAX","","Largest finite f32 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"f64","bitflags::__core","Operations and constants for 64-bits floats (`f64` type)",null,null],[17,"RADIX","bitflags::__core::f64","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"num","bitflags::__core","Numeric traits and functions for the built-in numeric types.",null,null],[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::dec2flt","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num","",2,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"clone","","",3,{"inputs":[{"name":"tryfrominterror"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",3,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",6,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",8,null],[11,"eq","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",9,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",9,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",10,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",10,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",11,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",11,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",12,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",12,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",13,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",13,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"fmt","","",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",15,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",15,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","bitflags::__core","",16,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",16,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",16,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",22,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",19,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",19,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",19,null],[11,"swap","","Stores a value into the isize, returning the old value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `isize` if the current value is the same as the `current` value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",19,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",20,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",20,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",20,null],[11,"swap","","Stores a value into the usize, returning the old value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",20,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",21,null],[11,"load","","Loads a value from the pointer.",21,null],[11,"store","","Stores a value into the pointer.",21,null],[11,"swap","","Stores a value into the pointer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",21,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",21,null],[11,"fmt","","",20,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",23,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",23,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",23,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",23,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",23,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"clone","","",23,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",23,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",25,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",25,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",25,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",25,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",25,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",25,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",25,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"clone","","",25,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",25,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"deref","","",26,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",26,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",26,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",26,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",27,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",27,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",27,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",28,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",28,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",28,null],[11,"default","","",28,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",29,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"next","","",29,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"fmt","","",30,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"next","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"count","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",30,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",31,null],[11,"next","","",31,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"fmt","","",32,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",32,null],[11,"next","","",32,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"fmt","core::iter::range","",33,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter::range","",33,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next","","",33,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next","","",33,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next","core::ops","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"fmt","core::iter::sources","",34,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",34,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"next_back","","",34,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"fmt","","",35,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",35,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"next_back","","",35,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",35,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",35,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",36,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",36,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next_back","","",36,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",36,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"fmt","core::iter","",37,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",37,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"fmt","","",38,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",38,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"fmt","","",39,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",39,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",40,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",40,{"inputs":[{"name":"chain"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"fmt","","",41,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",41,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next_back","","",41,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"fmt","","",42,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",42,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"fmt","","",43,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",43,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"fmt","","",44,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",44,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next_back","","",44,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"fmt","","",45,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",45,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"nth","","",45,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",45,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",45,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"fmt","","",46,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",46,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",46,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",46,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",46,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",46,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",46,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",47,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",47,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",48,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"fmt","","",48,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",48,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"fmt","","",49,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",49,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",49,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",49,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",49,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"fmt","","",50,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",50,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",50,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"fmt","","",51,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",51,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"fmt","","",52,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",52,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"fmt","","",53,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",53,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",53,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",53,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",53,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"fmt","","",54,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",54,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"hash","core::option","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",55,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",55,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",55,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",55,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",55,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",55,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",55,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",55,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",55,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",55,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",55,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",55,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",55,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",55,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",55,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",55,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",55,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",55,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",55,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",55,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",55,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",55,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"fmt","","",56,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",57,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",58,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",58,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",55,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",59,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",60,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",61,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",61,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",61,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",61,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",61,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",61,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",61,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",61,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",61,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",61,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",61,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",61,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",61,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",61,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",61,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",61,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",61,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",61,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",61,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"fmt","","",62,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",63,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",64,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",61,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",65,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",65,null],[11,"next","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"count","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",65,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",66,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",66,null],[11,"next","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"count","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",66,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",67,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",67,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",68,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",68,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",69,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next","","",70,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next","","",71,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next","","",72,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"fmt","","",73,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",73,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"count","","",73,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",73,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",73,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",73,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"fmt","","",74,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",74,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"count","","",74,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",74,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",74,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",74,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"fmt","","",75,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",75,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"count","","",75,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",75,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",75,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",75,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",76,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"fmt","","",77,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",77,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",78,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",78,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",79,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",79,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",80,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"haystack","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",80,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"eq","core::str","",81,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",81,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",82,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",82,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",82,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",83,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",83,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"fmt","","",84,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",84,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",84,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"fmt","","",85,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"count","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",85,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",85,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"fmt","","",86,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",86,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",87,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",87,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",86,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",87,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",88,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",88,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"fmt","","",89,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",89,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",88,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",89,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",90,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",90,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"fmt","","",91,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",91,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",91,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"fmt","","",92,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",92,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",92,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"fmt","","",93,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",93,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",93,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",92,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",93,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",94,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",94,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"fmt","","",95,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",95,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",94,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",95,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",96,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",96,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"fmt","","",97,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"next","","",97,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"fmt","","",98,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","core::hash::sip","",99,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",99,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",99,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",99,null],[11,"finish","","",99,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",99,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",100,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_hasher","","",100,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",100,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",101,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",102,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",102,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",103,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",103,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",104,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",104,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",104,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",105,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",105,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",105,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",106,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",106,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",106,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"partial_cmp","core::fmt","",107,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"option"}}],[11,"eq","","",107,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"cmp","","",107,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"hash","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",107,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",108,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",108,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",109,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",109,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",109,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",109,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",109,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",109,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",109,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",109,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",109,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",109,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",109,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",109,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",109,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",109,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",109,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",8,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",23,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Wrapping","bitflags::__core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",0,null],[11,"explicit_sig_bits","bitflags::__core::num::dec2flt::rawfp","The number of bits in the singificand, *excluding* the hidden bit.",110,{"inputs":[],"output":{"name":"u8"}}],[11,"max_exp","","The maximum legal exponent in fractional representation.",110,{"inputs":[],"output":{"name":"i16"}}],[11,"min_exp","","The minimum legal exponent in fractional representation, excluding subnormals.",110,{"inputs":[],"output":{"name":"i16"}}],[11,"max_exp_int","","`MAX_EXP` for integral representation, i.e., with the shift applied.",110,{"inputs":[],"output":{"name":"i16"}}],[11,"max_encoded_exp","","`MAX_EXP` encoded (i.e., with offset bias)",110,{"inputs":[],"output":{"name":"i16"}}],[11,"min_exp_int","","`MIN_EXP` for integral representation, i.e., with the shift applied.",110,{"inputs":[],"output":{"name":"i16"}}],[11,"max_sig","","The maximum normalized singificand in integral representation.",110,{"inputs":[],"output":{"name":"u64"}}],[11,"min_sig","","The minimal normalized significand in integral representation.",110,{"inputs":[],"output":{"name":"u64"}}],[8,"Zero","bitflags::__core::num","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",111,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",112,{"inputs":[],"output":{"name":"self"}}],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",2,null],[13,"Infinite","","Positive or negative infinity",2,null],[13,"Zero","","Positive or negative zero",2,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",2,null],[13,"Normal","","A regular floating point number",2,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[0,"prelude","bitflags::__core","The libcore prelude",null,null],[0,"v1","bitflags::__core::prelude","The core prelude",null,null],[8,"Ord","bitflags::__core::prelude::v1","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",113,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",114,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",115,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",116,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",116,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",117,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",117,null],[10,"into_iter","","Creates an iterator from a value.",117,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",118,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",61,null],[13,"Err","","Contains the error value",61,null],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",119,{"inputs":[],"output":{"name":"self"}}],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",120,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",121,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",122,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",123,null],[10,"call_once","","This is called when the call operator is used.",123,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",124,null],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",125,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",125,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"SliceExt","","Extension methods for slices.",null,null],[16,"Item","","",126,null],[10,"split_at","","",126,null],[10,"iter","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"iter"}}],[10,"split","","",126,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"split"}}],[10,"splitn","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"get","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"first","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"get_unchecked","","",126,null],[10,"as_ptr","","",126,null],[10,"binary_search","","",126,null],[10,"binary_search_by","","",126,{"inputs":[{"name":"sliceext"},{"name":"f"}],"output":{"name":"result"}}],[10,"len","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"usize"}}],[11,"is_empty","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"bool"}}],[10,"get_mut","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"iter_mut","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"itermut"}}],[10,"first_mut","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first_mut","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last_mut","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last_mut","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_mut","","",126,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"splitn_mut","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"swap","","",126,null],[10,"split_at_mut","","",126,null],[10,"reverse","","",126,null],[10,"get_unchecked_mut","","",126,null],[10,"as_mut_ptr","","",126,null],[10,"contains","","",126,null],[10,"starts_with","","",126,null],[10,"ends_with","","",126,null],[10,"clone_from_slice","","",126,null],[10,"copy_from_slice","","",126,null],[10,"binary_search_by_key","","",126,{"inputs":[{"name":"sliceext"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",127,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",128,null],[10,"next","","Advances the iterator and returns the next value.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",128,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",128,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",128,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",128,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",128,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",128,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",128,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",128,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",128,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",128,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",128,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",129,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[4,"Option","","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",55,null],[13,"Some","","Some value `T`",55,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",130,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",130,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",130,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",130,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",130,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",131,null],[5,"drop","","Disposes of a value.",null,null],[0,"intrinsics","bitflags::__core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","bitflags::__core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"mem","bitflags::__core","Basic functions for dealing with memory.",null,null],[5,"forget","bitflags::__core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"nonzero","bitflags::__core","Exposes the NonZero lang item which provides optimization hints.",null,null],[8,"Zeroable","bitflags::__core::nonzero","Unsafe trait to indicate what types are usable with the NonZero struct",null,null],[3,"NonZero","","A wrapper type for raw pointers and integers that will never be\nNULL or 0 that might allow certain optimizations.",null,null],[0,"ptr","bitflags::__core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","bitflags::__core::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[0,"marker","bitflags::__core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","bitflags::__core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[3,"PhantomData","","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"ops","bitflags::__core","Overloadable operators.",null,null],[8,"Drop","bitflags::__core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",120,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",132,null],[10,"add","","The method for the `+` operator",132,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",133,null],[10,"sub","","The method for the `-` operator",133,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",134,null],[10,"mul","","The method for the `*` operator",134,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",135,null],[10,"div","","The method for the `/` operator",135,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",136,null],[10,"rem","","The method for the `%` operator",136,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",137,null],[10,"neg","","The method for the unary `-` operator",137,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",138,null],[10,"not","","The method for the unary `!` operator",138,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",139,null],[10,"bitand","","The method for the `&amp;` operator",139,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",140,null],[10,"bitor","","The method for the `|` operator",140,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",141,null],[10,"bitxor","","The method for the `^` operator",141,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",142,null],[10,"shl","","The method for the `&lt;&lt;` operator",142,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",143,null],[10,"shr","","The method for the `&gt;&gt;` operator",143,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",144,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",145,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",146,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",147,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",148,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",149,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",150,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",151,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",152,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",153,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",154,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",154,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",155,null],[3,"RangeFull","","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",10,null],[12,"end","","The upper bound of the range (exclusive).",10,null],[3,"RangeFrom","","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",11,null],[3,"RangeTo","","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",12,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",13,null],[12,"at","bitflags::__core::ops::RangeInclusive","",13,null],[13,"NonEmpty","bitflags::__core::ops","Non-empty range (iteration will yield value(s))",13,null],[12,"start","bitflags::__core::ops::RangeInclusive","",13,null],[12,"end","","",13,null],[3,"RangeToInclusive","bitflags::__core::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",14,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",156,null],[10,"deref","","The method called to dereference a value",156,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",157,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",131,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",118,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",123,null],[10,"call_once","","This is called when the call operator is used.",123,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",158,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",159,null],[10,"make_place","","Creates a fresh place from `self`.",159,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",160,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",160,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",161,null],[16,"Place","","The place that will negotiate the storage of the data.",161,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",161,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",162,{"inputs":[],"output":{"name":"self"}}],[0,"cmp","bitflags::__core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","bitflags::__core::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",125,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",125,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",15,null],[13,"Equal","","An ordering where a compared value is equal [to another].",15,null],[13,"Greater","","An ordering where a compared value is greater [than another].",15,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",113,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",130,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",130,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",130,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",130,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",130,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"clone","bitflags::__core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","bitflags::__core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",116,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",116,null],[0,"default","bitflags::__core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","bitflags::__core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",119,{"inputs":[],"output":{"name":"self"}}],[0,"convert","bitflags::__core","Traits for conversions between types.",null,null],[8,"AsRef","bitflags::__core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",129,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",121,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",122,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",115,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Err","","The type returned in the event of a conversion error.",163,null],[10,"try_into","","Performs the conversion.",163,{"inputs":[{"name":"tryinto"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Err","","The type returned in the event of a conversion error.",164,null],[10,"try_from","","Performs the conversion.",164,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"borrow","bitflags::__core","A module for working with borrowed data.",null,null],[8,"Borrow","bitflags::__core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",165,{"inputs":[{"name":"borrow"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",166,{"inputs":[{"name":"borrowmut"}],"output":{"name":"borrowed"}}],[0,"any","bitflags::__core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[8,"Any","bitflags::__core::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",16,{"inputs":[{"name":"any"}],"output":{"name":"typeid"}}],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"array","bitflags::__core","Implementations of things like `Eq` for fixed-length arrays\nup to a certain length. Eventually we should able to generalize\nto all lengths.",null,null],[8,"FixedSizeArray","bitflags::__core::array","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",167,null],[10,"as_mut_slice","","Converts the array to mutable slice",167,null],[0,"sync","bitflags::__core","Synchronization primitives",null,null],[0,"atomic","bitflags::__core::sync","Atomic types",null,null],[3,"AtomicBool","bitflags::__core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads.",null,null],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",22,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",22,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",22,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",22,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",22,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[0,"cell","bitflags::__core","Shareable mutable containers.",null,null],[3,"Cell","bitflags::__core::cell","A mutable memory location that admits only `Copy` data.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",24,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",24,null],[13,"Unused","","There are no outstanding borrows on this cell.",24,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"char","bitflags::__core","Character manipulation.",null,null],[17,"MAX","bitflags::__core::char","The highest valid code point a `char` can have.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EncodeUtf8","","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[3,"EncodeUtf16","","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[0,"panicking","bitflags::__core","Panic support for libcore",null,null],[5,"panic","bitflags::__core::panicking","",null,null],[5,"panic_fmt","","",null,null],[0,"iter","bitflags::__core","Composable external iteration.",null,null],[3,"Rev","bitflags::__core::iter","An double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",127,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",114,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[3,"Empty","","An iterator that yields nothing.",null,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",124,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",117,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",117,null],[10,"into_iter","","Creates an iterator from a value.",117,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",168,{"inputs":[{"name":"step"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",168,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",169,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",128,null],[10,"next","","Advances the iterator and returns the next value.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",128,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",128,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",128,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",128,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",128,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",128,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",128,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",128,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",128,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",128,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",128,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",128,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",128,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",128,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",128,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[0,"option","bitflags::__core","Optional values.",null,null],[4,"Option","bitflags::__core::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",55,null],[13,"Some","","Some value `T`",55,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[0,"raw","bitflags::__core","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"Slice","bitflags::__core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",59,null],[12,"len","","",59,null],[3,"TraitObject","","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",60,null],[12,"vtable","","",60,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",170,{"inputs":[{"name":"repr"}],"output":{"name":"t"}}],[0,"result","bitflags::__core","Error handling with the `Result` type.",null,null],[4,"Result","bitflags::__core::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",61,null],[13,"Err","","Contains the error value",61,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"slice","bitflags::__core","Slice management and manipulation",null,null],[8,"SliceExt","bitflags::__core::slice","Extension methods for slices.",null,null],[16,"Item","","",126,null],[10,"split_at","","",126,null],[10,"iter","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"iter"}}],[10,"split","","",126,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"split"}}],[10,"splitn","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"get","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"first","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"get_unchecked","","",126,null],[10,"as_ptr","","",126,null],[10,"binary_search","","",126,null],[10,"binary_search_by","","",126,{"inputs":[{"name":"sliceext"},{"name":"f"}],"output":{"name":"result"}}],[10,"len","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"usize"}}],[11,"is_empty","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"bool"}}],[10,"get_mut","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"iter_mut","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"itermut"}}],[10,"first_mut","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first_mut","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last_mut","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last_mut","","",126,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_mut","","",126,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"splitn_mut","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",126,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"swap","","",126,null],[10,"split_at_mut","","",126,null],[10,"reverse","","",126,null],[10,"get_unchecked_mut","","",126,null],[10,"as_mut_ptr","","",126,null],[10,"contains","","",126,null],[10,"starts_with","","",126,null],[10,"ends_with","","",126,null],[10,"clone_from_slice","","",126,null],[10,"copy_from_slice","","",126,null],[10,"binary_search_by_key","","",126,{"inputs":[{"name":"sliceext"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[0,"str","bitflags::__core","String manipulation",null,null],[0,"pattern","bitflags::__core::str","The string Pattern API.",null,null],[8,"Pattern","bitflags::__core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",171,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",171,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",171,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",171,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",171,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",76,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",76,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",76,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",172,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",172,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",172,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",172,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",173,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",173,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",173,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[8,"FromStr","bitflags::__core::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",174,null],[10,"from_str","","Parses a string `s` to return a value of this type.",174,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a\nUTF-8-like encoding).",null,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[3,"CharIndices","","Iterator for a string&#39;s characters and their byte offsets.",null,null],[3,"Bytes","","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",98,null],[12,"next","","Index of the first byte of the next `char`",98,null],[0,"hash","bitflags::__core","Generic hashing support.",null,null],[8,"Hash","bitflags::__core::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",175,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",175,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",176,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",176,null],[11,"write_u8","","Write a single `u8` into this hasher",176,null],[11,"write_u16","","Write a single `u16` into this hasher.",176,null],[11,"write_u32","","Write a single `u32` into this hasher.",176,null],[11,"write_u64","","Write a single `u64` into this hasher.",176,null],[11,"write_usize","","Write a single `usize` into this hasher.",176,null],[11,"write_i8","","Write a single `i8` into this hasher.",176,null],[11,"write_i16","","Write a single `i16` into this hasher.",176,null],[11,"write_i32","","Write a single `i32` into this hasher.",176,null],[11,"write_i64","","Write a single `i64` into this hasher.",176,null],[11,"write_isize","","Write a single `isize` into this hasher.",176,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",177,null],[10,"build_hasher","","Creates a new hasher.",177,null],[3,"BuildHasherDefault","","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[0,"fmt","bitflags::__core","Utilities for formatting and printing strings.",null,null],[4,"Alignment","bitflags::__core::fmt","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",101,null],[13,"Right","","Indication that contents should be right-aligned.",101,null],[13,"Center","","Indication that contents should be center-aligned.",101,null],[13,"Unknown","","No alignment was requested.",101,null],[6,"Result","","",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",178,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",178,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",178,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",179,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",180,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",181,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",182,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",183,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",184,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",185,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",186,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",187,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"RawFloat"],[8,"Zero"],[8,"One"],[8,"Ord"],[8,"DoubleEndedIterator"],[8,"From"],[8,"Clone"],[8,"IntoIterator"],[8,"FnMut"],[8,"Default"],[8,"Drop"],[8,"AsMut"],[8,"Into"],[8,"FnOnce"],[8,"Extend"],[8,"PartialEq"],[8,"SliceExt"],[8,"ExactSizeIterator"],[8,"Iterator"],[8,"AsRef"],[8,"PartialOrd"],[8,"Fn"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"TryInto"],[8,"TryFrom"],[8,"Borrow"],[8,"BorrowMut"],[8,"FixedSizeArray"],[8,"Step"],[8,"FromIterator"],[8,"Repr"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
initSearch(searchIndex);
