var searchIndex = {};
searchIndex['imageproc'] = {"items":[[0,"utils","imageproc","Utils for testing and debugging.",null,null],[3,"TestBuffer","imageproc::utils","Wrapper for image buffers to allow us to write an Arbitrary instance.",null,null],[5,"pixel_diff_summary","","Human readable description of some of the pixels that differ\nbetween left and right, or None if all pixels match.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"option"}}],[5,"significant_pixel_diff_summary","","Human readable description of some of the pixels that differ\nsignifcantly (according to provided function) between left\nand right, or None if all pixels match.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"pixel_diffs","","Lists pixels that differ between left and right images.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"vec"}}],[5,"describe_pixel_diffs","","Gives a summary description of a list of pixel diffs for use in error messages.",null,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[5,"load_image_or_panic","","Loads image at given path, panicking on failure.",null,{"inputs":[{"name":"path"}],"output":{"name":"dynamicimage"}}],[5,"gray_bench_image","","Gray image to use in benchmarks. This is neither noise nor\nsimilar to natural images - it&#39;s just a convenience method\nto produce an image that&#39;s not constant.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"grayimage"}}],[5,"rgb_bench_image","","RGB image to use in benchmarks. See comment on gray_bench_image.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"rgbimage"}}],[6,"GrayTestImage","","8bpp grayscale TestBuffer.",null,null],[6,"RgbTestImage","","24bpp RGB TestBuffer.",null,null],[8,"ArbitraryPixel","","Workaround for not being able to define Arbitrary instances for pixel types\ndefines in other modules.",null,null],[10,"arbitrary","","",0,{"inputs":[{"name":"arbitrarypixel"},{"name":"g"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"testbuffer"}],"output":{"name":"testbuffer"}}],[11,"arbitrary","","",1,{"inputs":[{"name":"testbuffer"},{"name":"g"}],"output":{"name":"self"}}],[11,"shrink","","",1,{"inputs":[{"name":"testbuffer"}],"output":{"name":"box"}}],[11,"fmt","","",1,{"inputs":[{"name":"testbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"arbitrary","image::color","",2,{"inputs":[{"name":"rgb"},{"name":"g"}],"output":{"name":"self"}}],[11,"arbitrary","","",3,{"inputs":[{"name":"luma"},{"name":"g"}],"output":{"name":"self"}}],[0,"affine","imageproc","Functions for affine transformations of images.",null,null],[4,"Interpolation","imageproc::affine","How to handle pixels whose pre-image lies between input pixels.",null,null],[13,"Nearest","","Choose the nearest pixel to the pre-image of the\noutput pixel.",4,null],[13,"Bilinear","","Bilinearly interpolate between the four pixels\nclosest to the pre-image of the output pixel.",4,null],[5,"affine","","Applies an affine transformation to an image, or None if the provided\ntransformation is not invertible.\nThe output image has the same dimensions as the input. Output pixels\nwhose pre-image lies outside the input image are set to black.",null,{"inputs":[{"name":"i"},{"name":"affine2"},{"name":"interpolation"}],"output":{"name":"option"}}],[5,"affine_with_default","","Applies an affine transformation to an image, or None if the provided\ntransformation is not invertible.\nThe output image has the same dimensions as the input. Output pixels\nwhose pre-image lies outside the input image are set to default.",null,{"inputs":[{"name":"i"},{"name":"affine2"},{"name":"pixel"},{"name":"interpolation"}],"output":{"name":"option"}}],[5,"rotate","","Rotate an image clockwise about provided center by theta radians.\nThe output image has the same dimensions as the input. Output pixels\nwhose pre-image lies outside the input image are black.",null,null],[5,"rotate_about_center","","Rotate an image clockwise about its center by theta radians.\nThe output image has the same dimensions as the input. Output pixels\nwhose pre-image lies outside the input image are black.",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"interpolation"}],"output":{"name":"vecbuffer"}}],[5,"rotate_with_default","","Rotate an image clockwise about provided center by theta radians.\nThe output image has the same dimensions as the input. Output pixels\nwhose pre-image lies outside the input image are set to default.",null,null],[5,"translate","","Translates the input image by t. Note that image coordinates increase from\ntop left to bottom right. Output pixels whose pre-image are not in the input\nimage are set to the boundary pixel in the input image nearest to their pre-image.",null,null],[11,"clone","","",4,{"inputs":[{"name":"interpolation"}],"output":{"name":"interpolation"}}],[11,"eq","","",4,{"inputs":[{"name":"interpolation"},{"name":"interpolation"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"interpolation"},{"name":"interpolation"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"interpolation"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"contrast","imageproc","Functions for manipulating the contrast of images.",null,null],[5,"otsu_level","imageproc::contrast","Returns the Otsu threshold level of an 8bpp image.\nThis threshold will optimally binarize an image that\ncontains two classes of pixels which have distributions\nwith equal variances. For details see:\nXu, X., et al. Pattern recognition letters 32.7 (2011)",null,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[5,"threshold","","Returns a binarized image from an input 8bpp grayscale image\nobtained by applying the given threshold.",null,{"inputs":[{"name":"i"},{"name":"u8"}],"output":{"name":"grayimage"}}],[5,"threshold_mut","","Mutates given image to form a binarized version produced by applying\nthe given threshold.",null,{"inputs":[{"name":"i"},{"name":"u8"}],"output":null}],[5,"histogram","","Returns the histogram of grayscale values in an 8bpp\ngrayscale image.",null,null],[5,"cumulative_histogram","","Returns the cumulative histogram of grayscale values in an 8bpp\ngrayscale image.",null,null],[5,"equalize_histogram_mut","","Equalises the histogram of an 8bpp grayscale image in place.\nhttps://en.wikipedia.org/wiki/Histogram_equalization",null,{"inputs":[{"name":"i"}],"output":null}],[5,"equalize_histogram","","Equalises the histogram of an 8bpp grayscale image.\nhttps://en.wikipedia.org/wiki/Histogram_equalization",null,{"inputs":[{"name":"i"}],"output":{"name":"grayimage"}}],[5,"match_histogram_mut","","Adjusts contrast of an 8bpp grayscale image in place so that its\nhistogram is as close as possible to that of the target image.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"match_histogram","","Adjusts contrast of an 8bpp grayscale image so that its\nhistogram is as close as possible to that of the target image.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"grayimage"}}],[0,"corners","imageproc","Functions for detecting corners, also known as interest points.",null,null],[3,"Corner","imageproc::corners","A location and score for a detected corner.\nThe scores need not be comparable between different\ncorner detectors.",null,null],[12,"x","","",5,null],[12,"y","","",5,null],[12,"score","","",5,null],[4,"Fast","","Variants of the [FAST](https://en.wikipedia.org/wiki/Features_from_accelerated_segment_test)\ncorner detector. These classify a point based on its intensity relative to the 16 pixels\nin the Bresenham circle of radius 3 around it. A point P with intensity I is detected as a\ncorner if all pixels in a sufficiently long contiguous section of this circle either\nall have intensity greater than I + t or all have intensity less than\nI - t, for some user-provided threshold t. The score of a corner is\nthe greatest threshold for which the given pixel still qualifies as\na corner.",null,null],[13,"Nine","","Corners require a section of length as least nine.",6,null],[13,"Twelve","","Corners require a section of length as least twelve.",6,null],[5,"corners_fast12","","Finds corners using FAST-12 features. See comment on Fast enum.",null,{"inputs":[{"name":"i"},{"name":"u8"}],"output":{"name":"vec"}}],[5,"corners_fast9","","Finds corners using FAST-9 features. See comment on Fast enum.",null,{"inputs":[{"name":"i"},{"name":"u8"}],"output":{"name":"vec"}}],[5,"fast_corner_score","","The score of a corner detected using the FAST\ndetector is the largest threshold for which this\npixel is still a corner. We input the threshold at which\nthe corner was detected as a lower bound on the search.\nNote that the corner check uses a strict inequality, so if\nthe smallest intensity difference between the center pixel\nand a corner pixel is n then the corner will have a score of n - 1.",null,{"inputs":[{"name":"i"},{"name":"u8"},{"name":"u32"},{"name":"u32"},{"name":"fast"}],"output":{"name":"u8"}}],[11,"eq","","",5,{"inputs":[{"name":"corner"},{"name":"corner"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"corner"},{"name":"corner"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"corner"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"corner"}],"output":{"name":"corner"}}],[11,"new","","",5,{"inputs":[{"name":"corner"},{"name":"u32"},{"name":"u32"},{"name":"f32"}],"output":{"name":"corner"}}],[11,"x","","",5,{"inputs":[{"name":"corner"}],"output":{"name":"u32"}}],[11,"y","","",5,{"inputs":[{"name":"corner"}],"output":{"name":"u32"}}],[11,"score","","",5,{"inputs":[{"name":"corner"}],"output":{"name":"f32"}}],[0,"definitions","imageproc","Trait definitions and type aliases.",null,null],[6,"VecBuffer","imageproc::definitions","An ImageBuffer containing Pixels of type P with storage\nVec&lt;P::Subpixel&gt;.",null,null],[8,"HasBlack","","Pixels which have a named Black value.",null,null],[10,"black","","",7,{"inputs":[{"name":"hasblack"}],"output":{"name":"self"}}],[8,"HasWhite","","Pixels which have a named White value.",null,null],[10,"white","","",8,{"inputs":[{"name":"haswhite"}],"output":{"name":"self"}}],[8,"Position","","Something with a 2d position.",null,null],[10,"x","","",9,{"inputs":[{"name":"position"}],"output":{"name":"u32"}}],[10,"y","","",9,{"inputs":[{"name":"position"}],"output":{"name":"u32"}}],[8,"Score","","Something with a score.",null,null],[10,"score","","",10,{"inputs":[{"name":"score"}],"output":{"name":"f32"}}],[8,"Clamp","","A type to which we can clamp a value of type T.\nImplementations are not required to handle NaNs gracefully.",null,null],[10,"clamp","","",11,{"inputs":[{"name":"clamp"},{"name":"t"}],"output":{"name":"self"}}],[11,"black","image::color","",3,{"inputs":[{"name":"luma"}],"output":{"name":"self"}}],[11,"white","","",3,{"inputs":[{"name":"luma"}],"output":{"name":"self"}}],[11,"black","","",3,{"inputs":[{"name":"luma"}],"output":{"name":"self"}}],[11,"white","","",3,{"inputs":[{"name":"luma"}],"output":{"name":"self"}}],[11,"black","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[11,"white","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"self"}}],[0,"drawing","imageproc","Helpers for drawing basic shapes on images.",null,null],[5,"draw_cross_mut","imageproc::drawing","Draws a colored cross on an image in place. Handles coordinates outside\nimage bounds.",null,{"inputs":[{"name":"i"},{"name":"pixel"},{"name":"i32"},{"name":"i32"}],"output":null}],[5,"draw_cross","","Draws a colored cross on an image. Handles coordinates outside image bounds.",null,{"inputs":[{"name":"i"},{"name":"pixel"},{"name":"i32"},{"name":"i32"}],"output":{"name":"vecbuffer"}}],[5,"draw_line_segment","","Draws as much of the line segment between start and end as lies inside the image bounds.",null,null],[5,"draw_line_segment_mut","","Draws as much of the line segment between start and end as lies inside the image bounds.",null,null],[5,"draw_hollow_rect","","Draws as much of the boundary of a rectangle as lies inside the image bounds.",null,{"inputs":[{"name":"i"},{"name":"rect"},{"name":"pixel"}],"output":{"name":"vecbuffer"}}],[5,"draw_hollow_rect_mut","","Draws as much of the boundary of a rectangle as lies inside the image bounds.",null,{"inputs":[{"name":"i"},{"name":"rect"},{"name":"pixel"}],"output":null}],[5,"draw_filled_rect","","Draw as much of a rectangle, including its boundary, as lies inside the image bounds.",null,{"inputs":[{"name":"i"},{"name":"rect"},{"name":"pixel"}],"output":{"name":"vecbuffer"}}],[5,"draw_filled_rect_mut","","Draw as much of a rectangle, including its boundary, as lies inside the image bounds.",null,{"inputs":[{"name":"i"},{"name":"rect"},{"name":"pixel"}],"output":null}],[0,"filter","imageproc","Functions for filtering images.",null,null],[3,"Kernel","imageproc::filter","A 2D kernel, used to filter images via convolution.",null,null],[5,"box_filter","","Convolves an 8bpp grayscale image with a kernel of width (2 * x_radius + 1)\nand height (2 * y_radius + 1) whose entries are equal and\nsum to one. i.e. each output pixel is the unweighted mean of\na rectangular region surrounding its corresponding input pixel.\nWe handle locations where the kernel would extend past the image&#39;s\nboundary by treating the image as if its boundary pixels were\nrepeated indefinitely.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecbuffer"}}],[5,"separable_filter","","Returns 2d correlation of view with the outer product of the 1d\nkernels h_filter and v_filter.",null,null],[5,"separable_filter_equal","","Returns 2d correlation of an image with the outer product of the 1d\nkernel filter with itself.",null,null],[5,"filter3x3","","Returns 2d correlation of an image with a 3x3 kernel. Intermediate calculations are\nperformed at type K, and the results clamped to subpixel type S. Pads by continuity.",null,null],[5,"horizontal_filter","","Returns horizontal correlations between an image and a 1d kernel.\nPads by continuity. Intermediate calculations are performed at\ntype K.",null,null],[5,"vertical_filter","","Returns horizontal correlations between an image and a 1d kernel.\nPads by continuity.",null,null],[11,"new","","",12,null],[11,"filter","","Returns 2d correlation of an image. Intermediate calculations are performed\nat type K, and the results converted to pixel Q via f. Pads by continuity.",12,{"inputs":[{"name":"kernel"},{"name":"i"},{"name":"f"}],"output":{"name":"vecbuffer"}}],[0,"gradients","imageproc","Functions for computing gradients of image intensities.",null,null],[5,"horizontal_sobel","imageproc::gradients","Convolves with the horizontal Sobel kernel to detect horizontal\nedges in an image.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[5,"vertical_sobel","","Convolves with the vertical Sobel kernel to detect vertical\nedges in an image.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[5,"horizontal_prewitt","","Convolves with the horizontal Prewitt kernel to detect horizontal\nedges in an image.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[5,"vertical_prewitt","","Convolves with the vertical Prewitt kernel to detect vertical\nedges in an image.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[5,"sobel_gradients","","Returns the magnitudes of gradients in an image using Sobel filters.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[5,"prewitt_gradients","","Returns the magnitudes of gradients in an image using Prewitt filters.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[0,"haar","imageproc","Functions for creating and evaluating [Haar-like features](https://en.wikipedia.org/wiki/Haar-like_features).",null,null],[3,"HaarFilter","imageproc::haar","A Haar filter whose value on an integral image is the weighted sum\nof the values of the integral image at the given points.",null,null],[4,"Sign","","Whether the top left region in a Haar filter is counted\nwith positive or negative sign.",null,null],[13,"Positive","","",13,null],[13,"Negative","","",13,null],[5,"enumerate_haar_filters","","Returns a vector of all valid Haar filters for an image with given width and height.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"vec"}}],[5,"draw_haar_filter","","Draws the given Haar filter on an image, drawing pixels\nwith a positive sign white and those with a negative sign black.",null,{"inputs":[{"name":"i"},{"name":"haarfilter"}],"output":{"name":"vecbuffer"}}],[5,"draw_haar_filter_mut","","Draws the given Haar filter on an image in place, drawing pixels\nwith a positive sign white and those with a negative sign black.",null,{"inputs":[{"name":"i"},{"name":"haarfilter"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","","",14,{"inputs":[{"name":"haarfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"haarfilter"},{"name":"haarfilter"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"haarfilter"},{"name":"haarfilter"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"haarfilter"}],"output":{"name":"haarfilter"}}],[11,"evaluate","","Evaluates the Haar filter on an integral image.",14,{"inputs":[{"name":"haarfilter"},{"name":"i"}],"output":{"name":"i32"}}],[11,"two_region_horizontal","","Returns the following feature (with signs reversed if Sign == Sign::Negative).\n&lt;pre&gt;\n    A   B   C\n      +   -\n    D   E   F\n&lt;/pre&gt;\nA = (top, left), B.x = left + dx1, C.x = B.x + dx2, and D.y = A.y + dy.",14,{"inputs":[{"name":"haarfilter"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"sign"}],"output":{"name":"haarfilter"}}],[11,"two_region_vertical","","Returns the following feature (with signs reversed if Sign == Sign::Negative).\n&lt;pre&gt;\n    A   B\n      +\n    C   D\n      -\n    E   F\n&lt;/pre&gt;\nA = (top, left), B.x = left + dx, C.y = top + dy1, and E.y = C.y + dy2.",14,{"inputs":[{"name":"haarfilter"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"sign"}],"output":{"name":"haarfilter"}}],[11,"three_region_horizontal","","Returns the following feature (with signs reversed if Sign == Sign::Negative).\n&lt;pre&gt;\n    A   B   C   D\n      +   -   +\n    E   F   G   H\n&lt;/pre&gt;\nA = (top, left), B.x = left + dx1, C.x = B.x + dx2, D.x = C.x + dx3, and E.y = top + dy.",14,{"inputs":[{"name":"haarfilter"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"sign"}],"output":{"name":"haarfilter"}}],[11,"three_region_vertical","","Returns the following feature (with signs reversed if Sign == Sign::Negative).\n&lt;pre&gt;\n    A   B\n      +\n    C   D\n      -\n    E   F\n      +\n    G   H\n&lt;/pre&gt;\nA = (top, left), B.x = left + dx, C.y = top + dy1, E.y = C.y + dy2, and G.y = E.y + dy3.",14,{"inputs":[{"name":"haarfilter"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"sign"}],"output":{"name":"haarfilter"}}],[11,"four_region","","Returns the following feature (with signs reversed if Sign == Sign::Negative).\n&lt;pre&gt;\n    A   B   C\n      +   -\n    D   E   F\n      -   +\n    G   H   I\n&lt;/pre&gt;\nA = (top, left), B.x = left + dx1, C.x = B.x + dx2, D.y = top + dy1, and G.y = D.y + dy2.",14,{"inputs":[{"name":"haarfilter"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"sign"}],"output":{"name":"haarfilter"}}],[11,"mul","","",14,{"inputs":[{"name":"haarfilter"},{"name":"i8"}],"output":{"name":"haarfilter"}}],[0,"hog","imageproc","[HoG features](https://en.wikipedia.org/wiki/Histogram_of_oriented_gradients)\nand helpers for visualizing them.",null,null],[3,"HogOptions","imageproc::hog","Parameters for HoG descriptors.",null,null],[12,"orientations","","Number of gradient orientation bins.",15,null],[12,"signed","","Whether gradients in opposite directions are treated as equal.",15,null],[12,"cell_side","","Width and height of cell in pixels.",15,null],[12,"block_side","","Width and height of block in cells.",15,null],[12,"block_stride","","Offset of the start of one block from the next in cells.",15,null],[3,"HogSpec","","HoG options plus values calculated from these options and the desired\nimage dimensions. Validation must occur when instances of this struct\nare created - functions receiving a spec will assume that it is valid.",null,null],[5,"hog","","Computes the HoG descriptor of an image, or None if the provided\noptions are incompatible with the image size.",null,{"inputs":[{"name":"i"},{"name":"hogoptions"}],"output":{"name":"option"}}],[5,"cell_histograms","","Computes orientation histograms for each cell of an image. Assumes that\nthe provided dimensions are valid.",null,{"inputs":[{"name":"i"},{"name":"hogspec"}],"output":{"name":"array3d"}}],[5,"render_hist_grid","","Visualises an array of orientation histograms.\nThe dimensions of the provided Array3d are orientation bucket,\nhorizontal location of the cell, then vertical location of the cell.\nNote that we ignore block-level aggregation or normalisation here.\nEach rendered star has side length star_side, so the image will have\nwidth grid.lengths[1] * star_side and height grid.lengths[2] * star_side.",null,{"inputs":[{"name":"u32"},{"name":"view3d"},{"name":"bool"}],"output":{"name":"vecbuffer"}}],[11,"eq","","",15,{"inputs":[{"name":"hogoptions"},{"name":"hogoptions"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"hogoptions"},{"name":"hogoptions"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"hogoptions"}],"output":{"name":"hogoptions"}}],[11,"fmt","","",15,{"inputs":[{"name":"hogoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",15,{"inputs":[{"name":"hogoptions"},{"name":"usize"},{"name":"bool"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"hogoptions"}}],[11,"eq","","",16,{"inputs":[{"name":"hogspec"},{"name":"hogspec"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"hogspec"},{"name":"hogspec"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"hogspec"}],"output":{"name":"hogspec"}}],[11,"fmt","","",16,{"inputs":[{"name":"hogspec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_options","","Returns None if image dimensions aren&#39;t compatible with the provided options.",16,{"inputs":[{"name":"hogspec"},{"name":"u32"},{"name":"u32"},{"name":"hogoptions"}],"output":{"name":"option"}}],[11,"descriptor_length","","The total size in floats of the HoG descriptor with these dimensions.",16,{"inputs":[{"name":"hogspec"}],"output":{"name":"usize"}}],[0,"stats","imageproc","Statistical properties of images.",null,null],[5,"root_mean_squared_error","imageproc::stats","Returns the square root of the mean of the squares of differences\nbetween all subpixels in left and right. All channels are considered\nequally. If you do not want this (e.g. if using RGBA) then change\nimage formats first.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"f64"}}],[5,"peak_signal_to_noise_ratio","","Returns the peak signal to noise ratio for a clean image and its noisy\naproximation. All channels are considered equally. If you do not want this\n(e.g. if using RGBA) then change image formats first.\nhttps://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"f64"}}],[0,"integralimage","imageproc","Functions for computing [integral images](https://en.wikipedia.org/wiki/Summed_area_table)\nand running sums of rows and columns.",null,null],[5,"integral_image","imageproc::integralimage","Computes the integral image of an 8bpp grayscale image.\nI is the integral image of an image F if I(x, y) is the\nsum of F(x&#39;, y&#39;) for x&#39; &lt;= x, y&#39; &lt;= y. i.e. each pixel\nin the integral image contains the sum of the pixel intensities\nof all input pixels that are above it and to its left.\nThe integral image has the helpful property that it lets us\ncompute the sum of pixel intensities from any rectangular region\nin the input image in constant time.\nSpecifically, given a rectangle in F with clockwise corners\nA, B, C, D, with A at the upper left, the total pixel intensity\nof this rectangle is I(C) - I(B) - I(D) + I(A).",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[5,"padded_integral_image","","Computes the integral image of the result of padding image with\nits boundary pixels for x_padding columns on either side and y_padding\nrows at its top and bottom. Returned image has width image.width() + 2 * x_padding\nand height image.height() + 2 * y_padding.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecbuffer"}}],[5,"row_running_sum","","Computes the running sum of one row of image, padded\nat the beginning and end. The padding is by continuity.\nTakes a reference to buffer so that this can be reused\nfor all rows in an image.",null,null],[5,"column_running_sum","","Computes the running sum of one column of image, padded\nat the top and bottom. The padding is by continuity.\nTakes a reference to buffer so that this can be reused\nfor all columns in an image.",null,null],[0,"localbinarypatterns","imageproc","Functions for computing [local binary patterns](https://en.wikipedia.org/wiki/Local_binary_patterns).",null,null],[5,"local_binary_pattern","imageproc::localbinarypatterns","Computes the basic local binary pattern of a pixel, or None\nif it&#39;s too close to the image boundary.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[5,"min_shift","","Returns the least value of all rotations of a byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"count_transitions","","Number of bit transitions in a byte, counting the last and final bits as adjacent.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u32"}}],[7,"UNIFORM_REPRESENTATIVE_2","","Maps uniform bytes (i.e. those with at most two bit transitions) to their\nleast circular shifts, and non-uniform bytes to 10101010 (an arbitrarily chosen\nnon-uniform representative).",null,null],[7,"MIN_SHIFT","","Lookup table for the least circular shift of a byte.",null,null],[0,"map","imageproc","Functions for mapping over pixels, colors or subpixels of images.",null,null],[5,"map_subpixels","imageproc::map","Applies f to each subpixel of the input image.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"vecbuffer"}}],[5,"map_colors","","Applies f to the color of each pixel in the input image.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"vecbuffer"}}],[5,"map_pixels","","Applies f to each pixel in the input image.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"vecbuffer"}}],[5,"red_channel","","Create a grayscale image by extracting a channel of an RGB image.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[5,"as_red_channel","","Create an RGB image by embedding a grayscale image in a single channel.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[5,"green_channel","","Create a grayscale image by extracting a channel of an RGB image.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[5,"as_green_channel","","Create an RGB image by embedding a grayscale image in a single channel.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[5,"blue_channel","","Create a grayscale image by extracting a channel of an RGB image.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[5,"as_blue_channel","","Create an RGB image by embedding a grayscale image in a single channel.",null,{"inputs":[{"name":"i"}],"output":{"name":"vecbuffer"}}],[6,"ChannelMap","","Alias to make uses of WithChannel less syntactically noisy.",null,null],[8,"WithChannel","","The type obtained by replacing the channel type of a given Pixel type.",null,null],[16,"Pixel","","",17,null],[0,"math","imageproc","Assorted mathematical helper functions.",null,null],[11,"new","nalgebra::structs::mat","",18,{"inputs":[{"name":"mat2"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"at_fast","","",18,null],[11,"set_fast","","",18,null],[11,"clone","nalgebra::structs::dmat","",19,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"eq","","",19,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized matrix.",19,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",19,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is much faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",19,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is much faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",19,null],[11,"from_row_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator.\nThe source contains the matrix data in row-major order.\nNote that `from_col_iter` is much faster than `from_row_iter` since a `DMat` stores its data\nin column-major order.",19,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmat"}}],[11,"from_col_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator.\nThe source contains the matrix data in column-major order.\nNote that `from_col_iter` is much faster than `from_row_iter` since a `DMat` stores its data\nin column-major order.",19,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmat"}}],[11,"from_fn","","Builds a matrix using an initialization function.",19,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat"}}],[11,"into_vec","","Transforms this matrix into an array. This consumes the matrix and is O(1).\nThe returned vector contains the matrix data in column-major order.",19,{"inputs":[{"name":"dmat"}],"output":{"name":"vec"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",19,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",19,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"reset","","",19,null],[11,"new_random","","Builds a matrix filled with random values.",19,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",19,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"nrows","","The number of row on the matrix.",19,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",19,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",19,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",19,null],[11,"new_identity","","Builds an identity matrix.",19,{"inputs":[{"name":"dmat"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",19,null],[11,"unsafe_at","","Just like `at` without bounds checking.",19,null],[11,"swap","","",19,null],[11,"shape","","",19,null],[11,"index","","",19,null],[11,"index_mut","","",19,null],[11,"mul","","",19,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",19,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",19,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"mul","nalgebra::structs::dvec","",20,{"inputs":[{"name":"dvec"},{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"inv","nalgebra::structs::dmat","",19,{"inputs":[{"name":"dmat"}],"output":{"name":"option"}}],[11,"inv_mut","","",19,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"transpose","","",19,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"transpose_mut","","",19,null],[11,"mean","","",19,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"cov","","",19,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"ncols","","",19,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"set_col","","",19,null],[11,"col","","",19,{"inputs":[{"name":"dmat"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"col_slice","","",19,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"nrows","","",19,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"set_row","","",19,null],[11,"row","","",19,{"inputs":[{"name":"dmat"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"row_slice","","",19,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_diag","","",19,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":{"name":"dmat"}}],[11,"diag","","",19,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"set_diag","","",19,null],[11,"approx_epsilon","","",19,{"inputs":[{"name":"dmat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",19,{"inputs":[{"name":"dmat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",19,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",19,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"dmat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",19,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"div","","",19,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",19,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",19,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"add","","",19,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",19,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"sub","","",19,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",19,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"eq","","",21,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",21,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"bool"}}],[11,"reset","","",21,null],[11,"new_random","","Builds a matrix filled with random values.",21,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",21,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"nrows","","The number of row on the matrix.",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",21,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",21,null],[11,"new_identity","","Builds an identity matrix.",21,{"inputs":[{"name":"dmat1"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",21,null],[11,"unsafe_at","","Just like `at` without bounds checking.",21,null],[11,"swap","","",21,null],[11,"shape","","",21,null],[11,"index","","",21,null],[11,"index_mut","","",21,null],[11,"mul","","",21,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"mul","","",21,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"mul","","",21,{"inputs":[{"name":"dmat1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"mul","nalgebra::structs::dvec","",22,{"inputs":[{"name":"dvec1"},{"name":"dmat1"}],"output":{"name":"dvec1"}}],[11,"inv","nalgebra::structs::dmat","",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"option"}}],[11,"inv_mut","","",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"bool"}}],[11,"transpose","","",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"transpose_mut","","",21,null],[11,"mean","","",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"dvec1"}}],[11,"cov","","",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"ncols","","",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"set_col","","",21,null],[11,"col","","",21,{"inputs":[{"name":"dmat1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"col_slice","","",21,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"nrows","","",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"set_row","","",21,null],[11,"row","","",21,{"inputs":[{"name":"dmat1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"row_slice","","",21,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"from_diag","","",21,{"inputs":[{"name":"dmat1"},{"name":"dvec1"}],"output":{"name":"dmat1"}}],[11,"diag","","",21,{"inputs":[{"name":"dmat1"}],"output":{"name":"dvec1"}}],[11,"set_diag","","",21,null],[11,"approx_epsilon","","",21,{"inputs":[{"name":"dmat1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",21,{"inputs":[{"name":"dmat1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",21,{"inputs":[{"name":"dmat1"},{"name":"dmat1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",21,{"inputs":[{"name":"dmat1"},{"name":"dmat1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"dmat1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",21,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"div","","",21,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"add","","",21,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"add","","",21,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"add","","",21,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"sub","","",21,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"sub","","",21,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"sub","","",21,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",21,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",21,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",21,null],[11,"from_fn","","Builds a matrix using an initialization function.",21,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat1"}}],[11,"new_uninitialized","","",21,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"eq","","",23,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",23,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"bool"}}],[11,"reset","","",23,null],[11,"new_random","","Builds a matrix filled with random values.",23,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",23,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"nrows","","The number of row on the matrix.",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",23,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",23,null],[11,"new_identity","","Builds an identity matrix.",23,{"inputs":[{"name":"dmat2"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",23,null],[11,"unsafe_at","","Just like `at` without bounds checking.",23,null],[11,"swap","","",23,null],[11,"shape","","",23,null],[11,"index","","",23,null],[11,"index_mut","","",23,null],[11,"mul","","",23,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"mul","","",23,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"mul","","",23,{"inputs":[{"name":"dmat2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"mul","nalgebra::structs::dvec","",24,{"inputs":[{"name":"dvec2"},{"name":"dmat2"}],"output":{"name":"dvec2"}}],[11,"inv","nalgebra::structs::dmat","",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"option"}}],[11,"inv_mut","","",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"bool"}}],[11,"transpose","","",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"transpose_mut","","",23,null],[11,"mean","","",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"dvec2"}}],[11,"cov","","",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"ncols","","",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"set_col","","",23,null],[11,"col","","",23,{"inputs":[{"name":"dmat2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"col_slice","","",23,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"nrows","","",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"set_row","","",23,null],[11,"row","","",23,{"inputs":[{"name":"dmat2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"row_slice","","",23,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"from_diag","","",23,{"inputs":[{"name":"dmat2"},{"name":"dvec2"}],"output":{"name":"dmat2"}}],[11,"diag","","",23,{"inputs":[{"name":"dmat2"}],"output":{"name":"dvec2"}}],[11,"set_diag","","",23,null],[11,"approx_epsilon","","",23,{"inputs":[{"name":"dmat2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",23,{"inputs":[{"name":"dmat2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",23,{"inputs":[{"name":"dmat2"},{"name":"dmat2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",23,{"inputs":[{"name":"dmat2"},{"name":"dmat2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"dmat2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",23,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"div","","",23,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"add","","",23,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"add","","",23,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"add","","",23,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"sub","","",23,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"sub","","",23,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"sub","","",23,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",23,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",23,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",23,null],[11,"from_fn","","Builds a matrix using an initialization function.",23,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat2"}}],[11,"new_uninitialized","","",23,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"eq","","",25,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",25,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"bool"}}],[11,"reset","","",25,null],[11,"new_random","","Builds a matrix filled with random values.",25,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",25,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"nrows","","The number of row on the matrix.",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",25,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",25,null],[11,"new_identity","","Builds an identity matrix.",25,{"inputs":[{"name":"dmat3"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",25,null],[11,"unsafe_at","","Just like `at` without bounds checking.",25,null],[11,"swap","","",25,null],[11,"shape","","",25,null],[11,"index","","",25,null],[11,"index_mut","","",25,null],[11,"mul","","",25,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"mul","","",25,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"mul","","",25,{"inputs":[{"name":"dmat3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"mul","nalgebra::structs::dvec","",26,{"inputs":[{"name":"dvec3"},{"name":"dmat3"}],"output":{"name":"dvec3"}}],[11,"inv","nalgebra::structs::dmat","",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"option"}}],[11,"inv_mut","","",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"bool"}}],[11,"transpose","","",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"transpose_mut","","",25,null],[11,"mean","","",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"dvec3"}}],[11,"cov","","",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"ncols","","",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"set_col","","",25,null],[11,"col","","",25,{"inputs":[{"name":"dmat3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"col_slice","","",25,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"nrows","","",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"set_row","","",25,null],[11,"row","","",25,{"inputs":[{"name":"dmat3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"row_slice","","",25,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"from_diag","","",25,{"inputs":[{"name":"dmat3"},{"name":"dvec3"}],"output":{"name":"dmat3"}}],[11,"diag","","",25,{"inputs":[{"name":"dmat3"}],"output":{"name":"dvec3"}}],[11,"set_diag","","",25,null],[11,"approx_epsilon","","",25,{"inputs":[{"name":"dmat3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",25,{"inputs":[{"name":"dmat3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",25,{"inputs":[{"name":"dmat3"},{"name":"dmat3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",25,{"inputs":[{"name":"dmat3"},{"name":"dmat3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"dmat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",25,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"div","","",25,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"add","","",25,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"add","","",25,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"add","","",25,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"sub","","",25,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"sub","","",25,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"sub","","",25,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",25,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",25,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",25,null],[11,"from_fn","","Builds a matrix using an initialization function.",25,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat3"}}],[11,"new_uninitialized","","",25,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"eq","","",27,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",27,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"bool"}}],[11,"reset","","",27,null],[11,"new_random","","Builds a matrix filled with random values.",27,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",27,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"nrows","","The number of row on the matrix.",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",27,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",27,null],[11,"new_identity","","Builds an identity matrix.",27,{"inputs":[{"name":"dmat4"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",27,null],[11,"unsafe_at","","Just like `at` without bounds checking.",27,null],[11,"swap","","",27,null],[11,"shape","","",27,null],[11,"index","","",27,null],[11,"index_mut","","",27,null],[11,"mul","","",27,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"mul","","",27,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"mul","","",27,{"inputs":[{"name":"dmat4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"mul","nalgebra::structs::dvec","",28,{"inputs":[{"name":"dvec4"},{"name":"dmat4"}],"output":{"name":"dvec4"}}],[11,"inv","nalgebra::structs::dmat","",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"option"}}],[11,"inv_mut","","",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"bool"}}],[11,"transpose","","",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"transpose_mut","","",27,null],[11,"mean","","",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"dvec4"}}],[11,"cov","","",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"ncols","","",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"set_col","","",27,null],[11,"col","","",27,{"inputs":[{"name":"dmat4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"col_slice","","",27,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"nrows","","",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"set_row","","",27,null],[11,"row","","",27,{"inputs":[{"name":"dmat4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"row_slice","","",27,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"from_diag","","",27,{"inputs":[{"name":"dmat4"},{"name":"dvec4"}],"output":{"name":"dmat4"}}],[11,"diag","","",27,{"inputs":[{"name":"dmat4"}],"output":{"name":"dvec4"}}],[11,"set_diag","","",27,null],[11,"approx_epsilon","","",27,{"inputs":[{"name":"dmat4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",27,{"inputs":[{"name":"dmat4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",27,{"inputs":[{"name":"dmat4"},{"name":"dmat4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",27,{"inputs":[{"name":"dmat4"},{"name":"dmat4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"dmat4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",27,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"div","","",27,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"add","","",27,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"add","","",27,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"add","","",27,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"sub","","",27,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"sub","","",27,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"sub","","",27,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",27,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",27,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",27,null],[11,"from_fn","","Builds a matrix using an initialization function.",27,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat4"}}],[11,"new_uninitialized","","",27,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"eq","","",29,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",29,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"bool"}}],[11,"reset","","",29,null],[11,"new_random","","Builds a matrix filled with random values.",29,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",29,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"nrows","","The number of row on the matrix.",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",29,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",29,null],[11,"new_identity","","Builds an identity matrix.",29,{"inputs":[{"name":"dmat5"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",29,null],[11,"unsafe_at","","Just like `at` without bounds checking.",29,null],[11,"swap","","",29,null],[11,"shape","","",29,null],[11,"index","","",29,null],[11,"index_mut","","",29,null],[11,"mul","","",29,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"mul","","",29,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"mul","","",29,{"inputs":[{"name":"dmat5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"mul","nalgebra::structs::dvec","",30,{"inputs":[{"name":"dvec5"},{"name":"dmat5"}],"output":{"name":"dvec5"}}],[11,"inv","nalgebra::structs::dmat","",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"option"}}],[11,"inv_mut","","",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"bool"}}],[11,"transpose","","",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"transpose_mut","","",29,null],[11,"mean","","",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"dvec5"}}],[11,"cov","","",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"ncols","","",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"set_col","","",29,null],[11,"col","","",29,{"inputs":[{"name":"dmat5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"col_slice","","",29,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"nrows","","",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"set_row","","",29,null],[11,"row","","",29,{"inputs":[{"name":"dmat5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"row_slice","","",29,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"from_diag","","",29,{"inputs":[{"name":"dmat5"},{"name":"dvec5"}],"output":{"name":"dmat5"}}],[11,"diag","","",29,{"inputs":[{"name":"dmat5"}],"output":{"name":"dvec5"}}],[11,"set_diag","","",29,null],[11,"approx_epsilon","","",29,{"inputs":[{"name":"dmat5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",29,{"inputs":[{"name":"dmat5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",29,{"inputs":[{"name":"dmat5"},{"name":"dmat5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",29,{"inputs":[{"name":"dmat5"},{"name":"dmat5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"dmat5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",29,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"div","","",29,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"add","","",29,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"add","","",29,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"add","","",29,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"sub","","",29,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"sub","","",29,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"sub","","",29,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",29,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",29,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",29,null],[11,"from_fn","","Builds a matrix using an initialization function.",29,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat5"}}],[11,"new_uninitialized","","",29,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"eq","","",31,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",31,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"bool"}}],[11,"reset","","",31,null],[11,"new_random","","Builds a matrix filled with random values.",31,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",31,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"nrows","","The number of row on the matrix.",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",31,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",31,null],[11,"new_identity","","Builds an identity matrix.",31,{"inputs":[{"name":"dmat6"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",31,null],[11,"unsafe_at","","Just like `at` without bounds checking.",31,null],[11,"swap","","",31,null],[11,"shape","","",31,null],[11,"index","","",31,null],[11,"index_mut","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"mul","","",31,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"mul","","",31,{"inputs":[{"name":"dmat6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"mul","nalgebra::structs::dvec","",32,{"inputs":[{"name":"dvec6"},{"name":"dmat6"}],"output":{"name":"dvec6"}}],[11,"inv","nalgebra::structs::dmat","",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"option"}}],[11,"inv_mut","","",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"bool"}}],[11,"transpose","","",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"transpose_mut","","",31,null],[11,"mean","","",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"dvec6"}}],[11,"cov","","",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"ncols","","",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"set_col","","",31,null],[11,"col","","",31,{"inputs":[{"name":"dmat6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"col_slice","","",31,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"nrows","","",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"set_row","","",31,null],[11,"row","","",31,{"inputs":[{"name":"dmat6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"row_slice","","",31,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"from_diag","","",31,{"inputs":[{"name":"dmat6"},{"name":"dvec6"}],"output":{"name":"dmat6"}}],[11,"diag","","",31,{"inputs":[{"name":"dmat6"}],"output":{"name":"dvec6"}}],[11,"set_diag","","",31,null],[11,"approx_epsilon","","",31,{"inputs":[{"name":"dmat6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",31,{"inputs":[{"name":"dmat6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",31,{"inputs":[{"name":"dmat6"},{"name":"dmat6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",31,{"inputs":[{"name":"dmat6"},{"name":"dmat6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"dmat6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",31,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"div","","",31,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"add","","",31,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"add","","",31,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"add","","",31,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"sub","","",31,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"sub","","",31,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"sub","","",31,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",31,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",31,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",31,null],[11,"from_fn","","Builds a matrix using an initialization function.",31,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat6"}}],[11,"new_uninitialized","","",31,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"clone","nalgebra::structs::dvec","",20,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"fmt","","",20,{"inputs":[{"name":"dvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized vec.",20,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_elem","","Builds a vector filled with a constant.",20,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",20,null],[11,"from_fn","","Builds a vector filled with the result of a function.",20,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec"}}],[11,"len","","",20,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"from_iter","","",20,{"inputs":[{"name":"dvec"},{"name":"i"}],"output":{"name":"dvec"}}],[11,"new_zeros","","Builds a vector filled with zeros.",20,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",20,{"inputs":[{"name":"dvec"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",20,null],[11,"as_mut","","Mutably slices this vector.",20,null],[11,"shape","","",20,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"swap","","",20,null],[11,"unsafe_at","","",20,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",20,null],[11,"index","","",20,null],[11,"index_mut","","",20,null],[11,"new_ones","","Builds a vector filled with ones.",20,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"new_random","","Builds a vector filled with random values.",20,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"iter","","",20,{"inputs":[{"name":"dvec"}],"output":{"name":"iter"}}],[11,"iter_mut","","",20,{"inputs":[{"name":"dvec"}],"output":{"name":"itermut"}}],[11,"axpy","","",20,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",20,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",20,{"inputs":[{"name":"dvec"}],"output":{"name":"vec"}}],[11,"mul","","",20,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"div","","",20,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"add","","",20,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"sub","","",20,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"neg","","",20,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"dot","","",20,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"n"}}],[11,"sqnorm","","",20,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"normalize","","",20,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"normalize_mut","","",20,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"mean","","",20,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",20,{"inputs":[{"name":"dvec"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",20,{"inputs":[{"name":"dvec"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",20,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",20,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",20,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"div","","",20,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"add","","",20,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"sub","","",20,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"len","","The number of elements of this vector.",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",22,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"eq","","",22,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"new_zeros","","Builds a vector filled with zeros.",22,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",22,null],[11,"as_mut","","Mutably slices this vector.",22,null],[11,"shape","","",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"swap","","",22,null],[11,"unsafe_at","","",22,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",22,null],[11,"index","","",22,null],[11,"index_mut","","",22,null],[11,"new_ones","","Builds a vector filled with ones.",22,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"new_random","","Builds a vector filled with random values.",22,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"iter","","",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"itermut"}}],[11,"axpy","","",22,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",22,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"vec"}}],[11,"mul","","",22,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"div","","",22,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"add","","",22,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"sub","","",22,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"neg","","",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"dot","","",22,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"n"}}],[11,"sqnorm","","",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"normalize","","",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"normalize_mut","","",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"mean","","",22,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",22,{"inputs":[{"name":"dvec1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",22,{"inputs":[{"name":"dvec1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",22,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",22,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",22,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"div","","",22,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"add","","",22,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"sub","","",22,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_elem","","Builds a vector filled with a constant.",22,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",22,null],[11,"from_fn","","Builds a vector filled with the result of a function.",22,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec1"}}],[11,"from_iter","","",22,{"inputs":[{"name":"dvec1"},{"name":"i"}],"output":{"name":"dvec1"}}],[11,"len","","The number of elements of this vector.",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",24,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"eq","","",24,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"new_zeros","","Builds a vector filled with zeros.",24,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",24,null],[11,"as_mut","","Mutably slices this vector.",24,null],[11,"shape","","",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"swap","","",24,null],[11,"unsafe_at","","",24,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",24,null],[11,"index","","",24,null],[11,"index_mut","","",24,null],[11,"new_ones","","Builds a vector filled with ones.",24,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"new_random","","Builds a vector filled with random values.",24,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"iter","","",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"itermut"}}],[11,"axpy","","",24,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",24,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"vec"}}],[11,"mul","","",24,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"div","","",24,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"add","","",24,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"sub","","",24,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"neg","","",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"dot","","",24,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"n"}}],[11,"sqnorm","","",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"normalize","","",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"normalize_mut","","",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"mean","","",24,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",24,{"inputs":[{"name":"dvec2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",24,{"inputs":[{"name":"dvec2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",24,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",24,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",24,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"div","","",24,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"add","","",24,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"sub","","",24,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_elem","","Builds a vector filled with a constant.",24,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",24,null],[11,"from_fn","","Builds a vector filled with the result of a function.",24,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec2"}}],[11,"from_iter","","",24,{"inputs":[{"name":"dvec2"},{"name":"i"}],"output":{"name":"dvec2"}}],[11,"len","","The number of elements of this vector.",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",26,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"eq","","",26,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"new_zeros","","Builds a vector filled with zeros.",26,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",26,null],[11,"as_mut","","Mutably slices this vector.",26,null],[11,"shape","","",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"swap","","",26,null],[11,"unsafe_at","","",26,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",26,null],[11,"index","","",26,null],[11,"index_mut","","",26,null],[11,"new_ones","","Builds a vector filled with ones.",26,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"new_random","","Builds a vector filled with random values.",26,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"iter","","",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"itermut"}}],[11,"axpy","","",26,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",26,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"vec"}}],[11,"mul","","",26,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"div","","",26,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"add","","",26,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"sub","","",26,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"neg","","",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"dot","","",26,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"n"}}],[11,"sqnorm","","",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"normalize","","",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"normalize_mut","","",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"mean","","",26,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",26,{"inputs":[{"name":"dvec3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",26,{"inputs":[{"name":"dvec3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",26,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",26,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",26,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"div","","",26,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"add","","",26,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"sub","","",26,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_elem","","Builds a vector filled with a constant.",26,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",26,null],[11,"from_fn","","Builds a vector filled with the result of a function.",26,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec3"}}],[11,"from_iter","","",26,{"inputs":[{"name":"dvec3"},{"name":"i"}],"output":{"name":"dvec3"}}],[11,"len","","The number of elements of this vector.",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"eq","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"new_zeros","","Builds a vector filled with zeros.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",28,null],[11,"as_mut","","Mutably slices this vector.",28,null],[11,"shape","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"swap","","",28,null],[11,"unsafe_at","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",28,null],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"new_ones","","Builds a vector filled with ones.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"new_random","","Builds a vector filled with random values.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"iter","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"itermut"}}],[11,"axpy","","",28,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"vec"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"div","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"add","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"neg","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"dot","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"n"}}],[11,"sqnorm","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"normalize","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"normalize_mut","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"mean","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",28,{"inputs":[{"name":"dvec4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",28,{"inputs":[{"name":"dvec4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"div","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"add","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_elem","","Builds a vector filled with a constant.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",28,null],[11,"from_fn","","Builds a vector filled with the result of a function.",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec4"}}],[11,"from_iter","","",28,{"inputs":[{"name":"dvec4"},{"name":"i"}],"output":{"name":"dvec4"}}],[11,"len","","The number of elements of this vector.",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",30,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"eq","","",30,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"new_zeros","","Builds a vector filled with zeros.",30,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",30,null],[11,"as_mut","","Mutably slices this vector.",30,null],[11,"shape","","",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"swap","","",30,null],[11,"unsafe_at","","",30,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",30,null],[11,"index","","",30,null],[11,"index_mut","","",30,null],[11,"new_ones","","Builds a vector filled with ones.",30,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"new_random","","Builds a vector filled with random values.",30,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"iter","","",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"itermut"}}],[11,"axpy","","",30,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",30,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"vec"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"div","","",30,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"add","","",30,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"neg","","",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"dot","","",30,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"n"}}],[11,"sqnorm","","",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"normalize","","",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"normalize_mut","","",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"mean","","",30,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",30,{"inputs":[{"name":"dvec5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",30,{"inputs":[{"name":"dvec5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",30,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",30,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"div","","",30,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"add","","",30,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_elem","","Builds a vector filled with a constant.",30,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",30,null],[11,"from_fn","","Builds a vector filled with the result of a function.",30,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec5"}}],[11,"from_iter","","",30,{"inputs":[{"name":"dvec5"},{"name":"i"}],"output":{"name":"dvec5"}}],[11,"len","","The number of elements of this vector.",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",32,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"eq","","",32,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"new_zeros","","Builds a vector filled with zeros.",32,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",32,null],[11,"as_mut","","Mutably slices this vector.",32,null],[11,"shape","","",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"swap","","",32,null],[11,"unsafe_at","","",32,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",32,null],[11,"index","","",32,null],[11,"index_mut","","",32,null],[11,"new_ones","","Builds a vector filled with ones.",32,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"new_random","","Builds a vector filled with random values.",32,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"iter","","",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"itermut"}}],[11,"axpy","","",32,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",32,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"vec"}}],[11,"mul","","",32,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"div","","",32,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"add","","",32,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"sub","","",32,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"neg","","",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"dot","","",32,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"n"}}],[11,"sqnorm","","",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"normalize","","",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"normalize_mut","","",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"mean","","",32,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",32,{"inputs":[{"name":"dvec6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",32,{"inputs":[{"name":"dvec6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",32,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",32,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",32,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"div","","",32,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"add","","",32,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"sub","","",32,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_elem","","Builds a vector filled with a constant.",32,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",32,null],[11,"from_fn","","Builds a vector filled with the result of a function.",32,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec6"}}],[11,"from_iter","","",32,{"inputs":[{"name":"dvec6"},{"name":"i"}],"output":{"name":"dvec6"}}],[11,"fmt","nalgebra::structs::vec","",33,{"inputs":[{"name":"vec0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"eq","","",33,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",33,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"repeat","","",33,{"inputs":[{"name":"vec0"},{"name":"n"}],"output":{"name":"vec0"}}],[11,"fmt","","",34,{"inputs":[{"name":"vec1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"clone","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"decode","","",34,{"inputs":[{"name":"vec1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",34,{"inputs":[{"name":"vec1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",34,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"inf","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sup","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_le","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",34,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"from","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"as_ref","","",34,null],[11,"as_mut","","",34,null],[11,"index","","",34,null],[11,"index_mut","","",34,null],[11,"shape","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"swap","","",34,null],[11,"unsafe_at","","",34,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",34,null],[11,"at_fast","","Unsafe read access to a vector element by index.",34,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",34,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",34,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"dim","","",34,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"add","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sub","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"div","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"add","","",34,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"sub","","",34,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"mul","","",34,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"div","","",34,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"neg","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"dot","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"n"}}],[11,"translation","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"inv_translation","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"append_translation_mut","","",34,null],[11,"append_translation","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"prepend_translation_mut","","",34,null],[11,"prepend_translation","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"set_translation","","",34,null],[11,"sqnorm","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"normalize","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"normalize_mut","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",34,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",34,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"zero","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"is_zero","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"bool"}}],[11,"from_iter","","",34,{"inputs":[{"name":"vec1"},{"name":"i"}],"output":{"name":"vec1"}}],[11,"max_value","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"min_value","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"axpy","","",34,null],[11,"iter","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"vec2"}}],[11,"from","","",34,{"inputs":[{"name":"vec1"},{"name":"vec2"}],"output":{"name":"vec1"}}],[11,"translate","","",34,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_translate","","",34,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"rotate","","",34,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",34,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",35,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",35,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",34,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_transform","","",34,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"to_pnt","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"as_pnt","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"abs","","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"rand","","",34,{"inputs":[{"name":"vec1"},{"name":"r"}],"output":{"name":"vec1"}}],[11,"mean","","",34,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"fmt","","",36,{"inputs":[{"name":"vec2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"clone","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"decode","","",36,{"inputs":[{"name":"vec2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",36,{"inputs":[{"name":"vec2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",36,{"inputs":[{"name":"vec2"},{"name":"n"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"inf","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sup","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_le","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"from","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"as_ref","","",36,null],[11,"as_mut","","",36,null],[11,"index","","",36,null],[11,"index_mut","","",36,null],[11,"shape","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"swap","","",36,null],[11,"unsafe_at","","",36,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",36,null],[11,"at_fast","","Unsafe read access to a vector element by index.",36,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",36,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",36,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"dim","","",36,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"add","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sub","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"div","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"add","","",36,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"sub","","",36,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"mul","","",36,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"div","","",36,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"neg","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"dot","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"n"}}],[11,"translation","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",36,null],[11,"append_translation","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"prepend_translation_mut","","",36,null],[11,"prepend_translation","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"set_translation","","",36,null],[11,"sqnorm","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"normalize","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"normalize_mut","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",36,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",36,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"zero","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"is_zero","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"bool"}}],[11,"from_iter","","",36,{"inputs":[{"name":"vec2"},{"name":"i"}],"output":{"name":"vec2"}}],[11,"max_value","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"min_value","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"axpy","","",36,null],[11,"iter","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec3"}}],[11,"from","","",36,{"inputs":[{"name":"vec2"},{"name":"vec3"}],"output":{"name":"vec2"}}],[11,"translate","","",36,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",36,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"rotate","","",36,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",36,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",37,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",37,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",36,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",36,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"to_pnt","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"as_pnt","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"abs","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",36,{"inputs":[{"name":"vec2"},{"name":"r"}],"output":{"name":"vec2"}}],[11,"mean","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"fmt","","",38,{"inputs":[{"name":"vec3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"decode","","",38,{"inputs":[{"name":"vec3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"vec3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",38,{"inputs":[{"name":"vec3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"inf","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sup","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_le","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"from","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"as_ref","","",38,null],[11,"as_mut","","",38,null],[11,"index","","",38,null],[11,"index_mut","","",38,null],[11,"shape","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"swap","","",38,null],[11,"unsafe_at","","",38,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",38,null],[11,"at_fast","","Unsafe read access to a vector element by index.",38,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",38,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",38,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"dim","","",38,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"add","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sub","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"div","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"add","","",38,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"sub","","",38,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"mul","","",38,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"div","","",38,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"neg","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"dot","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"n"}}],[11,"translation","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",38,null],[11,"append_translation","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"prepend_translation_mut","","",38,null],[11,"prepend_translation","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"set_translation","","",38,null],[11,"sqnorm","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"normalize","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"normalize_mut","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",38,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",38,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"zero","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"is_zero","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"bool"}}],[11,"from_iter","","",38,{"inputs":[{"name":"vec3"},{"name":"i"}],"output":{"name":"vec3"}}],[11,"max_value","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"min_value","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"axpy","","",38,null],[11,"iter","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"vec4"}}],[11,"from","","",38,{"inputs":[{"name":"vec3"},{"name":"vec4"}],"output":{"name":"vec3"}}],[11,"translate","","",38,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",38,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"rotate","","",38,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",38,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",39,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",39,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",38,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",38,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"to_pnt","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"as_pnt","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"abs","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",38,{"inputs":[{"name":"vec3"},{"name":"r"}],"output":{"name":"vec3"}}],[11,"mean","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"fmt","","",40,{"inputs":[{"name":"vec4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"clone","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"decode","","",40,{"inputs":[{"name":"vec4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"vec4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",40,{"inputs":[{"name":"vec4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"inf","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sup","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_le","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"from","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"as_ref","","",40,null],[11,"as_mut","","",40,null],[11,"index","","",40,null],[11,"index_mut","","",40,null],[11,"shape","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"swap","","",40,null],[11,"unsafe_at","","",40,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",40,null],[11,"at_fast","","Unsafe read access to a vector element by index.",40,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",40,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",40,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"dim","","",40,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",40,null],[11,"orthonormal_subspace_basis","","",40,null],[11,"canonical_basis_element","","",40,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sub","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"div","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"add","","",40,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"sub","","",40,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"mul","","",40,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"div","","",40,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"neg","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"dot","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"n"}}],[11,"translation","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",40,null],[11,"append_translation","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"prepend_translation_mut","","",40,null],[11,"prepend_translation","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"set_translation","","",40,null],[11,"sqnorm","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"normalize","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"normalize_mut","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",40,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",40,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"zero","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"is_zero","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"bool"}}],[11,"from_iter","","",40,{"inputs":[{"name":"vec4"},{"name":"i"}],"output":{"name":"vec4"}}],[11,"max_value","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"min_value","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"axpy","","",40,null],[11,"iter","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"vec5"}}],[11,"from","","",40,{"inputs":[{"name":"vec4"},{"name":"vec5"}],"output":{"name":"vec4"}}],[11,"translate","","",40,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",40,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"rotate","","",40,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",40,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",41,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",41,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",40,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",40,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"to_pnt","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"as_pnt","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"abs","","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rand","","",40,{"inputs":[{"name":"vec4"},{"name":"r"}],"output":{"name":"vec4"}}],[11,"mean","","",40,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"fmt","","",42,{"inputs":[{"name":"vec5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"clone","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"decode","","",42,{"inputs":[{"name":"vec5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,{"inputs":[{"name":"vec5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",42,{"inputs":[{"name":"vec5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"inf","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sup","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_le","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"from","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"as_ref","","",42,null],[11,"as_mut","","",42,null],[11,"index","","",42,null],[11,"index_mut","","",42,null],[11,"shape","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"swap","","",42,null],[11,"unsafe_at","","",42,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",42,null],[11,"at_fast","","Unsafe read access to a vector element by index.",42,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",42,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",42,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"dim","","",42,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",42,null],[11,"orthonormal_subspace_basis","","",42,null],[11,"canonical_basis_element","","",42,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sub","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"div","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"add","","",42,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"sub","","",42,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"mul","","",42,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"div","","",42,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"neg","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"dot","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"n"}}],[11,"translation","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"inv_translation","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"append_translation_mut","","",42,null],[11,"append_translation","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"prepend_translation_mut","","",42,null],[11,"prepend_translation","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"set_translation","","",42,null],[11,"sqnorm","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"normalize","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"normalize_mut","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",42,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",42,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"zero","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"is_zero","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"bool"}}],[11,"from_iter","","",42,{"inputs":[{"name":"vec5"},{"name":"i"}],"output":{"name":"vec5"}}],[11,"max_value","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"min_value","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"axpy","","",42,null],[11,"iter","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"vec6"}}],[11,"from","","",42,{"inputs":[{"name":"vec5"},{"name":"vec6"}],"output":{"name":"vec5"}}],[11,"translate","","",42,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_translate","","",42,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"rotate","","",42,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",42,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",43,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",43,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",42,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_transform","","",42,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"to_pnt","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"as_pnt","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"abs","","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"rand","","",42,{"inputs":[{"name":"vec5"},{"name":"r"}],"output":{"name":"vec5"}}],[11,"mean","","",42,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"fmt","","",44,{"inputs":[{"name":"vec6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"clone","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"decode","","",44,{"inputs":[{"name":"vec6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"vec6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",44,{"inputs":[{"name":"vec6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"inf","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sup","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_le","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"b","","Create a unit vector with its `$compN` component equal to 1.0.",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"from","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"as_ref","","",44,null],[11,"as_mut","","",44,null],[11,"index","","",44,null],[11,"index_mut","","",44,null],[11,"shape","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"swap","","",44,null],[11,"unsafe_at","","",44,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",44,null],[11,"at_fast","","Unsafe read access to a vector element by index.",44,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",44,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",44,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"dim","","",44,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",44,null],[11,"orthonormal_subspace_basis","","",44,null],[11,"canonical_basis_element","","",44,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sub","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"div","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"add","","",44,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"sub","","",44,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"mul","","",44,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"div","","",44,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"neg","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"dot","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"n"}}],[11,"translation","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"inv_translation","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"append_translation_mut","","",44,null],[11,"append_translation","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"prepend_translation_mut","","",44,null],[11,"prepend_translation","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"set_translation","","",44,null],[11,"sqnorm","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"normalize","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"normalize_mut","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",44,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",44,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"zero","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"is_zero","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"bool"}}],[11,"from_iter","","",44,{"inputs":[{"name":"vec6"},{"name":"i"}],"output":{"name":"vec6"}}],[11,"max_value","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"min_value","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"axpy","","",44,null],[11,"iter","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"itermut"}}],[11,"translate","","",44,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_translate","","",44,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"rotate","","",44,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",44,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",45,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",45,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",44,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_transform","","",44,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"to_pnt","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"as_pnt","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"abs","","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"rand","","",44,{"inputs":[{"name":"vec6"},{"name":"r"}],"output":{"name":"vec6"}}],[11,"mean","","",44,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"fmt","nalgebra::structs::pnt","",46,{"inputs":[{"name":"pnt0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"pnt0"}],"output":{"name":"pnt0"}}],[11,"eq","","",46,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new point.",46,{"inputs":[{"name":"pnt0"}],"output":{"name":"pnt0"}}],[11,"repeat","","",46,{"inputs":[{"name":"pnt0"},{"name":"n"}],"output":{"name":"pnt0"}}],[11,"fmt","","",35,{"inputs":[{"name":"pnt1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"clone","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"decode","","",35,{"inputs":[{"name":"pnt1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"pnt1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",35,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"orig","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"is_orig","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"inf","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"sup","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_le","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"mul","","",35,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"div","","",35,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"add","","",35,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"sub","","",35,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"from","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"as_ref","","",35,null],[11,"as_mut","","",35,null],[11,"index","","",35,null],[11,"index_mut","","",35,null],[11,"shape","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"swap","","",35,null],[11,"unsafe_at","","",35,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",35,null],[11,"at_fast","","Unsafe read access to a vector element by index.",35,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",35,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",35,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"dim","","",35,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"to_vec","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"set_coords","","",35,null],[11,"sub","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"neg","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"add","","",35,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"sub","","",35,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"approx_epsilon","","",35,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",35,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",35,{"inputs":[{"name":"pnt1"},{"name":"i"}],"output":{"name":"pnt1"}}],[11,"max_value","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"min_value","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"axpy","","",35,null],[11,"iter","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",35,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt2"}}],[11,"from","","",35,{"inputs":[{"name":"pnt1"},{"name":"pnt2"}],"output":{"name":"pnt1"}}],[11,"rand","","",35,{"inputs":[{"name":"pnt1"},{"name":"r"}],"output":{"name":"pnt1"}}],[11,"fmt","","",37,{"inputs":[{"name":"pnt2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"decode","","",37,{"inputs":[{"name":"pnt2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",37,{"inputs":[{"name":"pnt2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",37,{"inputs":[{"name":"pnt2"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"orig","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"is_orig","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"inf","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"sup","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_le","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"mul","","",37,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"div","","",37,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"add","","",37,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"sub","","",37,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"from","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"as_ref","","",37,null],[11,"as_mut","","",37,null],[11,"index","","",37,null],[11,"index_mut","","",37,null],[11,"shape","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"swap","","",37,null],[11,"unsafe_at","","",37,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",37,null],[11,"at_fast","","Unsafe read access to a vector element by index.",37,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",37,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",37,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"dim","","",37,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"to_vec","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"set_coords","","",37,null],[11,"sub","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"neg","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"add","","",37,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"sub","","",37,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"approx_epsilon","","",37,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",37,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",37,{"inputs":[{"name":"pnt2"},{"name":"i"}],"output":{"name":"pnt2"}}],[11,"max_value","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"min_value","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"axpy","","",37,null],[11,"iter","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",37,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt3"}}],[11,"from","","",37,{"inputs":[{"name":"pnt2"},{"name":"pnt3"}],"output":{"name":"pnt2"}}],[11,"rand","","",37,{"inputs":[{"name":"pnt2"},{"name":"r"}],"output":{"name":"pnt2"}}],[11,"fmt","","",39,{"inputs":[{"name":"pnt3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"decode","","",39,{"inputs":[{"name":"pnt3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"pnt3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",39,{"inputs":[{"name":"pnt3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"orig","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"is_orig","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"inf","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"sup","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_le","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"mul","","",39,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"div","","",39,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"add","","",39,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"sub","","",39,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"from","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"as_ref","","",39,null],[11,"as_mut","","",39,null],[11,"index","","",39,null],[11,"index_mut","","",39,null],[11,"shape","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"swap","","",39,null],[11,"unsafe_at","","",39,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",39,null],[11,"at_fast","","Unsafe read access to a vector element by index.",39,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",39,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",39,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"dim","","",39,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"to_vec","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"set_coords","","",39,null],[11,"sub","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"neg","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"add","","",39,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"sub","","",39,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"approx_epsilon","","",39,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",39,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",39,{"inputs":[{"name":"pnt3"},{"name":"i"}],"output":{"name":"pnt3"}}],[11,"max_value","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"min_value","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"axpy","","",39,null],[11,"iter","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",39,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt4"}}],[11,"from","","",39,{"inputs":[{"name":"pnt3"},{"name":"pnt4"}],"output":{"name":"pnt3"}}],[11,"rand","","",39,{"inputs":[{"name":"pnt3"},{"name":"r"}],"output":{"name":"pnt3"}}],[11,"fmt","","",41,{"inputs":[{"name":"pnt4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"clone","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"decode","","",41,{"inputs":[{"name":"pnt4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"pnt4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",41,{"inputs":[{"name":"pnt4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"orig","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"is_orig","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"inf","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"sup","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_le","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"mul","","",41,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"div","","",41,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"add","","",41,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"sub","","",41,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"from","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"as_ref","","",41,null],[11,"as_mut","","",41,null],[11,"index","","",41,null],[11,"index_mut","","",41,null],[11,"shape","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"swap","","",41,null],[11,"unsafe_at","","",41,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",41,null],[11,"at_fast","","Unsafe read access to a vector element by index.",41,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",41,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",41,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"dim","","",41,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"to_vec","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"set_coords","","",41,null],[11,"sub","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"neg","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"add","","",41,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"sub","","",41,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"approx_epsilon","","",41,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",41,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",41,{"inputs":[{"name":"pnt4"},{"name":"i"}],"output":{"name":"pnt4"}}],[11,"max_value","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"min_value","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"axpy","","",41,null],[11,"iter","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",41,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt5"}}],[11,"from","","",41,{"inputs":[{"name":"pnt4"},{"name":"pnt5"}],"output":{"name":"pnt4"}}],[11,"rand","","",41,{"inputs":[{"name":"pnt4"},{"name":"r"}],"output":{"name":"pnt4"}}],[11,"fmt","","",43,{"inputs":[{"name":"pnt5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"clone","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"decode","","",43,{"inputs":[{"name":"pnt5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"pnt5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",43,{"inputs":[{"name":"pnt5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"orig","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"is_orig","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"inf","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"sup","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_le","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"mul","","",43,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"div","","",43,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"add","","",43,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"sub","","",43,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"from","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"as_ref","","",43,null],[11,"as_mut","","",43,null],[11,"index","","",43,null],[11,"index_mut","","",43,null],[11,"shape","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"swap","","",43,null],[11,"unsafe_at","","",43,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",43,null],[11,"at_fast","","Unsafe read access to a vector element by index.",43,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",43,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",43,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"dim","","",43,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"to_vec","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"set_coords","","",43,null],[11,"sub","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"neg","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"add","","",43,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"sub","","",43,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"approx_epsilon","","",43,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",43,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",43,{"inputs":[{"name":"pnt5"},{"name":"i"}],"output":{"name":"pnt5"}}],[11,"max_value","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"min_value","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"axpy","","",43,null],[11,"iter","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",43,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt6"}}],[11,"from","","",43,{"inputs":[{"name":"pnt5"},{"name":"pnt6"}],"output":{"name":"pnt5"}}],[11,"rand","","",43,{"inputs":[{"name":"pnt5"},{"name":"r"}],"output":{"name":"pnt5"}}],[11,"fmt","","",45,{"inputs":[{"name":"pnt6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"clone","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"decode","","",45,{"inputs":[{"name":"pnt6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"pnt6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",45,{"inputs":[{"name":"pnt6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"orig","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"is_orig","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"inf","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"sup","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_le","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"mul","","",45,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"div","","",45,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"add","","",45,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"sub","","",45,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"from","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"as_ref","","",45,null],[11,"as_mut","","",45,null],[11,"index","","",45,null],[11,"index_mut","","",45,null],[11,"shape","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"swap","","",45,null],[11,"unsafe_at","","",45,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",45,null],[11,"at_fast","","Unsafe read access to a vector element by index.",45,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",45,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",45,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"dim","","",45,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"to_vec","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"set_coords","","",45,null],[11,"sub","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"neg","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"add","","",45,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"sub","","",45,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"approx_epsilon","","",45,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",45,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",45,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",45,{"inputs":[{"name":"pnt6"},{"name":"i"}],"output":{"name":"pnt6"}}],[11,"max_value","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"min_value","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"axpy","","",45,null],[11,"iter","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",45,{"inputs":[{"name":"pnt6"}],"output":{"name":"itermut"}}],[11,"rand","","",45,{"inputs":[{"name":"pnt6"},{"name":"r"}],"output":{"name":"pnt6"}}],[11,"fmt","nalgebra::structs::quat","",47,{"inputs":[{"name":"quat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"clone","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"decode","","",47,{"inputs":[{"name":"quat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"quat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new quaternion from its components.",47,{"inputs":[{"name":"quat"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"quat"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",47,{"inputs":[{"name":"quat"}],"output":{"name":"vec3"}}],[11,"scalar","","The scalar part `w` of this quaternion.",47,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",47,null],[11,"inv","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"option"}}],[11,"inv_mut","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"sqnorm","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"normalize","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"normalize_mut","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"mul","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"div","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"rand","","",47,{"inputs":[{"name":"quat"},{"name":"r"}],"output":{"name":"quat"}}],[11,"fmt","","",48,{"inputs":[{"name":"unitquat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"clone","","",48,{"inputs":[{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"decode","","",48,{"inputs":[{"name":"unitquat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,{"inputs":[{"name":"unitquat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new unit quaternion from the axis-angle representation of a rotation.",48,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"new_with_quat","","Creates a new unit quaternion from a quaternion.",48,{"inputs":[{"name":"unitquat"},{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"new_with_euler_angles","","Creates a new unit quaternion from Euler angles.",48,{"inputs":[{"name":"unitquat"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"unitquat"}}],[11,"to_rot","","Builds a rotation matrix from this quaternion.",48,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"new_with_unit_quat","","Creates a new unit quaternion from a quaternion.",48,{"inputs":[{"name":"unitquat"},{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"quat","","The `Quat` representation of this unit quaternion.",48,{"inputs":[{"name":"unitquat"}],"output":{"name":"quat"}}],[11,"one","","",48,{"inputs":[{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"inv","","",48,{"inputs":[{"name":"unitquat"}],"output":{"name":"option"}}],[11,"inv_mut","","",48,{"inputs":[{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"rand","","",48,{"inputs":[{"name":"unitquat"},{"name":"r"}],"output":{"name":"unitquat"}}],[11,"approx_epsilon","","",48,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",48,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",48,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",48,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"div","","",48,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",48,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",48,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",48,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","nalgebra::structs::vec","",38,{"inputs":[{"name":"vec3"},{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"mul","nalgebra::structs::pnt","",39,{"inputs":[{"name":"pnt3"},{"name":"unitquat"}],"output":{"name":"pnt3"}}],[11,"rotation","nalgebra::structs::quat","",48,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",48,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",48,null],[11,"append_rotation","","",48,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"prepend_rotation_mut","","",48,null],[11,"prepend_rotation","","",48,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"set_rotation","","",48,null],[11,"to_rot_mat","","",48,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"rotate","","",48,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",48,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",48,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",48,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"angle_to","","",48,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"n"}}],[11,"rotation_to","","",48,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"transform","","",48,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",48,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",48,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",48,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inf","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sup","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_le","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_gt","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_ge","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"i","","Create a unit vector with its `$compN` component equal to 1.0.",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"j","","Create a unit vector with its `$compN` component equal to 1.0.",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"k","","Create a unit vector with its `$compN` component equal to 1.0.",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"from","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"as_ref","","",47,null],[11,"as_mut","","",47,null],[11,"index","","",47,null],[11,"index_mut","","",47,null],[11,"shape","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"swap","","",47,null],[11,"unsafe_at","","",47,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",47,null],[11,"at_fast","","Unsafe read access to a vector element by index.",47,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",47,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",47,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"dim","","",47,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"add","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sub","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"add","","",47,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"sub","","",47,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"mul","","",47,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"div","","",47,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"neg","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"one","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"zero","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"is_zero","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_epsilon","","",47,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",47,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",47,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",47,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",47,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",47,{"inputs":[{"name":"quat"},{"name":"i"}],"output":{"name":"quat"}}],[11,"max_value","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"min_value","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"axpy","","",47,null],[11,"iter","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"iter"}}],[11,"iter_mut","","",47,{"inputs":[{"name":"quat"}],"output":{"name":"itermut"}}],[11,"dim","","",48,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"usize"}}],[11,"fmt","nalgebra::structs::mat","",49,{"inputs":[{"name":"identity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"decode","","",49,{"inputs":[{"name":"identity"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,{"inputs":[{"name":"identity"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"new","","Creates a new identity matrix.",49,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"fmt","","",50,{"inputs":[{"name":"mat1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"clone","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"decode","","",50,{"inputs":[{"name":"mat1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,{"inputs":[{"name":"mat1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"new_identity","","",50,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"mat1"}}],[11,"new","","",50,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"repeat","","",50,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"as_ref","","",50,null],[11,"as_mut","","",50,null],[11,"from","","",50,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",50,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"sub","","",50,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",50,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"sub","","",50,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"mul","","",50,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"div","","",50,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"abs","","",50,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"zero","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"is_zero","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"bool"}}],[11,"one","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"iter","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"itermut"}}],[11,"at_fast","","",50,null],[11,"set_fast","","",50,null],[11,"dim","","",50,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",50,null],[11,"swap","","",50,null],[11,"unsafe_at","","",50,null],[11,"unsafe_set","","",50,null],[11,"index","","",50,null],[11,"index_mut","","",50,null],[11,"mul","","",50,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"mul","","",50,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","nalgebra::structs::vec","",34,{"inputs":[{"name":"vec1"},{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"mul","nalgebra::structs::mat","",50,{"inputs":[{"name":"mat1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"mul","nalgebra::structs::pnt","",35,{"inputs":[{"name":"pnt1"},{"name":"mat1"}],"output":{"name":"pnt1"}}],[11,"transpose","nalgebra::structs::mat","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"transpose_mut","","",50,null],[11,"approx_epsilon","","",50,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",50,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",50,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",50,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_row","","",50,null],[11,"row","","",50,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"ncols","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_col","","",50,null],[11,"col","","",50,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"col_slice","","",50,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"row_slice","","",50,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"from_diag","","",50,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"diag","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"set_diag","","",50,null],[11,"to_homogeneous","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"mat2"}}],[11,"from","","",50,{"inputs":[{"name":"mat1"},{"name":"mat2"}],"output":{"name":"mat1"}}],[11,"outer","nalgebra::structs::vec","",34,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"eigen_qr","nalgebra::structs::mat","",50,null],[11,"rand","","",50,{"inputs":[{"name":"mat1"},{"name":"r"}],"output":{"name":"mat1"}}],[11,"mean","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"fmt","","",18,{"inputs":[{"name":"mat2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"decode","","",18,{"inputs":[{"name":"mat2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"mat2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"new_identity","","",18,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"mat2"}}],[11,"repeat","","",18,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"as_ref","","",18,null],[11,"as_mut","","",18,null],[11,"from","","",18,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",18,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"sub","","",18,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",18,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"sub","","",18,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"mul","","",18,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"div","","",18,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"abs","","",18,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"zero","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"is_zero","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"bool"}}],[11,"one","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"iter","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"itermut"}}],[11,"dim","","",18,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",18,null],[11,"swap","","",18,null],[11,"unsafe_at","","",18,null],[11,"unsafe_set","","",18,null],[11,"index","","",18,null],[11,"index_mut","","",18,null],[11,"transpose","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"transpose_mut","","",18,null],[11,"approx_epsilon","","",18,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",18,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",18,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",18,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_row","","",18,null],[11,"row","","",18,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"ncols","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_col","","",18,null],[11,"col","","",18,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"col_slice","","",18,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"row_slice","","",18,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"from_diag","","",18,{"inputs":[{"name":"mat2"},{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"diag","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"vec2"}}],[11,"set_diag","","",18,null],[11,"to_homogeneous","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"mat3"}}],[11,"from","","",18,{"inputs":[{"name":"mat2"},{"name":"mat3"}],"output":{"name":"mat2"}}],[11,"outer","nalgebra::structs::vec","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"eigen_qr","nalgebra::structs::mat","",18,null],[11,"rand","","",18,{"inputs":[{"name":"mat2"},{"name":"r"}],"output":{"name":"mat2"}}],[11,"mean","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"vec2"}}],[11,"fmt","","",51,{"inputs":[{"name":"mat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"clone","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"decode","","",51,{"inputs":[{"name":"mat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,{"inputs":[{"name":"mat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"new_identity","","",51,{"inputs":[{"name":"mat3"},{"name":"usize"}],"output":{"name":"mat3"}}],[11,"new","","",51,{"inputs":[{"name":"mat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"repeat","","",51,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"as_ref","","",51,null],[11,"as_mut","","",51,null],[11,"from","","",51,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",51,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"sub","","",51,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",51,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"sub","","",51,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"mul","","",51,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"div","","",51,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"abs","","",51,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"zero","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"is_zero","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"bool"}}],[11,"one","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"iter","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"itermut"}}],[11,"dim","","",51,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",51,null],[11,"swap","","",51,null],[11,"unsafe_at","","",51,null],[11,"unsafe_set","","",51,null],[11,"index","","",51,null],[11,"index_mut","","",51,null],[11,"at_fast","","",51,null],[11,"set_fast","","",51,null],[11,"transpose","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"transpose_mut","","",51,null],[11,"approx_epsilon","","",51,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",51,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",51,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",51,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"col_slice","","",51,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"row_slice","","",51,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"from_diag","","",51,{"inputs":[{"name":"mat3"},{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"diag","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"vec3"}}],[11,"set_diag","","",51,null],[11,"to_homogeneous","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"mat4"}}],[11,"from","","",51,{"inputs":[{"name":"mat3"},{"name":"mat4"}],"output":{"name":"mat3"}}],[11,"outer","nalgebra::structs::vec","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"eigen_qr","nalgebra::structs::mat","",51,null],[11,"rand","","",51,{"inputs":[{"name":"mat3"},{"name":"r"}],"output":{"name":"mat3"}}],[11,"mean","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"vec3"}}],[11,"fmt","","",52,{"inputs":[{"name":"mat4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"clone","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"decode","","",52,{"inputs":[{"name":"mat4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,{"inputs":[{"name":"mat4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"new_identity","","",52,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"mat4"}}],[11,"new","","",52,{"inputs":[{"name":"mat4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"repeat","","",52,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"as_ref","","",52,null],[11,"as_mut","","",52,null],[11,"from","","",52,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",52,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"sub","","",52,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",52,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"sub","","",52,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"mul","","",52,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"div","","",52,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"abs","","",52,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"zero","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"is_zero","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"one","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"iter","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"itermut"}}],[11,"dim","","",52,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",52,null],[11,"swap","","",52,null],[11,"unsafe_at","","",52,null],[11,"unsafe_set","","",52,null],[11,"index","","",52,null],[11,"index_mut","","",52,null],[11,"at_fast","","",52,null],[11,"set_fast","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"mul","","",52,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","nalgebra::structs::vec","",40,{"inputs":[{"name":"vec4"},{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"mul","nalgebra::structs::mat","",52,{"inputs":[{"name":"mat4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","nalgebra::structs::pnt","",41,{"inputs":[{"name":"pnt4"},{"name":"mat4"}],"output":{"name":"pnt4"}}],[11,"inv","nalgebra::structs::mat","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"option"}}],[11,"inv_mut","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"transpose","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"transpose_mut","","",52,null],[11,"approx_epsilon","","",52,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",52,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",52,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",52,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_row","","",52,null],[11,"row","","",52,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"ncols","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_col","","",52,null],[11,"col","","",52,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"col_slice","","",52,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"row_slice","","",52,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"from_diag","","",52,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"diag","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"set_diag","","",52,null],[11,"to_homogeneous","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"mat5"}}],[11,"from","","",52,{"inputs":[{"name":"mat4"},{"name":"mat5"}],"output":{"name":"mat4"}}],[11,"outer","nalgebra::structs::vec","",40,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"eigen_qr","nalgebra::structs::mat","",52,null],[11,"rand","","",52,{"inputs":[{"name":"mat4"},{"name":"r"}],"output":{"name":"mat4"}}],[11,"mean","","",52,{"inputs":[{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"fmt","","",53,{"inputs":[{"name":"mat5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"clone","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"decode","","",53,{"inputs":[{"name":"mat5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,{"inputs":[{"name":"mat5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"new_identity","","",53,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"mat5"}}],[11,"new","","",53,{"inputs":[{"name":"mat5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"repeat","","",53,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"as_ref","","",53,null],[11,"as_mut","","",53,null],[11,"from","","",53,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"abs","","",53,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"zero","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"is_zero","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"one","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"add","","",53,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"sub","","",53,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"add","","",53,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"sub","","",53,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"mul","","",53,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"div","","",53,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"iter","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"itermut"}}],[11,"dim","","",53,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",53,null],[11,"swap","","",53,null],[11,"unsafe_at","","",53,null],[11,"unsafe_set","","",53,null],[11,"index","","",53,null],[11,"index_mut","","",53,null],[11,"at_fast","","",53,null],[11,"set_fast","","",53,null],[11,"mul","","",53,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"mul","","",53,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","nalgebra::structs::vec","",42,{"inputs":[{"name":"vec5"},{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"mul","nalgebra::structs::mat","",53,{"inputs":[{"name":"mat5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"mul","nalgebra::structs::pnt","",43,{"inputs":[{"name":"pnt5"},{"name":"mat5"}],"output":{"name":"pnt5"}}],[11,"inv","nalgebra::structs::mat","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"option"}}],[11,"inv_mut","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"transpose","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"transpose_mut","","",53,null],[11,"approx_epsilon","","",53,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",53,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",53,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",53,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_row","","",53,null],[11,"row","","",53,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"ncols","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_col","","",53,null],[11,"col","","",53,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"col_slice","","",53,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"row_slice","","",53,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"from_diag","","",53,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"diag","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"set_diag","","",53,null],[11,"to_homogeneous","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"mat6"}}],[11,"from","","",53,{"inputs":[{"name":"mat5"},{"name":"mat6"}],"output":{"name":"mat5"}}],[11,"outer","nalgebra::structs::vec","",42,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"eigen_qr","nalgebra::structs::mat","",53,null],[11,"rand","","",53,{"inputs":[{"name":"mat5"},{"name":"r"}],"output":{"name":"mat5"}}],[11,"mean","","",53,{"inputs":[{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"fmt","","",54,{"inputs":[{"name":"mat6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"clone","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"decode","","",54,{"inputs":[{"name":"mat6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,{"inputs":[{"name":"mat6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"new_identity","","",54,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"mat6"}}],[11,"new","","",54,{"inputs":[{"name":"mat6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"repeat","","",54,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"as_ref","","",54,null],[11,"as_mut","","",54,null],[11,"from","","",54,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",54,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"sub","","",54,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",54,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"sub","","",54,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"mul","","",54,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"div","","",54,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"abs","","",54,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"zero","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"is_zero","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"one","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"iter","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"itermut"}}],[11,"dim","","",54,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",54,null],[11,"swap","","",54,null],[11,"unsafe_at","","",54,null],[11,"unsafe_set","","",54,null],[11,"index","","",54,null],[11,"index_mut","","",54,null],[11,"at_fast","","",54,null],[11,"set_fast","","",54,null],[11,"mul","","",54,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"mul","","",54,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","nalgebra::structs::vec","",44,{"inputs":[{"name":"vec6"},{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"mul","nalgebra::structs::mat","",54,{"inputs":[{"name":"mat6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"mul","nalgebra::structs::pnt","",45,{"inputs":[{"name":"pnt6"},{"name":"mat6"}],"output":{"name":"pnt6"}}],[11,"inv","nalgebra::structs::mat","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"option"}}],[11,"inv_mut","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"transpose","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"transpose_mut","","",54,null],[11,"approx_epsilon","","",54,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",54,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",54,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",54,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_row","","",54,null],[11,"row","","",54,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"ncols","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_col","","",54,null],[11,"col","","",54,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"col_slice","","",54,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"row_slice","","",54,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"from_diag","","",54,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"diag","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"set_diag","","",54,null],[11,"outer","nalgebra::structs::vec","",44,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"eigen_qr","nalgebra::structs::mat","",54,null],[11,"rand","","",54,{"inputs":[{"name":"mat6"},{"name":"r"}],"output":{"name":"mat6"}}],[11,"mean","","",54,{"inputs":[{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"hash","nalgebra::structs::rot","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"rot2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"decode","","",55,{"inputs":[{"name":"rot2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",55,{"inputs":[{"name":"rot2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",55,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"rotation","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",55,null],[11,"append_rotation","","",55,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"prepend_rotation_mut","","",55,null],[11,"prepend_rotation","","",55,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"set_rotation","","",55,null],[11,"angle_to","","",55,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"n"}}],[11,"rotation_to","","",55,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"rand","","",55,{"inputs":[{"name":"rot2"},{"name":"r"}],"output":{"name":"rot2"}}],[11,"absolute_rotate","","",55,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"rot3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"decode","","",56,{"inputs":[{"name":"rot3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",56,{"inputs":[{"name":"rot3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",56,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"new_with_mat","","Builds a rotation matrix from an orthogonal matrix.",56,{"inputs":[{"name":"rot3"},{"name":"mat3"}],"output":{"name":"rot3"}}],[11,"new_with_euler_angles","","Creates a new rotation from Euler angles.",56,{"inputs":[{"name":"rot3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"rot3"}}],[11,"look_at","","Create a new matrix and orient it such that its local `x` axis points to a given point.\nNote that the usually known `look_at` function does the same thing but with the `z` axis.\nSee `look_at_z` for that.",56,{"inputs":[{"name":"rot3"},{"name":"vec3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"look_at_z","","Create a new matrix and orient it such that its local `z` axis points to a given point.",56,{"inputs":[{"name":"rot3"},{"name":"vec3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"rotation","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",56,null],[11,"append_rotation","","",56,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"prepend_rotation_mut","","",56,null],[11,"prepend_rotation","","",56,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"set_rotation","","",56,null],[11,"angle_to","","",56,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"n"}}],[11,"rotation_to","","",56,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"rand","","",56,{"inputs":[{"name":"rot3"},{"name":"r"}],"output":{"name":"rot3"}}],[11,"absolute_rotate","","",56,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"rot4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"decode","","",57,{"inputs":[{"name":"rot4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,{"inputs":[{"name":"rot4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"absolute_rotate","","",57,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotation","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"inv_rotation","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"append_rotation_mut","","",57,null],[11,"append_rotation","","",57,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"prepend_rotation_mut","","",57,null],[11,"prepend_rotation","","",57,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"set_rotation","","",57,null],[11,"submat","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"rotate","","",55,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",55,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rotate","","",55,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_rotate","","",55,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transform","","",55,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_transform","","",55,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"transform","","",55,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",55,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"dim","","",55,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",55,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"mul","","",55,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","nalgebra::structs::vec","",36,{"inputs":[{"name":"vec2"},{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"mul","nalgebra::structs::rot","",55,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","nalgebra::structs::pnt","",37,{"inputs":[{"name":"pnt2"},{"name":"rot2"}],"output":{"name":"pnt2"}}],[11,"one","nalgebra::structs::rot","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"new_identity","","",55,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"rot2"}}],[11,"to_rot_mat","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"ncols","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"col","","",55,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_col","","",55,null],[11,"nrows","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"row","","",55,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_row","","",55,null],[11,"index","","",55,null],[11,"abs","","",55,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"to_homogeneous","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"bool"}}],[11,"inv","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"option"}}],[11,"transpose","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"transpose_mut","","",55,null],[11,"approx_epsilon","","",55,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",55,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",55,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",55,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",55,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",55,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"rot2"}}],[11,"diag","","",55,{"inputs":[{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"submat","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"rotate","","",56,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",56,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",56,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",56,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transform","","",56,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",56,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",56,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",56,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"dim","","",56,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",56,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"mul","","",56,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","nalgebra::structs::vec","",38,{"inputs":[{"name":"vec3"},{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"mul","nalgebra::structs::rot","",56,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","nalgebra::structs::pnt","",39,{"inputs":[{"name":"pnt3"},{"name":"rot3"}],"output":{"name":"pnt3"}}],[11,"one","nalgebra::structs::rot","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"new_identity","","",56,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"rot3"}}],[11,"to_rot_mat","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"ncols","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"col","","",56,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_col","","",56,null],[11,"nrows","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"row","","",56,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_row","","",56,null],[11,"index","","",56,null],[11,"abs","","",56,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"to_homogeneous","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"bool"}}],[11,"inv","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"option"}}],[11,"transpose","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"transpose_mut","","",56,null],[11,"approx_epsilon","","",56,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",56,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",56,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",56,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",56,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",56,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"diag","","",56,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"submat","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"rotate","","",57,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",57,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotate","","",57,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_rotate","","",57,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transform","","",57,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_transform","","",57,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"transform","","",57,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",57,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"dim","","",57,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",57,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"mul","","",57,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","nalgebra::structs::vec","",40,{"inputs":[{"name":"vec4"},{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"mul","nalgebra::structs::rot","",57,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","nalgebra::structs::pnt","",41,{"inputs":[{"name":"pnt4"},{"name":"rot4"}],"output":{"name":"pnt4"}}],[11,"one","nalgebra::structs::rot","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"new_identity","","",57,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"rot4"}}],[11,"to_rot_mat","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"ncols","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"col","","",57,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_col","","",57,null],[11,"nrows","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"row","","",57,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_row","","",57,null],[11,"index","","",57,null],[11,"abs","","",57,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"to_homogeneous","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"bool"}}],[11,"inv","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"option"}}],[11,"transpose","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"transpose_mut","","",57,null],[11,"approx_epsilon","","",57,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",57,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",57,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",57,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",57,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",57,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"diag","","",57,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"fmt","nalgebra::structs::iso","",58,{"inputs":[{"name":"iso2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"decode","","",58,{"inputs":[{"name":"iso2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,{"inputs":[{"name":"iso2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"iso3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"decode","","",59,{"inputs":[{"name":"iso3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,{"inputs":[{"name":"iso3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"iso4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"decode","","",60,{"inputs":[{"name":"iso4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,{"inputs":[{"name":"iso4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"look_at","","Reorient and translate this transformation such that its local `x` axis points to a given\ndirection.  Note that the usually known `look_at` function does the same thing but with the\n`z` axis. See `look_at_z` for that.",59,{"inputs":[{"name":"iso3"},{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"look_at_z","","Reorient and translate this transformation such that its local `z` axis points to a given\ndirection.",59,{"inputs":[{"name":"iso3"},{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",60,{"inputs":[{"name":"iso4"},{"name":"vec4"},{"name":"rot4"}],"output":{"name":"iso4"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",58,{"inputs":[{"name":"iso2"},{"name":"vec2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",58,{"inputs":[{"name":"iso2"},{"name":"vec2"},{"name":"rot2"}],"output":{"name":"iso2"}}],[11,"to_rot_mat","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"rot2"}}],[11,"rotation","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",58,null],[11,"append_rotation","","",58,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"prepend_rotation_mut","","",58,null],[11,"prepend_rotation","","",58,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"set_rotation","","",58,null],[11,"dim","","",58,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"absolute_rotate","","",58,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",58,{"inputs":[{"name":"iso2"},{"name":"r"}],"output":{"name":"iso2"}}],[11,"approx_epsilon","","",58,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",58,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",58,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",58,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"bool"}}],[11,"inv","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"option"}}],[11,"transform","","",58,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",58,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transformation","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"inv_transformation","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"append_transformation_mut","","",58,null],[11,"append_transformation","","",58,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"prepend_transformation_mut","","",58,null],[11,"prepend_transformation","","",58,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"set_transformation","","",58,null],[11,"rotate","","",58,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",58,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"translation","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",58,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",58,null],[11,"append_translation","","",58,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"prepend_translation_mut","","",58,null],[11,"prepend_translation","","",58,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"set_translation","","",58,null],[11,"translate","","",58,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",58,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",58,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"mul","","",58,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","nalgebra::structs::pnt","",37,{"inputs":[{"name":"pnt2"},{"name":"iso2"}],"output":{"name":"pnt2"}}],[11,"new","nalgebra::structs::iso","Creates a new isometry from a rotation matrix and a vector.",59,{"inputs":[{"name":"iso3"},{"name":"vec3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",59,{"inputs":[{"name":"iso3"},{"name":"vec3"},{"name":"rot3"}],"output":{"name":"iso3"}}],[11,"to_rot_mat","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"rot3"}}],[11,"rotation","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",59,null],[11,"append_rotation","","",59,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_rotation_mut","","",59,null],[11,"prepend_rotation","","",59,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_rotation","","",59,null],[11,"dim","","",59,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"absolute_rotate","","",59,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",59,{"inputs":[{"name":"iso3"},{"name":"r"}],"output":{"name":"iso3"}}],[11,"approx_epsilon","","",59,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",59,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",59,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",59,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"bool"}}],[11,"inv","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"option"}}],[11,"transform","","",59,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",59,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transformation","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"inv_transformation","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"append_transformation_mut","","",59,null],[11,"append_transformation","","",59,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"prepend_transformation_mut","","",59,null],[11,"prepend_transformation","","",59,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"set_transformation","","",59,null],[11,"rotate","","",59,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",59,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"translation","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",59,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",59,null],[11,"append_translation","","",59,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_translation_mut","","",59,null],[11,"prepend_translation","","",59,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_translation","","",59,null],[11,"translate","","",59,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",59,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",59,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"mul","","",59,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","nalgebra::structs::pnt","",39,{"inputs":[{"name":"pnt3"},{"name":"iso3"}],"output":{"name":"pnt3"}}],[11,"dim","nalgebra::structs::iso","",60,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",60,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"absolute_rotate","","",60,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"approx_epsilon","","",60,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",60,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",60,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",60,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",60,{"inputs":[{"name":"iso4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",60,{"inputs":[{"name":"iso4"}],"output":{"name":"bool"}}],[11,"inv","","",60,{"inputs":[{"name":"iso4"}],"output":{"name":"option"}}],[11,"transform","","",60,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",60,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transformation","","",60,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"inv_transformation","","",60,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"append_transformation_mut","","",60,null],[11,"append_transformation","","",60,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"prepend_transformation_mut","","",60,null],[11,"prepend_transformation","","",60,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"set_transformation","","",60,null],[11,"rotate","","",60,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",60,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"translation","","",60,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",60,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",60,null],[11,"append_translation","","",60,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"prepend_translation_mut","","",60,null],[11,"prepend_translation","","",60,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"set_translation","","",60,null],[11,"translate","","",60,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",60,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",60,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"mul","","",60,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","nalgebra::structs::pnt","",41,{"inputs":[{"name":"pnt4"},{"name":"iso4"}],"output":{"name":"pnt4"}}],[11,"fmt","nalgebra::structs::persp","",61,{"inputs":[{"name":"persp3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"persp3"}],"output":{"name":"persp3"}}],[11,"decode","","",61,{"inputs":[{"name":"persp3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,{"inputs":[{"name":"persp3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"perspmat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"perspmat3"}],"output":{"name":"perspmat3"}}],[11,"decode","","",62,{"inputs":[{"name":"perspmat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,{"inputs":[{"name":"perspmat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D perspective projection.",61,{"inputs":[{"name":"persp3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"persp3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",61,{"inputs":[{"name":"persp3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `PerspMat3` representing this projection.",61,{"inputs":[{"name":"persp3"}],"output":{"name":"perspmat3"}}],[11,"aspect","","Gets the `width / height` aspect ratio.",61,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",61,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",61,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",61,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",61,null],[11,"set_fov","","Sets the field of view of the view frustrum.",61,null],[11,"set_znear","","Sets the near plane offset of the view frustrum.",61,null],[11,"set_zfar","","Sets the far plane offset of the view frustrum.",61,null],[11,"project_pnt","","Projects a point.",61,{"inputs":[{"name":"persp3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",61,{"inputs":[{"name":"persp3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new persepctive matrix from the aspect ratio, field of view, and near/far planes.",62,{"inputs":[{"name":"perspmat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspmat3"}}],[11,"new_with_mat","","Creates a new perspective projection matrix from a 4D matrix.",62,{"inputs":[{"name":"perspmat3"},{"name":"mat4"}],"output":{"name":"perspmat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",62,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",62,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",62,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",62,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",62,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view\nfrustrum.",62,null],[11,"set_fov","","Updates this projection with a new field of view of the view frustrum.",62,null],[11,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",62,null],[11,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",62,null],[11,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",62,null],[11,"project_pnt","","Projects a point.",62,{"inputs":[{"name":"perspmat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",62,{"inputs":[{"name":"perspmat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",62,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"fmt","nalgebra::structs::ortho","",63,{"inputs":[{"name":"ortho3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"ortho3"}],"output":{"name":"ortho3"}}],[11,"decode","","",63,{"inputs":[{"name":"ortho3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,{"inputs":[{"name":"ortho3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"orthomat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"orthomat3"}],"output":{"name":"orthomat3"}}],[11,"decode","","",64,{"inputs":[{"name":"orthomat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,{"inputs":[{"name":"orthomat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D orthographic projection.",63,{"inputs":[{"name":"ortho3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"ortho3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",63,{"inputs":[{"name":"ortho3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `OrthoMat3` representing this projection.",63,{"inputs":[{"name":"ortho3"}],"output":{"name":"orthomat3"}}],[11,"width","","The width of the view cuboid.",63,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",63,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",63,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",63,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",63,null],[11,"set_height","","Sets the height of the view cuboid.",63,null],[11,"set_znear","","Sets the near plane offset of the view cuboid.",63,null],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",63,null],[11,"project_pnt","","Projects a point.",63,{"inputs":[{"name":"ortho3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",63,{"inputs":[{"name":"ortho3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new orthographic projection matrix from the width, heihgt, znear and zfar planes of the view cuboid.",64,{"inputs":[{"name":"orthomat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthomat3"}}],[11,"new_with_mat","","Creates a new orthographic matrix from a 4D matrix.",64,{"inputs":[{"name":"orthomat3"},{"name":"mat4"}],"output":{"name":"orthomat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",64,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"width","","The width of the view cuboid.",64,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",64,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",64,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",64,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",64,null],[11,"set_height","","Sets the height of the view cuboid.",64,null],[11,"set_znear","","Sets the near plane offset of the view cuboid.",64,null],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",64,null],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",64,null],[11,"project_pnt","","Projects a point.",64,{"inputs":[{"name":"orthomat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",64,{"inputs":[{"name":"orthomat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",64,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"one","nalgebra::structs::mat","",49,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"inv","","",49,{"inputs":[{"name":"identity"}],"output":{"name":"option"}}],[11,"inv_mut","","",49,{"inputs":[{"name":"identity"}],"output":{"name":"bool"}}],[11,"mul","","",49,{"inputs":[{"name":"identity"},{"name":"t"}],"output":{"name":"t"}}],[11,"transpose","","",49,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"transpose_mut","","",49,null],[11,"translate","","",49,{"inputs":[{"name":"identity"},{"name":"v"}],"output":{"name":"v"}}],[11,"inv_translate","","",49,{"inputs":[{"name":"identity"},{"name":"v"}],"output":{"name":"v"}}],[11,"rotate","","",49,{"inputs":[{"name":"identity"},{"name":"v"}],"output":{"name":"v"}}],[11,"inv_rotate","","",49,{"inputs":[{"name":"identity"},{"name":"v"}],"output":{"name":"v"}}],[11,"absolute_rotate","","",49,{"inputs":[{"name":"identity"},{"name":"v"}],"output":{"name":"v"}}],[11,"transform","","",49,{"inputs":[{"name":"identity"},{"name":"v"}],"output":{"name":"v"}}],[11,"inv_transform","","",49,{"inputs":[{"name":"identity"},{"name":"v"}],"output":{"name":"v"}}],[11,"inv","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"option"}}],[11,"inv_mut","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"bool"}}],[11,"inv","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"option"}}],[11,"inv_mut","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"bool"}}],[11,"inv","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"option"}}],[11,"inv_mut","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"bool"}}],[11,"det","","",50,{"inputs":[{"name":"mat1"}],"output":{"name":"n"}}],[11,"det","","",18,{"inputs":[{"name":"mat2"}],"output":{"name":"n"}}],[11,"det","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"n"}}],[11,"nrows","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"usize"}}],[11,"row","","",51,{"inputs":[{"name":"mat3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_row","","",51,null],[11,"ncols","","",51,{"inputs":[{"name":"mat3"}],"output":{"name":"usize"}}],[11,"col","","",51,{"inputs":[{"name":"mat3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_col","","",51,null],[11,"mul","","",51,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"mul","","",18,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"mul","","",51,{"inputs":[{"name":"mat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","nalgebra::structs::vec","",38,{"inputs":[{"name":"vec3"},{"name":"mat3"}],"output":{"name":"vec3"}}],[11,"mul","","",36,{"inputs":[{"name":"vec2"},{"name":"mat2"}],"output":{"name":"vec2"}}],[11,"mul","nalgebra::structs::mat","",18,{"inputs":[{"name":"mat2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",51,{"inputs":[{"name":"mat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","nalgebra::structs::pnt","",39,{"inputs":[{"name":"pnt3"},{"name":"mat3"}],"output":{"name":"pnt3"}}],[11,"mul","","",37,{"inputs":[{"name":"pnt2"},{"name":"mat2"}],"output":{"name":"pnt2"}}],[11,"mul","nalgebra::structs::mat","",18,{"inputs":[{"name":"mat2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"zero","nalgebra::structs::vec","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"is_zero","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"bool"}}],[11,"index","","",33,{"inputs":[{"name":"vec0"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",33,{"inputs":[{"name":"vec0"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"usize"}}],[11,"swap","","",33,null],[11,"unsafe_at","","",33,{"inputs":[{"name":"vec0"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",33,null],[11,"iter","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"iter"}}],[11,"iter_mut","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"itermut"}}],[11,"dim","","",33,{"inputs":[{"name":"vec0"},{"name":"option"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",33,null],[11,"orthonormal_subspace_basis","","",33,null],[11,"canonical_basis_element","","",33,{"inputs":[{"name":"vec0"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",33,{"inputs":[{"name":"vec0"},{"name":"t"}],"output":{"name":"vec0"}}],[11,"sub","","",33,{"inputs":[{"name":"vec0"},{"name":"t"}],"output":{"name":"vec0"}}],[11,"neg","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"dot","","",33,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"n"}}],[11,"mul","","",33,{"inputs":[{"name":"vec0"},{"name":"t"}],"output":{"name":"vec0"}}],[11,"div","","",33,{"inputs":[{"name":"vec0"},{"name":"t"}],"output":{"name":"vec0"}}],[11,"translation","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"inv_translation","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"append_translation_mut","","",33,null],[11,"append_translation","","",33,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"prepend_translation_mut","","",33,null],[11,"prepend_translation","","",33,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"set_translation","","",33,null],[11,"sqnorm","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"n"}}],[11,"norm","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"n"}}],[11,"normalize","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"normalize_mut","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",33,{"inputs":[{"name":"vec0"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",33,{"inputs":[{"name":"vec0"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",33,{"inputs":[{"name":"vec0"},{"name":"vec0"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",33,{"inputs":[{"name":"vec0"},{"name":"vec0"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"from_iter","","",33,{"inputs":[{"name":"vec0"},{"name":"i"}],"output":{"name":"vec0"}}],[11,"max_value","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"min_value","","",33,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"rand","","",33,{"inputs":[{"name":"vec0"},{"name":"r"}],"output":{"name":"vec0"}}],[11,"angle_to","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"n"}}],[11,"rotation_to","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"rot2"}}],[11,"angle_to","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"n"}}],[11,"rotation_to","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"cross","","",36,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec1"}}],[11,"cross_matrix","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"cross","","",38,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"cross_matrix","","",38,{"inputs":[{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"nrows","","",36,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"row","","",36,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"set_row","","",36,null],[11,"canonical_basis","","",34,null],[11,"orthonormal_subspace_basis","","",34,null],[11,"canonical_basis_element","","",34,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"option"}}],[11,"canonical_basis","","",36,null],[11,"orthonormal_subspace_basis","","",36,null],[11,"canonical_basis_element","","",36,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"option"}}],[11,"canonical_basis","","",38,null],[11,"orthonormal_subspace_basis","","",38,null],[11,"canonical_basis_element","","",38,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"option"}}],[11,"sample","","",34,null],[11,"sample","","",36,null],[11,"sample","","",38,null],[11,"sample","","",40,null],[11,"fmt","nalgebra::traits::operations","",65,{"inputs":[{"name":"pordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"pordering"}],"output":{"name":"pordering"}}],[11,"decode","","",65,{"inputs":[{"name":"pordering"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,{"inputs":[{"name":"pordering"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_eq","","Returns `true` if `self` is equal to `Equal`.",65,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_lt","","Returns `true` if `self` is equal to `Less`.",65,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",65,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_gt","","Returns `true` if `self` is equal to `Greater`.",65,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",65,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",65,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"from_ordering","","Creates a `POrdering` from an `Ordering`.",65,{"inputs":[{"name":"pordering"},{"name":"ordering"}],"output":{"name":"pordering"}}],[11,"to_ordering","","Converts this `POrdering` to an `Ordering`.",65,{"inputs":[{"name":"pordering"}],"output":{"name":"option"}}],[3,"Mat2","imageproc::math","Square matrix of dimension 2.",null,null],[12,"m11","","",18,null],[12,"m21","","",18,null],[12,"m12","","",18,null],[12,"m22","","",18,null],[3,"Vec2","","Vector of dimension 2.",null,null],[12,"x","","First component of the vector.",36,null],[12,"y","","Second component of the vector.",36,null],[3,"Affine2","","A 2d affine transformation.",null,null],[12,"linear","","",66,null],[12,"translation","","",66,null],[5,"l2_norm","","",null,null],[5,"cast","","Helper for a conversion that we know can&#39;t fail.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[11,"fmt","","",66,{"inputs":[{"name":"affine2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"affine2"},{"name":"affine2"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"affine2"},{"name":"affine2"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"affine2"}],"output":{"name":"affine2"}}],[11,"new","","Constructs an Affine2 with given linear transformation\nand translation.",66,{"inputs":[{"name":"affine2"},{"name":"mat2"},{"name":"vec2"}],"output":{"name":"affine2"}}],[11,"identity","","The identity transformation.",66,{"inputs":[{"name":"affine2"}],"output":{"name":"affine2"}}],[11,"inverse","","Returns the inverse of an affine transformation, or\nNone if its linear part is singular.",66,{"inputs":[{"name":"affine2"}],"output":{"name":"option"}}],[11,"apply","","Applies the affine transformation to a given vector.",66,{"inputs":[{"name":"affine2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[0,"multiarray","imageproc","Helpers providing multi-dimensional views of 1d data.",null,null],[3,"Array3d","imageproc::multiarray","A 3d array that owns its data.",null,null],[12,"data","","",67,null],[12,"lengths","","Lengths of the dimensions, from innermost (i.e. fastest-varying) to outermost.",67,null],[3,"View3d","","A view into a 3d array.",null,null],[12,"data","","THe underlying data.",68,null],[12,"lengths","","Lengths of the dimensions, from innermost (i.e. fastest-varying) to outermost.",68,null],[11,"new","","Allocates a new Array3d with the given dimensions.",67,null],[11,"view_mut","","Provides a 3d view of the data.",67,{"inputs":[{"name":"array3d"}],"output":{"name":"view3d"}}],[11,"from_raw","","Constructs index from existing data and the lengths of the desired dimensions.",68,null],[11,"data","","Immutable access to the raw data.",68,null],[11,"data_mut","","Mutable access to the raw data.",68,null],[11,"at","","An immutable reference from a 3d index.",68,null],[11,"at_mut","","A mutable reference from a 3d index.",68,null],[11,"inner_slice","","All entries with the given outer dimensions. As the first dimension\nis fastest varying, this is a contiguous slice.",68,null],[11,"inner_slice_mut","","All entries with the given outer dimensions. As the first dimension\nis fastest varying, this is a contiguous slice.",68,null],[0,"noise","imageproc","Functions for adding synthetic noise to images.",null,null],[5,"gaussian_noise","imageproc::noise","Adds independent additive Gaussian noise to all channels\nof an image, with the given mean and standard deviation.",null,{"inputs":[{"name":"i"},{"name":"f64"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecbuffer"}}],[5,"gaussian_noise_mut","","Adds independent additive Gaussian noise to all channels\nof an image in place, with the given mean and standard deviation.",null,{"inputs":[{"name":"i"},{"name":"f64"},{"name":"f64"},{"name":"usize"}],"output":null}],[5,"salt_and_pepper_noise","","Converts pixels to black or white at the given rate. Black and\nwhite occur with equal probability.",null,{"inputs":[{"name":"i"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecbuffer"}}],[5,"salt_and_pepper_noise_mut","","Converts pixels to black or white in place at the given rate. Black and\nwhite occur with equal probability.",null,{"inputs":[{"name":"i"},{"name":"f64"},{"name":"usize"}],"output":null}],[0,"pixelops","imageproc","Pixel manipulations.",null,null],[5,"weighted_sum","imageproc::pixelops","Adds pixels with the given weights. Results are clamped to prevent arithmetical overflows.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"f32"},{"name":"f32"}],"output":{"name":"p"}}],[0,"rect","imageproc","Basic manipulation of rectangles.",null,null],[3,"Rect","imageproc::rect","A rectangular region of non-zero width and height.",null,null],[3,"RectPosition","","Position of the top left of a rectangle.",null,null],[8,"Region","","A geometrical representation of a set of 2D points with coordinate type T.",null,null],[10,"contains","","",69,{"inputs":[{"name":"region"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"at","","Reduces possibility of confusing coordinates and dimensions\nwhen specifying rects.",70,{"inputs":[{"name":"rect"},{"name":"i32"},{"name":"i32"}],"output":{"name":"rectposition"}}],[11,"top","","Smallest y-coordinate reached by rect.",70,{"inputs":[{"name":"rect"}],"output":{"name":"i32"}}],[11,"left","","Smallest x-coordinate reached by rect.",70,{"inputs":[{"name":"rect"}],"output":{"name":"i32"}}],[11,"bottom","","Greatest y-coordinate reached by rect.",70,{"inputs":[{"name":"rect"}],"output":{"name":"i32"}}],[11,"right","","Greatest x-coordinate reached by rect.",70,{"inputs":[{"name":"rect"}],"output":{"name":"i32"}}],[11,"width","","Width of rect.",70,{"inputs":[{"name":"rect"}],"output":{"name":"u32"}}],[11,"height","","Height of rect.",70,{"inputs":[{"name":"rect"}],"output":{"name":"u32"}}],[11,"intersect","","Returns the intersection of self and other, or none if they are are disjoint.",70,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"option"}}],[11,"contains","","",70,{"inputs":[{"name":"rect"},{"name":"i32"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"contains","","",70,{"inputs":[{"name":"rect"},{"name":"f32"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"rectposition"},{"name":"rectposition"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"rectposition"},{"name":"rectposition"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"rectposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"rectposition"}],"output":{"name":"rectposition"}}],[11,"of_size","","Construct a rectangle from a position and size. Width and height\nare required to be strictly positive.",71,{"inputs":[{"name":"rectposition"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rect"}}],[0,"regionlabelling","imageproc","Functions for finding and labelling connected components of an image.",null,null],[4,"Connectivity","imageproc::regionlabelling","Whether we consider the NW, NE, SW, and SE neighbors of\na pixel to be connected to it, or just its N, S, E, and W\nneighbors.",null,null],[13,"Four","","",72,null],[13,"Eight","","",72,null],[5,"connected_components","","Returns an image of the same size as the input, where each pixel\nis labelled by the connected foreground component it belongs to,\nor 0 if it&#39;s in the background. Input pixels are treated as belonging\nto the background if and only if they have value 0.",null,{"inputs":[{"name":"i"},{"name":"connectivity"}],"output":{"name":"vecbuffer"}}],[11,"clone","","",72,{"inputs":[{"name":"connectivity"}],"output":{"name":"connectivity"}}],[11,"eq","","",72,{"inputs":[{"name":"connectivity"},{"name":"connectivity"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"connectivity"},{"name":"connectivity"}],"output":{"name":"bool"}}],[11,"fmt","","",72,{"inputs":[{"name":"connectivity"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"suppress","imageproc","Functions for suppressing non-maximal values.",null,null],[5,"suppress_non_maximum","imageproc::suppress","Returned image has zeroes for all inputs pixels which do not have the greatest\nintensity in the (2 * radius + 1) square block centred on them.\nTies are resolved lexicographically.",null,{"inputs":[{"name":"i"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[5,"local_maxima","","Returns all items which have the highest score in the\n(2 * radius + 1) square block centred on them. Ties are resolved lexicographically.",null,null],[0,"unionfind","imageproc","An implementation of disjoint set forests for union find.",null,null],[3,"DisjointSetForest","imageproc::unionfind","Data structure for efficient union find.",null,null],[11,"new","","Constructs forest of singletons with count elements.",73,{"inputs":[{"name":"disjointsetforest"},{"name":"usize"}],"output":{"name":"disjointsetforest"}}],[11,"num_trees","","Returns the number of trees in the forest.",73,{"inputs":[{"name":"disjointsetforest"}],"output":{"name":"usize"}}],[11,"root","","Returns index of the root of the tree containing i.\nNeeds mutable reference to self for path compression.",73,{"inputs":[{"name":"disjointsetforest"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"find","","Returns true if i and j are in the same tree.\nNeed mutable reference to self for path compression.",73,{"inputs":[{"name":"disjointsetforest"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"union","","Unions the trees containing i and j.",73,{"inputs":[{"name":"disjointsetforest"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"trees","","Returns the elements of each tree.",73,{"inputs":[{"name":"disjointsetforest"}],"output":{"name":"vec"}}],[14,"assert_pixels_eq!","imageproc","Panics if any pixels differ between the two input images.",null,null],[14,"assert_pixels_eq_within!","","Panics if any pixels differ between the two images by more than the\ngiven tolerance in a single channel.",null,null],[14,"assert_dimensions_match!","","Panics if image dimensions do not match.",null,null]],"paths":[[8,"ArbitraryPixel"],[3,"TestBuffer"],[3,"Rgb"],[3,"Luma"],[4,"Interpolation"],[3,"Corner"],[4,"Fast"],[8,"HasBlack"],[8,"HasWhite"],[8,"Position"],[8,"Score"],[8,"Clamp"],[3,"Kernel"],[4,"Sign"],[3,"HaarFilter"],[3,"HogOptions"],[3,"HogSpec"],[8,"WithChannel"],[3,"Mat2"],[3,"DMat"],[3,"DVec"],[3,"DMat1"],[3,"DVec1"],[3,"DMat2"],[3,"DVec2"],[3,"DMat3"],[3,"DVec3"],[3,"DMat4"],[3,"DVec4"],[3,"DMat5"],[3,"DVec5"],[3,"DMat6"],[3,"DVec6"],[3,"Vec0"],[3,"Vec1"],[3,"Pnt1"],[3,"Vec2"],[3,"Pnt2"],[3,"Vec3"],[3,"Pnt3"],[3,"Vec4"],[3,"Pnt4"],[3,"Vec5"],[3,"Pnt5"],[3,"Vec6"],[3,"Pnt6"],[3,"Pnt0"],[3,"Quat"],[3,"UnitQuat"],[3,"Identity"],[3,"Mat1"],[3,"Mat3"],[3,"Mat4"],[3,"Mat5"],[3,"Mat6"],[3,"Rot2"],[3,"Rot3"],[3,"Rot4"],[3,"Iso2"],[3,"Iso3"],[3,"Iso4"],[3,"Persp3"],[3,"PerspMat3"],[3,"Ortho3"],[3,"OrthoMat3"],[4,"POrdering"],[3,"Affine2"],[3,"Array3d"],[3,"View3d"],[8,"Region"],[3,"Rect"],[3,"RectPosition"],[4,"Connectivity"],[3,"DisjointSetForest"]]};
searchIndex['nalgebra'] = {"items":[[3,"Identity","nalgebra","Special identity matrix. All its operation are no-ops.",null,null],[3,"DMat","","Matrix with dimensions unknown at compile-time.",null,null],[3,"DMat1","","",null,null],[3,"DMat2","","",null,null],[3,"DMat3","","",null,null],[3,"DMat4","","",null,null],[3,"DMat5","","",null,null],[3,"DMat6","","",null,null],[3,"DVec","","Heap allocated, dynamically sized vector.",null,null],[12,"at","","Components of the vector. Contains as much elements as the vector dimension.",0,null],[3,"DVec1","","Stack-allocated, dynamically sized vector with a maximum size of 1.",null,null],[3,"DVec2","","Stack-allocated, dynamically sized vector with a maximum size of 2.",null,null],[3,"DVec3","","Stack-allocated, dynamically sized vector with a maximum size of 3.",null,null],[3,"DVec4","","Stack-allocated, dynamically sized vector with a maximum size of 4.",null,null],[3,"DVec5","","Stack-allocated, dynamically sized vector with a maximum size of 5.",null,null],[3,"DVec6","","Stack-allocated, dynamically sized vector with a maximum size of 6.",null,null],[3,"Iso2","","Two dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",1,null],[12,"translation","","The translation applicable by this isometry.",1,null],[3,"Iso3","","Three dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",2,null],[12,"translation","","The translation applicable by this isometry.",2,null],[3,"Iso4","","Four dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",3,null],[12,"translation","","The translation applicable by this isometry.",3,null],[3,"Mat1","","Square matrix of dimension 1.",null,null],[12,"m11","","",4,null],[3,"Mat2","","Square matrix of dimension 2.",null,null],[12,"m11","","",5,null],[12,"m21","","",5,null],[12,"m12","","",5,null],[12,"m22","","",5,null],[3,"Mat3","","Square matrix of dimension 3.",null,null],[12,"m11","","",6,null],[12,"m21","","",6,null],[12,"m31","","",6,null],[12,"m12","","",6,null],[12,"m22","","",6,null],[12,"m32","","",6,null],[12,"m13","","",6,null],[12,"m23","","",6,null],[12,"m33","","",6,null],[3,"Mat4","","Square matrix of dimension 4.",null,null],[12,"m11","","",7,null],[12,"m21","","",7,null],[12,"m31","","",7,null],[12,"m41","","",7,null],[12,"m12","","",7,null],[12,"m22","","",7,null],[12,"m32","","",7,null],[12,"m42","","",7,null],[12,"m13","","",7,null],[12,"m23","","",7,null],[12,"m33","","",7,null],[12,"m43","","",7,null],[12,"m14","","",7,null],[12,"m24","","",7,null],[12,"m34","","",7,null],[12,"m44","","",7,null],[3,"Mat5","","Square matrix of dimension 5.",null,null],[12,"m11","","",8,null],[12,"m21","","",8,null],[12,"m31","","",8,null],[12,"m41","","",8,null],[12,"m51","","",8,null],[12,"m12","","",8,null],[12,"m22","","",8,null],[12,"m32","","",8,null],[12,"m42","","",8,null],[12,"m52","","",8,null],[12,"m13","","",8,null],[12,"m23","","",8,null],[12,"m33","","",8,null],[12,"m43","","",8,null],[12,"m53","","",8,null],[12,"m14","","",8,null],[12,"m24","","",8,null],[12,"m34","","",8,null],[12,"m44","","",8,null],[12,"m54","","",8,null],[12,"m15","","",8,null],[12,"m25","","",8,null],[12,"m35","","",8,null],[12,"m45","","",8,null],[12,"m55","","",8,null],[3,"Mat6","","Square matrix of dimension 6.",null,null],[12,"m11","","",9,null],[12,"m21","","",9,null],[12,"m31","","",9,null],[12,"m41","","",9,null],[12,"m51","","",9,null],[12,"m61","","",9,null],[12,"m12","","",9,null],[12,"m22","","",9,null],[12,"m32","","",9,null],[12,"m42","","",9,null],[12,"m52","","",9,null],[12,"m62","","",9,null],[12,"m13","","",9,null],[12,"m23","","",9,null],[12,"m33","","",9,null],[12,"m43","","",9,null],[12,"m53","","",9,null],[12,"m63","","",9,null],[12,"m14","","",9,null],[12,"m24","","",9,null],[12,"m34","","",9,null],[12,"m44","","",9,null],[12,"m54","","",9,null],[12,"m64","","",9,null],[12,"m15","","",9,null],[12,"m25","","",9,null],[12,"m35","","",9,null],[12,"m45","","",9,null],[12,"m55","","",9,null],[12,"m65","","",9,null],[12,"m16","","",9,null],[12,"m26","","",9,null],[12,"m36","","",9,null],[12,"m46","","",9,null],[12,"m56","","",9,null],[12,"m66","","",9,null],[3,"Rot2","","Two dimensional rotation matrix.",null,null],[3,"Rot3","","Three dimensional rotation matrix.",null,null],[3,"Rot4","","Four dimensional rotation matrix.",null,null],[3,"Vec0","","Vector of dimension 0.",null,null],[3,"Vec1","","Vector of dimension 1.",null,null],[12,"x","","First component of the vector.",10,null],[3,"Vec2","","Vector of dimension 2.",null,null],[12,"x","","First component of the vector.",11,null],[12,"y","","Second component of the vector.",11,null],[3,"Vec3","","Vector of dimension 3.",null,null],[12,"x","","First component of the vector.",12,null],[12,"y","","Second component of the vector.",12,null],[12,"z","","Third component of the vector.",12,null],[3,"Vec4","","Vector of dimension 4.",null,null],[12,"x","","First component of the vector.",13,null],[12,"y","","Second component of the vector.",13,null],[12,"z","","Third component of the vector.",13,null],[12,"w","","Fourth component of the vector.",13,null],[3,"Vec5","","Vector of dimension 5.",null,null],[12,"x","","First component of the vector.",14,null],[12,"y","","Second component of the vector.",14,null],[12,"z","","Third component of the vector.",14,null],[12,"w","","Fourth component of the vector.",14,null],[12,"a","","Fifth of the vector.",14,null],[3,"Vec6","","Vector of dimension 6.",null,null],[12,"x","","First component of the vector.",15,null],[12,"y","","Second component of the vector.",15,null],[12,"z","","Third component of the vector.",15,null],[12,"w","","Fourth component of the vector.",15,null],[12,"a","","Fifth of the vector.",15,null],[12,"b","","Sixth component of the vector.",15,null],[3,"Pnt0","","Point of dimension 0.",null,null],[3,"Pnt1","","Point of dimension 1.",null,null],[12,"x","","First component of the point.",16,null],[3,"Pnt2","","Point of dimension 2.",null,null],[12,"x","","First component of the point.",17,null],[12,"y","","Second component of the point.",17,null],[3,"Pnt3","","Point of dimension 3.",null,null],[12,"x","","First component of the point.",18,null],[12,"y","","Second component of the point.",18,null],[12,"z","","Third component of the point.",18,null],[3,"Pnt4","","Point of dimension 4.",null,null],[12,"x","","First component of the point.",19,null],[12,"y","","Second component of the point.",19,null],[12,"z","","Third component of the point.",19,null],[12,"w","","Fourth component of the point.",19,null],[3,"Pnt5","","Point of dimension 5.",null,null],[12,"x","","First component of the point.",20,null],[12,"y","","Second component of the point.",20,null],[12,"z","","Third component of the point.",20,null],[12,"w","","Fourth component of the point.",20,null],[12,"a","","Fifth of the point.",20,null],[3,"Pnt6","","Point of dimension 6.",null,null],[12,"x","","First component of the point.",21,null],[12,"y","","Second component of the point.",21,null],[12,"z","","Third component of the point.",21,null],[12,"w","","Fourth component of the point.",21,null],[12,"a","","Fifth of the point.",21,null],[12,"b","","Sixth component of the point.",21,null],[3,"Persp3","","A 3D perspective projection stored without any matrix.",null,null],[3,"PerspMat3","","A 3D perspective projection stored as a 4D matrix.",null,null],[3,"Ortho3","","A 3D orthographic projection stored without any matrix.",null,null],[3,"OrthoMat3","","A 3D orthographic projection stored as a 4D matrix.",null,null],[3,"Quat","","A quaternion.",null,null],[12,"w","","The scalar component of the quaternion.",22,null],[12,"i","","The first vector component of the quaternion.",22,null],[12,"j","","The second vector component of the quaternion.",22,null],[12,"k","","The third vector component of the quaternion.",22,null],[3,"UnitQuat","","A unit quaternion that can represent a 3D rotation.",null,null],[4,"POrdering","","Result of a partial ordering.",null,null],[13,"PartialLess","","Result of a strict comparison.",23,null],[13,"PartialEqual","","Equality relationship.",23,null],[13,"PartialGreater","","Result of a strict comparison.",23,null],[13,"NotComparable","","Result of a comparison between two objects that are not comparable.",23,null],[5,"qr","","QR decomposition using Householder reflections.",null,null],[5,"householder_matrix","","Get the householder matrix corresponding to a reflexion to the hyperplane\ndefined by `vec`. It can be a reflexion contained in a subspace.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"}],"output":{"name":"m"}}],[5,"cholesky","","Cholesky decomposition G of a square symmetric positive definite matrix A, such that A = G * G^T",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"hessenberg","","Hessenberg\nReturns the matrix m in Hessenberg form and the corresponding similarity transformation",null,null],[5,"clamp","","Change the input value to ensure it is on the range `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"pordering"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a &lt; b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a &lt;= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a &gt; b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a &gt;= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"identity","","Create a special identity object.",null,{"inputs":[],"output":{"name":"identity"}}],[5,"zero","","Create a zero-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"is_zero","","Tests is a value is iqual to zero.",null,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[5,"one","","Create a one-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"orig","","Returns the trivial origin of an affine space.",null,{"inputs":[],"output":{"name":"p"}}],[5,"center","","Returns the center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"dist","","Returns the distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"sqdist","","Returns the squared distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"translation","","Gets the translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inv_translation","","Gets the inverse translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_translation","","Applies the translation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"translate","","Applies a translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"inv_translate","","Applies an inverse translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"rotation","","Gets the rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inv_rotation","","Gets the inverse rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_rotation","","Applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"prepend_rotation","","Pre-applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"rotate","","Applies a rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inv_rotate","","Applies an inverse rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"append_rotation_wrt_point","","Rotates a copy of `m` by `amount` using `center` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"},{"name":"lv"}],"output":{"name":"m"}}],[5,"append_rotation_wrt_center","","Rotates a copy of `m` by `amount` using `m.translation()` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"}],"output":{"name":"m"}}],[5,"angle_between","","Computes the angle of the rotation needed to transfom `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"angletype"}}],[5,"rotation_between","","Computes the rotation needed to transform `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"deltarotationtype"}}],[5,"to_rot_mat","","Builds a rotation matrix from `r`.",null,{"inputs":[{"name":"r"}],"output":{"name":"m"}}],[5,"absolute_rotate","","Applies a rotation using the absolute values of its components.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"transformation","","Gets the transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"inv_transformation","","Gets the inverse transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"append_transformation","","Gets a transformed copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"t"}],"output":{"name":"m"}}],[5,"transform","","Applies a transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inv_transform","","Applies an inverse transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"dot","","Computes the dot product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[5,"norm","","Computes the L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"sqnorm","","Computes the squared L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"normalize","","Gets the normalized version of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"det","","Computes the determinant of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"cross","","Computes the cross product of two vectors.",null,{"inputs":[{"name":"lv"},{"name":"lv"}],"output":{"name":"crossproducttype"}}],[5,"cross_matrix","","Given a vector, computes the matrix which, when multiplied by another vector, computes a cross\nproduct.",null,{"inputs":[{"name":"v"}],"output":{"name":"m"}}],[5,"to_homogeneous","","Converts a matrix or vector to homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"from_homogeneous","","Converts a matrix or vector from homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"sample_sphere","","Samples the unit sphere living on the dimension as the samples types.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"approx_eq","","Tests approximate equality.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"n"}],"output":{"name":"bool"}}],[5,"abs","","Computes a component-wise absolute value.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"inv","","Gets an inverted copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"transpose","","Gets a transposed copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"outer","","Computes the outer product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"outerproducttype"}}],[5,"cov","","Computes the covariance of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"mean","","Computes the mean of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"eigen_qr","","Computes the eigenvalues and eigenvectors of a square matrix usin the QR algorithm.",null,null],[5,"new_identity","","Construct the identity matrix for a given dimension",null,{"inputs":[{"name":"usize"}],"output":{"name":"m"}}],[5,"repeat","","Create an object by repeating a value.",null,{"inputs":[{"name":"n"}],"output":{"name":"t"}}],[5,"canonical_basis","","Computes the canonical basis for a given dimension.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"orthonormal_subspace_basis","","Computes the basis of the orthonormal subspace of a given vector.",null,{"inputs":[{"name":"v"},{"name":"f"}],"output":null}],[5,"canonical_basis_element","","Gets the (0-based) i-th element of the canonical basis of V.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[5,"diag","","Gets the diagonal of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"dim","","Gets the dimension an object lives in.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"shape","","Gets the indexable range of an object.",null,{"inputs":[{"name":"v"}],"output":{"name":"i"}}],[5,"cast","","Converts an object from one type to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[11,"clone","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"eq","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized matrix.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is much faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is much faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24,null],[11,"from_row_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator.\nThe source contains the matrix data in row-major order.\nNote that `from_col_iter` is much faster than `from_row_iter` since a `DMat` stores its data\nin column-major order.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmat"}}],[11,"from_col_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator.\nThe source contains the matrix data in column-major order.\nNote that `from_col_iter` is much faster than `from_row_iter` since a `DMat` stores its data\nin column-major order.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmat"}}],[11,"from_fn","","Builds a matrix using an initialization function.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat"}}],[11,"into_vec","","Transforms this matrix into an array. This consumes the matrix and is O(1).\nThe returned vector contains the matrix data in column-major order.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"vec"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"reset","","",24,{"inputs":[{"name":"dmat"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"nrows","","The number of row on the matrix.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24,null],[11,"new_identity","","Builds an identity matrix.",24,{"inputs":[{"name":"dmat"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",24,null],[11,"unsafe_at","","Just like `at` without bounds checking.",24,null],[11,"swap","","",24,null],[11,"shape","","",24,null],[11,"index","","",24,null],[11,"index_mut","","",24,null],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"inv","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"option"}}],[11,"inv_mut","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"transpose","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"transpose_mut","","",24,{"inputs":[{"name":"dmat"}],"output":null}],[11,"mean","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"cov","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"ncols","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"set_col","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"dvec"}],"output":null}],[11,"col","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"col_slice","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"nrows","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"set_row","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"dvec"}],"output":null}],[11,"row","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"row_slice","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_diag","","",24,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":{"name":"dmat"}}],[11,"diag","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"approx_epsilon","","",24,{"inputs":[{"name":"dmat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",24,{"inputs":[{"name":"dmat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"dmat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"div","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"add","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"sub","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"eq","","",25,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",25,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"bool"}}],[11,"reset","","",25,{"inputs":[{"name":"dmat1"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",25,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",25,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"nrows","","The number of row on the matrix.",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",25,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",25,null],[11,"new_identity","","Builds an identity matrix.",25,{"inputs":[{"name":"dmat1"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",25,null],[11,"unsafe_at","","Just like `at` without bounds checking.",25,null],[11,"swap","","",25,null],[11,"shape","","",25,null],[11,"index","","",25,null],[11,"index_mut","","",25,null],[11,"mul","","",25,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"mul","","",25,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"mul","","",25,{"inputs":[{"name":"dmat1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"mul","","",26,{"inputs":[{"name":"dvec1"},{"name":"dmat1"}],"output":{"name":"dvec1"}}],[11,"inv","","",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"option"}}],[11,"inv_mut","","",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"bool"}}],[11,"transpose","","",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"transpose_mut","","",25,{"inputs":[{"name":"dmat1"}],"output":null}],[11,"mean","","",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"dvec1"}}],[11,"cov","","",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"ncols","","",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"set_col","","",25,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"dvec1"}],"output":null}],[11,"col","","",25,{"inputs":[{"name":"dmat1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"col_slice","","",25,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"nrows","","",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"usize"}}],[11,"set_row","","",25,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"dvec1"}],"output":null}],[11,"row","","",25,{"inputs":[{"name":"dmat1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"row_slice","","",25,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"from_diag","","",25,{"inputs":[{"name":"dmat1"},{"name":"dvec1"}],"output":{"name":"dmat1"}}],[11,"diag","","",25,{"inputs":[{"name":"dmat1"}],"output":{"name":"dvec1"}}],[11,"approx_epsilon","","",25,{"inputs":[{"name":"dmat1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",25,{"inputs":[{"name":"dmat1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",25,{"inputs":[{"name":"dmat1"},{"name":"dmat1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",25,{"inputs":[{"name":"dmat1"},{"name":"dmat1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"dmat1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",25,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"div","","",25,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"add","","",25,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"add","","",25,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"add","","",25,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"sub","","",25,{"inputs":[{"name":"dmat1"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"sub","","",25,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"sub","","",25,{"inputs":[{"name":"dmat1"},{"name":"dmat1"}],"output":{"name":"dmat1"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",25,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat1"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",25,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",25,null],[11,"from_fn","","Builds a matrix using an initialization function.",25,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat1"}}],[11,"new_uninitialized","","",25,{"inputs":[{"name":"dmat1"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat1"}}],[11,"eq","","",27,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",27,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"bool"}}],[11,"reset","","",27,{"inputs":[{"name":"dmat2"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",27,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",27,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"nrows","","The number of row on the matrix.",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",27,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",27,null],[11,"new_identity","","Builds an identity matrix.",27,{"inputs":[{"name":"dmat2"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",27,null],[11,"unsafe_at","","Just like `at` without bounds checking.",27,null],[11,"swap","","",27,null],[11,"shape","","",27,null],[11,"index","","",27,null],[11,"index_mut","","",27,null],[11,"mul","","",27,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"mul","","",27,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"mul","","",27,{"inputs":[{"name":"dmat2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec2"},{"name":"dmat2"}],"output":{"name":"dvec2"}}],[11,"inv","","",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"option"}}],[11,"inv_mut","","",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"bool"}}],[11,"transpose","","",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"transpose_mut","","",27,{"inputs":[{"name":"dmat2"}],"output":null}],[11,"mean","","",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"dvec2"}}],[11,"cov","","",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"ncols","","",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"set_col","","",27,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"dvec2"}],"output":null}],[11,"col","","",27,{"inputs":[{"name":"dmat2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"col_slice","","",27,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"nrows","","",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"usize"}}],[11,"set_row","","",27,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"dvec2"}],"output":null}],[11,"row","","",27,{"inputs":[{"name":"dmat2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"row_slice","","",27,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"from_diag","","",27,{"inputs":[{"name":"dmat2"},{"name":"dvec2"}],"output":{"name":"dmat2"}}],[11,"diag","","",27,{"inputs":[{"name":"dmat2"}],"output":{"name":"dvec2"}}],[11,"approx_epsilon","","",27,{"inputs":[{"name":"dmat2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",27,{"inputs":[{"name":"dmat2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",27,{"inputs":[{"name":"dmat2"},{"name":"dmat2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",27,{"inputs":[{"name":"dmat2"},{"name":"dmat2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"dmat2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",27,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"div","","",27,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"add","","",27,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"add","","",27,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"add","","",27,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"sub","","",27,{"inputs":[{"name":"dmat2"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"sub","","",27,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"sub","","",27,{"inputs":[{"name":"dmat2"},{"name":"dmat2"}],"output":{"name":"dmat2"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",27,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat2"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",27,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",27,null],[11,"from_fn","","Builds a matrix using an initialization function.",27,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat2"}}],[11,"new_uninitialized","","",27,{"inputs":[{"name":"dmat2"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat2"}}],[11,"eq","","",29,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",29,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"bool"}}],[11,"reset","","",29,{"inputs":[{"name":"dmat3"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",29,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",29,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"nrows","","The number of row on the matrix.",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",29,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",29,null],[11,"new_identity","","Builds an identity matrix.",29,{"inputs":[{"name":"dmat3"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",29,null],[11,"unsafe_at","","Just like `at` without bounds checking.",29,null],[11,"swap","","",29,null],[11,"shape","","",29,null],[11,"index","","",29,null],[11,"index_mut","","",29,null],[11,"mul","","",29,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"mul","","",29,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"mul","","",29,{"inputs":[{"name":"dmat3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec3"},{"name":"dmat3"}],"output":{"name":"dvec3"}}],[11,"inv","","",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"option"}}],[11,"inv_mut","","",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"bool"}}],[11,"transpose","","",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"transpose_mut","","",29,{"inputs":[{"name":"dmat3"}],"output":null}],[11,"mean","","",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"dvec3"}}],[11,"cov","","",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"ncols","","",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"set_col","","",29,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"dvec3"}],"output":null}],[11,"col","","",29,{"inputs":[{"name":"dmat3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"col_slice","","",29,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"nrows","","",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"usize"}}],[11,"set_row","","",29,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"dvec3"}],"output":null}],[11,"row","","",29,{"inputs":[{"name":"dmat3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"row_slice","","",29,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"from_diag","","",29,{"inputs":[{"name":"dmat3"},{"name":"dvec3"}],"output":{"name":"dmat3"}}],[11,"diag","","",29,{"inputs":[{"name":"dmat3"}],"output":{"name":"dvec3"}}],[11,"approx_epsilon","","",29,{"inputs":[{"name":"dmat3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",29,{"inputs":[{"name":"dmat3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",29,{"inputs":[{"name":"dmat3"},{"name":"dmat3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",29,{"inputs":[{"name":"dmat3"},{"name":"dmat3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"dmat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",29,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"div","","",29,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"add","","",29,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"add","","",29,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"add","","",29,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"sub","","",29,{"inputs":[{"name":"dmat3"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"sub","","",29,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"sub","","",29,{"inputs":[{"name":"dmat3"},{"name":"dmat3"}],"output":{"name":"dmat3"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",29,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat3"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",29,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",29,null],[11,"from_fn","","Builds a matrix using an initialization function.",29,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat3"}}],[11,"new_uninitialized","","",29,{"inputs":[{"name":"dmat3"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat3"}}],[11,"eq","","",31,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",31,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"bool"}}],[11,"reset","","",31,{"inputs":[{"name":"dmat4"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",31,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",31,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"nrows","","The number of row on the matrix.",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",31,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",31,null],[11,"new_identity","","Builds an identity matrix.",31,{"inputs":[{"name":"dmat4"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",31,null],[11,"unsafe_at","","Just like `at` without bounds checking.",31,null],[11,"swap","","",31,null],[11,"shape","","",31,null],[11,"index","","",31,null],[11,"index_mut","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"mul","","",31,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"mul","","",31,{"inputs":[{"name":"dmat4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"mul","","",32,{"inputs":[{"name":"dvec4"},{"name":"dmat4"}],"output":{"name":"dvec4"}}],[11,"inv","","",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"option"}}],[11,"inv_mut","","",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"bool"}}],[11,"transpose","","",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"transpose_mut","","",31,{"inputs":[{"name":"dmat4"}],"output":null}],[11,"mean","","",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"dvec4"}}],[11,"cov","","",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"ncols","","",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"set_col","","",31,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"dvec4"}],"output":null}],[11,"col","","",31,{"inputs":[{"name":"dmat4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"col_slice","","",31,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"nrows","","",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"usize"}}],[11,"set_row","","",31,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"dvec4"}],"output":null}],[11,"row","","",31,{"inputs":[{"name":"dmat4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"row_slice","","",31,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"from_diag","","",31,{"inputs":[{"name":"dmat4"},{"name":"dvec4"}],"output":{"name":"dmat4"}}],[11,"diag","","",31,{"inputs":[{"name":"dmat4"}],"output":{"name":"dvec4"}}],[11,"approx_epsilon","","",31,{"inputs":[{"name":"dmat4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",31,{"inputs":[{"name":"dmat4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",31,{"inputs":[{"name":"dmat4"},{"name":"dmat4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",31,{"inputs":[{"name":"dmat4"},{"name":"dmat4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"dmat4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",31,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"div","","",31,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"add","","",31,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"add","","",31,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"add","","",31,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"sub","","",31,{"inputs":[{"name":"dmat4"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"sub","","",31,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"sub","","",31,{"inputs":[{"name":"dmat4"},{"name":"dmat4"}],"output":{"name":"dmat4"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",31,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat4"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",31,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",31,null],[11,"from_fn","","Builds a matrix using an initialization function.",31,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat4"}}],[11,"new_uninitialized","","",31,{"inputs":[{"name":"dmat4"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat4"}}],[11,"eq","","",33,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",33,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"bool"}}],[11,"reset","","",33,{"inputs":[{"name":"dmat5"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",33,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",33,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"nrows","","The number of row on the matrix.",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",33,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",33,null],[11,"new_identity","","Builds an identity matrix.",33,{"inputs":[{"name":"dmat5"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",33,null],[11,"unsafe_at","","Just like `at` without bounds checking.",33,null],[11,"swap","","",33,null],[11,"shape","","",33,null],[11,"index","","",33,null],[11,"index_mut","","",33,null],[11,"mul","","",33,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"mul","","",33,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"mul","","",33,{"inputs":[{"name":"dmat5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"mul","","",34,{"inputs":[{"name":"dvec5"},{"name":"dmat5"}],"output":{"name":"dvec5"}}],[11,"inv","","",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"option"}}],[11,"inv_mut","","",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"bool"}}],[11,"transpose","","",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"transpose_mut","","",33,{"inputs":[{"name":"dmat5"}],"output":null}],[11,"mean","","",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"dvec5"}}],[11,"cov","","",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"ncols","","",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"set_col","","",33,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"dvec5"}],"output":null}],[11,"col","","",33,{"inputs":[{"name":"dmat5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"col_slice","","",33,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"nrows","","",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"usize"}}],[11,"set_row","","",33,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"dvec5"}],"output":null}],[11,"row","","",33,{"inputs":[{"name":"dmat5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"row_slice","","",33,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"from_diag","","",33,{"inputs":[{"name":"dmat5"},{"name":"dvec5"}],"output":{"name":"dmat5"}}],[11,"diag","","",33,{"inputs":[{"name":"dmat5"}],"output":{"name":"dvec5"}}],[11,"approx_epsilon","","",33,{"inputs":[{"name":"dmat5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",33,{"inputs":[{"name":"dmat5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",33,{"inputs":[{"name":"dmat5"},{"name":"dmat5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",33,{"inputs":[{"name":"dmat5"},{"name":"dmat5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"dmat5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",33,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"div","","",33,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"add","","",33,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"add","","",33,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"add","","",33,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"sub","","",33,{"inputs":[{"name":"dmat5"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"sub","","",33,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"sub","","",33,{"inputs":[{"name":"dmat5"},{"name":"dmat5"}],"output":{"name":"dmat5"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",33,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat5"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",33,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",33,null],[11,"from_fn","","Builds a matrix using an initialization function.",33,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat5"}}],[11,"new_uninitialized","","",33,{"inputs":[{"name":"dmat5"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat5"}}],[11,"eq","","",35,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",35,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"bool"}}],[11,"reset","","",35,{"inputs":[{"name":"dmat6"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",35,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",35,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"nrows","","The number of row on the matrix.",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",35,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",35,null],[11,"new_identity","","Builds an identity matrix.",35,{"inputs":[{"name":"dmat6"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",35,null],[11,"unsafe_at","","Just like `at` without bounds checking.",35,null],[11,"swap","","",35,null],[11,"shape","","",35,null],[11,"index","","",35,null],[11,"index_mut","","",35,null],[11,"mul","","",35,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"mul","","",35,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"mul","","",35,{"inputs":[{"name":"dmat6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"mul","","",36,{"inputs":[{"name":"dvec6"},{"name":"dmat6"}],"output":{"name":"dvec6"}}],[11,"inv","","",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"option"}}],[11,"inv_mut","","",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"bool"}}],[11,"transpose","","",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"transpose_mut","","",35,{"inputs":[{"name":"dmat6"}],"output":null}],[11,"mean","","",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"dvec6"}}],[11,"cov","","",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"ncols","","",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"set_col","","",35,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"dvec6"}],"output":null}],[11,"col","","",35,{"inputs":[{"name":"dmat6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"col_slice","","",35,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"nrows","","",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"usize"}}],[11,"set_row","","",35,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"dvec6"}],"output":null}],[11,"row","","",35,{"inputs":[{"name":"dmat6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"row_slice","","",35,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"from_diag","","",35,{"inputs":[{"name":"dmat6"},{"name":"dvec6"}],"output":{"name":"dmat6"}}],[11,"diag","","",35,{"inputs":[{"name":"dmat6"}],"output":{"name":"dvec6"}}],[11,"approx_epsilon","","",35,{"inputs":[{"name":"dmat6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",35,{"inputs":[{"name":"dmat6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",35,{"inputs":[{"name":"dmat6"},{"name":"dmat6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",35,{"inputs":[{"name":"dmat6"},{"name":"dmat6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"dmat6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",35,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"div","","",35,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"add","","",35,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"add","","",35,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"add","","",35,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"sub","","",35,{"inputs":[{"name":"dmat6"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"sub","","",35,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"sub","","",35,{"inputs":[{"name":"dmat6"},{"name":"dmat6"}],"output":{"name":"dmat6"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",35,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat6"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",35,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `$dmat` stores its data\nin column-major order.",35,null],[11,"from_fn","","Builds a matrix using an initialization function.",35,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat6"}}],[11,"new_uninitialized","","",35,{"inputs":[{"name":"dmat6"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat6"}}],[11,"clone","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"fmt","","",0,{"inputs":[{"name":"dvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized vec.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_elem","","Builds a vector filled with a constant.",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",0,null],[11,"from_fn","","Builds a vector filled with the result of a function.",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec"}}],[11,"len","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"from_iter","","",0,{"inputs":[{"name":"dvec"},{"name":"i"}],"output":{"name":"dvec"}}],[11,"new_zeros","","Builds a vector filled with zeros.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",0,{"inputs":[{"name":"dvec"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",0,null],[11,"as_mut","","Mutably slices this vector.",0,null],[11,"shape","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"swap","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"new_ones","","Builds a vector filled with ones.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"new_random","","Builds a vector filled with random values.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"iter","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"iter"}}],[11,"iter_mut","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"itermut"}}],[11,"axpy","","",0,{"inputs":[{"name":"dvec"},{"name":"n"},{"name":"dvec"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",0,{"inputs":[{"name":"dvec"}],"output":{"name":"vec"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"div","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"add","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"sub","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"neg","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"dot","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"n"}}],[11,"sqnorm","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"normalize","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"normalize_mut","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"mean","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",0,{"inputs":[{"name":"dvec"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",0,{"inputs":[{"name":"dvec"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"div","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"add","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"sub","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"len","","The number of elements of this vector.",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",26,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"eq","","",26,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"new_zeros","","Builds a vector filled with zeros.",26,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",26,null],[11,"as_mut","","Mutably slices this vector.",26,null],[11,"shape","","",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"swap","","",26,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",26,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",26,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",26,null],[11,"index_mut","","",26,null],[11,"new_ones","","Builds a vector filled with ones.",26,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"new_random","","Builds a vector filled with random values.",26,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"iter","","",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"itermut"}}],[11,"axpy","","",26,{"inputs":[{"name":"dvec1"},{"name":"n"},{"name":"dvec1"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",26,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"vec"}}],[11,"mul","","",26,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"div","","",26,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"add","","",26,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"sub","","",26,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"neg","","",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"dot","","",26,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"n"}}],[11,"sqnorm","","",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"normalize","","",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"normalize_mut","","",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"mean","","",26,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",26,{"inputs":[{"name":"dvec1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",26,{"inputs":[{"name":"dvec1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",26,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",26,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",26,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"div","","",26,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"add","","",26,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"sub","","",26,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_elem","","Builds a vector filled with a constant.",26,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",26,null],[11,"from_fn","","Builds a vector filled with the result of a function.",26,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec1"}}],[11,"from_iter","","",26,{"inputs":[{"name":"dvec1"},{"name":"i"}],"output":{"name":"dvec1"}}],[11,"len","","The number of elements of this vector.",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",28,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"eq","","",28,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"new_zeros","","Builds a vector filled with zeros.",28,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",28,null],[11,"as_mut","","Mutably slices this vector.",28,null],[11,"shape","","",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"swap","","",28,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",28,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",28,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"new_ones","","Builds a vector filled with ones.",28,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"new_random","","Builds a vector filled with random values.",28,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"iter","","",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"itermut"}}],[11,"axpy","","",28,{"inputs":[{"name":"dvec2"},{"name":"n"},{"name":"dvec2"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",28,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"vec"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"div","","",28,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"add","","",28,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"neg","","",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"dot","","",28,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"n"}}],[11,"sqnorm","","",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"normalize","","",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"normalize_mut","","",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"mean","","",28,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",28,{"inputs":[{"name":"dvec2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",28,{"inputs":[{"name":"dvec2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",28,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",28,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"div","","",28,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"add","","",28,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_elem","","Builds a vector filled with a constant.",28,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",28,null],[11,"from_fn","","Builds a vector filled with the result of a function.",28,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec2"}}],[11,"from_iter","","",28,{"inputs":[{"name":"dvec2"},{"name":"i"}],"output":{"name":"dvec2"}}],[11,"len","","The number of elements of this vector.",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",30,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"eq","","",30,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"new_zeros","","Builds a vector filled with zeros.",30,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",30,null],[11,"as_mut","","Mutably slices this vector.",30,null],[11,"shape","","",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"swap","","",30,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",30,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",30,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",30,null],[11,"index_mut","","",30,null],[11,"new_ones","","Builds a vector filled with ones.",30,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"new_random","","Builds a vector filled with random values.",30,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"iter","","",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"itermut"}}],[11,"axpy","","",30,{"inputs":[{"name":"dvec3"},{"name":"n"},{"name":"dvec3"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",30,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"vec"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"div","","",30,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"add","","",30,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"neg","","",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"dot","","",30,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"n"}}],[11,"sqnorm","","",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"normalize","","",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"normalize_mut","","",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"mean","","",30,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",30,{"inputs":[{"name":"dvec3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",30,{"inputs":[{"name":"dvec3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",30,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",30,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"div","","",30,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"add","","",30,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_elem","","Builds a vector filled with a constant.",30,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",30,null],[11,"from_fn","","Builds a vector filled with the result of a function.",30,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec3"}}],[11,"from_iter","","",30,{"inputs":[{"name":"dvec3"},{"name":"i"}],"output":{"name":"dvec3"}}],[11,"len","","The number of elements of this vector.",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",32,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"eq","","",32,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"new_zeros","","Builds a vector filled with zeros.",32,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",32,null],[11,"as_mut","","Mutably slices this vector.",32,null],[11,"shape","","",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"swap","","",32,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",32,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",32,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",32,null],[11,"index_mut","","",32,null],[11,"new_ones","","Builds a vector filled with ones.",32,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"new_random","","Builds a vector filled with random values.",32,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"iter","","",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"itermut"}}],[11,"axpy","","",32,{"inputs":[{"name":"dvec4"},{"name":"n"},{"name":"dvec4"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",32,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"vec"}}],[11,"mul","","",32,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"div","","",32,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"add","","",32,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"sub","","",32,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"neg","","",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"dot","","",32,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"n"}}],[11,"sqnorm","","",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"normalize","","",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"normalize_mut","","",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"mean","","",32,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",32,{"inputs":[{"name":"dvec4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",32,{"inputs":[{"name":"dvec4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",32,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",32,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",32,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"div","","",32,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"add","","",32,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"sub","","",32,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_elem","","Builds a vector filled with a constant.",32,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",32,null],[11,"from_fn","","Builds a vector filled with the result of a function.",32,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec4"}}],[11,"from_iter","","",32,{"inputs":[{"name":"dvec4"},{"name":"i"}],"output":{"name":"dvec4"}}],[11,"len","","The number of elements of this vector.",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",34,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"eq","","",34,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"new_zeros","","Builds a vector filled with zeros.",34,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",34,null],[11,"as_mut","","Mutably slices this vector.",34,null],[11,"shape","","",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"swap","","",34,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",34,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",34,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",34,null],[11,"index_mut","","",34,null],[11,"new_ones","","Builds a vector filled with ones.",34,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"new_random","","Builds a vector filled with random values.",34,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"iter","","",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"itermut"}}],[11,"axpy","","",34,{"inputs":[{"name":"dvec5"},{"name":"n"},{"name":"dvec5"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",34,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"vec"}}],[11,"mul","","",34,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"div","","",34,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"add","","",34,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"sub","","",34,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"neg","","",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"dot","","",34,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"n"}}],[11,"sqnorm","","",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"normalize","","",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"normalize_mut","","",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"mean","","",34,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",34,{"inputs":[{"name":"dvec5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",34,{"inputs":[{"name":"dvec5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",34,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",34,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",34,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"div","","",34,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"add","","",34,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"sub","","",34,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_elem","","Builds a vector filled with a constant.",34,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",34,null],[11,"from_fn","","Builds a vector filled with the result of a function.",34,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec5"}}],[11,"from_iter","","",34,{"inputs":[{"name":"dvec5"},{"name":"i"}],"output":{"name":"dvec5"}}],[11,"len","","The number of elements of this vector.",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vec of dimension `dim`.",36,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"eq","","",36,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"new_zeros","","Builds a vector filled with zeros.",36,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"as_ref","","Slices this vector.",36,null],[11,"as_mut","","Mutably slices this vector.",36,null],[11,"shape","","",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"swap","","",36,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",36,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",36,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",36,null],[11,"index_mut","","",36,null],[11,"new_ones","","Builds a vector filled with ones.",36,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"new_random","","Builds a vector filled with random values.",36,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"iter","","",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"itermut"}}],[11,"axpy","","",36,{"inputs":[{"name":"dvec6"},{"name":"n"},{"name":"dvec6"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",36,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"vec"}}],[11,"mul","","",36,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"div","","",36,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"add","","",36,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"sub","","",36,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"neg","","",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"dot","","",36,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"n"}}],[11,"sqnorm","","",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"normalize","","",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"normalize_mut","","",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"mean","","",36,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",36,{"inputs":[{"name":"dvec6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",36,{"inputs":[{"name":"dvec6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",36,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",36,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",36,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"div","","",36,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"add","","",36,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"sub","","",36,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_elem","","Builds a vector filled with a constant.",36,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",36,null],[11,"from_fn","","Builds a vector filled with the result of a function.",36,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"f"}],"output":{"name":"dvec6"}}],[11,"from_iter","","",36,{"inputs":[{"name":"dvec6"},{"name":"i"}],"output":{"name":"dvec6"}}],[11,"fmt","","",37,{"inputs":[{"name":"vec0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"eq","","",37,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",37,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"repeat","","",37,{"inputs":[{"name":"vec0"},{"name":"n"}],"output":{"name":"vec0"}}],[11,"fmt","","",10,{"inputs":[{"name":"vec1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"decode","","",10,{"inputs":[{"name":"vec1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"vec1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"inf","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sup","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_le","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"from","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"as_ref","","",10,null],[11,"as_mut","","",10,null],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"shape","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"swap","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"dim","","",10,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"add","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sub","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"div","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"add","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"sub","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"div","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"neg","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"dot","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"n"}}],[11,"translation","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"inv_translation","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"append_translation_mut","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"append_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"prepend_translation_mut","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"prepend_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"set_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"sqnorm","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"normalize","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"normalize_mut","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",10,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",10,{"inputs":[{"name":"vec1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"zero","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"is_zero","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"bool"}}],[11,"from_iter","","",10,{"inputs":[{"name":"vec1"},{"name":"i"}],"output":{"name":"vec1"}}],[11,"max_value","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"min_value","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"axpy","","",10,{"inputs":[{"name":"vec1"},{"name":"n"},{"name":"vec1"}],"output":null}],[11,"iter","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec2"}}],[11,"from","","",10,{"inputs":[{"name":"vec1"},{"name":"vec2"}],"output":{"name":"vec1"}}],[11,"translate","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_translate","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"rotate","","",10,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",10,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",16,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",16,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_transform","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"to_pnt","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"as_pnt","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"abs","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"rand","","",10,{"inputs":[{"name":"vec1"},{"name":"r"}],"output":{"name":"vec1"}}],[11,"mean","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"fmt","","",11,{"inputs":[{"name":"vec2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"decode","","",11,{"inputs":[{"name":"vec2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"vec2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",11,{"inputs":[{"name":"vec2"},{"name":"n"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"inf","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sup","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_le","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"from","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"as_ref","","",11,null],[11,"as_mut","","",11,null],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"shape","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"swap","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"dim","","",11,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"add","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sub","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"div","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"add","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"sub","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"div","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"neg","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"dot","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"n"}}],[11,"translation","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"append_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"prepend_translation_mut","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"prepend_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"set_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"sqnorm","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"normalize","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"normalize_mut","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",11,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",11,{"inputs":[{"name":"vec2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"zero","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"is_zero","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"bool"}}],[11,"from_iter","","",11,{"inputs":[{"name":"vec2"},{"name":"i"}],"output":{"name":"vec2"}}],[11,"max_value","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"min_value","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"axpy","","",11,{"inputs":[{"name":"vec2"},{"name":"n"},{"name":"vec2"}],"output":null}],[11,"iter","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec3"}}],[11,"from","","",11,{"inputs":[{"name":"vec2"},{"name":"vec3"}],"output":{"name":"vec2"}}],[11,"translate","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"rotate","","",11,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",11,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",17,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",17,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"to_pnt","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"as_pnt","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"abs","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",11,{"inputs":[{"name":"vec2"},{"name":"r"}],"output":{"name":"vec2"}}],[11,"mean","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"fmt","","",12,{"inputs":[{"name":"vec3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"decode","","",12,{"inputs":[{"name":"vec3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"vec3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",12,{"inputs":[{"name":"vec3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"inf","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sup","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_le","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"from","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"shape","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"swap","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"dim","","",12,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"add","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sub","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"div","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"add","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"sub","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"div","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"neg","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"dot","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"n"}}],[11,"translation","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"append_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"prepend_translation_mut","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"prepend_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"set_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"sqnorm","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"normalize","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"normalize_mut","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",12,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",12,{"inputs":[{"name":"vec3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"zero","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"is_zero","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"bool"}}],[11,"from_iter","","",12,{"inputs":[{"name":"vec3"},{"name":"i"}],"output":{"name":"vec3"}}],[11,"max_value","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"min_value","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"axpy","","",12,{"inputs":[{"name":"vec3"},{"name":"n"},{"name":"vec3"}],"output":null}],[11,"iter","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec4"}}],[11,"from","","",12,{"inputs":[{"name":"vec3"},{"name":"vec4"}],"output":{"name":"vec3"}}],[11,"translate","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"rotate","","",12,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",12,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",18,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",18,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"to_pnt","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"as_pnt","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"abs","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",12,{"inputs":[{"name":"vec3"},{"name":"r"}],"output":{"name":"vec3"}}],[11,"mean","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"fmt","","",13,{"inputs":[{"name":"vec4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"decode","","",13,{"inputs":[{"name":"vec4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"vec4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",13,{"inputs":[{"name":"vec4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"inf","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sup","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_le","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"from","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"shape","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"swap","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"dim","","",13,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",13,{"inputs":[{"name":"vec4"},{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sub","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"div","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"add","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"sub","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"div","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"neg","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"dot","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"n"}}],[11,"translation","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"append_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"prepend_translation_mut","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"prepend_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"set_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"sqnorm","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"normalize","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"normalize_mut","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",13,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",13,{"inputs":[{"name":"vec4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"zero","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"is_zero","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"bool"}}],[11,"from_iter","","",13,{"inputs":[{"name":"vec4"},{"name":"i"}],"output":{"name":"vec4"}}],[11,"max_value","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"min_value","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"axpy","","",13,{"inputs":[{"name":"vec4"},{"name":"n"},{"name":"vec4"}],"output":null}],[11,"iter","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec5"}}],[11,"from","","",13,{"inputs":[{"name":"vec4"},{"name":"vec5"}],"output":{"name":"vec4"}}],[11,"translate","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"rotate","","",13,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",13,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",19,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",19,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"to_pnt","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"as_pnt","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"abs","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rand","","",13,{"inputs":[{"name":"vec4"},{"name":"r"}],"output":{"name":"vec4"}}],[11,"mean","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"fmt","","",14,{"inputs":[{"name":"vec5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"decode","","",14,{"inputs":[{"name":"vec5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"vec5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",14,{"inputs":[{"name":"vec5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"inf","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sup","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_le","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"from","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"shape","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"swap","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"dim","","",14,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",14,{"inputs":[{"name":"vec5"},{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sub","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"div","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"add","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"sub","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"div","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"neg","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"dot","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"n"}}],[11,"translation","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"inv_translation","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"append_translation_mut","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"append_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"prepend_translation_mut","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"prepend_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"set_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"sqnorm","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"normalize","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"normalize_mut","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",14,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",14,{"inputs":[{"name":"vec5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"zero","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"is_zero","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"bool"}}],[11,"from_iter","","",14,{"inputs":[{"name":"vec5"},{"name":"i"}],"output":{"name":"vec5"}}],[11,"max_value","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"min_value","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"axpy","","",14,{"inputs":[{"name":"vec5"},{"name":"n"},{"name":"vec5"}],"output":null}],[11,"iter","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec6"}}],[11,"from","","",14,{"inputs":[{"name":"vec5"},{"name":"vec6"}],"output":{"name":"vec5"}}],[11,"translate","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_translate","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"rotate","","",14,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",14,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",20,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",20,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_transform","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"to_pnt","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"as_pnt","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"abs","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"rand","","",14,{"inputs":[{"name":"vec5"},{"name":"r"}],"output":{"name":"vec5"}}],[11,"mean","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"fmt","","",15,{"inputs":[{"name":"vec6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"decode","","",15,{"inputs":[{"name":"vec6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"vec6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",15,{"inputs":[{"name":"vec6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"inf","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sup","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_le","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"b","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"from","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"as_ref","","",15,null],[11,"as_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"shape","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"swap","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"dim","","",15,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",15,{"inputs":[{"name":"vec6"},{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sub","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"div","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"add","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"sub","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"div","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"neg","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"dot","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"n"}}],[11,"translation","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"inv_translation","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"append_translation_mut","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"append_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"prepend_translation_mut","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"prepend_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"set_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"sqnorm","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"normalize","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"normalize_mut","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",15,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",15,{"inputs":[{"name":"vec6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"zero","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"is_zero","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"bool"}}],[11,"from_iter","","",15,{"inputs":[{"name":"vec6"},{"name":"i"}],"output":{"name":"vec6"}}],[11,"max_value","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"min_value","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"axpy","","",15,{"inputs":[{"name":"vec6"},{"name":"n"},{"name":"vec6"}],"output":null}],[11,"iter","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"itermut"}}],[11,"translate","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_translate","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"rotate","","",15,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",15,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",21,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",21,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_transform","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"to_pnt","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"as_pnt","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"abs","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"rand","","",15,{"inputs":[{"name":"vec6"},{"name":"r"}],"output":{"name":"vec6"}}],[11,"mean","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"fmt","","",38,{"inputs":[{"name":"pnt0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"pnt0"}],"output":{"name":"pnt0"}}],[11,"eq","","",38,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new point.",38,{"inputs":[{"name":"pnt0"}],"output":{"name":"pnt0"}}],[11,"repeat","","",38,{"inputs":[{"name":"pnt0"},{"name":"n"}],"output":{"name":"pnt0"}}],[11,"fmt","","",16,{"inputs":[{"name":"pnt1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"decode","","",16,{"inputs":[{"name":"pnt1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"pnt1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"orig","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"is_orig","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"inf","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"sup","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_le","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"mul","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"div","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"add","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"from","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"as_ref","","",16,null],[11,"as_mut","","",16,null],[11,"index","","",16,null],[11,"index_mut","","",16,null],[11,"shape","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"swap","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"dim","","",16,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"to_vec","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"set_coords","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":null}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"neg","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"add","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"approx_epsilon","","",16,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",16,{"inputs":[{"name":"pnt1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",16,{"inputs":[{"name":"pnt1"},{"name":"i"}],"output":{"name":"pnt1"}}],[11,"max_value","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"min_value","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"axpy","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"},{"name":"pnt1"}],"output":null}],[11,"iter","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt2"}}],[11,"from","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt2"}],"output":{"name":"pnt1"}}],[11,"rand","","",16,{"inputs":[{"name":"pnt1"},{"name":"r"}],"output":{"name":"pnt1"}}],[11,"fmt","","",17,{"inputs":[{"name":"pnt2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"decode","","",17,{"inputs":[{"name":"pnt2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"pnt2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",17,{"inputs":[{"name":"pnt2"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"orig","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"is_orig","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"inf","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"sup","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_le","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"div","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"add","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"from","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"as_ref","","",17,null],[11,"as_mut","","",17,null],[11,"index","","",17,null],[11,"index_mut","","",17,null],[11,"shape","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"swap","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"dim","","",17,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"to_vec","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"set_coords","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":null}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"neg","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"add","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"approx_epsilon","","",17,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",17,{"inputs":[{"name":"pnt2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",17,{"inputs":[{"name":"pnt2"},{"name":"i"}],"output":{"name":"pnt2"}}],[11,"max_value","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"min_value","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"axpy","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"},{"name":"pnt2"}],"output":null}],[11,"iter","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt3"}}],[11,"from","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt3"}],"output":{"name":"pnt2"}}],[11,"rand","","",17,{"inputs":[{"name":"pnt2"},{"name":"r"}],"output":{"name":"pnt2"}}],[11,"fmt","","",18,{"inputs":[{"name":"pnt3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"decode","","",18,{"inputs":[{"name":"pnt3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"pnt3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",18,{"inputs":[{"name":"pnt3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"orig","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"is_orig","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"inf","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"sup","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_le","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"div","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"add","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"from","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"as_ref","","",18,null],[11,"as_mut","","",18,null],[11,"index","","",18,null],[11,"index_mut","","",18,null],[11,"shape","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"swap","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"dim","","",18,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"to_vec","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"set_coords","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":null}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"neg","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"add","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"approx_epsilon","","",18,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",18,{"inputs":[{"name":"pnt3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",18,{"inputs":[{"name":"pnt3"},{"name":"i"}],"output":{"name":"pnt3"}}],[11,"max_value","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"min_value","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"axpy","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"},{"name":"pnt3"}],"output":null}],[11,"iter","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt4"}}],[11,"from","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt4"}],"output":{"name":"pnt3"}}],[11,"rand","","",18,{"inputs":[{"name":"pnt3"},{"name":"r"}],"output":{"name":"pnt3"}}],[11,"fmt","","",19,{"inputs":[{"name":"pnt4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"decode","","",19,{"inputs":[{"name":"pnt4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"pnt4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",19,{"inputs":[{"name":"pnt4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"orig","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"is_orig","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"inf","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"sup","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_le","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"div","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"add","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"from","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"as_ref","","",19,null],[11,"as_mut","","",19,null],[11,"index","","",19,null],[11,"index_mut","","",19,null],[11,"shape","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"swap","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"dim","","",19,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"to_vec","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"set_coords","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":null}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"neg","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"add","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"approx_epsilon","","",19,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",19,{"inputs":[{"name":"pnt4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",19,{"inputs":[{"name":"pnt4"},{"name":"i"}],"output":{"name":"pnt4"}}],[11,"max_value","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"min_value","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"axpy","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"},{"name":"pnt4"}],"output":null}],[11,"iter","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt5"}}],[11,"from","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt5"}],"output":{"name":"pnt4"}}],[11,"rand","","",19,{"inputs":[{"name":"pnt4"},{"name":"r"}],"output":{"name":"pnt4"}}],[11,"fmt","","",20,{"inputs":[{"name":"pnt5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"decode","","",20,{"inputs":[{"name":"pnt5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"pnt5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",20,{"inputs":[{"name":"pnt5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"orig","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"is_orig","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"inf","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"sup","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_le","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"div","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"add","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"from","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"as_ref","","",20,null],[11,"as_mut","","",20,null],[11,"index","","",20,null],[11,"index_mut","","",20,null],[11,"shape","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"swap","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"dim","","",20,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"to_vec","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"set_coords","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":null}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"neg","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"add","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"approx_epsilon","","",20,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",20,{"inputs":[{"name":"pnt5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",20,{"inputs":[{"name":"pnt5"},{"name":"i"}],"output":{"name":"pnt5"}}],[11,"max_value","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"min_value","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"axpy","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"},{"name":"pnt5"}],"output":null}],[11,"iter","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt6"}}],[11,"from","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt6"}],"output":{"name":"pnt5"}}],[11,"rand","","",20,{"inputs":[{"name":"pnt5"},{"name":"r"}],"output":{"name":"pnt5"}}],[11,"fmt","","",21,{"inputs":[{"name":"pnt6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"decode","","",21,{"inputs":[{"name":"pnt6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"pnt6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",21,{"inputs":[{"name":"pnt6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"orig","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"is_orig","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"inf","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"sup","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_le","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"div","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"add","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"from","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"as_ref","","",21,null],[11,"as_mut","","",21,null],[11,"index","","",21,null],[11,"index_mut","","",21,null],[11,"shape","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"swap","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"dim","","",21,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"to_vec","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"set_coords","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":null}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"neg","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"add","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"approx_epsilon","","",21,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",21,{"inputs":[{"name":"pnt6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",21,{"inputs":[{"name":"pnt6"},{"name":"i"}],"output":{"name":"pnt6"}}],[11,"max_value","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"min_value","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"axpy","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"},{"name":"pnt6"}],"output":null}],[11,"iter","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"itermut"}}],[11,"rand","","",21,{"inputs":[{"name":"pnt6"},{"name":"r"}],"output":{"name":"pnt6"}}],[11,"fmt","","",22,{"inputs":[{"name":"quat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"decode","","",22,{"inputs":[{"name":"quat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"quat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new quaternion from its components.",22,{"inputs":[{"name":"quat"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"quat"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"vec3"}}],[11,"scalar","","The scalar part `w` of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",22,{"inputs":[{"name":"quat"}],"output":null}],[11,"inv","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"option"}}],[11,"inv_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"sqnorm","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"normalize","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"normalize_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"mul","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"div","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"rand","","",22,{"inputs":[{"name":"quat"},{"name":"r"}],"output":{"name":"quat"}}],[11,"fmt","","",39,{"inputs":[{"name":"unitquat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"decode","","",39,{"inputs":[{"name":"unitquat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"unitquat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new unit quaternion from the axis-angle representation of a rotation.",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"new_with_quat","","Creates a new unit quaternion from a quaternion.",39,{"inputs":[{"name":"unitquat"},{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"new_with_euler_angles","","Creates a new unit quaternion from Euler angles.",39,{"inputs":[{"name":"unitquat"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"unitquat"}}],[11,"to_rot","","Builds a rotation matrix from this quaternion.",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"new_with_unit_quat","","Creates a new unit quaternion from a quaternion.",39,{"inputs":[{"name":"unitquat"},{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"quat","","The `Quat` representation of this unit quaternion.",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"quat"}}],[11,"one","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"inv","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"option"}}],[11,"inv_mut","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"rand","","",39,{"inputs":[{"name":"unitquat"},{"name":"r"}],"output":{"name":"unitquat"}}],[11,"approx_epsilon","","",39,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",39,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"div","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",39,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",39,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"unitquat"}],"output":{"name":"pnt3"}}],[11,"rotation","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"prepend_rotation_mut","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"set_rotation","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"to_rot_mat","","",39,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"rotate","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",39,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",39,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"angle_to","","",39,{"inputs":[{"name":"unitquat"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",39,{"inputs":[{"name":"unitquat"},{"name":"self"}],"output":{"name":"unitquat"}}],[11,"transform","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",39,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",39,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",39,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inf","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sup","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_le","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_gt","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_ge","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"i","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"j","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"k","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"from","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"as_ref","","",22,null],[11,"as_mut","","",22,null],[11,"index","","",22,null],[11,"index_mut","","",22,null],[11,"shape","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"swap","","",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"dim","","",22,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"add","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sub","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"add","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"sub","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"mul","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"div","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"neg","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"one","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"zero","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"is_zero","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_epsilon","","",22,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",22,{"inputs":[{"name":"quat"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",22,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",22,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",22,{"inputs":[{"name":"quat"},{"name":"i"}],"output":{"name":"quat"}}],[11,"max_value","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"min_value","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"axpy","","",22,{"inputs":[{"name":"quat"},{"name":"n"},{"name":"quat"}],"output":null}],[11,"iter","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"iter"}}],[11,"iter_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"itermut"}}],[11,"dim","","",39,{"inputs":[{"name":"unitquat"},{"name":"option"}],"output":{"name":"usize"}}],[11,"fmt","","",40,{"inputs":[{"name":"identity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"decode","","",40,{"inputs":[{"name":"identity"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"identity"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"new","","Creates a new identity matrix.",40,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"fmt","","",4,{"inputs":[{"name":"mat1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"decode","","",4,{"inputs":[{"name":"mat1"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"mat1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"new_identity","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"mat1"}}],[11,"new","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"repeat","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"sub","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"sub","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"div","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"abs","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"zero","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"is_zero","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"bool"}}],[11,"one","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"iter","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"itermut"}}],[11,"at_fast","","",4,null],[11,"set_fast","","",4,null],[11,"dim","","",4,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",4,null],[11,"swap","","",4,null],[11,"unsafe_at","","",4,null],[11,"unsafe_set","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"mul","","",16,{"inputs":[{"name":"pnt1"},{"name":"mat1"}],"output":{"name":"pnt1"}}],[11,"transpose","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"transpose_mut","","",4,{"inputs":[{"name":"mat1"}],"output":null}],[11,"approx_epsilon","","",4,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",4,{"inputs":[{"name":"mat1"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_row","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"vec1"}],"output":null}],[11,"row","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"ncols","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_col","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"vec1"}],"output":null}],[11,"col","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"col_slice","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"row_slice","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"from_diag","","",4,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"diag","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"to_homogeneous","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat2"}}],[11,"from","","",4,{"inputs":[{"name":"mat1"},{"name":"mat2"}],"output":{"name":"mat1"}}],[11,"outer","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"eigen_qr","","",4,null],[11,"rand","","",4,{"inputs":[{"name":"mat1"},{"name":"r"}],"output":{"name":"mat1"}}],[11,"mean","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"fmt","","",5,{"inputs":[{"name":"mat2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"decode","","",5,{"inputs":[{"name":"mat2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"mat2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"new_identity","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"mat2"}}],[11,"new","","",5,{"inputs":[{"name":"mat2"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"repeat","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"sub","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"sub","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"mul","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"div","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"abs","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"zero","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"is_zero","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"iter","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"itermut"}}],[11,"dim","","",5,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",5,null],[11,"swap","","",5,null],[11,"unsafe_at","","",5,null],[11,"unsafe_set","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"at_fast","","",5,null],[11,"set_fast","","",5,null],[11,"transpose","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"transpose_mut","","",5,{"inputs":[{"name":"mat2"}],"output":null}],[11,"approx_epsilon","","",5,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",5,{"inputs":[{"name":"mat2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_row","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"row","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"ncols","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_col","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"col","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"col_slice","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"row_slice","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"from_diag","","",5,{"inputs":[{"name":"mat2"},{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"diag","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"vec2"}}],[11,"to_homogeneous","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat3"}}],[11,"from","","",5,{"inputs":[{"name":"mat2"},{"name":"mat3"}],"output":{"name":"mat2"}}],[11,"outer","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"eigen_qr","","",5,null],[11,"rand","","",5,{"inputs":[{"name":"mat2"},{"name":"r"}],"output":{"name":"mat2"}}],[11,"mean","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"vec2"}}],[11,"fmt","","",6,{"inputs":[{"name":"mat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"decode","","",6,{"inputs":[{"name":"mat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"mat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"new_identity","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"}],"output":{"name":"mat3"}}],[11,"new","","",6,{"inputs":[{"name":"mat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"repeat","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"sub","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"sub","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"mul","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"div","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"abs","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"zero","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"is_zero","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"iter","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"itermut"}}],[11,"dim","","",6,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",6,null],[11,"swap","","",6,null],[11,"unsafe_at","","",6,null],[11,"unsafe_set","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"at_fast","","",6,null],[11,"set_fast","","",6,null],[11,"transpose","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"transpose_mut","","",6,{"inputs":[{"name":"mat3"}],"output":null}],[11,"approx_epsilon","","",6,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",6,{"inputs":[{"name":"mat3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"col_slice","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"row_slice","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"from_diag","","",6,{"inputs":[{"name":"mat3"},{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"diag","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"vec3"}}],[11,"to_homogeneous","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat4"}}],[11,"from","","",6,{"inputs":[{"name":"mat3"},{"name":"mat4"}],"output":{"name":"mat3"}}],[11,"outer","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"eigen_qr","","",6,null],[11,"rand","","",6,{"inputs":[{"name":"mat3"},{"name":"r"}],"output":{"name":"mat3"}}],[11,"mean","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"vec3"}}],[11,"fmt","","",7,{"inputs":[{"name":"mat4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"decode","","",7,{"inputs":[{"name":"mat4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"mat4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"new_identity","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"mat4"}}],[11,"new","","",7,{"inputs":[{"name":"mat4"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"repeat","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"sub","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"sub","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"div","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"abs","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"zero","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"is_zero","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"iter","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"itermut"}}],[11,"dim","","",7,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",7,null],[11,"swap","","",7,null],[11,"unsafe_at","","",7,null],[11,"unsafe_set","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"at_fast","","",7,null],[11,"set_fast","","",7,null],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"mat4"}],"output":{"name":"pnt4"}}],[11,"inv","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"option"}}],[11,"inv_mut","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"transpose","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"transpose_mut","","",7,{"inputs":[{"name":"mat4"}],"output":null}],[11,"approx_epsilon","","",7,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",7,{"inputs":[{"name":"mat4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_row","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"row","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"ncols","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_col","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"col","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"col_slice","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"row_slice","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"from_diag","","",7,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"diag","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"to_homogeneous","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat5"}}],[11,"from","","",7,{"inputs":[{"name":"mat4"},{"name":"mat5"}],"output":{"name":"mat4"}}],[11,"outer","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"eigen_qr","","",7,null],[11,"rand","","",7,{"inputs":[{"name":"mat4"},{"name":"r"}],"output":{"name":"mat4"}}],[11,"mean","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"fmt","","",8,{"inputs":[{"name":"mat5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"decode","","",8,{"inputs":[{"name":"mat5"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"mat5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"new_identity","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"mat5"}}],[11,"new","","",8,{"inputs":[{"name":"mat5"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"repeat","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"abs","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"zero","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"is_zero","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"add","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"sub","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"add","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"sub","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"div","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"iter","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"itermut"}}],[11,"dim","","",8,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",8,null],[11,"swap","","",8,null],[11,"unsafe_at","","",8,null],[11,"unsafe_set","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"at_fast","","",8,null],[11,"set_fast","","",8,null],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt5"},{"name":"mat5"}],"output":{"name":"pnt5"}}],[11,"inv","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"option"}}],[11,"inv_mut","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"transpose","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"transpose_mut","","",8,{"inputs":[{"name":"mat5"}],"output":null}],[11,"approx_epsilon","","",8,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",8,{"inputs":[{"name":"mat5"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_row","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"vec5"}],"output":null}],[11,"row","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"ncols","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_col","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"vec5"}],"output":null}],[11,"col","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"col_slice","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"row_slice","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"from_diag","","",8,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"diag","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"to_homogeneous","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat6"}}],[11,"from","","",8,{"inputs":[{"name":"mat5"},{"name":"mat6"}],"output":{"name":"mat5"}}],[11,"outer","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"eigen_qr","","",8,null],[11,"rand","","",8,{"inputs":[{"name":"mat5"},{"name":"r"}],"output":{"name":"mat5"}}],[11,"mean","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"fmt","","",9,{"inputs":[{"name":"mat6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"decode","","",9,{"inputs":[{"name":"mat6"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"mat6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"new_identity","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"mat6"}}],[11,"new","","",9,{"inputs":[{"name":"mat6"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"repeat","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"from","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"sub","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"sub","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"div","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"abs","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"zero","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"is_zero","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"one","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"iter","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"itermut"}}],[11,"dim","","",9,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",9,null],[11,"swap","","",9,null],[11,"unsafe_at","","",9,null],[11,"unsafe_set","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"at_fast","","",9,null],[11,"set_fast","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt6"},{"name":"mat6"}],"output":{"name":"pnt6"}}],[11,"inv","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"option"}}],[11,"inv_mut","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"transpose","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"transpose_mut","","",9,{"inputs":[{"name":"mat6"}],"output":null}],[11,"approx_epsilon","","",9,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",9,{"inputs":[{"name":"mat6"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_row","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"vec6"}],"output":null}],[11,"row","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"ncols","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_col","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"vec6"}],"output":null}],[11,"col","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"col_slice","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"row_slice","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"from_diag","","",9,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"diag","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"outer","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"eigen_qr","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"mat6"},{"name":"r"}],"output":{"name":"mat6"}}],[11,"mean","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"rot2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"decode","","",41,{"inputs":[{"name":"rot2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"rot2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",41,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"rotation","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",41,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"append_rotation","","",41,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"prepend_rotation_mut","","",41,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"prepend_rotation","","",41,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"set_rotation","","",41,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"angle_to","","",41,{"inputs":[{"name":"rot2"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",41,{"inputs":[{"name":"rot2"},{"name":"self"}],"output":{"name":"rot2"}}],[11,"rand","","",41,{"inputs":[{"name":"rot2"},{"name":"r"}],"output":{"name":"rot2"}}],[11,"absolute_rotate","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"rot3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"decode","","",42,{"inputs":[{"name":"rot3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,{"inputs":[{"name":"rot3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"new_with_mat","","Builds a rotation matrix from an orthogonal matrix.",42,{"inputs":[{"name":"rot3"},{"name":"mat3"}],"output":{"name":"rot3"}}],[11,"new_with_euler_angles","","Creates a new rotation from Euler angles.",42,{"inputs":[{"name":"rot3"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"rot3"}}],[11,"look_at","","Create a new matrix and orient it such that its local `x` axis points to a given point.\nNote that the usually known `look_at` function does the same thing but with the `z` axis.\nSee `look_at_z` for that.",42,{"inputs":[{"name":"rot3"},{"name":"vec3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"look_at_z","","Create a new matrix and orient it such that its local `z` axis points to a given point.",42,{"inputs":[{"name":"rot3"},{"name":"vec3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"rotation","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"prepend_rotation_mut","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"set_rotation","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"angle_to","","",42,{"inputs":[{"name":"rot3"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",42,{"inputs":[{"name":"rot3"},{"name":"self"}],"output":{"name":"rot3"}}],[11,"rand","","",42,{"inputs":[{"name":"rot3"},{"name":"r"}],"output":{"name":"rot3"}}],[11,"absolute_rotate","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"rot4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"decode","","",43,{"inputs":[{"name":"rot4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"rot4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"absolute_rotate","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotation","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"inv_rotation","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"append_rotation_mut","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"append_rotation","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"prepend_rotation_mut","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"prepend_rotation","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"set_rotation","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"submat","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"rotate","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rotate","","",41,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_rotate","","",41,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transform","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_transform","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"transform","","",41,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",41,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"dim","","",41,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"mul","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"mul","","",41,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"rot2"}],"output":{"name":"pnt2"}}],[11,"one","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"new_identity","","",41,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"rot2"}}],[11,"to_rot_mat","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"ncols","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"col","","",41,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_col","","",41,{"inputs":[{"name":"rot2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"nrows","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"row","","",41,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_row","","",41,{"inputs":[{"name":"rot2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"index","","",41,null],[11,"abs","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"to_homogeneous","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"bool"}}],[11,"inv","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"option"}}],[11,"transpose","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"transpose_mut","","",41,{"inputs":[{"name":"rot2"}],"output":null}],[11,"approx_epsilon","","",41,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",41,{"inputs":[{"name":"rot2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",41,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",41,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"rot2"}}],[11,"diag","","",41,{"inputs":[{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"submat","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"rotate","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",42,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",42,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transform","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",42,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",42,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"dim","","",42,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"mul","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"mul","","",42,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"rot3"}],"output":{"name":"pnt3"}}],[11,"one","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"new_identity","","",42,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"rot3"}}],[11,"to_rot_mat","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"ncols","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"col","","",42,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_col","","",42,{"inputs":[{"name":"rot3"},{"name":"usize"},{"name":"vec3"}],"output":null}],[11,"nrows","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"row","","",42,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_row","","",42,{"inputs":[{"name":"rot3"},{"name":"usize"},{"name":"vec3"}],"output":null}],[11,"index","","",42,null],[11,"abs","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"to_homogeneous","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"bool"}}],[11,"inv","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"option"}}],[11,"transpose","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"transpose_mut","","",42,{"inputs":[{"name":"rot3"}],"output":null}],[11,"approx_epsilon","","",42,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",42,{"inputs":[{"name":"rot3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",42,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",42,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"diag","","",42,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"submat","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"rotate","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotate","","",43,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_rotate","","",43,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transform","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_transform","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"transform","","",43,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",43,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"dim","","",43,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"mul","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"mul","","",43,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"rot4"}],"output":{"name":"pnt4"}}],[11,"one","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"new_identity","","",43,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"rot4"}}],[11,"to_rot_mat","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"ncols","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"col","","",43,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_col","","",43,{"inputs":[{"name":"rot4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"nrows","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"row","","",43,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_row","","",43,{"inputs":[{"name":"rot4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"index","","",43,null],[11,"abs","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"to_homogeneous","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"bool"}}],[11,"inv","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"option"}}],[11,"transpose","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"transpose_mut","","",43,{"inputs":[{"name":"rot4"}],"output":null}],[11,"approx_epsilon","","",43,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",43,{"inputs":[{"name":"rot4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",43,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",43,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"diag","","",43,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"fmt","","",1,{"inputs":[{"name":"iso2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"decode","","",1,{"inputs":[{"name":"iso2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"iso2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"iso3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"decode","","",2,{"inputs":[{"name":"iso3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"iso3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"iso4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"decode","","",3,{"inputs":[{"name":"iso4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"iso4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"look_at","","Reorient and translate this transformation such that its local `x` axis points to a given\ndirection.  Note that the usually known `look_at` function does the same thing but with the\n`z` axis. See `look_at_z` for that.",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"look_at_z","","Reorient and translate this transformation such that its local `z` axis points to a given\ndirection.",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",3,{"inputs":[{"name":"iso4"},{"name":"vec4"},{"name":"rot4"}],"output":{"name":"iso4"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"iso2"},{"name":"vec2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"iso2"},{"name":"vec2"},{"name":"rot2"}],"output":{"name":"iso2"}}],[11,"to_rot_mat","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"rot2"}}],[11,"rotation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"append_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"prepend_rotation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"prepend_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"set_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"dim","","",1,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"absolute_rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",1,{"inputs":[{"name":"iso2"},{"name":"r"}],"output":{"name":"iso2"}}],[11,"approx_epsilon","","",1,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",1,{"inputs":[{"name":"iso2"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"bool"}}],[11,"inv","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"option"}}],[11,"transform","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transformation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"inv_transformation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"append_transformation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"append_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"prepend_transformation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"prepend_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"set_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"translation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"append_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"prepend_translation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"prepend_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"set_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"translate","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"mul","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"iso2"}],"output":{"name":"pnt2"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"iso3"},{"name":"vec3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"iso3"},{"name":"vec3"},{"name":"rot3"}],"output":{"name":"iso3"}}],[11,"to_rot_mat","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"rot3"}}],[11,"rotation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_rotation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"dim","","",2,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"absolute_rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",2,{"inputs":[{"name":"iso3"},{"name":"r"}],"output":{"name":"iso3"}}],[11,"approx_epsilon","","",2,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",2,{"inputs":[{"name":"iso3"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"bool"}}],[11,"inv","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"option"}}],[11,"transform","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transformation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"inv_transformation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"append_transformation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"append_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"prepend_transformation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"prepend_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"set_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"translation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"append_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_translation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"prepend_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"translate","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"mul","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"iso3"}],"output":{"name":"pnt3"}}],[11,"dim","","",3,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"absolute_rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"approx_epsilon","","",3,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",3,{"inputs":[{"name":"iso4"},{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"bool"}}],[11,"inv","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"option"}}],[11,"transform","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transformation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"inv_transformation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"append_transformation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"append_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"prepend_transformation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"prepend_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"set_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"translation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"append_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"prepend_translation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"prepend_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"set_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"translate","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"mul","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"iso4"}],"output":{"name":"pnt4"}}],[11,"fmt","","",44,{"inputs":[{"name":"persp3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"persp3"}],"output":{"name":"persp3"}}],[11,"decode","","",44,{"inputs":[{"name":"persp3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"persp3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"perspmat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"perspmat3"}}],[11,"decode","","",45,{"inputs":[{"name":"perspmat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"perspmat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D perspective projection.",44,{"inputs":[{"name":"persp3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"persp3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `PerspMat3` representing this projection.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"perspmat3"}}],[11,"aspect","","Gets the `width / height` aspect ratio.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",44,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",44,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_fov","","Sets the field of view of the view frustrum.",44,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view frustrum.",44,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view frustrum.",44,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",44,{"inputs":[{"name":"persp3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",44,{"inputs":[{"name":"persp3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new persepctive matrix from the aspect ratio, field of view, and near/far planes.",45,{"inputs":[{"name":"perspmat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspmat3"}}],[11,"new_with_mat","","Creates a new perspective projection matrix from a 4D matrix.",45,{"inputs":[{"name":"perspmat3"},{"name":"mat4"}],"output":{"name":"perspmat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view\nfrustrum.",45,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_fov","","Updates this projection with a new field of view of the view frustrum.",45,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",45,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",45,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",45,{"inputs":[{"name":"perspmat3"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",45,{"inputs":[{"name":"perspmat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",45,{"inputs":[{"name":"perspmat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",45,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"fmt","","",46,{"inputs":[{"name":"ortho3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"ortho3"}}],[11,"decode","","",46,{"inputs":[{"name":"ortho3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"ortho3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"orthomat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"orthomat3"}}],[11,"decode","","",47,{"inputs":[{"name":"orthomat3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"orthomat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D orthographic projection.",46,{"inputs":[{"name":"ortho3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"ortho3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `OrthoMat3` representing this projection.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"orthomat3"}}],[11,"width","","The width of the view cuboid.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",46,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",46,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_height","","Sets the height of the view cuboid.",46,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",46,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",46,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",46,{"inputs":[{"name":"ortho3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",46,{"inputs":[{"name":"ortho3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new orthographic projection matrix from the width, heihgt, znear and zfar planes of the view cuboid.",47,{"inputs":[{"name":"orthomat3"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthomat3"}}],[11,"new_with_mat","","Creates a new orthographic matrix from a 4D matrix.",47,{"inputs":[{"name":"orthomat3"},{"name":"mat4"}],"output":{"name":"orthomat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"width","","The width of the view cuboid.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",47,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_height","","Sets the height of the view cuboid.",47,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",47,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",47,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",47,{"inputs":[{"name":"orthomat3"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",47,{"inputs":[{"name":"orthomat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",47,{"inputs":[{"name":"orthomat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",47,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"fmt","","",23,{"inputs":[{"name":"pordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"pordering"}],"output":{"name":"pordering"}}],[11,"decode","","",23,{"inputs":[{"name":"pordering"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"pordering"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_eq","","Returns `true` if `self` is equal to `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_lt","","Returns `true` if `self` is equal to `Less`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_gt","","Returns `true` if `self` is equal to `Greater`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"from_ordering","","Creates a `POrdering` from an `Ordering`.",23,{"inputs":[{"name":"pordering"},{"name":"ordering"}],"output":{"name":"pordering"}}],[11,"to_ordering","","Converts this `POrdering` to an `Ordering`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"option"}}],[8,"Absolute","","Trait of objects having an absolute value.\nThis is useful if the object does not have the same type as its absolute value.",null,null],[10,"abs","","Computes some absolute value of this object.\nTypically, this will make all component of a matrix or vector positive.",48,{"inputs":[{"name":"absolute"},{"name":"self"}],"output":{"name":"a"}}],[8,"AbsoluteRotate","","Composition of a rotation and an absolute value.",null,null],[10,"absolute_rotate","","This is the same as:",49,{"inputs":[{"name":"absoluterotate"},{"name":"v"}],"output":{"name":"v"}}],[8,"ApproxEq","","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","Default epsilon for approximation.",50,{"inputs":[{"name":"approxeq"},{"name":"option"}],"output":{"name":"eps"}}],[10,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",50,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"eps"}],"output":{"name":"bool"}}],[10,"approx_ulps","","Default ULPs for approximation.",50,{"inputs":[{"name":"approxeq"},{"name":"option"}],"output":{"name":"u32"}}],[10,"approx_eq_ulps","","Tests approximate equality using units in the last place (ULPs)",50,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"approx_eq","","Tests approximate equality.",50,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[8,"Axpy","","Trait of objects implementing the `y = ax + y` operation.",null,null],[10,"axpy","","Adds $$a * x$$ to `self`.",51,{"inputs":[{"name":"axpy"},{"name":"n"},{"name":"self"}],"output":null}],[8,"Basis","","Traits of objects which can form a basis (typically vectors).",null,null],[10,"canonical_basis","","Iterates through the canonical basis of the space in which this object lives.",52,{"inputs":[{"name":"basis"},{"name":"f"}],"output":null}],[10,"orthonormal_subspace_basis","","Iterates through a basis of the subspace orthogonal to `self`.",52,{"inputs":[{"name":"basis"},{"name":"self"},{"name":"f"}],"output":null}],[10,"canonical_basis_element","","Gets the ith element of the canonical basis.",52,{"inputs":[{"name":"basis"},{"name":"usize"}],"output":{"name":"option"}}],[8,"BaseFloat","","Basic floating-point number numeric trait.",null,null],[10,"pi","","Archimedes&#39; constant.",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"two_pi","","2.0 * pi.",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_2","","pi / 2.0.",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_3","","pi / 3.0.",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_4","","pi / 4.0.",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_6","","pi / 6.0.",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_pi_8","","pi / 8.0.",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_1_pi","","1.0 / pi.",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_2_pi","","2.0 / pi.",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","2.0 / sqrt(pi).",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"e","","Euler&#39;s number.",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"log2_e","","log2(e).",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"log10_e","","log10(e).",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"ln_2","","ln(2.0).",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[10,"ln_10","","ln(10.0).",53,{"inputs":[{"name":"basefloat"}],"output":{"name":"self"}}],[8,"BaseNum","","Basic integral numeric trait.",null,null],[8,"Bounded","","Types that have maximum and minimum value.",null,null],[10,"min_value","","The minimum value.",54,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","The maximum value.",54,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Cast","","Traits of objects which can be created from an object of type `T`.",null,null],[10,"from","","Converts an element of type `T` to an element of type `Self`.",55,{"inputs":[{"name":"cast"},{"name":"t"}],"output":{"name":"self"}}],[8,"Col","","Trait to access columns of a matrix or vector.",null,null],[10,"ncols","","The number of column of this matrix or vector.",56,{"inputs":[{"name":"col"}],"output":{"name":"usize"}}],[10,"col","","Reads the `i`-th column of `self`.",56,{"inputs":[{"name":"col"},{"name":"usize"}],"output":{"name":"c"}}],[10,"set_col","","Writes the `i`-th column of `self`.",56,{"inputs":[{"name":"col"},{"name":"usize"},{"name":"c"}],"output":null}],[8,"ColSlice","","Trait to access part of a column of a matrix",null,null],[10,"col_slice","","Returns a view to a slice of a column of a matrix.",57,{"inputs":[{"name":"colslice"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"c"}}],[8,"RowSlice","","Trait to access part of a row of a matrix",null,null],[10,"row_slice","","Returns a view to a slice of a row of a matrix.",58,{"inputs":[{"name":"rowslice"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"r"}}],[8,"Cov","","Trait for computing the covariance of a set of data.",null,null],[10,"cov","","Computes the covariance of the obsevations stored by `m`:",59,{"inputs":[{"name":"cov"}],"output":{"name":"m"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",59,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}],[8,"Cross","","Trait of elements having a cross product.",null,null],[16,"CrossProductType","","The cross product output.",60,null],[10,"cross","","Computes the cross product between two elements (usually vectors).",60,{"inputs":[{"name":"cross"},{"name":"self"}],"output":{"name":"crossproducttype"}}],[8,"CrossMatrix","","Trait of elements having a cross product operation which can be expressed as a matrix.",null,null],[10,"cross_matrix","","The matrix associated to any cross product with this vector. I.e. `v.cross(anything)` =\n`v.cross_matrix().rmul(anything)`.",61,{"inputs":[{"name":"crossmatrix"}],"output":{"name":"m"}}],[8,"Det","","Trait of objects having a determinant. Typically used by square matrices.",null,null],[10,"det","","Returns the determinant of `m`.",62,{"inputs":[{"name":"det"}],"output":{"name":"n"}}],[8,"Diag","","Trait to get the diagonal of square matrices.",null,null],[10,"from_diag","","Creates a new matrix with the given diagonal.",63,{"inputs":[{"name":"diag"},{"name":"v"}],"output":{"name":"self"}}],[10,"diag","","The diagonal of this matrix.",63,{"inputs":[{"name":"diag"}],"output":{"name":"v"}}],[8,"Dim","","Trait of objects having a spacial dimension known at compile time.",null,null],[10,"dim","","The dimension of the object.",64,{"inputs":[{"name":"dim"},{"name":"option"}],"output":{"name":"usize"}}],[8,"Dot","","Traits of objects having a dot product.",null,null],[10,"dot","","Computes the dot (inner) product of two vectors.",65,{"inputs":[{"name":"dot"},{"name":"self"}],"output":{"name":"n"}}],[8,"EigenQR","","Trait for computing the eigenvector and eigenvalues of a square matrix usin the QR algorithm.",null,null],[10,"eigen_qr","","Computes the eigenvectors and eigenvalues of this matrix.",66,null],[8,"Eye","","Trait for constructing the identity matrix",null,null],[10,"new_identity","","Return the identity matrix of specified dimension",67,{"inputs":[{"name":"eye"},{"name":"usize"}],"output":{"name":"self"}}],[8,"FloatPnt","","Trait of points with components implementing the `BaseFloat` trait.",null,null],[11,"sqdist","","Computes the square distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[8,"FloatVec","","Trait of vector with components implementing the `BaseFloat` trait.",null,null],[8,"FromHomogeneous","","Traits of objects which can be build from an homogeneous coordinate form.",null,null],[10,"from","","Builds an object from its homogeneous coordinate form.",69,{"inputs":[{"name":"fromhomogeneous"},{"name":"u"}],"output":{"name":"self"}}],[8,"Indexable","","This is a workaround of current Rust limitations.",null,null],[10,"swap","","Swaps the `i`-th element of `self` with its `j`-th element.",70,{"inputs":[{"name":"indexable"},{"name":"i"},{"name":"i"}],"output":null}],[10,"unsafe_at","","Reads the `i`-th element of `self`.",70,{"inputs":[{"name":"indexable"},{"name":"i"}],"output":{"name":"n"}}],[10,"unsafe_set","","Writes to the `i`-th element of `self`.",70,{"inputs":[{"name":"indexable"},{"name":"i"},{"name":"n"}],"output":null}],[8,"Inv","","Trait of objects having an inverse. Typically used to implement matrix inverse.",null,null],[10,"inv","","Returns the inverse of `m`.",71,{"inputs":[{"name":"inv"}],"output":{"name":"option"}}],[10,"inv_mut","","In-place version of `inverse`.",71,{"inputs":[{"name":"inv"}],"output":{"name":"bool"}}],[8,"Iterable","","This is a workaround of current Rust limitations.",null,null],[10,"iter","","Gets a vector-like read-only iterator.",72,{"inputs":[{"name":"iterable"}],"output":{"name":"iter"}}],[8,"IterableMut","","This is a workaround of current Rust limitations.",null,null],[10,"iter_mut","","Gets a vector-like read-write iterator.",73,{"inputs":[{"name":"iterablemut"}],"output":{"name":"itermut"}}],[8,"Mat","","Trait of matrices.",null,null],[8,"Mean","","Trait for computing the mean of a set of data.",null,null],[10,"mean","","Computes the mean of the observations stored by `v`.",74,{"inputs":[{"name":"mean"}],"output":{"name":"n"}}],[8,"Norm","","Traits of objects having an euclidian norm.",null,null],[11,"norm","","Computes the norm of `self`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[10,"sqnorm","","Computes the squared norm of `self`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[10,"normalize","","Gets the normalized version of a copy of `v`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"self"}}],[10,"normalize_mut","","Normalizes `self`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[8,"NumPnt","","Trait grouping most common operations on points.",null,null],[8,"NumVec","","Trait grouping most common operations on vectors.",null,null],[8,"Orig","","The zero element of a vector space, seen as an element of its embeding affine space.",null,null],[10,"orig","","The trivial origin.",76,{"inputs":[{"name":"orig"}],"output":{"name":"self"}}],[10,"is_orig","","Returns true if this points is exactly the trivial origin.",76,{"inputs":[{"name":"orig"}],"output":{"name":"bool"}}],[8,"Outer","","Traits of objects having an outer product.",null,null],[16,"OuterProductType","","Result type of the outer product.",77,null],[10,"outer","","Computes the outer product: `a * b`",77,{"inputs":[{"name":"outer"},{"name":"self"}],"output":{"name":"outerproducttype"}}],[8,"POrd","","Pointwise ordering operations.",null,null],[10,"inf","","Returns the infimum of this value and another",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"self"}}],[10,"sup","","Returns the supremum of this value and another",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"self"}}],[10,"partial_cmp","","Compare `self` and `other` using a partial ordering relation.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"pordering"}}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",78,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PntAsVec","","Trait that relates a point of an affine space to a vector of the associated vector space.",null,null],[10,"to_vec","","Converts this point to its associated vector.",79,{"inputs":[{"name":"pntasvec"}],"output":{"name":"v"}}],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",79,{"inputs":[{"name":"pntasvec"}],"output":{"name":"v"}}],[10,"set_coords","","Sets the coordinates of this point to match those of a given vector.",79,{"inputs":[{"name":"pntasvec"},{"name":"v"}],"output":null}],[8,"Repeat","","Trait for constructiong an object repeating a value.",null,null],[10,"repeat","","Returns a value with filled by `val`.",80,{"inputs":[{"name":"repeat"},{"name":"n"}],"output":{"name":"self"}}],[8,"Rotate","","Trait of objects able to rotate other objects.",null,null],[10,"rotate","","Applies a rotation to `v`.",81,{"inputs":[{"name":"rotate"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_rotate","","Applies an inverse rotation to `v`.",81,{"inputs":[{"name":"rotate"},{"name":"v"}],"output":{"name":"v"}}],[8,"Rotation","","Trait of object which can represent a rotation, and to which new rotations can be appended. A\nrotation is assumed to be an isometry without translation and without reflexion.",null,null],[10,"rotation","","Gets the rotation associated with `self`.",82,{"inputs":[{"name":"rotation"}],"output":{"name":"v"}}],[10,"inv_rotation","","Gets the inverse rotation associated with `self`.",82,{"inputs":[{"name":"rotation"}],"output":{"name":"v"}}],[10,"append_rotation_mut","","Appends a rotation to this object.",82,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[10,"append_rotation","","Appends the rotation `amount` to a copy of `t`.",82,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_rotation_mut","","Prepends a rotation to this object.",82,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[10,"prepend_rotation","","Prepends the rotation `amount` to a copy of `t`.",82,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_rotation","","Sets the rotation of `self`.",82,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[8,"RotationMatrix","","Trait of transformation having a rotation extractable as a rotation matrix. This can typically\nbe implemented by quaternions to convert them to a rotation matrix.",null,null],[16,"Output","","The output rotation matrix type.",83,null],[10,"to_rot_mat","","Gets the rotation matrix represented by `self`.",83,{"inputs":[{"name":"rotationmatrix"}],"output":{"name":"output"}}],[8,"RotationWithTranslation","","Various composition of rotation and translation.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[8,"RotationTo","","Trait of object that can be rotated to be superimposed with another one of the same nature.",null,null],[16,"AngleType","","Type of the angle between two elements.",85,null],[16,"DeltaRotationType","","Type of the rotation between two elements.",85,null],[10,"angle_to","","Computes an angle nedded to transform the first element to the second one using a\nrotation.",85,{"inputs":[{"name":"rotationto"},{"name":"self"}],"output":{"name":"angletype"}}],[10,"rotation_to","","Computes the smallest rotation needed to transform the first element to the second one.",85,{"inputs":[{"name":"rotationto"},{"name":"self"}],"output":{"name":"deltarotationtype"}}],[8,"Row","","Trait to access rows of a matrix or a vector.",null,null],[10,"nrows","","The number of column of `self`.",86,{"inputs":[{"name":"row"}],"output":{"name":"usize"}}],[10,"row","","Reads the `i`-th row of `self`.",86,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"r"}}],[10,"set_row","","Writes the `i`-th row of `self`.",86,{"inputs":[{"name":"row"},{"name":"usize"},{"name":"r"}],"output":null}],[8,"Shape","","The shape of an indexable object.",null,null],[10,"shape","","Returns the shape of an indexable object.",87,{"inputs":[{"name":"shape"}],"output":{"name":"i"}}],[8,"SquareMat","","Trait implemented by square matrices.",null,null],[8,"ToHomogeneous","","Traits of objects which can be put in homogeneous coordinates form.",null,null],[10,"to_homogeneous","","Gets the homogeneous coordinates form of this object.",88,{"inputs":[{"name":"tohomogeneous"}],"output":{"name":"u"}}],[8,"Transform","","Trait of objects able to transform other objects.",null,null],[10,"transform","","Applies a transformation to `v`.",89,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_transform","","Applies an inverse transformation to `v`.",89,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[8,"Transformation","","Trait of object which represent a transformation, and to which new transformations can\nbe appended.",null,null],[10,"transformation","","Gets the transformation of `self`.",90,{"inputs":[{"name":"transformation"}],"output":{"name":"m"}}],[10,"inv_transformation","","Gets the inverse transformation of `self`.",90,{"inputs":[{"name":"transformation"}],"output":{"name":"m"}}],[10,"append_transformation_mut","","Appends a transformation to this object.",90,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[10,"append_transformation","","Appends the transformation `amount` to a copy of `t`.",90,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":{"name":"self"}}],[10,"prepend_transformation_mut","","Prepends a transformation to this object.",90,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[10,"prepend_transformation","","Prepends the transformation `amount` to a copy of `t`.",90,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":{"name":"self"}}],[10,"set_transformation","","Sets the transformation of `self`.",90,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[8,"Translate","","Trait of objects able to translate other objects. This is typically\nimplemented by vectors to translate points.",null,null],[10,"translate","","Apply a translation to an object.",91,{"inputs":[{"name":"translate"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_translate","","Apply an inverse translation to an object.",91,{"inputs":[{"name":"translate"},{"name":"v"}],"output":{"name":"v"}}],[8,"Translation","","Trait of object which represent a translation, and to wich new translation\ncan be appended.",null,null],[10,"translation","","Gets the translation associated with this object.",92,{"inputs":[{"name":"translation"}],"output":{"name":"v"}}],[10,"inv_translation","","Gets the inverse translation associated with this object.",92,{"inputs":[{"name":"translation"}],"output":{"name":"v"}}],[10,"append_translation_mut","","Appends a translation to this object.",92,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[10,"append_translation","","Appends the translation `amount` to a copy of `t`.",92,{"inputs":[{"name":"translation"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_translation_mut","","Prepends a translation to this object.",92,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[10,"prepend_translation","","Prepends the translation `amount` to a copy of `t`.",92,{"inputs":[{"name":"translation"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_translation","","Sets the translation.",92,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[8,"Transpose","","Trait of objects which can be transposed.",null,null],[10,"transpose","","Computes the transpose of a matrix.",93,{"inputs":[{"name":"transpose"}],"output":{"name":"self"}}],[10,"transpose_mut","","In-place version of `transposed`.",93,{"inputs":[{"name":"transpose"}],"output":null}],[8,"UniformSphereSample","","Trait of vectors able to sample a unit sphere.",null,null],[10,"sample","","Iterate through the samples.",94,{"inputs":[{"name":"uniformspheresample"},{"name":"f"}],"output":null}],[14,"assert_approx_eq_eps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait.",null,null],[14,"assert_approx_eq_ulps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait, with tolerance specified in ULPs.",null,null],[14,"assert_approx_eq!","","Asserts approximate equality of two values with the `ApproxEq` trait.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[11,"norm","","Computes the norm of `self`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[11,"sqdist","","Computes the square distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",78,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"approx_eq","","Tests approximate equality.",50,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",59,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}],[11,"norm","","Computes the norm of `self`.",75,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",84,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[11,"sqdist","","Computes the square distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",68,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"approx_eq","","Tests approximate equality.",50,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",59,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",78,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",78,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"DVec"],[3,"Iso2"],[3,"Iso3"],[3,"Iso4"],[3,"Mat1"],[3,"Mat2"],[3,"Mat3"],[3,"Mat4"],[3,"Mat5"],[3,"Mat6"],[3,"Vec1"],[3,"Vec2"],[3,"Vec3"],[3,"Vec4"],[3,"Vec5"],[3,"Vec6"],[3,"Pnt1"],[3,"Pnt2"],[3,"Pnt3"],[3,"Pnt4"],[3,"Pnt5"],[3,"Pnt6"],[3,"Quat"],[4,"POrdering"],[3,"DMat"],[3,"DMat1"],[3,"DVec1"],[3,"DMat2"],[3,"DVec2"],[3,"DMat3"],[3,"DVec3"],[3,"DMat4"],[3,"DVec4"],[3,"DMat5"],[3,"DVec5"],[3,"DMat6"],[3,"DVec6"],[3,"Vec0"],[3,"Pnt0"],[3,"UnitQuat"],[3,"Identity"],[3,"Rot2"],[3,"Rot3"],[3,"Rot4"],[3,"Persp3"],[3,"PerspMat3"],[3,"Ortho3"],[3,"OrthoMat3"],[8,"Absolute"],[8,"AbsoluteRotate"],[8,"ApproxEq"],[8,"Axpy"],[8,"Basis"],[8,"BaseFloat"],[8,"Bounded"],[8,"Cast"],[8,"Col"],[8,"ColSlice"],[8,"RowSlice"],[8,"Cov"],[8,"Cross"],[8,"CrossMatrix"],[8,"Det"],[8,"Diag"],[8,"Dim"],[8,"Dot"],[8,"EigenQR"],[8,"Eye"],[8,"FloatPnt"],[8,"FromHomogeneous"],[8,"Indexable"],[8,"Inv"],[8,"Iterable"],[8,"IterableMut"],[8,"Mean"],[8,"Norm"],[8,"Orig"],[8,"Outer"],[8,"POrd"],[8,"PntAsVec"],[8,"Repeat"],[8,"Rotate"],[8,"Rotation"],[8,"RotationMatrix"],[8,"RotationWithTranslation"],[8,"RotationTo"],[8,"Row"],[8,"Shape"],[8,"ToHomogeneous"],[8,"Transform"],[8,"Transformation"],[8,"Translate"],[8,"Translation"],[8,"Transpose"],[8,"UniformSphereSample"]]};
searchIndex['image'] = {"items":[[3,"Luma","image","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Holds the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image&#39;s dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",6,null],[13,"Triangle","","Linear Filter",6,null],[13,"CatmullRom","","Cubic Filter",6,null],[13,"Gaussian","","Gaussian Filter",6,null],[13,"Lanczos3","","Lanczos with window 3",6,null],[4,"ImageFormat","","An enumeration of supported image formats.\nNot all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",7,null],[13,"JPEG","","An Image in JPEG Format",7,null],[13,"GIF","","An Image in GIF Format",7,null],[13,"WEBP","","An Image in WEBP Format",7,null],[13,"PPM","","An Image in PPM Format",7,null],[13,"TIFF","","An Image in TIFF Format",7,null],[13,"TGA","","An Image in TGA Format",7,null],[13,"BMP","","An Image in BMP Format",7,null],[13,"ICO","","An Image in ICO Format",7,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",8,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",8,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",8,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",8,null],[5,"open","","Open the image located at the path specified.\nThe image&#39;s format is determined from the path&#39;s file extension.",null,{"inputs":[{"name":"p"}],"output":{"name":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"inputs":[{"name":"r"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\nSee &quot;Kohonen neural networks for optimal colour quantization&quot;\nin &quot;Network: Computation in Neural Systems&quot; Vol. 5 (1994) pp 351-367.\nfor a discussion of the algorithm.\nSee also  http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data",9,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data",9,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",9,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",9,null],[0,"imageops","image","Image Processing Functions",null,null],[4,"FilterType","image::imageops","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",6,null],[13,"Triangle","","Linear Filter",6,null],[13,"CatmullRom","","Cubic Filter",6,null],[13,"Gaussian","","Gaussian Filter",6,null],[13,"Lanczos3","","Lanczos with window 3",6,null],[5,"rotate90","","Rotate an image 90 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image.\n```kernel``` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions.\n```nwidth``` and ```nheight``` are the new dimensions.\n```filter``` is the sampling filter to use.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image.\n```sigma``` is a measure of how much to blur by.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image.\n```sigma``` is the amount to blur the image by.\n```threshold``` is the threshold for the difference between",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"colorops","","Public only because of Rust bug:\nhttps://github.com/rust-lang/rust/issues/18241\nFunctions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image.\nThis function operates in place.",null,{"inputs":[{"name":"i"}],"output":null}],[5,"contrast","","Adjust the contrast of the supplied image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying\nFloyd-Steinberg dithering to improve the visual conception",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":null}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":{"name":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","","The color type on which the map operates on",10,null],[10,"index_of","","Returns the index of the closed match of `color`\nin the color map.",10,{"inputs":[{"name":"colormap"},{"name":"color"}],"output":{"name":"usize"}}],[10,"map_color","","Maps `color` to the closest color in the color map.",10,{"inputs":[{"name":"colormap"},{"name":"color"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"bilevel"}],"output":{"name":"bilevel"}}],[11,"index_of","","",11,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",11,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":null}],[11,"index_of","image::math::nq","",9,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",9,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":null}],[11,"clone","image","",6,{"inputs":[{"name":"filtertype"}],"output":{"name":"filtertype"}}],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",12,{"inputs":[{"name":"webpdecoder"},{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",12,null],[11,"read_image","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",13,null],[12,"height","","The height of the luma plane",13,null],[12,"ybuf","","The luma plane of the frame",13,null],[12,"keyframe","","Indicates whether this frame is a keyframe",13,null],[12,"for_display","","Indicates whether this frame is intended for display",13,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",13,null],[3,"VP8Decoder","","VP8 Decoder",null,null],[11,"clone","","",13,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",13,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",14,{"inputs":[{"name":"vp8decoder"},{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",14,{"inputs":[{"name":"vp8decoder"}],"output":{"name":"result"}}],[0,"ppm","image","Encoding of portable pixmap Images",null,null],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder.",null,null],[11,"new","","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",15,{"inputs":[{"name":"ppmencoder"},{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",15,null],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","PNG decoder",null,null],[3,"PNGEncoder","","PNG encoder",null,null],[11,"new","","Creates a new decoder that decodes from the stream ```r```",16,{"inputs":[{"name":"pngdecoder"},{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"dimensions","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",16,null],[11,"read_image","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to ```w```",17,{"inputs":[{"name":"pngencoder"},{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",17,null],[11,"from","image","",4,null],[11,"from","","",5,{"inputs":[{"name":"imageerror"},{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"ico","","Decoding of ICO files",null,null],[3,"ICODecoder","image::ico","An ico decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",18,{"inputs":[{"name":"icodecoder"},{"name":"r"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",18,null],[11,"read_image","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","The representation of a JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[3,"Component","","A representation of a JPEG component",null,null],[12,"id","","The Component&#39;s identifier",19,null],[12,"h","","Horizontal sampling factor",19,null],[12,"v","","Vertical sampling factor",19,null],[12,"tq","","The quantization table selector",19,null],[12,"dc_table","","Index to the Huffman DC Table",19,null],[12,"ac_table","","Index to the AC Huffman Table",19,null],[12,"dc_pred","","The dc prediction of the component",19,null],[11,"new","","Create a new encoder that writes its output to ```w```",20,{"inputs":[{"name":"jpegencoder"},{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",20,null],[11,"clone","","",19,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",21,{"inputs":[{"name":"jpegdecoder"},{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",21,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",21,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",21,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",21,null],[11,"read_image","","",21,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[0,"gif","image","Decoding of GIF Images",null,null],[11,"from_rgba","gif::common","Creates a frame from pixels in RGBA format.",22,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",22,null],[11,"clone","","",23,{"inputs":[{"name":"disposalmethod"}],"output":{"name":"disposalmethod"}}],[11,"fmt","","",23,{"inputs":[{"name":"disposalmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",23,{"inputs":[{"name":"disposalmethod"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"fmt","","",24,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",24,{"inputs":[{"name":"block"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"extension"}],"output":{"name":"extension"}}],[11,"fmt","","",25,{"inputs":[{"name":"extension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",25,{"inputs":[{"name":"extension"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",22,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",22,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","gif::reader::decoder","",26,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"decodingerror"},{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"fmt","","",27,{"inputs":[{"name":"extensions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"extensions"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"extensions"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"set_param","","",27,null],[11,"fmt","","",28,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"u16value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"bytevalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"streamingdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new streaming decoder",32,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder.",32,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",32,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",32,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"frame"}}],[11,"current_frame","","Current frame info as a ref.",32,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"frame"}}],[11,"width","","Width of the image",32,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",32,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"u16"}}],[11,"fmt","gif::reader","",33,{"inputs":[{"name":"coloroutput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"coloroutput"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"coloroutput"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"set_param","","",33,null],[11,"fmt","","",34,{"inputs":[{"name":"memorylimit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",34,null],[11,"new","","Creates a new decoder builder",35,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",35,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"next_frame_info","","Returns the next frame info",36,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"read_next_frame","","Reads the next frame from the image.",36,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer.",36,null],[11,"buffer_size","","Output buffer size",36,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"line_length","","Line length of the current frame",36,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"palette","","Returns the color palette relevant for the current (next) frame",36,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"global_palette","","The global color palette",36,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[11,"width","","Width of the image",36,{"inputs":[{"name":"reader"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",36,{"inputs":[{"name":"reader"}],"output":{"name":"u16"}}],[11,"bg_color","","Index of the background color in the global palette",36,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[11,"set_param","gif::encoder","",37,null],[11,"new_control_ext","","Constructor for control extension data.",38,{"inputs":[{"name":"extensiondata"},{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"name":"option"}],"output":{"name":"extensiondata"}}],[11,"write","","",39,null],[11,"flush","","",39,{"inputs":[{"name":"blockwriter"}],"output":{"name":"result"}}],[11,"drop","","",39,null],[11,"new","","Creates a new encoder.",40,null],[11,"write_global_palette","","Writes the global color palette.",40,null],[11,"write_frame","","Writes a frame to the image.",40,{"inputs":[{"name":"encoder"},{"name":"frame"}],"output":{"name":"result"}}],[11,"write_extension","","Writes an extension to the image.",40,{"inputs":[{"name":"encoder"},{"name":"extensiondata"}],"output":{"name":"result"}}],[11,"write_raw_extension","","Writes a raw extension to the image.",40,null],[11,"drop","","",40,null],[3,"Frame","image::gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",22,null],[12,"dispose","","Disposal method.",22,null],[12,"transparent","","Transparent index (if available).",22,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",22,null],[12,"top","","Offset from the top border of the canvas.",22,null],[12,"left","","Offset from the left border of the canvas.",22,null],[12,"width","","Width of the frame.",22,null],[12,"height","","Height of the frame.",22,null],[12,"interlaced","","True if the image is interlaced.",22,null],[12,"palette","","Frame local color palette if available.",22,null],[12,"buffer","","Buffer containing the image data.\nOnly indices unless configured differently.",22,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[11,"new","","Creates a new decoder that decodes the input steam ```r```",41,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"dimensions","","",41,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",41,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",41,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",41,null],[11,"read_image","","",41,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"new","","Creates a new GIF encoder.",42,{"inputs":[{"name":"encoder"},{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes a frame.",42,{"inputs":[{"name":"encoder"},{"name":"frame"}],"output":{"name":"imageresult"}}],[11,"from","image","",5,{"inputs":[{"name":"imageerror"},{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"tiff","","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",null,null],[11,"fmt","","",43,{"inputs":[{"name":"tiffdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",43,{"inputs":[{"name":"tiffdecoder"},{"name":"r"}],"output":{"name":"imageresult"}}],[11,"init","","Initializes the decoder.",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_long","","Reads a TIFF long value",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",43,{"inputs":[{"name":"tiffdecoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",43,null],[11,"read_image","","",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",44,{"inputs":[{"name":"tgadecoder"},{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",44,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",44,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",44,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",44,null],[11,"read_image","","",44,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[0,"bmp","image","Decoding of BMP Images",null,null],[3,"BMPDecoder","image::bmp","A bmp decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",45,{"inputs":[{"name":"bmpdecoder"},{"name":"r"}],"output":{"name":"bmpdecoder"}}],[11,"dimensions","","",45,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",45,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",45,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",45,null],[11,"read_image","","",45,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"fmt","image","",5,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"imageerror"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"imageerror"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"from","","",5,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"imageformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"imageformat"}],"output":{"name":"imageformat"}}],[11,"next","","",46,{"inputs":[{"name":"pixels"}],"output":{"name":"option"}}],[11,"next","","",47,{"inputs":[{"name":"mutpixels"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",48,{"inputs":[{"name":"subimage"},{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",48,{"inputs":[{"name":"subimage"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",48,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"to_image","","Convert this subimage to an ImageBuffer",48,{"inputs":[{"name":"subimage"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",48,null],[11,"bounds","","",48,null],[11,"get_pixel","","",48,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"put_pixel","","",48,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",48,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"get_pixel_mut","","",48,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"clone","","",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey\npixels with transparency.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rgbimage"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rgbaimage"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"grayimage"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"grayalphaimage"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"raw_pixels","","Return this image&#39;s pixels as a byte vector.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"vec"}}],[11,"color","","Return this image&#39;s color type.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image.\nThis method operates inplace.",8,{"inputs":[{"name":"dynamicimage"}],"output":null}],[11,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image&#39;s aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image&#39;s dimensions",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image&#39;s dimensions",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image.\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",8,null],[11,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",8,{"inputs":[{"name":"dynamicimage"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"save","","Encode this image and write it to ```w```",8,{"inputs":[{"name":"dynamicimage"},{"name":"w"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",8,null],[11,"bounds","","",8,null],[11,"get_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"put_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"clone","","",4,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",4,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"rgb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"eq","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"channel_count","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"u8"}}],[11,"color_model","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"str"}}],[11,"color_type","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"inputs":[{"name":"rgb"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgba"}}],[11,"to_luma","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"lumaa"}}],[11,"map","","",2,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",2,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",2,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",2,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",2,{"inputs":[{"name":"rgb"},{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"},{"name":"f"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"rgb"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":null}],[11,"index","","",2,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",2,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"luma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"eq","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"channel_count","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"u8"}}],[11,"color_model","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"str"}}],[11,"color_type","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"inputs":[{"name":"luma"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"rgba"}}],[11,"to_luma","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"lumaa"}}],[11,"map","","",0,{"inputs":[{"name":"luma"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",0,{"inputs":[{"name":"luma"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",0,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",0,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",0,{"inputs":[{"name":"luma"},{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",0,{"inputs":[{"name":"luma"},{"name":"luma"},{"name":"f"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"luma"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"rgba"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"eq","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"channel_count","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"u8"}}],[11,"color_model","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"str"}}],[11,"color_type","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"inputs":[{"name":"rgba"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"to_luma","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"lumaa"}}],[11,"map","","",3,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",3,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",3,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",3,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",3,{"inputs":[{"name":"rgba"},{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"},{"name":"f"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"rgba"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",3,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"lumaa"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"eq","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"channel_count","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"u8"}}],[11,"color_model","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"str"}}],[11,"color_type","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"inputs":[{"name":"lumaa"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgba"}}],[11,"to_luma","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"map","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",1,{"inputs":[{"name":"lumaa"},{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"lumaa"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"from_raw","","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",49,null],[11,"width","","The width of this image.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"save","","Saves the buffer to a file at the path specified.",49,{"inputs":[{"name":"imagebuffer"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",49,null],[11,"deref_mut","","",49,null],[11,"index","","",49,null],[11,"index_mut","","",49,null],[11,"clone","","",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",49,null],[11,"bounds","","",49,null],[11,"get_pixel","","",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"new","","Creates a new image buffer based on a `Vec&lt;P::Subpixel&gt;`.",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel&#39;s x and y coordinates.",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"vec"}}],[11,"convert","","",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"new","","Contructs a new frame iterator",50,{"inputs":[{"name":"frames"},{"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",51,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",51,{"inputs":[{"name":"frame"},{"name":"rgbaimage"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",51,{"inputs":[{"name":"frame"},{"name":"rgbaimage"},{"name":"u32"},{"name":"u32"},{"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",51,{"inputs":[{"name":"frame"}],"output":{"name":"ratio"}}],[11,"buffer","","Returns the image buffer",51,{"inputs":[{"name":"frame"}],"output":{"name":"rgbaimage"}}],[11,"into_buffer","","Returns the image buffer",51,{"inputs":[{"name":"frame"}],"output":{"name":"rgbaimage"}}],[11,"left","","Returns the x offset",51,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"top","","Returns the y offset",51,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"next","","",50,{"inputs":[{"name":"frames"}],"output":{"name":"option"}}],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"row_len","","Returns the length in bytes of one decoded row of the image",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"read_scanline","","Reads one row from the image into ```buf``` and returns the row index",52,null],[10,"read_image","","Decodes the entire image and return it as a Vector",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"is_animated","","Returns true if the image is animated",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",52,{"inputs":[{"name":"imagedecoder"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","","The type of pixel.",53,null],[10,"dimensions","","The width and height of this image.",53,null],[11,"width","","The width of this image.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[10,"bounds","","The bounding rectangle of this image.",53,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_pixel","","Returns the pixel located at (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[10,"put_pixel","","Put a pixel at location (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",53,{"inputs":[{"name":"genericimage"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","","The underlying subpixel type.",54,null],[10,"channel_count","","Returns the number of channels of this pixel type.",54,{"inputs":[{"name":"pixel"}],"output":{"name":"u8"}}],[10,"channels","","Returns the components as a slice.",54,null],[10,"channels_mut","","Returns the components as a mutable slice",54,null],[10,"color_model","","Returns a string that can help to interprete the meaning each channel\nSee [gimp babl](http://gegl.org/babl/).",54,{"inputs":[{"name":"pixel"}],"output":{"name":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",54,{"inputs":[{"name":"pixel"}],"output":{"name":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel\nhas less than 4 channels the remainder is filled with the maximum value",54,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d.\nIf the pixel does not contain 4 channels the extra are ignored.",54,{"inputs":[{"name":"pixel"},{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"}],"output":{"name":"self"}}],[10,"from_slice","","Returns a view into a slice.",54,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",54,null],[10,"to_rgb","","Convert this pixel to RGB",54,{"inputs":[{"name":"pixel"}],"output":{"name":"rgb"}}],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",54,{"inputs":[{"name":"pixel"}],"output":{"name":"rgba"}}],[10,"to_luma","","Convert this pixel to luma",54,{"inputs":[{"name":"pixel"}],"output":{"name":"luma"}}],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",54,{"inputs":[{"name":"pixel"}],"output":{"name":"lumaa"}}],[10,"map","","Apply the function ```f``` to each channel of this pixel.",54,{"inputs":[{"name":"pixel"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply","","Apply the function ```f``` to each channel of this pixel.",54,{"inputs":[{"name":"pixel"},{"name":"f"}],"output":null}],[10,"map_with_alpha","","Apply the function ```f``` to each channel except the alpha channel.\nApply the function ```g``` to the alpha channel.",54,{"inputs":[{"name":"pixel"},{"name":"f"},{"name":"g"}],"output":{"name":"self"}}],[10,"apply_with_alpha","","Apply the function ```f``` to each channel except the alpha channel.\nApply the function ```g``` to the alpha channel. Works in-place.",54,{"inputs":[{"name":"pixel"},{"name":"f"},{"name":"g"}],"output":null}],[10,"map2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise.",54,{"inputs":[{"name":"pixel"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise. Works in-place.",54,{"inputs":[{"name":"pixel"},{"name":"self"},{"name":"f"}],"output":null}],[10,"invert","","Invert this pixel",54,{"inputs":[{"name":"pixel"}],"output":null}],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",54,{"inputs":[{"name":"pixel"},{"name":"self"}],"output":null}],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",null,null],[10,"convert","","Converts `self` to a buffer of type T",55,{"inputs":[{"name":"convertbuffer"}],"output":{"name":"t"}}],[8,"Primitive","","Primitive trait from old stdlib",null,null],[11,"is_animated","","Returns true if the image is animated",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",52,{"inputs":[{"name":"imagedecoder"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[11,"width","","The width of this image.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",53,{"inputs":[{"name":"genericimage"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to\nadjust it&#39;s alpha value accordingly.",56,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"FilterType"],[4,"ImageFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"Component"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[4,"DisposalMethod"],[4,"Block"],[4,"Extension"],[4,"DecodingError"],[4,"Extensions"],[4,"Decoded"],[4,"State"],[4,"U16Value"],[4,"ByteValue"],[3,"StreamingDecoder"],[4,"ColorOutput"],[3,"MemoryLimit"],[3,"Decoder"],[3,"Reader"],[4,"Repeat"],[4,"ExtensionData"],[3,"BlockWriter"],[3,"Encoder"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPDecoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex['png'] = {"items":[[3,"FrameControl","png","Frame control information",null,null],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",0,null],[12,"width","","Width of the following frame",0,null],[12,"height","","Height of the following frame",0,null],[12,"x_offset","","X position at which to render the following frame",0,null],[12,"y_offset","","Y position at which to render the following frame",0,null],[12,"delay_num","","Frame delay fraction numerator",0,null],[12,"delay_den","","Frame delay fraction denominator",0,null],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",0,null],[12,"blend_op","","Type of frame area rendering for this frame",0,null],[3,"AnimationControl","","Animation control information",null,null],[12,"num_frames","","Number of frames",1,null],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",1,null],[3,"Info","","PNG info struct",null,null],[12,"width","","",2,null],[12,"height","","",2,null],[12,"bit_depth","","",2,null],[12,"color_type","","",2,null],[12,"interlaced","","",2,null],[12,"trns","","",2,null],[12,"palette","","",2,null],[12,"frame_control","","",2,null],[12,"animation_control","","",2,null],[3,"Transformations","","# Output transformations",null,null],[3,"Decoder","","PNG Decoder",null,null],[3,"Reader","","PNG reader (mostly high-level interface)",null,null],[3,"OutputInfo","","Output info",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"color_type","","",3,null],[12,"bit_depth","","",3,null],[12,"line_size","","",3,null],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",null,null],[3,"Encoder","","",null,null],[3,"Writer","","",null,null],[4,"ColorType","","",null,null],[13,"Grayscale","","",4,null],[13,"RGB","","",4,null],[13,"Indexed","","",4,null],[13,"GrayscaleAlpha","","",4,null],[13,"RGBA","","",4,null],[4,"BitDepth","","Bit depth of the png file",null,null],[13,"One","","",5,null],[13,"Two","","",5,null],[13,"Four","","",5,null],[13,"Eight","","",5,null],[13,"Sixteen","","",5,null],[4,"Decoded","","Result of the decoding process",null,null],[13,"Nothing","","Nothing decoded yet",6,null],[13,"Header","","",6,null],[13,"ChunkBegin","","",6,null],[13,"ChunkComplete","","",6,null],[13,"AnimationControl","","",6,null],[13,"FrameControl","","",6,null],[13,"ImageData","","Decoded raw image data.",6,null],[13,"PartialChunk","","",6,null],[13,"ImageEnd","","",6,null],[4,"DecodingError","","",null,null],[13,"IoError","","",7,null],[13,"Format","","",7,null],[13,"InvalidSignature","","",7,null],[13,"CrcMismatch","","",7,null],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",7,null],[12,"crc_val","","Stored CRC32 value",7,null],[12,"crc_sum","","Calculated CRC32 sum",7,null],[12,"chunk","","",7,null],[13,"Other","png","",7,null],[13,"CorruptFlateStream","","",7,null],[4,"EncodingError","","",null,null],[13,"IoError","","",8,null],[13,"Format","","",8,null],[0,"chunk","","Chunk types and functions",null,null],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"is_private","","Returns true if the chunk is private.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set.\nIf it is set the chunk name is invalid.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"save_to_copy","","Returns true if the chunk is safe to copy if unknown.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[6,"ChunkType","","",null,null],[17,"IHDR","","Image header",null,null],[17,"PLTE","","Palette",null,null],[17,"IDAT","","Image data",null,null],[17,"IEND","","Image trailer",null,null],[17,"tRNS","","Transparency",null,null],[17,"bKGD","","Background colour",null,null],[17,"tIME","","Image last-modification time",null,null],[17,"acTL","","Animation control",null,null],[17,"fcTL","","Frame control",null,null],[17,"fdAT","","Frame data",null,null],[11,"fmt","png","",6,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"decodingerror"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"decodingerror"},{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"from","","",7,{"inputs":[{"name":"decodingerror"},{"name":"string"}],"output":{"name":"decodingerror"}}],[11,"from","std::io::error","",9,{"inputs":[{"name":"error"},{"name":"decodingerror"}],"output":{"name":"error"}}],[11,"new","png","Creates a new StreamingDecoder",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"streamingdecoder"}}],[11,"reset","","Resets the StreamingDecoder",10,{"inputs":[{"name":"streamingdecoder"}],"output":null}],[11,"update","","Low level StreamingDecoder interface.",10,null],[11,"set_param","","",11,{"inputs":[{"name":"transformations"},{"name":"decoder"}],"output":null}],[11,"buffer_size","","Returns the size needed to hold a decoded frame",3,{"inputs":[{"name":"outputinfo"}],"output":{"name":"usize"}}],[11,"new","","",12,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads all meta data until the first IDAT chunk",12,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"info","","",13,{"inputs":[{"name":"reader"}],"output":{"name":"info"}}],[11,"next_frame","","Decodes the next frame into `buf`",13,null],[11,"next_row","","Returns the next processed row of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"next_interlaced_row","","Returns the next processed row of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"output_color_type","","Returns the color type and the number of bits per sample\nof the data returned by `Reader::next_row` and Reader::frames`.",13,null],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame\nthat is decoded using the given input transformations.",13,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",13,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"fmt","","",8,{"inputs":[{"name":"encodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"encodingerror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"encodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"encodingerror"},{"name":"error"}],"output":{"name":"encodingerror"}}],[11,"from","std::io::error","",9,{"inputs":[{"name":"error"},{"name":"encodingerror"}],"output":{"name":"error"}}],[11,"new","png","",14,{"inputs":[{"name":"encoder"},{"name":"w"},{"name":"u32"},{"name":"u32"}],"output":{"name":"encoder"}}],[11,"write_header","","",14,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"set_param","","",4,{"inputs":[{"name":"colortype"},{"name":"encoder"}],"output":null}],[11,"set_param","","",5,{"inputs":[{"name":"bitdepth"},{"name":"encoder"}],"output":null}],[11,"write_chunk","","",15,null],[11,"write_image_data","","Writes the image data.",15,null],[11,"drop","","",15,{"inputs":[{"name":"writer"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",4,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",4,{"inputs":[{"name":"colortype"}],"output":{"name":"usize"}}],[11,"from_u8","","u8 -&gt; Self. Temporary solution until Rust provides a canonical one.",4,{"inputs":[{"name":"colortype"},{"name":"u8"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"bitdepth"},{"name":"bitdepth"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"bitdepth"},{"name":"bitdepth"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"bitdepth"}],"output":{"name":"bitdepth"}}],[11,"fmt","","",5,{"inputs":[{"name":"bitdepth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","u8 -&gt; Self. Temporary solution until Rust provides a canonical one.",5,{"inputs":[{"name":"bitdepth"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"framecontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"animationcontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"animationcontrol"}],"output":{"name":"animationcontrol"}}],[11,"fmt","","",2,{"inputs":[{"name":"info"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[{"name":"info"}],"output":{"name":"info"}}],[11,"size","","Size of the image",2,null],[11,"is_animated","","Returns true if the image is an APNG image.",2,{"inputs":[{"name":"info"}],"output":{"name":"bool"}}],[11,"animation_control","","Returns the frame control information of the image",2,{"inputs":[{"name":"info"}],"output":{"name":"option"}}],[11,"frame_control","","Returns the frame control information of the current frame",2,{"inputs":[{"name":"info"}],"output":{"name":"option"}}],[11,"bits_per_pixel","","Returns the bits per pixel",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"bytes_per_pixel","","Returns the bytes per pixel",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",2,{"inputs":[{"name":"info"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"hash","","",11,null],[11,"cmp","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"eq","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"transformations"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"transformations"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",11,{"inputs":[{"name":"transformations"},{"name":"u32"}],"output":{"name":"transformations"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"not","","Returns the complement of this set of flags.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"from_iter","","",11,{"inputs":[{"name":"transformations"},{"name":"t"}],"output":{"name":"transformations"}}],[17,"TRANSFORM_IDENTITY","","No transformation",null,null],[17,"TRANSFORM_STRIP_16","","Strip 16-bit samples to 8 bits",null,null],[17,"TRANSFORM_STRIP_ALPHA","","Discard the alpha channel",null,null],[17,"TRANSFORM_PACKING","","Expand 1, 2 and 4-bit samples to bytes",null,null],[17,"TRANSFORM_PACKSWAP","","Change order of packed pixels to LSB first",null,null],[17,"TRANSFORM_EXPAND","","Expand paletted images to RGB, expand grayscale images of\nless than 8-bit depth to 8-bit depth, and expand tRNS chunks\nto alpha channels.",null,null],[17,"TRANSFORM_INVERT_MONO","","Invert monochrome images",null,null],[17,"TRANSFORM_SHIFT","","Normalize pixels to the sBIT depth",null,null],[17,"TRANSFORM_BGR","","Flip RGB to BGR, RGBA to BGRA",null,null],[17,"TRANSFORM_SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",null,null],[17,"TRANSFORM_SWAP_ENDIAN","","Byte-swap 16-bit samples",null,null],[17,"TRANSFORM_INVERT_ALPHA","","Change alpha from opacity to transparency",null,null],[17,"TRANSFORM_STRIP_FILLER","","",null,null],[17,"TRANSFORM_STRIP_FILLER_BEFORE","","",null,null],[17,"TRANSFORM_STRIP_FILLER_AFTER","","",null,null],[17,"TRANSFORM_GRAY_TO_RGB","","",null,null],[17,"TRANSFORM_EXPAND_16","","",null,null],[17,"TRANSFORM_SCALE_16","","",null,null],[8,"Parameter","","Configuration parameter trait",null,null],[10,"set_param","","",16,{"inputs":[{"name":"parameter"},{"name":"object"}],"output":null}],[8,"HasParameters","","Object has parameters",null,null],[11,"set","","",17,{"inputs":[{"name":"hasparameters"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","",17,{"inputs":[{"name":"hasparameters"},{"name":"t"}],"output":{"name":"self"}}]],"paths":[[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"Error"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex['enum_primitive'] = {"items":[[11,"is_some","core::option","Returns `true` if the option is a `Some` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",0,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",0,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",1,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"eq","core::num::flt2dec::decoder","",2,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",4,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",4,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",4,null],[11,"clone","","",5,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",5,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",5,null],[11,"fmt","","",6,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",7,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",7,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",8,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,null],[11,"eq","","",10,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",13,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",13,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",13,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",13,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",13,null],[11,"eq","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",13,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",14,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",14,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",14,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",14,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",14,null],[11,"eq","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",14,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",15,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",15,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",15,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",15,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",16,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",17,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",17,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",18,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",19,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",19,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",20,null],[11,"get","","Dereferences the content.",20,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",20,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",21,null],[11,"clone","","",21,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",22,null],[11,"eq","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",22,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",22,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",23,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",23,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",24,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",25,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",26,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",27,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",27,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",28,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",28,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",29,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",30,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",31,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",32,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",33,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",34,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",30,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",30,null],[11,"swap","","Stores a value into the bool, returning the old value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",30,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",31,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",31,null],[11,"swap","","Stores a value into the isize, returning the old value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",31,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",32,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",32,null],[11,"swap","","Stores a value into the usize, returning the old value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",32,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",33,null],[11,"load","","Loads a value from the pointer.",33,null],[11,"store","","Stores a value into the pointer.",33,null],[11,"swap","","Stores a value into the pointer, returning the old value.",33,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",33,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",33,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",33,null],[11,"fmt","","",32,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",35,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",35,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",35,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",35,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",35,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",35,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",35,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",37,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",37,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",37,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",39,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",39,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",39,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",39,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",40,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",40,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",41,null],[11,"deref","","",40,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",42,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",42,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",42,null],[11,"clone","core::char","",43,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",44,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",43,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"clone","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",46,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"count","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",45,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",47,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",47,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",49,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",49,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",51,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",50,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",53,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"nth","","",56,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",57,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",57,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",58,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",59,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",59,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"clone","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",60,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"clone","","",61,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",61,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",61,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",62,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",62,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",64,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",25,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",24,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"clone","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next","core::ops","",24,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",70,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",70,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",70,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",71,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",71,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",73,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",0,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",75,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",76,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",77,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",77,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",77,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",77,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",77,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",77,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",77,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",77,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",77,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",79,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",77,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",81,null],[11,"next","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"count","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",81,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",82,null],[11,"next","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"count","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",82,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",85,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","","",86,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next","","",87,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next","","",88,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next","","",89,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"count","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",90,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"count","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",91,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"count","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",92,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",93,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",95,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",99,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",100,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",101,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",103,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",103,null],[11,"matching","","",103,null],[11,"use_early_reject","","",104,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",104,null],[11,"matching","","",104,null],[11,"eq","core::str","",105,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",106,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",106,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",106,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",107,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",108,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"count","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",109,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",110,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",111,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",111,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",116,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",117,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",118,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",126,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",126,null],[11,"call_mut","","",126,null],[11,"call_once","","",126,null],[11,"next","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next_back","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",128,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",128,null],[11,"finish","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",130,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",131,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",132,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",133,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",134,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",135,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",136,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",137,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",138,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",138,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",139,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",139,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",139,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",140,null],[11,"entry","","Adds a new entry to the set output.",141,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",141,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",141,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",142,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",142,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",142,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",143,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",143,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",143,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",144,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",145,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",146,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",147,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",148,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",149,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",150,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",151,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",152,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",152,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",153,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",153,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",153,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",153,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",153,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",153,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",153,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",153,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",153,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",22,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",35,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Option","enum_primitive","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive!","","Wrap this macro around an `enum` declaration to get an\nautomatically generated implementation of `num::FromPrimitive`.",null,null]],"paths":[[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"FromPrimitive"]]};
searchIndex['num'] = {"items":[[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"biguint"},{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"bigint"},{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",7,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",7,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7,null],[11,"from_polar","","Convert a polar representation into a complex number.",7,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",9,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",13,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",14,null],[13,"Invalid","","",14,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",15,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",15,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",16,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",16,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",17,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",19,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",19,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",21,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",22,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",23,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",24,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",25,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",25,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",28,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",29,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",29,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",29,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",29,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",29,null],[11,"fmt","","",13,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",30,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",30,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",30,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",30,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",30,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",30,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",30,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",30,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['quickcheck'] = {"items":[[8,"Rng","quickcheck","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",0,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",0,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",0,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",0,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",0,null],[11,"gen","","Return a random value of a `Rand` type.",0,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",0,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",0,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",0,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",0,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",0,null],[11,"shuffle","","Shuffle a mutable slice in place.",0,null],[3,"StdGen","","StdGen is the default implementation of `Gen`.",null,null],[3,"QuickCheck","","The main QuickCheck type for setting configuration and running QuickCheck.",null,null],[3,"TestResult","","Describes the status of a single instance of a test.",null,null],[5,"empty_shrinker","","Creates a shrinker with zero elements.",null,{"inputs":[],"output":{"name":"box"}}],[5,"single_shrinker","","Creates a shrinker with a single element.",null,{"inputs":[{"name":"a"}],"output":{"name":"box"}}],[5,"quickcheck","","Convenience function for running QuickCheck.",null,{"inputs":[{"name":"a"}],"output":null}],[11,"new","","",1,{"inputs":[{"name":"stdgen"},{"name":"r"},{"name":"usize"}],"output":{"name":"stdgen"}}],[11,"next_u32","","",1,{"inputs":[{"name":"stdgen"}],"output":{"name":"u32"}}],[11,"next_u64","","",1,{"inputs":[{"name":"stdgen"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",1,null],[11,"size","","",1,{"inputs":[{"name":"stdgen"}],"output":{"name":"usize"}}],[11,"arbitrary","core::option","",2,{"inputs":[{"name":"option"},{"name":"g"}],"output":{"name":"option"}}],[11,"shrink","","",2,{"inputs":[{"name":"option"}],"output":{"name":"box"}}],[11,"arbitrary","core::result","",3,{"inputs":[{"name":"result"},{"name":"g"}],"output":{"name":"result"}}],[11,"shrink","","",3,{"inputs":[{"name":"result"}],"output":{"name":"box"}}],[11,"arbitrary","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"g"}],"output":{"name":"vec"}}],[11,"shrink","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"arbitrary","collections::btree::map","",5,{"inputs":[{"name":"btreemap"},{"name":"g"}],"output":{"name":"btreemap"}}],[11,"shrink","","",5,{"inputs":[{"name":"btreemap"}],"output":{"name":"box"}}],[11,"arbitrary","std::collections::hash::map","",6,{"inputs":[{"name":"hashmap"},{"name":"g"}],"output":{"name":"hashmap"}}],[11,"shrink","","",6,{"inputs":[{"name":"hashmap"}],"output":{"name":"box"}}],[11,"arbitrary","collections::btree::set","",7,{"inputs":[{"name":"btreeset"},{"name":"g"}],"output":{"name":"btreeset"}}],[11,"shrink","","",7,{"inputs":[{"name":"btreeset"}],"output":{"name":"box"}}],[11,"arbitrary","collections::binary_heap","",8,{"inputs":[{"name":"binaryheap"},{"name":"g"}],"output":{"name":"binaryheap"}}],[11,"shrink","","",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"box"}}],[11,"arbitrary","std::collections::hash::set","",9,{"inputs":[{"name":"hashset"},{"name":"g"}],"output":{"name":"hashset"}}],[11,"shrink","","",9,{"inputs":[{"name":"hashset"}],"output":{"name":"box"}}],[11,"arbitrary","collections::linked_list","",10,{"inputs":[{"name":"linkedlist"},{"name":"g"}],"output":{"name":"linkedlist"}}],[11,"shrink","","",10,{"inputs":[{"name":"linkedlist"}],"output":{"name":"box"}}],[11,"arbitrary","collections::vec_deque","",11,{"inputs":[{"name":"vecdeque"},{"name":"g"}],"output":{"name":"vecdeque"}}],[11,"shrink","","",11,{"inputs":[{"name":"vecdeque"}],"output":{"name":"box"}}],[11,"arbitrary","collections::string","",12,{"inputs":[{"name":"string"},{"name":"g"}],"output":{"name":"string"}}],[11,"shrink","","",12,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"arbitrary","core::ops","",13,{"inputs":[{"name":"range"},{"name":"g"}],"output":{"name":"range"}}],[11,"shrink","","",13,{"inputs":[{"name":"range"}],"output":{"name":"box"}}],[11,"arbitrary","","",14,{"inputs":[{"name":"rangefrom"},{"name":"g"}],"output":{"name":"rangefrom"}}],[11,"shrink","","",14,{"inputs":[{"name":"rangefrom"}],"output":{"name":"box"}}],[11,"arbitrary","","",15,{"inputs":[{"name":"rangeto"},{"name":"g"}],"output":{"name":"rangeto"}}],[11,"shrink","","",15,{"inputs":[{"name":"rangeto"}],"output":{"name":"box"}}],[11,"arbitrary","","",16,{"inputs":[{"name":"rangefull"},{"name":"g"}],"output":{"name":"rangefull"}}],[11,"arbitrary","std::time::duration","",17,{"inputs":[{"name":"duration"},{"name":"g"}],"output":{"name":"self"}}],[11,"shrink","","",17,{"inputs":[{"name":"duration"}],"output":{"name":"box"}}],[11,"new","quickcheck","Creates a new QuickCheck value.",18,{"inputs":[{"name":"quickcheck"}],"output":{"name":"quickcheck"}}],[11,"tests","","Set the number of tests to run.",18,{"inputs":[{"name":"quickcheck"},{"name":"usize"}],"output":{"name":"quickcheck"}}],[11,"max_tests","","Set the maximum number of tests to run.",18,{"inputs":[{"name":"quickcheck"},{"name":"usize"}],"output":{"name":"quickcheck"}}],[11,"gen","","Set the random number generator to be used by QuickCheck.",18,{"inputs":[{"name":"quickcheck"},{"name":"g"}],"output":{"name":"quickcheck"}}],[11,"quicktest","","Tests a property and returns the result.",18,{"inputs":[{"name":"quickcheck"},{"name":"a"}],"output":{"name":"result"}}],[11,"quickcheck","","Tests a property and calls `panic!` on failure.",18,{"inputs":[{"name":"quickcheck"},{"name":"a"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"testresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"testresult"}],"output":{"name":"testresult"}}],[11,"passed","","Produces a test result that indicates the current test has passed.",19,{"inputs":[{"name":"testresult"}],"output":{"name":"testresult"}}],[11,"failed","","Produces a test result that indicates the current test has failed.",19,{"inputs":[{"name":"testresult"}],"output":{"name":"testresult"}}],[11,"error","","Produces a test result that indicates failure from a runtime error.",19,{"inputs":[{"name":"testresult"},{"name":"s"}],"output":{"name":"testresult"}}],[11,"discard","","Produces a test result that instructs `quickcheck` to ignore it.\nThis is useful for restricting the domain of your properties.\nWhen a test is discarded, `quickcheck` will replace it with a\nfresh one (up to a certain limit).",19,{"inputs":[{"name":"testresult"}],"output":{"name":"testresult"}}],[11,"from_bool","","Converts a `bool` to a `TestResult`. A `true` value indicates that\nthe test has passed and a `false` value indicates that the test\nhas failed.",19,{"inputs":[{"name":"testresult"},{"name":"bool"}],"output":{"name":"testresult"}}],[11,"must_fail","","Tests if a &quot;procedure&quot; fails when executed. The test passes only if\n`f` generates a task failure during its execution.",19,{"inputs":[{"name":"testresult"},{"name":"f"}],"output":{"name":"testresult"}}],[11,"is_failure","","Returns `true` if and only if this test result describes a failing\ntest.",19,{"inputs":[{"name":"testresult"}],"output":{"name":"bool"}}],[11,"is_error","","Returns `true` if and only if this test result describes a failing\ntest as a result of a run time error.",19,{"inputs":[{"name":"testresult"}],"output":{"name":"bool"}}],[11,"result","","",19,{"inputs":[{"name":"testresult"},{"name":"g"}],"output":{"name":"testresult"}}],[11,"result","core::result","",3,{"inputs":[{"name":"result"},{"name":"g"}],"output":{"name":"testresult"}}],[8,"Arbitrary","quickcheck","`Arbitrary` describes types whose values can be randomly generated and\nshrunk.",null,null],[10,"arbitrary","","",20,{"inputs":[{"name":"arbitrary"},{"name":"g"}],"output":{"name":"self"}}],[11,"shrink","","",20,{"inputs":[{"name":"arbitrary"}],"output":{"name":"box"}}],[8,"Gen","","`Gen` wraps a `rand::Rng` with parameters to control the distribution of\nrandom values.",null,null],[10,"size","","",21,{"inputs":[{"name":"gen"}],"output":{"name":"usize"}}],[8,"Testable","","`Testable` describes types (e.g., a function) whose values can be\ntested.",null,null],[10,"result","","",22,{"inputs":[{"name":"testable"},{"name":"g"}],"output":{"name":"testresult"}}],[11,"shrink","","",20,{"inputs":[{"name":"arbitrary"}],"output":{"name":"box"}}]],"paths":[[8,"Rng"],[3,"StdGen"],[4,"Option"],[4,"Result"],[3,"Vec"],[3,"BTreeMap"],[3,"HashMap"],[3,"BTreeSet"],[3,"BinaryHeap"],[3,"HashSet"],[3,"LinkedList"],[3,"VecDeque"],[3,"String"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeFull"],[3,"Duration"],[3,"QuickCheck"],[3,"TestResult"],[8,"Arbitrary"],[8,"Gen"],[8,"Testable"]]};
searchIndex['itertools'] = {"items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple *.next()*\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",3,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",3,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",3,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",4,{"inputs":[{"name":"interleave"}],"output":{"name":"interleave"}}],[11,"new","","Creat a new `Interleave` iterator.",4,{"inputs":[{"name":"interleave"},{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",4,{"inputs":[{"name":"interleave"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"interleaveshortest"}}],[11,"new","","Create a new `InterleaveShortest` iterator.",5,{"inputs":[{"name":"interleaveshortest"},{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",5,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"putback"}],"output":{"name":"putback"}}],[11,"new","","Iterator element type is `A`",6,{"inputs":[{"name":"putback"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",6,{"inputs":[{"name":"putback"},{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",6,null],[11,"put_back","","Put back a single value to the front of the iterator.",6,{"inputs":[{"name":"putback"},{"name":"item"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"putback"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"new","","Iterator element type is `A`",7,{"inputs":[{"name":"putbackn"},{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",7,{"inputs":[{"name":"putbackn"},{"name":"item"}],"output":null}],[11,"next","","",7,{"inputs":[{"name":"putbackn"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"putbackn"}],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"product"}],"output":{"name":"product"}}],[11,"new","","Create a new cartesian product iterator",8,{"inputs":[{"name":"product"},{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",8,{"inputs":[{"name":"product"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"batching"}],"output":{"name":"batching"}}],[11,"new","","Create a new Batching iterator.",9,{"inputs":[{"name":"batching"},{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",9,{"inputs":[{"name":"batching"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"groupby"}],"output":{"name":"groupby"}}],[11,"new","","Create a new `GroupBy` iterator.",10,{"inputs":[{"name":"groupby"},{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",10,{"inputs":[{"name":"groupby"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"step"}],"output":{"name":"step"}}],[11,"new","","Create a `Step` iterator.",11,{"inputs":[{"name":"step"},{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",11,{"inputs":[{"name":"step"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"merge"}],"output":{"name":"self"}}],[11,"next","","",12,{"inputs":[{"name":"merge"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"mergeby"}],"output":{"name":"self"}}],[11,"next","","",13,{"inputs":[{"name":"mergeby"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"kmerge"}],"output":{"name":"kmerge"}}],[11,"next","","",14,{"inputs":[{"name":"kmerge"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"multipeek"}],"output":{"name":"multipeek"}}],[11,"new","","Create a `MultiPeek` iterator.",15,{"inputs":[{"name":"multipeek"},{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like *.next()* with the only difference that it doesn&#39;t\nadvance itself. *.peek()* can be called multiple times, to peek\nfurther ahead.",15,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"coalesce"}],"output":{"name":"self"}}],[11,"new","","Create a new `Coalesce`.",16,{"inputs":[{"name":"coalesce"},{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"coalesce"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"dedup"}],"output":{"name":"self"}}],[11,"new","","Create a new `Dedup`.",17,{"inputs":[{"name":"dedup"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"dedup"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"mendslices"}],"output":{"name":"self"}}],[11,"new","","Create a new `MendSlices`.",18,{"inputs":[{"name":"mendslices"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",18,{"inputs":[{"name":"mendslices"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",19,{"inputs":[{"name":"takewhileref"},{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",19,{"inputs":[{"name":"takewhileref"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"whilesome"}],"output":{"name":"whilesome"}}],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",20,{"inputs":[{"name":"whilesome"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,{"inputs":[{"name":"whilesome"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"combinations"}],"output":{"name":"combinations"}}],[11,"new","","Create a new `Combinations` from a clonable iterator.",21,{"inputs":[{"name":"combinations"},{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",21,{"inputs":[{"name":"combinations"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",22,{"inputs":[{"name":"combinationsn"},{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",22,{"inputs":[{"name":"combinationsn"}],"output":{"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"uniqueby"}],"output":{"name":"uniqueby"}}],[11,"new","","Create a new `UniqueBy` iterator.",23,{"inputs":[{"name":"uniqueby"},{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",23,{"inputs":[{"name":"uniqueby"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next","","",24,{"inputs":[{"name":"unique"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"clone","","",24,{"inputs":[{"name":"unique"}],"output":{"name":"unique"}}],[11,"new","","Create a new `Flatten` iterator.",25,{"inputs":[{"name":"flatten"},{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",25,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"next_back","","",25,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"flatten"}],"output":{"name":"self"}}],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"fmt","itertools","",26,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",27,{"inputs":[{"name":"groups"}],"output":{"name":"option"}}],[11,"drop","","",28,{"inputs":[{"name":"group"}],"output":null}],[11,"next","","",28,{"inputs":[{"name":"group"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"drop","","",30,{"inputs":[{"name":"chunk"}],"output":null}],[11,"next","","",30,{"inputs":[{"name":"chunk"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"intersperse"}],"output":{"name":"intersperse"}}],[11,"new","","Create a new Intersperse iterator",31,{"inputs":[{"name":"intersperse"},{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",31,{"inputs":[{"name":"intersperse"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"clone","","",32,{"inputs":[{"name":"islice"}],"output":{"name":"islice"}}],[11,"new","","Create a new **ISlice**.",32,{"inputs":[{"name":"islice"},{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",32,{"inputs":[{"name":"islice"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"fmt","","",33,{"inputs":[{"name":"linspace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"linspace"}],"output":{"name":"linspace"}}],[11,"next","","",33,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next_back","","",33,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",34,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",34,{"inputs":[{"name":"intoiteratortuple"}],"output":{"name":"output"}}],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",35,null],[10,"append","","“Append” value `x` to a tuple.",35,{"inputs":[{"name":"appendtuple"},{"name":"x"}],"output":{"name":"result"}}],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",36,null],[11,"clone","","",37,{"inputs":[{"name":"flattuples"}],"output":{"name":"flattuples"}}],[11,"next","","",37,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"start","core::ops","",38,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",39,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","itertools","",41,{"inputs":[{"name":"padusing"}],"output":{"name":"padusing"}}],[11,"new","","Create a new **PadUsing** iterator.",41,{"inputs":[{"name":"padusing"},{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",41,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next_back","","",41,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"rciter"},{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"rciter"}}],[11,"next","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"new","","Create a new **RepeatN** with **n** repetitions.",42,{"inputs":[{"name":"repeatn"},{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",42,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"new","","Create a new `RepeatCall` from a closure.",43,{"inputs":[{"name":"repeatcall"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",43,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"unfold"},{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",44,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",45,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",44,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",44,{"inputs":[{"name":"stride"},{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",44,{"inputs":[{"name":"stride"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",44,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"next","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next_back","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",44,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",44,{"inputs":[{"name":"stride"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",44,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",45,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",45,{"inputs":[{"name":"stridemut"},{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",45,{"inputs":[{"name":"stridemut"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"next","","",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next_back","","",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",45,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",45,{"inputs":[{"name":"stridemut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",45,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"clone","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"stride"}}],[11,"index_mut","","Return a mutable reference to the element at a given index.",45,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"next","","",46,{"inputs":[{"name":"tee"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"clone","","",47,{"inputs":[{"name":"ziplongest"}],"output":{"name":"ziplongest"}}],[11,"new","","Create a new `ZipLongest` iterator.",47,{"inputs":[{"name":"ziplongest"},{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",47,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"eitherorboth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"eitherorboth"}],"output":{"name":"eitherorboth"}}],[11,"clone","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"new","","Create a new `Zip` from a tuple of iterators.",48,{"inputs":[{"name":"zip"},{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"zipslices"}}],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",49,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",49,{"inputs":[{"name":"zipslices"},{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"len","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",49,{"inputs":[{"name":"zipslices"},{"name":"usize"}],"output":{"name":"item"}}],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",50,{"inputs":[{"name":"itertools"},{"name":"item"}],"output":{"name":"intersperse"}}],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupbylazy"}}],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"chunkslazy"}}],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",50,null],[11,"slice","","Return a sliced iterator.",50,{"inputs":[{"name":"itertools"},{"name":"r"}],"output":{"name":"islice"}}],[11,"into_rc","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"rciter"}}],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"step"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",50,{"inputs":[{"name":"itertools"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"kmerge"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"product"}}],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"multipeek"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements. For each pair the closure\nis passed the latest two elements, `x`, `y` and may return either `Ok(z)`\nto merge the two values or `Err((x, y))` to indicate they can&#39;t be merged.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"mendslices"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"whilesome"}}],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"combinations"}}],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",50,{"inputs":[{"name":"itertools"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"flatten"}}],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",50,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",50,{"inputs":[{"name":"itertools"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":null}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",50,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",50,{"inputs":[{"name":"itertools"},{"name":"str"},{"name":"f"}],"output":{"name":"format"}}],[11,"fold_results","","Fold `Result` values from an iterator.",50,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",50,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"option"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"EitherOrBoth"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"KMerge"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex['rustc_serialize'] = {"items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['env_logger'] = {"items":[[3,"LogBuilder","env_logger","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[{"name":"logbuilder"}],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,{"inputs":[{"name":"logbuilder"},{"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",0,{"inputs":[{"name":"logbuilder"},{"name":"f"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",0,{"inputs":[{"name":"logbuilder"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",0,{"inputs":[{"name":"logbuilder"}],"output":{"name":"result"}}]],"paths":[[3,"LogBuilder"]]};
searchIndex['regex'] = {"items":[[3,"Captures","regex","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[4,"Regex","","A compiled regular expression",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",0,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",0,null],[13,"InvalidSet","","An invalid set is a regex set with fewer than 2 regular expressions.",0,null],[4,"CaptureNames","","Yields the names of all possible captures.\n`None` indicates an unnamed capture; the first element\n(capture 0, the whole matched region) is always unnamed.",null,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",1,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a dynamic regular expression with the given size limit.",1,{"inputs":[{"name":"regex"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn&#39;t*\nmatched by the regular expression.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn&#39;t*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"as_str","","Returns the original string of this regex.",1,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",1,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",1,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"next","","",2,{"inputs":[{"name":"capturenames"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"reg_replace","","",3,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",3,{"inputs":[{"name":"noexpand"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",6,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",6,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",6,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",6,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",6,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",6,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",6,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",6,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",6,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"index","","",6,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",6,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",7,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"regexset"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",12,{"inputs":[{"name":"regexset"},{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",12,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",12,{"inputs":[{"name":"regexset"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",12,{"inputs":[{"name":"regexset"}],"output":{"name":"usize"}}],[11,"fmt","","",12,{"inputs":[{"name":"regexset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"setmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatches"}}],[11,"matched_any","","Whether this set contains any matches.",13,{"inputs":[{"name":"setmatches"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",13,{"inputs":[{"name":"setmatches"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",13,{"inputs":[{"name":"setmatches"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",13,{"inputs":[{"name":"setmatches"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",13,{"inputs":[{"name":"setmatches"}],"output":{"name":"intoiter"}}],[11,"next","","",14,{"inputs":[{"name":"setmatchesintoiter"}],"output":{"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",15,{"inputs":[{"name":"setmatchesiter"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",16,{"inputs":[{"name":"replacer"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",16,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",16,{"inputs":[{"name":"replacer"}],"output":{"name":"option"}}]],"paths":[[4,"Error"],[4,"Regex"],[4,"CaptureNames"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[8,"Replacer"]]};
searchIndex['inflate'] = {"items":[[3,"InflateStream","inflate","",null,null],[11,"new","","",0,{"inputs":[{"name":"inflatestream"}],"output":{"name":"inflatestream"}}],[11,"from_zlib","","",0,{"inputs":[{"name":"inflatestream"}],"output":{"name":"inflatestream"}}],[11,"update","","",0,null]],"paths":[[3,"InflateStream"]]};
searchIndex['rand'] = {"items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['flate2'] = {"items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of\nbytes was not a valid input stream of bytes.",null,null],[4,"Status","","Possible status results of compressing some data or successfully\ndecompressing a block of data.",null,null],[13,"Ok","","Indicates success.",0,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output\nbuffers being empty.",0,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have\nbeen written. Decompression/compression should not be called again.",0,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or\ndecompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions,\nthis indicates that the underlying stream to decide how much data to\naccumulate before producing output in order to maximize compression.",1,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is\naligned on a byte boundary so that the decompressor can get all input\ndata available so far.",1,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is\nnot aligned to a byte boundary.",1,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the\noutput is not aligned on a byte boundary and up to seven vits of the\ncurrent block are held to be written as the next byte after the next\ndeflate block is completed.",1,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is\nreset so decompression can restart from this point if previous\ncompressed data has been damaged or if random access is desired.",1,null],[13,"Finish","","Pending input is processed and pending output is flushed.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in\nthis enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data\nslightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"new","","Create a new blank builder with no header by default.",3,{"inputs":[{"name":"gzbuilder"}],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",3,{"inputs":[{"name":"gzbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",3,{"inputs":[{"name":"gzbuilder"},{"name":"vec"}],"output":{"name":"builder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",3,null],[11,"comment","","Configure the `comment` field in the gzip header.",3,null],[11,"write","","Consume this builder, creating a writer encoder in the process.",3,{"inputs":[{"name":"gzbuilder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",3,{"inputs":[{"name":"gzbuilder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"filename","","Returns the `filename` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"mtime","","Returns the `mtime` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"u32"}}],[11,"fmt","","",5,{"inputs":[{"name":"dataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new object ready for compressing data that it&#39;s given.",6,{"inputs":[{"name":"compress"},{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis compression object.",6,{"inputs":[{"name":"compress"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis compression object.",6,{"inputs":[{"name":"compress"}],"output":{"name":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",6,{"inputs":[{"name":"compress"}],"output":null}],[11,"compress","","Compresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",6,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming\nonly as much input as needed and writing as much output as possible.",6,null],[11,"new","","Creates a new object ready for decompressing data that it&#39;s given.",7,{"inputs":[{"name":"decompress"},{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis decompression object.",7,{"inputs":[{"name":"decompress"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis decompression object.",7,{"inputs":[{"name":"decompress"}],"output":{"name":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",7,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector\nspecified by `output`.",7,null],[11,"description","","",5,{"inputs":[{"name":"dataerror"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"dataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","","Types which operate over `Reader` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[0,"write","flate2","Types which operate over `Writer` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"result"}}],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"deflatedecoder"}}],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",9,{"inputs":[{"name":"flatewriteext"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",9,{"inputs":[{"name":"flatewriteext"}],"output":{"name":"deflatedecoder"}}],[11,"clone","","",2,{"inputs":[{"name":"compression"}],"output":{"name":"compression"}}],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",10,{"inputs":[{"name":"deflateencoder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",10,{"inputs":[{"name":"deflateencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",10,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"result"}}],[11,"write","","",10,null],[11,"flush","","",10,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"result"}}],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",11,{"inputs":[{"name":"deflateencoder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",11,{"inputs":[{"name":"deflateencoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",11,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"r"}}],[11,"read","","",11,null],[11,"new","","Creates a new decoder which will decompress data read from the given\nstream.",12,{"inputs":[{"name":"deflatedecoder"},{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",12,{"inputs":[{"name":"deflatedecoder"},{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",12,{"inputs":[{"name":"deflatedecoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",13,{"inputs":[{"name":"deflatedecoder"},{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",13,{"inputs":[{"name":"deflatedecoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",14,{"inputs":[{"name":"gzencoder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the\nencoding is done.",14,{"inputs":[{"name":"gzencoder"}],"output":{"name":"result"}}],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"gzencoder"}],"output":{"name":"result"}}],[11,"drop","","",14,{"inputs":[{"name":"gzencoder"}],"output":null}],[11,"new","flate2::read","Creates a new encoder which will use the given compression level.",15,{"inputs":[{"name":"gzencoder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",15,{"inputs":[{"name":"gzencoder"}],"output":{"name":"r"}}],[11,"read","","",15,null],[11,"new","","Creates a new decoder from the given reader, immediately parsing the\ngzip header.",16,{"inputs":[{"name":"gzdecoder"},{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",16,{"inputs":[{"name":"gzdecoder"}],"output":{"name":"header"}}],[11,"read","","",16,null],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",17,{"inputs":[{"name":"zlibencoder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",17,{"inputs":[{"name":"zlibencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",17,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",18,{"inputs":[{"name":"zlibencoder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",18,{"inputs":[{"name":"zlibencoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",18,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"new","","Creates a new decoder which will decompress data read from the given\nstream.",19,{"inputs":[{"name":"zlibdecoder"},{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",19,{"inputs":[{"name":"zlibdecoder"},{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",19,{"inputs":[{"name":"zlibdecoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"read","","",19,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",20,{"inputs":[{"name":"zlibdecoder"},{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",20,{"inputs":[{"name":"zlibdecoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"result"}}]],"paths":[[4,"Status"],[4,"Flush"],[4,"Compression"],[3,"GzBuilder"],[3,"GzHeader"],[3,"DataError"],[3,"Compress"],[3,"Decompress"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"ZlibEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibDecoder"]]};
searchIndex['aho_corasick'] = {"items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"eq","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"match"}],"output":{"name":"match"}}],[11,"fmt","","",1,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"streammatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"streammatches"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"matchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"matchesoverlapping"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"streammatchesoverlapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"streammatchesoverlapping"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"fullacautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"fullacautomaton"},{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"fullacautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"automaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"automaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"transitions"},{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"transitions"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"transitions"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"transitions"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"acautomaton"},{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"acautomaton"},{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"acautomaton"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"acautomaton"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",9,{"inputs":[{"name":"dense"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"dense"}}],[11,"new","","",9,{"inputs":[{"name":"dense"},{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"dense"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"dense"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"sparse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"sparse"}}],[11,"new","","",10,{"inputs":[{"name":"sparse"},{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"sparse"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"sparse"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"acautomaton"},{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"acautomaton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"automaton"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"automaton"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"automaton"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex['log'] = {"items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex['memchr'] = {"items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex['conv'] = {"items":[[4,"DefaultApprox","conv","The &quot;default&quot; approximation scheme.  This scheme does whatever would generally be expected of a lossy conversion, assuming no additional context or instruction is given.",null,null],[4,"Wrapping","","This scheme is used to convert a value by &quot;wrapping&quot; it into a narrower range.",null,null],[4,"RoundToNearest","","This scheme is used to convert a value by rounding it to the nearest representable value, with ties rounding away from zero.",null,null],[4,"RoundToNegInf","","This scheme is used to convert a value by rounding it toward negative infinity to the nearest representable value.",null,null],[4,"RoundToPosInf","","This scheme is used to convert a value by rounding it toward positive infinity to the nearest representable value.",null,null],[4,"RoundToZero","","This scheme is used to convert a value by rounding it toward zero to the nearest representable value.",null,null],[0,"macros","","This module provides convenience macros to help with implementing the conversion traits.",null,null],[0,"prelude","","Publicly re-exports the most generally useful set of items.",null,null],[0,"errors","","This module defines the various error types that can be produced by a failed conversion.",null,null],[3,"Unrepresentable","conv::errors","Indicates that the conversion failed because the value was not representable.",null,null],[3,"NegOverflow","","Indicates that the conversion failed due to a negative overflow.",null,null],[3,"PosOverflow","","Indicates that the conversion failed due to a positive overflow.",null,null],[4,"GeneralError","","A general error enumeration that subsumes all other conversion errors.",null,null],[13,"NegOverflow","","Input was too negative for the target type.",0,null],[13,"PosOverflow","","Input was too positive for the target type.",0,null],[13,"Unrepresentable","","Input was not representable in the target type.",0,null],[4,"GeneralErrorKind","","A general error enumeration that subsumes all other conversion errors, but discards all input payloads the errors may be carrying.",null,null],[13,"NegOverflow","","Input was too negative for the target type.",1,null],[13,"PosOverflow","","Input was too positive for the target type.",1,null],[13,"Unrepresentable","","Input was not representable in the target type.",1,null],[4,"NoError","","Indicates that it is not possible for the conversion to fail.",null,null],[4,"FloatError","","Indicates that a conversion from a floating point type failed.",null,null],[13,"NegOverflow","","Input was too negative for the target type.",2,null],[13,"PosOverflow","","Input was too positive for the target type.",2,null],[13,"NotANumber","","Input was not-a-number, which the target type could not represent.",2,null],[4,"RangeError","","Indicates that a conversion failed due to a range error.",null,null],[13,"NegOverflow","","Input was too negative for the target type.",3,null],[13,"PosOverflow","","Input was too positive the target type.",3,null],[4,"RangeErrorKind","","Indicates that a conversion failed due to a range error.",null,null],[13,"NegOverflow","","Input was too negative for the target type.",4,null],[13,"PosOverflow","","Input was too positive for the target type.",4,null],[8,"Saturate","","Saturates a `Result`.",null,null],[16,"Output","","The result of saturating.",5,null],[10,"saturate","","Replaces an overflow error with a saturated value.",5,{"inputs":[{"name":"saturate"}],"output":{"name":"output"}}],[8,"UnwrapOk","","Safely unwrap a `Result` that cannot contain an error.",null,null],[10,"unwrap_ok","","Unwraps a `Result` without possibility of failing.",6,{"inputs":[{"name":"unwrapok"}],"output":{"name":"t"}}],[8,"UnwrapOrInf","","Unwrap a conversion by saturating to infinity.",null,null],[16,"Output","","The result of unwrapping.",7,null],[10,"unwrap_or_inf","","Either unwraps the successfully converted value, or saturates to infinity in the &quot;direction&quot; of overflow.",7,{"inputs":[{"name":"unwraporinf"}],"output":{"name":"output"}}],[8,"UnwrapOrInvalid","","Unwrap a conversion by replacing a failure with an invalid sentinel value.",null,null],[16,"Output","","The result of unwrapping.",8,null],[10,"unwrap_or_invalid","","Either unwraps the successfully converted value, or returns the output type&#39;s invalid sentinel value.",8,{"inputs":[{"name":"unwraporinvalid"}],"output":{"name":"output"}}],[8,"UnwrapOrSaturate","","Unwrap a conversion by saturating.",null,null],[16,"Output","","The result of unwrapping.",9,null],[10,"unwrap_or_saturate","","Either unwraps the successfully converted value, or saturates in the &quot;direction&quot; of overflow.",9,{"inputs":[{"name":"unwraporsaturate"}],"output":{"name":"output"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"generalerror"},{"name":"generalerror"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"generalerror"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"generalerror"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"generalerror"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"generalerror"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"generalerror"},{"name":"generalerror"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"generalerror"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"generalerror"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"generalerror"}],"output":{"name":"generalerror"}}],[11,"into_inner","","Returns the value stored in this error.",0,{"inputs":[{"name":"generalerror"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"generalerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"generalerror"},{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"generalerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"generalerror"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"generalerror"},{"name":"unrepresentable"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"generalerror"},{"name":"negoverflow"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"generalerror"},{"name":"posoverflow"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"generalerror"},{"name":"rangeerror"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"generalerror"},{"name":"floaterror"}],"output":{"name":"generalerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"generalerrorkind"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"generalerrorkind"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"generalerrorkind"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"generalerrorkind"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"generalerrorkind"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"generalerrorkind"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"generalerrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"generalerrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"generalerrorkind"}],"output":{"name":"generalerrorkind"}}],[11,"from","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"generalerrorkind"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"unrepresentable"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"negoverflow"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"posoverflow"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"rangeerrorkind"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"rangeerror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"generalerror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"generalerrorkind"},{"name":"floaterror"}],"output":{"name":"generalerrorkind"}}],[11,"fmt","","",10,{"inputs":[{"name":"noerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"noerror"},{"name":"noerror"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"noerror"},{"name":"noerror"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"noerror"},{"name":"noerror"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"noerror"},{"name":"noerror"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"noerror"},{"name":"noerror"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"noerror"},{"name":"noerror"}],"output":{"name":"ordering"}}],[11,"eq","","",10,{"inputs":[{"name":"noerror"},{"name":"noerror"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"noerror"},{"name":"noerror"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"noerror"}],"output":{"name":"noerror"}}],[11,"fmt","","",10,{"inputs":[{"name":"noerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"noerror"}],"output":{"name":"str"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"unrepresentable"},{"name":"unrepresentable"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"unrepresentable"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"unrepresentable"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"unrepresentable"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"unrepresentable"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"unrepresentable"},{"name":"unrepresentable"}],"output":{"name":"ordering"}}],[11,"eq","","",11,{"inputs":[{"name":"unrepresentable"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"unrepresentable"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"unrepresentable"}],"output":{"name":"unrepresentable"}}],[11,"into_inner","","Returns the value stored in this error.",11,{"inputs":[{"name":"unrepresentable"}],"output":{"name":"t"}}],[11,"fmt","","",11,{"inputs":[{"name":"unrepresentable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"unrepresentable"},{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"unrepresentable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",11,{"inputs":[{"name":"unrepresentable"}],"output":{"name":"str"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"negoverflow"},{"name":"negoverflow"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"negoverflow"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"negoverflow"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"negoverflow"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"negoverflow"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"negoverflow"},{"name":"negoverflow"}],"output":{"name":"ordering"}}],[11,"eq","","",12,{"inputs":[{"name":"negoverflow"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"negoverflow"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"negoverflow"}],"output":{"name":"negoverflow"}}],[11,"into_inner","","Returns the value stored in this error.",12,{"inputs":[{"name":"negoverflow"}],"output":{"name":"t"}}],[11,"fmt","","",12,{"inputs":[{"name":"negoverflow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"negoverflow"},{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"negoverflow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"negoverflow"}],"output":{"name":"str"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"posoverflow"},{"name":"posoverflow"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"posoverflow"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"posoverflow"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"posoverflow"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"posoverflow"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"posoverflow"},{"name":"posoverflow"}],"output":{"name":"ordering"}}],[11,"eq","","",13,{"inputs":[{"name":"posoverflow"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"posoverflow"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"posoverflow"}],"output":{"name":"posoverflow"}}],[11,"into_inner","","Returns the value stored in this error.",13,{"inputs":[{"name":"posoverflow"}],"output":{"name":"t"}}],[11,"fmt","","",13,{"inputs":[{"name":"posoverflow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"posoverflow"},{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",13,{"inputs":[{"name":"posoverflow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",13,{"inputs":[{"name":"posoverflow"}],"output":{"name":"str"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"floaterror"},{"name":"floaterror"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"floaterror"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"floaterror"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"floaterror"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"floaterror"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"floaterror"},{"name":"floaterror"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"floaterror"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"floaterror"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"floaterror"}],"output":{"name":"floaterror"}}],[11,"into_inner","","Returns the value stored in this error.",2,{"inputs":[{"name":"floaterror"}],"output":{"name":"t"}}],[11,"fmt","","",2,{"inputs":[{"name":"floaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"floaterror"},{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"floaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"floaterror"}],"output":{"name":"str"}}],[11,"from","","",2,{"inputs":[{"name":"floaterror"},{"name":"negoverflow"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"floaterror"},{"name":"posoverflow"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"floaterror"},{"name":"rangeerror"}],"output":{"name":"self"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"rangeerror"},{"name":"rangeerror"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"rangeerror"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"rangeerror"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"rangeerror"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"rangeerror"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"rangeerror"},{"name":"rangeerror"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"rangeerror"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rangeerror"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"rangeerror"}],"output":{"name":"rangeerror"}}],[11,"into_inner","","Returns the value stored in this error.",3,{"inputs":[{"name":"rangeerror"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"rangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"rangeerror"},{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"rangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"rangeerror"}],"output":{"name":"str"}}],[11,"from","","",3,{"inputs":[{"name":"rangeerror"},{"name":"negoverflow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"rangeerror"},{"name":"posoverflow"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"rangeerrorkind"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"rangeerrorkind"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"rangeerrorkind"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"rangeerrorkind"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"rangeerrorkind"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"rangeerrorkind"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"rangeerrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"rangeerrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"rangeerrorkind"}],"output":{"name":"rangeerrorkind"}}],[11,"from","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"rangeerrorkind"}],"output":{"name":"str"}}],[11,"from","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"negoverflow"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"posoverflow"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"rangeerrorkind"},{"name":"rangeerror"}],"output":{"name":"self"}}],[11,"saturate","core::result","",14,{"inputs":[{"name":"result"}],"output":{"name":"output"}}],[11,"saturate","","",14,{"inputs":[{"name":"result"}],"output":{"name":"output"}}],[11,"saturate","","",14,{"inputs":[{"name":"result"}],"output":{"name":"output"}}],[11,"unwrap_ok","","",14,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"unwrap_or_inf","","",14,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"unwrap_or_invalid","","",14,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"unwrap_or_saturate","","",14,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[0,"misc","conv","This module defines some additional traits not *directly* tied to conversions.",null,null],[8,"Saturated","conv::misc","This trait indicates that values of a type can be logically &quot;saturated&quot;.",null,null],[10,"saturated_max","","Returns the type&#39;s saturated, maximum value.",15,{"inputs":[{"name":"saturated"}],"output":{"name":"self"}}],[10,"saturated_min","","Returns the type&#39;s saturated, minimum value.",15,{"inputs":[{"name":"saturated"}],"output":{"name":"self"}}],[8,"InvalidSentinel","","This trait indicates that a type has an &quot;invalid&quot; sentinel value.",null,null],[10,"invalid_sentinel","","Returns the type&#39;s &quot;invalid&quot; sentinel value.",16,{"inputs":[{"name":"invalidsentinel"}],"output":{"name":"self"}}],[8,"SignedInfinity","","This trait indicates that a type has positive and negative &quot;infinity&quot; values.",null,null],[10,"neg_infinity","","Returns the type&#39;s positive infinity value.",17,{"inputs":[{"name":"signedinfinity"}],"output":{"name":"self"}}],[10,"pos_infinity","","Returns the type&#39;s negative infinity value.",17,{"inputs":[{"name":"signedinfinity"}],"output":{"name":"self"}}],[8,"ApproxFrom","conv","This trait is used to perform a conversion that is permitted to approximate the result, but *not* to wrap or saturate the result to fit into the destination type&#39;s representable range.",null,null],[16,"Err","","The error type produced by a failed conversion.",18,null],[10,"approx_from","","Convert the given value into an approximately equivalent representation.",18,{"inputs":[{"name":"approxfrom"},{"name":"src"}],"output":{"name":"result"}}],[8,"ApproxInto","","This is the dual of `ApproxFrom`; see that trait for information.",null,null],[16,"Err","","The error type produced by a failed conversion.",19,null],[10,"approx_into","","Convert the subject into an approximately equivalent representation.",19,{"inputs":[{"name":"approxinto"}],"output":{"name":"result"}}],[8,"ApproxScheme","","This trait is used to mark approximation scheme types.",null,null],[8,"TryFrom","","This trait is used to perform a conversion between different semantic types which might fail.",null,null],[16,"Err","","The error type produced by a failed conversion.",20,null],[10,"try_from","","Convert the given value into the subject type.",20,{"inputs":[{"name":"tryfrom"},{"name":"src"}],"output":{"name":"result"}}],[8,"TryInto","","This is the dual of `TryFrom`; see that trait for information.",null,null],[16,"Err","","The error type produced by a failed conversion.",21,null],[10,"try_into","","Convert the subject into the destination type.",21,{"inputs":[{"name":"tryinto"}],"output":{"name":"result"}}],[8,"ValueFrom","","This trait is used to perform an exact, value-preserving conversion.",null,null],[16,"Err","","The error type produced by a failed conversion.",22,null],[10,"value_from","","Convert the given value into an exactly equivalent representation.",22,{"inputs":[{"name":"valuefrom"},{"name":"src"}],"output":{"name":"result"}}],[8,"ValueInto","","This is the dual of `ValueFrom`; see that trait for information.",null,null],[16,"Err","","The error type produced by a failed conversion.",23,null],[10,"value_into","","Convert the subject into an exactly equivalent representation.",23,{"inputs":[{"name":"valueinto"}],"output":{"name":"result"}}],[8,"ConvUtil","","This extension trait exists to simplify using various conversions.",null,null],[11,"approx_as","","Approximate the subject to a given type with the default scheme.",24,{"inputs":[{"name":"convutil"}],"output":{"name":"result"}}],[11,"approx_as_by","","Approximate the subject to a given type with a specific scheme.",24,{"inputs":[{"name":"convutil"}],"output":{"name":"result"}}],[11,"into_as","","Convert the subject to a given type.",24,{"inputs":[{"name":"convutil"}],"output":{"name":"dst"}}],[11,"try_as","","Attempt to convert the subject to a given type.",24,{"inputs":[{"name":"convutil"}],"output":{"name":"result"}}],[11,"value_as","","Attempt a value conversion of the subject to a given type.",24,{"inputs":[{"name":"convutil"}],"output":{"name":"result"}}],[8,"ConvAsUtil","","This extension trait exists to simplify using various conversions.",null,null],[11,"approx","","Approximate the subject with the default scheme.",25,{"inputs":[{"name":"convasutil"}],"output":{"name":"result"}}],[11,"approx_by","","Approximate the subject with a specific scheme.",25,{"inputs":[{"name":"convasutil"}],"output":{"name":"result"}}],[14,"TryFrom!","","See the documentation for the [`macros`](./macros/index.html#tryfrom!) module for details.",null,null]],"paths":[[4,"GeneralError"],[4,"GeneralErrorKind"],[4,"FloatError"],[4,"RangeError"],[4,"RangeErrorKind"],[8,"Saturate"],[8,"UnwrapOk"],[8,"UnwrapOrInf"],[8,"UnwrapOrInvalid"],[8,"UnwrapOrSaturate"],[4,"NoError"],[3,"Unrepresentable"],[3,"NegOverflow"],[3,"PosOverflow"],[4,"Result"],[8,"Saturated"],[8,"InvalidSentinel"],[8,"SignedInfinity"],[8,"ApproxFrom"],[8,"ApproxInto"],[8,"TryFrom"],[8,"TryInto"],[8,"ValueFrom"],[8,"ValueInto"],[8,"ConvUtil"],[8,"ConvAsUtil"]]};
searchIndex['miniz_sys'] = {"items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex['regex_syntax'] = {"items":[[3,"CharClass","regex_syntax","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",1,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",1,null],[12,"chars","regex_syntax::Expr","The characters.",1,null],[12,"casei","","Whether to match case insensitively.",1,null],[13,"AnyChar","regex_syntax","Match any character.",1,null],[13,"AnyCharNoNL","","Match any character, excluding new line.",1,null],[13,"Class","","A character class.",1,null],[13,"StartLine","","Match the start of a line or beginning of input.",1,null],[13,"EndLine","","Match the end of a line or end of input.",1,null],[13,"StartText","","Match the beginning of input.",1,null],[13,"EndText","","Match the end of input.",1,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",1,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",1,null],[13,"Group","","A group, possibly non-capturing.",1,null],[12,"e","regex_syntax::Expr","The expression inside the group.",1,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",1,null],[12,"name","","The capture name, only for capturing named groups.",1,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",1,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",1,null],[12,"r","","The type of repeat operator used.",1,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",1,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",1,null],[13,"Alternate","","An alternation of expressions. Only one must match.",1,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",2,null],[13,"ZeroOrMore","","Match zero or more (`*`).",2,null],[13,"OneOrMore","","Match one or more (`+`).",2,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",2,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",2,null],[12,"max","","Optional upper bound on the number of matches.",2,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",3,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",3,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",3,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",3,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",3,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",3,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",3,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",3,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",3,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",3,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",3,null],[12,"end","","The second character specified in the range.",3,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",3,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",3,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",3,null],[12,"max","","The second number specified in the repetition.",3,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",3,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",3,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",3,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",3,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",3,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",3,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",3,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",3,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",3,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",3,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",3,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",3,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",3,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",3,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",3,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",3,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",3,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",3,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",1,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"eq","","",2,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"repeater"}],"output":{"name":"repeater"}}],[11,"eq","","",4,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"classrange"}],"output":{"name":"classrange"}}],[11,"fmt","","",5,{"inputs":[{"name":"exprbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"new","","Create a new builder for configuring expression parsing.",5,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",5,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",5,{"inputs":[{"name":"exprbuilder"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",5,{"inputs":[{"name":"exprbuilder"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",1,{"inputs":[{"name":"expr"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",1,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",1,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",6,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",6,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",6,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",6,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",6,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",6,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",6,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",6,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",6,null],[11,"as_slice","","Extracts a slice containing the entire vector.",6,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",6,null],[11,"set_len","","Sets the length of a vector.",6,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",6,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",6,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",6,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",6,null],[11,"push","","Appends an element to the back of a collection.",6,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",6,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",6,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",6,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",6,null],[11,"len","","Returns the number of elements in the vector.",6,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",6,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",6,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",6,null],[11,"push_all","","",6,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",6,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",6,null],[11,"clone","collections::binary_heap","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",7,null],[11,"default","","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",7,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",7,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",7,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",7,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",7,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",7,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",7,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",7,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",7,null],[11,"drop","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",9,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",7,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",6,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",7,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"new_leaf","collections::btree::node","",12,{"inputs":[{"name":"root"}],"output":{"name":"root"}}],[11,"as_ref","","",12,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"as_mut","","",12,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"into_ref","","",12,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"push_level","","Add a new internal node with a single edge, pointing to the previous root, and make that\nnew node the root. This increases the height by 1 and is the opposite of `pop_level`.",12,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"pop_level","","Remove the root node, using its first child as the new root. This cannot be called when\nthe tree consists only of a leaf node. As it is intended only to be called when the root\nhas only one edge, no cleanup is done on any of the other children are elements of the root.\nThis decreases the height by 1 and is the opposite of `push_level`.",12,null],[11,"clone","","",13,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"len","","",13,{"inputs":[{"name":"noderef"}],"output":{"name":"usize"}}],[11,"forget_type","","",13,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"keys","","",13,null],[11,"vals","","",13,null],[11,"ascend","","",13,{"inputs":[{"name":"noderef"}],"output":{"name":"result"}}],[11,"first_edge","","",13,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"last_edge","","",13,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"deallocate_and_ascend","","",13,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"deallocate_and_ascend","","",13,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"keys_mut","","",13,null],[11,"vals_mut","","",13,null],[11,"into_slices","","",13,null],[11,"into_root_mut","","",13,{"inputs":[{"name":"noderef"}],"output":{"name":"root"}}],[11,"into_slices_mut","","",13,null],[11,"push","","",13,null],[11,"push_front","","",13,null],[11,"push","","",13,null],[11,"push_front","","",13,null],[11,"pop","","",13,null],[11,"pop_front","","",13,null],[11,"force","","",13,{"inputs":[{"name":"noderef"}],"output":{"name":"forceresult"}}],[11,"clone","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_node","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"new_kv","","",14,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_edge","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",14,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"reborrow","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"reborrow_mut","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"new_edge","","",14,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_kv","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"right_kv","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"insert","","",14,null],[11,"insert","","",14,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"root"}],"output":{"name":"insertresult"}}],[11,"descend","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"noderef"}}],[11,"into_kv","","",14,null],[11,"into_kv_mut","","",14,null],[11,"kv_mut","","",14,null],[11,"split","","",14,null],[11,"remove","","",14,null],[11,"split","","",14,null],[11,"can_merge","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"bool"}}],[11,"merge","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"force","","",14,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"drop","collections::btree::map","",15,null],[11,"clone","","",15,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",15,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",15,null],[11,"get","","Returns a reference to the value corresponding to the key.",15,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",15,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",15,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",15,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",15,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",15,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",15,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",15,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"next","","",16,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next_back","","",16,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",16,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"clone","","",16,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",17,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next_back","","",17,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"len","","",17,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"into_iter","","",15,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"drop","","",18,null],[11,"next","","",18,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next_back","","",18,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",18,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",19,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"len","","",19,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"clone","","",19,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",20,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"len","","",20,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"clone","","",20,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",21,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",21,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",21,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",22,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"from_iter","","",15,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",15,null],[11,"extend","","",15,null],[11,"hash","","",15,null],[11,"default","","",15,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",15,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",15,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",15,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",15,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",15,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",15,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",15,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",15,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",15,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",23,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",23,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",24,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",25,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",25,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",25,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",25,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",25,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"partial_cmp","collections::btree::set","",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"clone","","",26,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",26,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",26,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",26,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",26,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",26,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",26,null],[11,"contains","","Returns `true` if the set contains a value.",26,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",26,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",26,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",26,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",26,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",26,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",26,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",26,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",26,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",26,null],[11,"extend","","",26,null],[11,"default","","",26,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",26,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",28,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",28,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"clone","","",29,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",29,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",29,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",30,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"clone","","",31,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",31,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"clone","","",32,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",32,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",33,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"borrow","collections::borrow","",34,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",34,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",34,null],[11,"into_owned","","Extracts the owned data.",34,null],[11,"deref","","",34,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",34,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",34,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",34,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"into_cow","","",34,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",34,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",35,null],[11,"cmp","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",35,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",35,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",35,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",35,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",35,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",35,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",35,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",35,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",35,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",35,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",36,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",36,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"from_iter","","",35,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",35,null],[11,"extend","","",35,null],[11,"clone","core::fmt::rt::v1","",37,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",38,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",39,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",40,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",41,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",42,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",43,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",44,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",44,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",45,null],[11,"iter","","Provides a forward iterator.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",45,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",45,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",45,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",45,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"backplace"}}],[11,"drop","","",45,null],[11,"next","","",42,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",46,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",46,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",46,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",43,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",45,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"eq","","",45,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",45,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",45,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",45,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"make_place","","",47,{"inputs":[{"name":"frontplace"}],"output":{"name":"frontplace"}}],[11,"pointer","","",47,null],[11,"finalize","","",47,null],[11,"make_place","","",48,{"inputs":[{"name":"backplace"}],"output":{"name":"backplace"}}],[11,"pointer","","",48,null],[11,"finalize","","",48,null],[11,"start","core::ops","",49,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",50,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",51,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",51,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",6,null],[11,"borrow_mut","","",6,null],[11,"clone","collections::str","",52,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",52,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"borrow","collections::string","",53,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",54,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",55,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",56,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",55,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",55,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",55,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",57,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",57,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",57,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",57,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",57,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",57,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",57,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",57,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",58,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",58,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",58,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",58,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",58,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",58,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",58,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",59,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",59,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",59,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",59,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",59,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",59,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",59,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",59,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",60,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",61,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",62,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",60,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",60,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",60,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",60,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",60,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",63,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",64,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",64,null],[11,"matching","","",64,null],[11,"use_early_reject","","",65,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",65,null],[11,"matching","","",65,null],[11,"cmp","collections::string","",53,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",53,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",53,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",53,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",53,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",53,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",53,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",53,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",53,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",53,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",53,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",53,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",53,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",53,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",53,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",53,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",53,null],[11,"push","","Appends the given `char` to the end of this `String`.",53,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",53,null],[11,"truncate","","Shortens this `String` to the specified length.",53,null],[11,"pop","","Removes the last character from the string buffer and returns it.",53,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",53,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",53,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",53,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",53,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",53,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",53,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",53,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",53,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",66,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",66,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",66,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",53,null],[11,"from_iter","","",53,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",53,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",53,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",53,null],[11,"extend","","",53,null],[11,"extend","","",53,null],[11,"extend","","",53,null],[11,"eq","","",53,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",34,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",53,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",53,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",53,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"add","","",53,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",53,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",53,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",53,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",53,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",53,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",53,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",53,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",53,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",53,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",53,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",53,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",68,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",53,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",53,null],[11,"from","","",53,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",34,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",34,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",53,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",53,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",53,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",53,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",69,null],[11,"next","","",69,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",6,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",6,null],[11,"hash","","",6,null],[11,"index","","",6,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",6,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"from_iter","","",6,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",6,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",6,null],[11,"extend","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","collections::borrow","",34,null],[11,"ne","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"eq","","",34,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",6,null],[11,"default","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",6,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,null],[11,"from","","",6,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",34,null],[11,"from","","",34,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",34,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",6,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"count","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"drop","","",70,null],[11,"next","","",71,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",71,null],[11,"clone","collections::vec_deque","",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",72,null],[11,"default","","",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",72,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",72,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",72,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",72,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",72,null],[11,"iter","","Returns a front-to-back iterator.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",72,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",72,null],[11,"len","","Returns the number of elements in the `VecDeque`.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",72,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",72,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",72,null],[11,"push_back","","Appends an element to the back of a buffer",72,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",72,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",72,null],[11,"retain","","Retains only the elements specified by the predicate.",72,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",72,null],[11,"clone","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",75,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",75,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",76,null],[11,"next","","",76,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",72,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",72,null],[11,"index","","",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",72,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",72,null],[11,"extend","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","collections","",77,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",78,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",79,null],[11,"make_place","","",79,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",79,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",80,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",78,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",79,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",80,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",80,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",80,null],[11,"default","","",80,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",80,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",80,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",80,null],[11,"clone","","",80,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",80,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",80,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",80,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",80,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",80,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",80,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",80,null],[11,"from","","",80,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",80,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",80,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",80,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",80,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",80,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",80,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",80,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",80,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",80,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",80,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",80,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",80,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","regex_syntax","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",4,{"inputs":[{"name":"charclass"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",4,{"inputs":[{"name":"charclass"},{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",4,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":{"name":"bool"}}],[11,"negate","","Negates the character class.",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",4,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",81,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",81,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",81,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"description","","",81,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",81,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"CharClass"],[3,"ExprBuilder"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Root"],[3,"NodeRef"],[3,"Handle"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Error"]]};
searchIndex['libc'] = {"items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",12,null],[12,"sa_data","","",12,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",13,null],[12,"sin_port","","",13,null],[12,"sin_addr","","",13,null],[12,"sin_zero","","",13,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",14,null],[12,"sin6_port","","",14,null],[12,"sin6_flowinfo","","",14,null],[12,"sin6_addr","","",14,null],[12,"sin6_scope_id","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",16,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",17,null],[12,"ai_family","","",17,null],[12,"ai_socktype","","",17,null],[12,"ai_protocol","","",17,null],[12,"ai_addrlen","","",17,null],[12,"ai_addr","","",17,null],[12,"ai_canonname","","",17,null],[12,"ai_next","","",17,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",18,null],[12,"sll_protocol","","",18,null],[12,"sll_ifindex","","",18,null],[12,"sll_hatype","","",18,null],[12,"sll_pkttype","","",18,null],[12,"sll_halen","","",18,null],[12,"sll_addr","","",18,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",19,null],[12,"tm_min","","",19,null],[12,"tm_hour","","",19,null],[12,"tm_mday","","",19,null],[12,"tm_mon","","",19,null],[12,"tm_year","","",19,null],[12,"tm_wday","","",19,null],[12,"tm_yday","","",19,null],[12,"tm_isdst","","",19,null],[12,"tm_gmtoff","","",19,null],[12,"tm_zone","","",19,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",20,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",21,null],[12,"dli_fbase","","",21,null],[12,"dli_sname","","",21,null],[12,"dli_saddr","","",21,null],[3,"epoll_event","","",null,null],[12,"events","","",22,null],[12,"u64","","",22,null],[3,"utsname","","",null,null],[12,"sysname","","",23,null],[12,"nodename","","",23,null],[12,"release","","",23,null],[12,"version","","",23,null],[12,"machine","","",23,null],[12,"domainname","","",23,null],[3,"dirent","","",null,null],[12,"d_ino","","",24,null],[12,"d_off","","",24,null],[12,"d_reclen","","",24,null],[12,"d_type","","",24,null],[12,"d_name","","",24,null],[3,"dirent64","","",null,null],[12,"d_ino","","",25,null],[12,"d_off","","",25,null],[12,"d_reclen","","",25,null],[12,"d_type","","",25,null],[12,"d_name","","",25,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",26,null],[12,"rlim_max","","",26,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",27,null],[12,"gl_pathv","","",27,null],[12,"gl_offs","","",27,null],[12,"gl_flags","","",27,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",28,null],[12,"ifa_name","","",28,null],[12,"ifa_flags","","",28,null],[12,"ifa_addr","","",28,null],[12,"ifa_netmask","","",28,null],[12,"ifa_ifu","","",28,null],[12,"ifa_data","","",28,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",29,null],[12,"pw_passwd","","",29,null],[12,"pw_uid","","",29,null],[12,"pw_gid","","",29,null],[12,"pw_gecos","","",29,null],[12,"pw_dir","","",29,null],[12,"pw_shell","","",29,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",30,null],[12,"f_frsize","","",30,null],[12,"f_blocks","","",30,null],[12,"f_bfree","","",30,null],[12,"f_bavail","","",30,null],[12,"f_files","","",30,null],[12,"f_ffree","","",30,null],[12,"f_favail","","",30,null],[12,"f_fsid","","",30,null],[12,"f_flag","","",30,null],[12,"f_namemax","","",30,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",31,null],[12,"nl_pid","","",31,null],[12,"nl_groups","","",31,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",32,null],[12,"dqb_bsoftlimit","","",32,null],[12,"dqb_curspace","","",32,null],[12,"dqb_ihardlimit","","",32,null],[12,"dqb_isoftlimit","","",32,null],[12,"dqb_curinodes","","",32,null],[12,"dqb_btime","","",32,null],[12,"dqb_itime","","",32,null],[12,"dqb_valid","","",32,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",33,null],[12,"ssi_errno","","",33,null],[12,"ssi_code","","",33,null],[12,"ssi_pid","","",33,null],[12,"ssi_uid","","",33,null],[12,"ssi_fd","","",33,null],[12,"ssi_tid","","",33,null],[12,"ssi_band","","",33,null],[12,"ssi_overrun","","",33,null],[12,"ssi_trapno","","",33,null],[12,"ssi_status","","",33,null],[12,"ssi_int","","",33,null],[12,"ssi_ptr","","",33,null],[12,"ssi_utime","","",33,null],[12,"ssi_stime","","",33,null],[12,"ssi_addr","","",33,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",34,null],[12,"mq_maxmsg","","",34,null],[12,"mq_msgsize","","",34,null],[12,"mq_curmsgs","","",34,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",35,null],[12,"sa_mask","","",35,null],[12,"sa_flags","","",35,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",36,null],[12,"ss_flags","","",36,null],[12,"ss_size","","",36,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",37,null],[12,"si_errno","","",37,null],[12,"si_code","","",37,null],[12,"_pad","","",37,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ucred","","",null,null],[12,"pid","","",39,null],[12,"uid","","",39,null],[12,"gid","","",39,null],[3,"statfs","","",null,null],[12,"f_type","","",40,null],[12,"f_bsize","","",40,null],[12,"f_blocks","","",40,null],[12,"f_bfree","","",40,null],[12,"f_bavail","","",40,null],[12,"f_files","","",40,null],[12,"f_ffree","","",40,null],[12,"f_fsid","","",40,null],[12,"f_namelen","","",40,null],[12,"f_frsize","","",40,null],[3,"msghdr","","",null,null],[12,"msg_name","","",41,null],[12,"msg_namelen","","",41,null],[12,"msg_iov","","",41,null],[12,"msg_iovlen","","",41,null],[12,"msg_control","","",41,null],[12,"msg_controllen","","",41,null],[12,"msg_flags","","",41,null],[3,"termios","","",null,null],[12,"c_iflag","","",42,null],[12,"c_oflag","","",42,null],[12,"c_cflag","","",42,null],[12,"c_lflag","","",42,null],[12,"c_line","","",42,null],[12,"c_cc","","",42,null],[12,"c_ispeed","","",42,null],[12,"c_ospeed","","",42,null],[3,"flock","","",null,null],[12,"l_type","","",43,null],[12,"l_whence","","",43,null],[12,"l_start","","",43,null],[12,"l_len","","",43,null],[12,"l_pid","","",43,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",44,null],[12,"st_ino","","",44,null],[12,"st_nlink","","",44,null],[12,"st_mode","","",44,null],[12,"st_uid","","",44,null],[12,"st_gid","","",44,null],[12,"st_rdev","","",44,null],[12,"st_size","","",44,null],[12,"st_blksize","","",44,null],[12,"st_blocks","","",44,null],[12,"st_atime","","",44,null],[12,"st_atime_nsec","","",44,null],[12,"st_mtime","","",44,null],[12,"st_mtime_nsec","","",44,null],[12,"st_ctime","","",44,null],[12,"st_ctime_nsec","","",44,null],[3,"stat64","","",null,null],[12,"st_dev","","",45,null],[12,"st_ino","","",45,null],[12,"st_nlink","","",45,null],[12,"st_mode","","",45,null],[12,"st_uid","","",45,null],[12,"st_gid","","",45,null],[12,"st_rdev","","",45,null],[12,"st_size","","",45,null],[12,"st_blksize","","",45,null],[12,"st_blocks","","",45,null],[12,"st_atime","","",45,null],[12,"st_atime_nsec","","",45,null],[12,"st_mtime","","",45,null],[12,"st_mtime_nsec","","",45,null],[12,"st_ctime","","",45,null],[12,"st_ctime_nsec","","",45,null],[3,"pthread_attr_t","","",null,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"select","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",48,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",48,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",48,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",48,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",48,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",48,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",48,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",48,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",48,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",48,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",48,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",49,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"eq","core::num::flt2dec::decoder","",50,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",51,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",52,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",52,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",52,null],[11,"clone","","",53,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",53,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",53,null],[11,"fmt","","",54,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",55,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",55,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",56,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",57,null],[11,"eq","","",58,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",59,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",59,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",60,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",61,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",61,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",61,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",61,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",61,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",61,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",61,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",61,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",61,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",61,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",61,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",61,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",61,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",61,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",61,null],[11,"eq","","",61,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",61,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",61,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",61,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",62,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",62,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",62,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",62,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",62,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",62,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",62,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",62,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",62,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",62,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",62,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",62,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",62,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",62,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",62,null],[11,"eq","","",62,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",62,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",62,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",62,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",63,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",63,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",63,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",63,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",64,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",65,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",65,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",66,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",67,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",67,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",68,null],[11,"get","","Dereferences the content.",68,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",68,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",69,null],[11,"clone","","",69,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",70,null],[11,"eq","","",70,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",70,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",70,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",70,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",71,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",71,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",72,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",73,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",74,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",75,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",75,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",75,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",76,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",76,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",76,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",76,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",76,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",76,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",76,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",77,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",78,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",79,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",80,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",81,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",82,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",78,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",78,null],[11,"swap","","Stores a value into the bool, returning the old value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",78,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",79,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",79,null],[11,"swap","","Stores a value into the isize, returning the old value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",79,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",80,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",80,null],[11,"swap","","Stores a value into the usize, returning the old value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",80,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",81,null],[11,"load","","Loads a value from the pointer.",81,null],[11,"store","","Stores a value into the pointer.",81,null],[11,"swap","","Stores a value into the pointer, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",81,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",81,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",81,null],[11,"fmt","","",80,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",83,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",83,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",83,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",83,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",83,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",83,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",83,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",84,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",85,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",85,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",85,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",85,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",85,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",86,null],[11,"clone","","",86,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",87,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",87,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",87,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",87,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",88,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",88,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",89,null],[11,"deref","","",88,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",88,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",90,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",90,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",90,null],[11,"clone","core::char","",91,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",92,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",91,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"clone","","",93,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",94,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",93,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"count","","",93,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",93,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",93,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",95,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",95,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",96,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",97,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"clone","","",98,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",99,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",98,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",98,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",98,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",98,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",100,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",101,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",102,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",103,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",104,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"nth","","",104,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",104,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",104,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",105,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",105,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",105,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",105,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",105,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",105,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",106,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"clone","","",107,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",107,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"clone","","",108,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",108,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",108,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",108,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",108,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"clone","","",109,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",109,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",109,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"clone","","",110,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",110,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"clone","","",111,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",111,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",112,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",112,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",112,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",112,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",112,null],[11,"next_back","","",112,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",113,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",73,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",72,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",114,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"clone","","",115,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",115,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",114,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next","core::ops","",72,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",116,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",116,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",117,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",117,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",117,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",117,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",118,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",118,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next_back","","",118,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",118,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",48,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",119,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",119,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",121,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next_back","","",121,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",122,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next_back","","",122,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",48,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",123,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",124,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",125,null],[11,"fmt","","",125,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",125,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",125,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",125,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",125,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",125,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",125,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",125,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",125,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",125,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",125,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",125,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",125,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",125,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",125,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",125,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",125,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",125,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",125,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",126,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next_back","","",126,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",127,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",128,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next_back","","",128,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",125,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",129,null],[11,"next","","",129,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"count","","",129,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",129,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",129,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",129,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",129,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",130,null],[11,"next","","",130,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"count","","",130,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",130,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",130,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",130,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",131,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"next_back","","",131,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",131,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",132,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",132,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"next_back","","",132,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",133,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"next","","",134,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"next","","",135,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next","","",136,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next","","",137,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",137,null],[11,"clone","","",138,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",138,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",138,null],[11,"count","","",138,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",138,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",138,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",138,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",139,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",139,null],[11,"count","","",139,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",139,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",139,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",139,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",140,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",140,null],[11,"count","","",140,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",140,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",140,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",140,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",141,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",142,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",143,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",142,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",142,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",142,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",147,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",148,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",149,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",150,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",151,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",151,null],[11,"matching","","",151,null],[11,"use_early_reject","","",152,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",152,null],[11,"matching","","",152,null],[11,"eq","core::str","",153,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",153,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",154,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",154,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",154,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",155,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"next_back","","",155,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",155,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",156,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",156,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"next_back","","",156,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",156,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"count","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",157,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",158,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",159,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",159,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",160,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",159,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",160,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",161,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",162,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",162,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",161,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",162,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",164,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",165,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",166,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",167,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",167,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",168,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",168,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",167,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",168,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",169,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",170,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",170,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",171,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",171,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",170,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",171,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",172,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",172,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",172,null],[11,"next_back","","",172,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",173,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",174,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",174,null],[11,"call_mut","","",174,null],[11,"call_once","","",174,null],[11,"next","","",173,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",173,null],[11,"next_back","","",173,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",175,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",176,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",176,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",176,null],[11,"finish","","",176,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",176,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",176,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",177,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",177,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",177,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",178,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",179,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",179,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",180,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",181,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",182,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",182,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",183,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",184,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",185,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",186,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",186,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",187,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",187,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",187,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",188,null],[11,"entry","","Adds a new entry to the set output.",189,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",189,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",189,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",190,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",190,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",190,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",191,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",191,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",191,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",192,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",193,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",194,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",194,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",195,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",196,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",197,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",197,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",198,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",199,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",200,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",200,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",201,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",201,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",201,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",201,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",201,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",201,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",201,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",201,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",201,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",201,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",201,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",201,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",201,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",201,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",197,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",70,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",83,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",202,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",202,null],[11,"clone","libc","",44,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",45,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",203,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",204,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",35,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",36,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",37,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",38,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",39,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",40,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",41,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",42,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",43,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",24,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",25,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",26,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",27,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",28,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",205,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",206,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",207,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",208,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",29,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",30,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",31,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",32,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",33,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",209,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",34,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",210,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",12,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",17,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",18,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",211,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",19,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",20,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",21,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",22,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",23,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"AF_NETLINK","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"sockaddr_nl"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"stat"],[3,"stat64"],[3,"ipc_perm"],[3,"shmid_ds"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex['gif'] = {"items":[[3,"Frame","gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",0,null],[12,"dispose","","Disposal method.",0,null],[12,"transparent","","Transparent index (if available).",0,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",0,null],[12,"top","","Offset from the top border of the canvas.",0,null],[12,"left","","Offset from the left border of the canvas.",0,null],[12,"width","","Width of the frame.",0,null],[12,"height","","Height of the frame.",0,null],[12,"interlaced","","True if the image is interlaced.",0,null],[12,"palette","","Frame local color palette if available.",0,null],[12,"buffer","","Buffer containing the image data.\nOnly indices unless configured differently.",0,null],[3,"StreamingDecoder","","GIF decoder which supports streaming",null,null],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means\nthat there is no memory limit set.",null,null],[3,"Reader","","GIF decoder",null,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[4,"Block","","Known GIF block types",null,null],[13,"Image","","Image block.",1,null],[13,"Extension","","Extension block.",1,null],[13,"Trailer","","Image trailer.",1,null],[4,"Extension","","Known GIF extensions",null,null],[13,"Text","","Text extension.",2,null],[13,"Control","","Control extension.",2,null],[13,"Comment","","Comment extension.",2,null],[13,"Application","","Application extension.",2,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",3,null],[13,"Keep","","Do not dispose.",3,null],[13,"Background","","Restore to background color.",3,null],[13,"Previous","","Restore to previous.",3,null],[4,"Decoded","","Indicates whether a certain object has been decoded",null,null],[13,"Nothing","","Decoded nothing.",4,null],[13,"GlobalPalette","","Global palette.",4,null],[13,"BackgroundColor","","Index of the background color in the global palette.",4,null],[13,"Trailer","","Decoded the image trailer.",4,null],[13,"BlockStart","","The start of a block.",4,null],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",4,null],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",4,null],[13,"Frame","","Decoded all information of the next frame.\nThe returned frame does **not** any image data.",4,null],[13,"Data","","Decoded some data of the current frame.",4,null],[13,"DataEnd","","No more data available the current frame.",4,null],[4,"DecodingError","","Decoding error.",null,null],[13,"Format","","Returned if the image is found to be malformed.",5,null],[13,"Internal","","Internal (logic) error.",5,null],[13,"Io","","Wraps `std::io::Error`.",5,null],[4,"ColorOutput","","Output mode for the image data",null,null],[13,"RGBA","","The decoder expands the image data to 32bit RGBA.\nThis affects:",6,null],[13,"Indexed","","The decoder returns the raw indexed data.",6,null],[4,"Extensions","","Configures how extensions should be handled",null,null],[13,"Save","","Saves all extention data",7,null],[13,"Skip","","Skips the data of unknown extensions\nand extracts the data from known ones",7,null],[4,"ExtensionData","","Extension data.",null,null],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",8,null],[12,"flags","gif::ExtensionData","Flags.",8,null],[12,"delay","","Frame delay.",8,null],[12,"trns","","Transparent index.",8,null],[13,"Repetitions","gif","Sets the number of repetitions",8,null],[4,"Repeat","","Number of repetitions",null,null],[13,"Finite","","Finite number of repetitions",9,null],[13,"Infinite","","Infinite number of repetitions",9,null],[11,"clone","","",3,{"inputs":[{"name":"disposalmethod"}],"output":{"name":"disposalmethod"}}],[11,"fmt","","",3,{"inputs":[{"name":"disposalmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",3,{"inputs":[{"name":"disposalmethod"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"fmt","","",1,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",1,{"inputs":[{"name":"block"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"extension"}],"output":{"name":"extension"}}],[11,"fmt","","",2,{"inputs":[{"name":"extension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",2,{"inputs":[{"name":"extension"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",0,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,null],[11,"fmt","","",5,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"decodingerror"},{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"extensions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"extensions"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"extensions"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"set_param","","",7,{"inputs":[{"name":"extensions"},{"name":"streamingdecoder"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"streamingdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new streaming decoder",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder.",10,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",10,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"frame"}}],[11,"current_frame","","Current frame info as a ref.",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"frame"}}],[11,"width","","Width of the image",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"u16"}}],[11,"fmt","","",6,{"inputs":[{"name":"coloroutput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"coloroutput"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"coloroutput"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"set_param","","",6,{"inputs":[{"name":"coloroutput"},{"name":"decoder"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"memorylimit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",11,{"inputs":[{"name":"memorylimit"},{"name":"decoder"}],"output":null}],[11,"new","","Creates a new decoder builder",12,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"next_frame_info","","Returns the next frame info",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"read_next_frame","","Reads the next frame from the image.",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer.",13,null],[11,"buffer_size","","Output buffer size",13,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"line_length","","Line length of the current frame",13,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"global_palette","","The global color palette",13,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[11,"width","","Width of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"u16"}}],[11,"bg_color","","Index of the background color in the global palette",13,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[11,"set_param","","",9,{"inputs":[{"name":"repeat"},{"name":"encoder"}],"output":{"name":"result"}}],[11,"new_control_ext","","Constructor for control extension data.",8,{"inputs":[{"name":"extensiondata"},{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"name":"option"}],"output":{"name":"extensiondata"}}],[11,"new","","Creates a new encoder.",14,null],[11,"write_global_palette","","Writes the global color palette.",14,null],[11,"write_frame","","Writes a frame to the image.",14,{"inputs":[{"name":"encoder"},{"name":"frame"}],"output":{"name":"result"}}],[11,"write_extension","","Writes an extension to the image.",14,{"inputs":[{"name":"encoder"},{"name":"extensiondata"}],"output":{"name":"result"}}],[11,"write_raw_extension","","Writes a raw extension to the image.",14,null],[11,"drop","","",14,{"inputs":[{"name":"encoder"}],"output":null}],[8,"SetParameter","","Implemented for objects that have parameters.",null,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null],[8,"Parameter","","Configuration parameter trait.",null,null],[16,"Result","","Result type of `set_param`.",16,null],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,{"inputs":[{"name":"parameter"},{"name":"object"}],"output":{"name":"result"}}],[11,"set","","Sets `value` as a parameter of `self`.",15,null]],"paths":[[3,"Frame"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"MemoryLimit"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex['glob'] = {"items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular\npattern.",null,null],[3,"GlobError","","A glob iteration error.",null,null],[3,"PatternError","","A pattern parsing error.",null,null],[12,"pos","","The approximate character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Pattern","","A compiled Unix shell style pattern.",null,null],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",null,null],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner.\nThis currently only considers upper/lower case relationships between\nASCII characters, but in future this might be extended to work with\nUnicode.",1,null],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on\nPosix) must be matched by a literal `/`, rather than by `*` or `?` or\n`[...]`",1,null],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.`\nwill not match unless the `.` appears literally in the pattern: `*`, `?`\nor `[...]` will not match. This is useful because such files are\nconventionally considered hidden on Unix systems and it might be\ndesirable to skip them when listing files.",1,null],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"},{"name":"matchoptions"}],"output":{"name":"result"}}],[6,"GlobResult","","An alias for a glob iteration result.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"globerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","The Path that the error corresponds to.",2,{"inputs":[{"name":"globerror"}],"output":{"name":"path"}}],[11,"error","","The error in question.",2,{"inputs":[{"name":"globerror"}],"output":{"name":"error"}}],[11,"fmt","","",2,{"inputs":[{"name":"globerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"paths"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"patternerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"patternerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"pattern"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[{"name":"pattern"}],"output":{"name":"pattern"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"pattern"}],"output":{"name":"pattern"}}],[11,"fmt","","",4,{"inputs":[{"name":"pattern"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","This function compiles Unix shell style patterns.",4,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"result"}}],[11,"escape","","Escape metacharacters within the given string by surrounding them in\nbrackets. The resulting string will, when compiled into a `Pattern`,\nmatch the input string and nothing else.",4,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"string"}}],[11,"matches","","Return if the given `str` matches this `Pattern` using the default\nmatch options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"pattern"},{"name":"path"}],"output":{"name":"bool"}}],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified\nmatch options.",4,{"inputs":[{"name":"pattern"},{"name":"str"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the specified match options.",4,{"inputs":[{"name":"pattern"},{"name":"path"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"as_str","","Access the original glob pattern.",4,{"inputs":[{"name":"pattern"}],"output":{"name":"str"}}],[11,"default","","",1,{"inputs":[{"name":"matchoptions"}],"output":{"name":"matchoptions"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"matchoptions"}],"output":{"name":"matchoptions"}}],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used\nwhen calling functions that do not take an explicit `MatchOptions`\nparameter.",1,{"inputs":[{"name":"matchoptions"}],"output":{"name":"matchoptions"}}]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex['byteorder'] = {"items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result&lt;T, byteorder::Error&gt;`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"write_uint","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex['color_quant'] = {"items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,null],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,null],[11,"index_of","","Finds the best-matching index in the color map.",0,null],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample.",0,{"inputs":[{"name":"neuquant"}],"output":{"name":"vec"}}],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample.",0,{"inputs":[{"name":"neuquant"}],"output":{"name":"vec"}}]],"paths":[[3,"NeuQuant"]]};
searchIndex['lzw'] = {"items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or\nonly the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"decoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder.",1,{"inputs":[{"name":"decoder"},{"name":"r"},{"name":"u8"}],"output":{"name":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"decoderearlychange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder.",2,{"inputs":[{"name":"decoderearlychange"},{"name":"r"},{"name":"u8"}],"output":{"name":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"inputs":[{"name":"encoder"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,{"inputs":[{"name":"encoder"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"lsbreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",4,{"inputs":[{"name":"lsbreader"}],"output":{"name":"lsbreader"}}],[11,"fmt","","",5,{"inputs":[{"name":"msbreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",5,{"inputs":[{"name":"msbreader"}],"output":{"name":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"inputs":[{"name":"lsbwriter"},{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"lsbwriter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",7,{"inputs":[{"name":"msbwriter"},{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"msbwriter"}],"output":{"name":"result"}}],[11,"write_bits","","",6,{"inputs":[{"name":"lsbwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",7,{"inputs":[{"name":"msbwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,{"inputs":[{"name":"bitwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex['utf8_ranges'] = {"items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"eq","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"utf8sequence"}],"output":{"name":"utf8sequence"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"utf8sequence"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"utf8sequence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"utf8range"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"utf8range"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"utf8range"}],"output":{"name":"utf8range"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"utf8range"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"utf8range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"utf8sequences"},{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"utf8sequences"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex['custom_derive'] = {"items":[],"paths":[]};
searchIndex['bitflags'] = {"items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
