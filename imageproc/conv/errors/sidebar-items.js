initSidebarItems({"enum":[["FloatError","Indicates that a conversion from a floating point type failed."],["GeneralError","A general error enumeration that subsumes all other conversion errors.This exists primarily as a \"catch-all\" for reliably unifying various different kinds of conversion errors."],["GeneralErrorKind","A general error enumeration that subsumes all other conversion errors, but discards all input payloads the errors may be carrying.This exists primarily as a \"catch-all\" for reliably unifying various different kinds of conversion errors, and between different input types."],["NoError","Indicates that it is not possible for the conversion to fail.You can use the `UnwrapOk::unwrap_ok` method to discard the (statically impossible) `Err` case from a `Result<_, NoError>`, without using `Result::unwrap` (which is typically viewed as a \"code smell\")."],["RangeError","Indicates that a conversion failed due to a range error."],["RangeErrorKind","Indicates that a conversion failed due to a range error.This is a variant of `RangeError` that does not retain the input value which caused the error.  It exists to help unify some utility methods and should not generally be used directly, unless you are targeting the `Unwrap*` traits."]],"struct":[["NegOverflow","Indicates that the conversion failed due to a negative overflow."],["PosOverflow","Indicates that the conversion failed due to a positive overflow."],["Unrepresentable","Indicates that the conversion failed because the value was not representable."]],"trait":[["Saturate","Saturates a `Result`."],["UnwrapOk","Safely unwrap a `Result` that cannot contain an error."],["UnwrapOrInf","Unwrap a conversion by saturating to infinity."],["UnwrapOrInvalid","Unwrap a conversion by replacing a failure with an invalid sentinel value."],["UnwrapOrSaturate","Unwrap a conversion by saturating."]]});