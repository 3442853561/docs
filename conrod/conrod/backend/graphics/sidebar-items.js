initSidebarItems({"fn":[["draw_from_container","Use the given **CharacterCache** and **Graphics** backends to draw the given widget."],["draw_from_graph","Draw the given **Graph** using the given **CharacterCache** and **Graphics** backends."],["draw_lines","Draw a series of lines between the given **Point**s using the given style."],["draw_rectangle","Draw a rectangle at the given Rect."],["draw_scrolling","Draw the scroll bars (if necessary) for the given widget's scroll state."]],"struct":[["Character","Holds rendered character data."],["Context","Drawing 2d context."],["DrawState","Graphics draw state used for blending, clipping and stencil rendering."]],"trait":[["CharacterCache","Stores characters in a buffer and loads them by demand."],["Graphics","Implemented by all graphics back-ends.An example back-end using raw OpenGLBy default, this design uses triangles as graphics primitives. This is supported by all GPUs and easy to implement in shader languages.Default trait methods can be overridden for better performance or higher quality.When drawing, use this trait as generic constraint:Color space is sRGB.Notice for back-end authorsWhen sRGB is enabled for a back-end shader, the gamma must be converted to linear space when used as vertex color or uniform parameter. To convert gamma, use `color::gamma_srgb_to_linear`.For more information, see https://github.com/PistonDevelopers/piston/issues/1014."],["ImageSize","Implemented by all images to be used with generic algorithms."],["Transformed","Implemented by contexts that can transform."]]});