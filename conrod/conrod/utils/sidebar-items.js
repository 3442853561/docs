initSidebarItems({"enum":[["IterDiff","A type returned by the `iter_diff` function.Represents way in which the elements (of type `E`) yielded by the iterator `I` differ to some other iterator yielding borrowed elements of the same type.`I` is some `Iterator` yielding elements of type `E`."]],"fn":[["bounding_box_for_points","Find the bounding rect for the given series of points."],["clamp","Clamp a value between some range."],["degrees","Convert degrees to radians."],["fmod","Modulo float."],["iter_diff","Compares every element yielded by both elems and new_elems in lock-step.If the number of elements yielded by `b` is less than the number of elements yielded by `a`, the number of `b` elements yielded will be returned as `IterDiff::Shorter`.If the two elements of a step differ, the index of those elements along with the remaining elements are returned as `IterDiff::FirstMismatch`.If `a` becomes exhausted before `b` becomes exhausted, the remaining `b` elements will be returned as `IterDiff::Longer`.This function is useful when comparing a non-`Clone` `Iterator` of elements to some existing collection. If there is any difference between the elements yielded by the iterator and those of the collection, a suitable `IterDiff` is returned so that the existing collection may be updated with the difference using elements from the very same iterator."],["iter_eq","Compares two iterators to see if they yield the same thing."],["map_range","Map a value from a given range to a new given range."],["modulo","The modulo function."],["partial_max","Compare to PartialOrd values and return the min."],["partial_min","Compare to PartialOrd values and return the min."],["percentage","Get value percentage between max and min."],["turns","Convert turns to radians."],["val_to_string","Get a suitable string from the value, its max and the pixel range."],["value_from_perc","Adjust the value to the given percentage."],["write_if_different","Returns `Borrowed` `elems` if `elems` contains the same elements as yielded by `new_elems`.Allocates a new `Vec<T>` and returns `Owned` if either the number of elements or the elements themselves differ."]]});