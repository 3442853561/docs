initSidebarItems({"fn":[["connected_components","Return the number of connected components of the graph.For a directed graph, this is the *weakly* connected components."],["dijkstra","Dijkstra's shortest path algorithm.Compute the length of the shortest path from `start` to every reachable node.The graph should be `Visitable`, and `edges` a closure that maps a node identifier to an iterator of `(n, k)` pairs where `n` is an adjacent node and `k` the edge weight.If `goal` is not `None`, then the algorithm terminates once the `goal` node's cost is calculated.Returns a `HashMap` that maps `NodeId` to path cost."],["is_cyclic","**Deprecated: Renamed to `is_cyclic_undirected`.**"],["is_cyclic_directed","Return `true` if the input directed graph contains a cycle.Using the topological sort algorithm."],["is_cyclic_undirected","Return `true` if the input graph contains a cycle.Always treats the input graph as if undirected."],["is_isomorphic","Return `true` if the graphs `g0` and `g1` are isomorphic.Using the VF2 algorithm, only matching graph syntactically (graph structure).The graphs should not be multigraphs.**Reference**Luigi P. Cordella, Pasquale Foggia, Carlo Sansone, Mario Vento; *A (Sub)Graph Isomorphism Algorithm for Matching Large Graphs*"],["is_isomorphic_matching","Return `true` if the graphs `g0` and `g1` are isomorphic.Using the VF2 algorithm, examining both syntactic and semantic graph isomorphism (graph structure and matching node and edge weights).The graphs should not be multigraphs."],["min_spanning_tree","Compute a *minimum spanning tree* of a graph.Treat the input graph as undirected.Using Kruskal's algorithm with runtime **O(|E| log |E|)**. We actually return a minimum spanning forest, i.e. a minimum spanning tree for each connected component of the graph.The resulting graph has all the vertices of the input graph (with identical node indices), and **|V| - c** edges, where **c** is the number of connected components in `g`."],["scc","Compute the *strongly connected components* using Kosaraju's algorithm.Return a vector where each element is an scc.For an undirected graph, the sccs are simply the connected components."],["toposort","Perform a topological sort of a directed graph.Return a vector of nodes in topological order: each node is ordered before its successors.If the returned vec contains less than all the nodes of the graph, then the graph was cyclic."]]});