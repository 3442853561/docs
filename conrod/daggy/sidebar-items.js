initSidebarItems({"mod":[["petgraph",""],["walker","**Walker** is a trait providing a variety of useful methods for traversing graph types."]],"struct":[["Children","A **Walker** type that can be used to step through the children of some parent node."],["Dag","A Directed acyclic graph (DAG) data structure.Dag is a thin wrapper around petgraph's `Graph` data structure, providing a refined API for dealing specifically with DAGs.Note: The following documentation is adapted from petgraph's **Graph** documentation.**Dag** is parameterized over the node weight **N**, edge weight **E** and index type **Ix**.**NodeIndex** is a type that acts as a reference to nodes, but these are only stable across certain operations. **Removing nodes may shift other indices.** Adding kids to the **Dag** keeps all indices stable, but removing a node will force the last node to shift its index to take its place.The fact that the node indices in the **Dag** are numbered in a compact interval from 0 to *n*-1 simplifies some graph algorithms.The **Ix** parameter is u32 by default. The goal is that you can ignore this parameter completely unless you need a very large **Dag** -- then you can use usize.The **Dag** also offers methods for accessing the underlying **Graph**, which can be useful for taking advantage of petgraph's various graph-related algorithms."],["EdgeIndex","Edge identifier."],["EdgeIndices","An iterator yielding multiple `EdgeIndex`s, returned by the `Graph::add_edges` method."],["EdgeWeightsMut","Iterator yielding mutable access to all edge weights."],["NodeIndex","Node identifier."],["NodeWeightsMut","Iterator yielding mutable access to all node weights."],["Parents","A **Walker** type that can be used to step through the children of some parent node."],["WouldCycle","An error returned by the `Dag::add_edge` method in the case that adding an edge would have caused the graph to cycle."]],"type":[["PetGraph","The Petgraph to be used internally within the Dag for storing/managing nodes and edges."],["RawEdges","Read only access into a **Dag**'s internal edge array."],["RawNodes","Read only access into a **Dag**'s internal node array."],["RecursiveWalk","An alias to simplify the **Recursive** **Walker** type returned by **Dag**."]]});