var searchIndex = {};
searchIndex["conrod"] = {"doc":"","items":[[8,"CharacterCache","conrod","Stores characters in a buffer and loads them by demand.",null,null],[16,"Texture","","The textyre type associated with the character cache.",0,null],[10,"character","","Get reference to character.",0,{"inputs":[{"name":"charactercache"},{"name":"u32"},{"name":"char"}],"output":{"name":"character"}}],[11,"width","","Return the width for some given text.",0,{"inputs":[{"name":"charactercache"},{"name":"u32"},{"name":"str"}],"output":{"name":"f64"}}],[8,"Graphics","","Implemented by all graphics back-ends.",null,null],[16,"Texture","","The texture type associated with the back-end.",1,null],[10,"clear_color","","Clears background with a color.",1,null],[10,"clear_stencil","","Clears stencil buffer with a value, usually 0.",1,null],[10,"tri_list","","Renders list of 2d triangles using a solid color.",1,null],[10,"tri_list_uv","","Renders list of 2d triangles using a color and a texture.",1,null],[11,"rectangle","","Draws a rectangle.",1,null],[11,"polygon","","Draws a polygon.",1,null],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",1,null],[11,"image","","Draws image.",1,null],[11,"ellipse","","Draws ellipse.",1,null],[11,"line","","Draws line.",1,null],[11,"circle_arc","","Draws circle arc.",1,null],[11,"deform_image","","Draws deformed image.",1,null],[3,"Line","","A simple, non-interactive widget for drawing a single straight Line.",null,null],[12,"start","","The start of the line.",2,null],[12,"end","","The end of the line.",2,null],[12,"common","","Data necessary and common for all widget builder types.",2,null],[12,"style","","Unique styling.",2,null],[12,"should_centre_points","","Whether or not the line should be automatically centred to the widget position.",2,null],[3,"Image","","A primitive and basic widget for drawing an `Image`.",null,null],[12,"common","","Data necessary and common for all widget builder types.",3,null],[12,"src_rect","","The rectangle area of the original source image that should be used.",3,null],[12,"style","","Unique styling.",3,null],[12,"src","","Where the `Image` data is stored.",3,null],[3,"PointPath","","A simple, non-interactive widget for drawing a series of lines and/or points.",null,null],[12,"points","","Some iterator yielding a series of Points.",4,null],[12,"common","","Data necessary and common for all widget builder types.",4,null],[12,"style","","Unique styling for the PointPath.",4,null],[12,"maybe_shift_to_centre_from","","Whether or not the points should be automatically centred to the widget position.",4,null],[3,"Circle","","A tiny wrapper around the **Oval** widget type.",null,null],[3,"FramedRectangle","","A filled rectangle widget that may or may not have some frame.",null,null],[12,"common","","Data necessary and common for all widget builder types.",5,null],[12,"style","","Unique styling for the **FramedRectangle**.",5,null],[3,"Polygon","","A basic, non-interactive, arbitarry **Polygon** widget.",null,null],[12,"points","","The points describing the corners of the **Polygon**.",6,null],[12,"common","","Data necessary and common for all widget builder types.",6,null],[12,"style","","Unique styling for the **Polygon**.",6,null],[12,"maybe_shift_to_centre_from","","Whether or not the points should be automatically centred to the widget position.",6,null],[3,"Oval","","A simple, non-interactive widget for drawing a single **Oval**.",null,null],[12,"common","","Data necessary and common for all widget builder types.",7,null],[12,"style","","Unique styling.",7,null],[3,"Rectangle","","A basic, non-interactive rectangle shape widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",8,null],[12,"style","","Unique styling for the **Rectangle**.",8,null],[3,"Text","","Displays some given text centred within a rectangular area.",null,null],[12,"common","","Data necessary and common for all widget builder types.",9,null],[12,"text","","The text to be drawn by the **Text**.",9,null],[12,"style","","Unique styling for the **Text**.",9,null],[3,"Button","","A pressable button widget whose reaction is triggered upon release.",null,null],[12,"style","","Unique styling for the Button.",10,null],[3,"Canvas","","**Canvas** is designed to be a &quot;container&quot;-like &quot;parent&quot; widget that simplifies placement of\n&quot;children&quot; widgets.",null,null],[12,"common","","Data necessary and common for all widget builder types.",11,null],[12,"style","","The builder data related to the style of the Canvas.",11,null],[12,"maybe_title_bar_label","","The label for the **Canvas**&#39; **TitleBar** if there is one.",11,null],[12,"maybe_splits","","A list of child **Canvas**ses as splits of this **Canvas** flowing in the given direction.",11,null],[3,"DropDownList","","Displays a given `Vec&lt;String&gt;` as a selectable drop down menu. It&#39;s reaction is triggered upon\nselection of a list item.",null,null],[3,"EnvelopeEditor","","Used for editing a series of 2D Points on a cartesian (X, Y) plane within some given range.",null,null],[12,"skew_y_range","","The value skewing for the envelope&#39;s y-axis. This is useful for displaying exponential\nranges such as frequency.",12,null],[3,"WidgetMatrix","","Draw a matrix of any rectangular widget type, where the matrix will provide a function with\nthe widget number, it&#39;s `rows` and `cols` position, the width and height for the widget and\nthe location at which the widget should be drawn.",null,null],[3,"NumberDialer","","A widget for precision control over any digit within a value.",null,null],[3,"Slider","","Linear value selection. If the slider&#39;s width is greater than it&#39;s height, it will\nautomatically become a horizontal slider, otherwise it will be a vertical slider. Its reaction\nis triggered if the value is updated or if the mouse button is released while the cursor is\nabove the rectangle.",null,null],[12,"skew","","The amount in which the slider&#39;s display should be skewed.",13,null],[12,"maybe_react","","Set the reaction for the Slider.",13,null],[12,"enabled","","Whether or not user input is enabled for the Slider.",13,null],[3,"Tabs","","A wrapper around a list of canvasses that displays thema s a list of selectable tabs.",null,null],[3,"TextBox","","A widget for displaying and mutating a given one-line text `String`. It&#39;s reaction is\ntriggered upon pressing of the `Enter`/`Return` key.",null,null],[12,"maybe_react","","The reaction for the TextBox.",14,null],[12,"enabled","","Whether or not user input is enabled for the TextBox.",14,null],[3,"TitleBar","","A simple title bar widget that automatically sizes itself to the top of some other widget.",null,null],[12,"common","","Data necessary and common for all widget builder types.",15,null],[12,"style","","Unique styling for the **FramedRectangle**.",15,null],[12,"label","","A label displayed in the middle of the TitleBar.",15,null],[12,"maybe_react","","Some function used to react to interactions with the TitleBar.",15,null],[3,"Toggle","","A pressable widget for toggling the state of a bool.",null,null],[12,"maybe_react","","Set the reaction for the Toggle. It will be triggered upon release of the button.",16,null],[12,"enabled","","If true, will allow user inputs. If false, will disallow user inputs.",16,null],[3,"XYPad","","Used for displaying and controlling a 2D point on a cartesian plane within a given range.",null,null],[12,"maybe_react","","The reaction function for the XYPad.",17,null],[12,"enabled","","Indicates whether the XYPad will respond to user input.",17,null],[3,"LineStyle","","Unique styling for a Line widget.",null,null],[12,"maybe_pattern","","The patter for the line.",18,null],[12,"maybe_color","","Color of the Button&#39;s pressable area.",18,null],[12,"maybe_thickness","","The thickness of the line.",18,null],[12,"maybe_cap","","The style with which the ends of the line are drawn.",18,null],[3,"ImageStyle","","Unique styling for the `Image` widget.",null,null],[12,"maybe_color","","Optionally specify a single colour to use for the image.",19,null],[3,"FramedRectangleStyle","","Unique styling for the **FramedRectangle** widget.",null,null],[12,"color","","Shape styling for the inner rectangle.",20,null],[12,"frame","","The thickness of the frame.",20,null],[12,"frame_color","","The color of the frame.",20,null],[3,"TextStyle","","The styling for a **Text**&#39;s graphics.",null,null],[12,"font_size","","The font size for the **Text**.",21,null],[12,"color","","The color of the **Text**.",21,null],[12,"maybe_wrap","","Whether or not the text should wrap around the width.",21,null],[12,"line_spacing","","The spacing between consecutive lines.",21,null],[12,"text_align","","Alignment of the text along the *x* axis.",21,null],[3,"ButtonStyle","","Unique styling for the Button.",null,null],[12,"color","","Color of the Button&#39;s pressable area.",22,null],[12,"frame","","Width of the frame surrounding the button",22,null],[12,"frame_color","","The color of the frame.",22,null],[12,"label_color","","The color of the Button&#39;s label.",22,null],[12,"label_font_size","","The font size of the Button&#39;s label.",22,null],[3,"CanvasStyle","","Unique styling for the Canvas.",null,null],[12,"color","","The color of the Canvas&#39; rectangle surface.",23,null],[12,"frame","","The width of the frame surrounding the Canvas&#39; rectangle.",23,null],[12,"frame_color","","The color of the Canvas&#39; frame.",23,null],[12,"length","","If this Canvas is a split of some parent Canvas, this is the length of the split.",23,null],[12,"pad_left","","Padding for the left edge of the Canvas&#39; kid area.",23,null],[12,"pad_right","","Padding for the right edge of the Canvas&#39; kid area.",23,null],[12,"pad_bottom","","Padding for the bottom edge of the Canvas&#39; kid area.",23,null],[12,"pad_top","","Padding for the top edge of the Canvas&#39; kid area.",23,null],[12,"title_bar_text_color","","The color of the title bar&#39;s text.",23,null],[12,"title_bar_font_size","","The font size for the title bar&#39;s text.",23,null],[12,"title_bar_maybe_wrap","","The way in which the title bar&#39;s text should wrap.",23,null],[12,"title_bar_line_spacing","","The distance between lines for multi-line title bar text.",23,null],[12,"title_bar_text_align","","The horizontal alignment of the title bar text.",23,null],[3,"DropDownListStyle","","Styling for the DropDownList, necessary for constructing its renderable Element.",null,null],[12,"color","","Color of the widget.",24,null],[12,"frame","","Width of the widget&#39;s frame.",24,null],[12,"frame_color","","Color of the widget&#39;s frame.",24,null],[12,"label_color","","Color of the item labels.",24,null],[12,"label_font_size","","Font size for the item labels.",24,null],[12,"maybe_max_visible_height","","Maximum height of the Open menu before the scrollbar appears.",24,null],[3,"EnvelopeEditorStyle","","Styling for the EnvelopeEditor, necessary for constructing its renderable Element.",null,null],[12,"color","","Coloring for the EnvelopeEditor&#39;s **FramedRectangle**.",25,null],[12,"frame","","Thickness of the **FramedRectangle**&#39;s frame.",25,null],[12,"frame_color","","Color of the frame.",25,null],[12,"label_color","","Color of the label.",25,null],[12,"label_font_size","","The font size of the **EnvelopeEditor**&#39;s label if one was given.",25,null],[12,"value_font_size","","The font size of the value label.",25,null],[12,"point_radius","","The radius of the envelope points.",25,null],[12,"line_thickness","","The thickness of the envelope lines.",25,null],[3,"NumberDialerStyle","","Unique graphical styling for the NumberDialer.",null,null],[12,"color","","Color of the NumberDialer&#39;s rectangle.",26,null],[12,"frame","","The color of the rectangle frame.",26,null],[12,"frame_color","","The color of the rectangle frame.",26,null],[12,"label_color","","The color of the NumberDialer&#39;s label.",26,null],[12,"label_font_size","","The font size for the NumberDialer&#39;s label.",26,null],[3,"SliderStyle","","Graphical styling unique to the Slider widget.",null,null],[12,"color","","The color of the slidable rectangle.",27,null],[12,"frame","","The length of the frame around the edges of the slidable rectangle.",27,null],[12,"frame_color","","The color of the Slider&#39;s frame.",27,null],[12,"label_color","","The color of the Slider&#39;s label.",27,null],[12,"label_font_size","","The font-size for the Slider&#39;s label.",27,null],[3,"TabsStyle","","The styling for Canvas Tabs.",null,null],[12,"maybe_layout","","The direction in which the tabs will be laid out.",28,null],[12,"maybe_bar_width","","The width of the tab bar.",28,null],[12,"maybe_label_color","","The color of the tabs&#39; labels.",28,null],[12,"maybe_label_font_size","","The font size for the tabs&#39; labels.",28,null],[12,"canvas","","Styling for each of the canvasses passed to the Canvas.",28,null],[3,"TextBoxStyle","","Unique graphical styling for the TextBox.",null,null],[12,"color","","Color of the rectangle behind the text. If you don&#39;t want to see the rectangle, set the\ncolor with a zeroed alpha.",29,null],[12,"frame","","The frame around the rectangle behind the text.",29,null],[12,"frame_color","","The color of the frame.",29,null],[12,"font_size","","The font size for the text.",29,null],[12,"text_color","","The color of the text.",29,null],[3,"TitleBarStyle","","Unique styling for the **TitleBar** widget.",null,null],[12,"color","","The color of the TitleBar&#39;s rectangle surface.",30,null],[12,"frame","","The width of the frame surrounding the TitleBar&#39;s rectangle.",30,null],[12,"frame_color","","The color of the TitleBar&#39;s frame.",30,null],[12,"text_color","","The color of the title bar&#39;s text.",30,null],[12,"font_size","","The font size for the title bar&#39;s text.",30,null],[12,"maybe_wrap","","The way in which the title bar&#39;s text should wrap.",30,null],[12,"line_spacing","","The distance between lines for multi-line title bar text.",30,null],[12,"text_align","","The horizontal alignment of the title bar text.",30,null],[3,"ToggleStyle","","Styling for the Toggle including coloring, framing and labelling.",null,null],[12,"color","","Color of the Toggle&#39;s pressable area.",31,null],[12,"frame","","The width of the rectangular frame surrounding the Toggle.",31,null],[12,"frame_color","","The color of the Toggle&#39;s frame.",31,null],[12,"label_color","","The color of the Toggle&#39;s Text label.",31,null],[12,"label_font_size","","The font size for the Toggle&#39;s Text label.",31,null],[3,"XYPadStyle","","Unique graphical styling for the XYPad.",null,null],[12,"color","","The color of the XYPad&#39;s rectangle.",32,null],[12,"frame","","The width of the frame surrounding the rectangle.",32,null],[12,"frame_color","","The color of the surrounding rectangle frame.",32,null],[12,"label_color","","The color of the XYPad&#39;s label and value label text.",32,null],[12,"label_font_size","","The font size for the XYPad&#39;s label.",32,null],[12,"value_font_size","","The font size for the XYPad&#39;s *value* label.",32,null],[12,"line_thickness","","The thickness of the XYPad&#39;s crosshair lines.",32,null],[3,"Background","","A type for drawing a colored window background.",null,null],[3,"Mouse","","Represents the current state of the Mouse.",null,null],[12,"xy","","Position of the mouse cursor.",33,null],[12,"left","","Left mouse button state.",33,null],[12,"middle","","Middle mouse button state.",33,null],[12,"right","","Right mouse button state.",33,null],[12,"unknown","","Unknown button state.",33,null],[12,"scroll","","Amount that the mouse has scrolled since the last render.",33,null],[3,"MouseButtonState","","The current state of a Mouse button.",null,null],[12,"was_just_pressed","","The button has been pressed since the last update.",34,null],[12,"was_just_released","","The button has been released since the last update.",34,null],[12,"position","","The current position of the button.",34,null],[3,"MouseScroll","","The amount of scrolling that has occurred since the last render event.",null,null],[12,"x","","Scrolling across the x axis.",35,null],[12,"y","","Scrolling across the y axis.",35,null],[3,"Padding","","The distance between the inner edge of a frame and the outer edge of the inner content.",null,null],[12,"x","","Padding on the start and end of the *x* axis.",36,null],[12,"y","","Padding on the start and end of the *y* axis.",36,null],[3,"Range","","Some start and end position along a single axis.",null,null],[12,"start","","The start of some `Range` along an axis.",37,null],[12,"end","","The end of some `Range` along an axis.",37,null],[3,"Rect","","Defines a Rectangle&#39;s bounds across the x and y axes.",null,null],[12,"x","","The start and end positions of the Rectangle on the x axis.",38,null],[12,"y","","The start and end positions of the Rectangle on the y axis.",38,null],[3,"Ui","","`Ui` is the most important type within Conrod and is necessary for rendering and maintaining\nwidget state.\n# Ui Handles the following:\n* Contains the state of all widgets which can be indexed via their widget::Index.\n* Stores rendering state for each widget until the end of each render cycle.\n* Contains the theme used for default styling of the widgets.\n* Maintains the latest user input state (for mouse and keyboard).\n* Maintains the latest window dimensions.",null,null],[12,"theme","","The theme used to set default styling for widgets.",39,null],[12,"glyph_cache","","Cache for character textures, used for label width calculation and glyph rendering.",39,null],[12,"window","","An index into the root widget of the graph, representing the entire window.",39,null],[12,"win_w","","Window width.",39,null],[12,"win_h","","Window height.",39,null],[12,"global_input","","Handles aggregation of events and providing them to Widgets",39,null],[3,"UiCell","","A wrapper around the `Ui` that restricts the user from mutating the `Ui` in certain ways while\nin the scope of the `Ui::set_widgets` function and within `Widget`s&#39; `update` methods. Using\nthe `UiCell`, users may access the `Ui` immutably (via `Deref`) however they wish, however they\nmay only mutate the `Ui` via the `&amp;mut self` methods provided by the `UiCell`.",null,null],[3,"UserInput","","A wrapper over the current user input state.",null,null],[12,"maybe_mouse","","Mouse state only if it is currently available to the widget after considering capturing.",40,null],[12,"global_mouse","","The universal state of the Mouse, regardless of capturing.",40,null],[12,"pressed_keys","","Keys pressed since the last cycle.",40,null],[12,"released_keys","","Keys released since the last cycle.",40,null],[12,"entered_text","","Text entered since the last cycle.",40,null],[12,"window_dim","","Current dimensions of the window.",40,null],[3,"CommonBuilder","","A struct containing builder data common to all **Widget** types.",null,null],[12,"style","","Styling and positioning data that is common between all widget types.",41,null],[12,"maybe_parent_idx","","The parent widget of the Widget.",41,null],[12,"is_floating","","Whether or not the Widget is a &quot;floating&quot; Widget.",41,null],[12,"maybe_x_scroll","","Arguments to the scrolling of the widget&#39;s *x* axis.",41,null],[12,"maybe_y_scroll","","Arguments to the scrolling of the widget&#39;s *y* axis.",41,null],[12,"place_on_kid_area","","Whether or not the **Widget** should be placed on the kid_area.",41,null],[12,"maybe_graphics_for","","Describes whether or not the **Widget** is instantiated as a graphical element for some\nother **Widget**.",41,null],[3,"CommonState","","A wrapper around state that is common to all **Widget** types.",null,null],[12,"rect","","The rectangle describing the `Widget`&#39;s area.",42,null],[12,"depth","","The rendering depth for the Widget (the default is 0.0).",42,null],[12,"drag_state","","The current state of the dragged widget, if it is draggable.",42,null],[12,"maybe_floating","","Floating state for the widget if it is floating.",42,null],[12,"kid_area","","The area of the widget upon which kid widgets are placed.",42,null],[3,"CommonStyle","","Styling and positioning data that is common between all widget types.",null,null],[12,"maybe_x_dimension","","The width of a Widget.",43,null],[12,"maybe_y_dimension","","The height of a Widget.",43,null],[12,"maybe_x_position","","The position of a Widget along the *x* axis.",43,null],[12,"maybe_y_position","","The position of a Widget along the *y* axis.",43,null],[12,"maybe_depth","","The rendering Depth of the Widget.",43,null],[3,"Floating","","State necessary for &quot;floating&quot; (pop-up style) widgets.",null,null],[12,"time_last_clicked","","The time the **Widget** was last clicked (used for depth sorting in the widget **Graph**).",44,null],[3,"IndexSlot","","A small cache for a single unique **NodeIndex**.",null,null],[3,"UpdateArgs","","Arguments for the [**Widget::update**](./trait.Widget#method.update) method in a struct to\nsimplify the method signature.",null,null],[12,"idx","","The **Widget**&#39;s unique index.",45,null],[12,"maybe_parent_idx","","The **Widget**&#39;s parent unique index, if there is one.",45,null],[12,"prev","","The **Widget**&#39;s previous state. Specifically, the state that is common between all widgets,\nsuch as positioning, floatability, draggability, etc.",45,null],[12,"state","","A wrapper around the **Widget**&#39;s unique state, providing methods for both immutably viewing\nand mutably updating the state.",45,null],[12,"rect","","The rectangle describing the **Widget**&#39;s area.",45,null],[12,"style","","The **Widget**&#39;s current **Widget::Style**.",45,null],[12,"ui","","Restricted access to the `Ui`.",45,null],[3,"KidArea","","The area upon which a **Widget**&#39;s child widgets will be placed.",null,null],[12,"rect","","The **Rect** bounds describing the position and area.",46,null],[12,"pad","","The distance between the edge of the area and where the widgets will be placed.",46,null],[3,"KidAreaArgs","","Arguments to the [**Widget::kid_area**](./trait.Widget#method.kid_area) method in a struct to\nsimplify the method signature.",null,null],[12,"rect","","The **Rect** describing the **Widget**&#39;s position and dimensions.",47,null],[12,"style","","Current **Widget::Style** of the **Widget**.",47,null],[12,"theme","","The active **Theme** within the **Ui**.",47,null],[12,"glyph_cache","","The **Ui**&#39;s **GlyphCache** (for determining text width).",47,null],[3,"WidgetCommonState","","A wrapper around state that is common to all **Widget** types.",null,null],[12,"rect","","The rectangle describing the `Widget`&#39;s area.",42,null],[12,"depth","","The rendering depth for the Widget (the default is 0.0).",42,null],[12,"drag_state","","The current state of the dragged widget, if it is draggable.",42,null],[12,"maybe_floating","","Floating state for the widget if it is floating.",42,null],[12,"kid_area","","The area of the widget upon which kid widgets are placed.",42,null],[3,"WidgetId","","Unique, public widget identifier. Each widget must use a unique `WidgetId` so that it&#39;s state\ncan be cached within the `Ui` type. The reason we use a usize is because widgets are cached\nwithin a `Graph` whose max number of `Node`s is indexed by usize.",null,null],[12,"0","","",48,null],[3,"WidgetState","","A wrapper around a **Widget**&#39;s unique **Widget::State**.",null,null],[4,"Wrap","","The way in which text should wrap around the width.",null,null],[13,"Character","","Wrap at the first character that exceeds the width.",49,null],[13,"Whitespace","","Wrap at the first word that exceeds the width.",49,null],[4,"ShapeStyle","","The style for some 2D shape.",null,null],[13,"Outline","","The outline of the shape with this style.",50,null],[13,"Fill","","A rectangle filled with this color.",50,null],[4,"Framing","","To be used as a parameter for defining the aesthetic\nof the widget frame.",null,null],[13,"Frame","","Frame width and color.",51,null],[13,"NoFrame","","No frame.",51,null],[4,"MouseButtonPosition","","Represents the current state of a mouse button.",null,null],[13,"Up","","The mouse button is currently up.",52,null],[13,"Down","","The mouse button is currently down (pressed).",52,null],[4,"Align","","The orientation of **Align**ment along some **Axis**.",null,null],[13,"Start","","**Align** our **Start** with the **Start** of some other widget along the **Axis**.",53,null],[13,"Middle","","**Align** our **Middle** with the **Middle** of some other widget along the **Axis**.",53,null],[13,"End","","**Align** our **End** with the **End** of some other widget along the **Axis**.",53,null],[4,"Axis","","Represents either **Axis** in the 2-dimensional plane.",null,null],[13,"X","","The horizontal plane&#39;s Axis.",54,null],[13,"Y","","The vertical plane&#39;s Axis.",54,null],[4,"Corner","","Either of the four corners of a **Rect**.",null,null],[13,"TopLeft","","The top left corner of a **Rect**.",55,null],[13,"TopRight","","The top right corner of a **Rect**.",55,null],[13,"BottomLeft","","The bottom left corner of a **Rect**.",55,null],[13,"BottomRight","","The bottom right corner of a **Rect**.",55,null],[4,"Direction","","Directionally positioned, normally relative to some other widget.",null,null],[13,"Forwards","","Positioned forwards (*positive* **Scalar**) along some **Axis**.",56,null],[13,"Backwards","","Positioned backwards (*negative* **Scalar**) along some **Axis**.",56,null],[4,"Dimension","","The length of a **Widget** over either the *x* or *y* axes.",null,null],[13,"Absolute","","Some specific length has been given.",57,null],[13,"Of","","The dimension should match that of the widget at the given index.",57,null],[13,"KidAreaOf","","The dimension should match that of the `kid_area` of the widget at the given index.",57,null],[4,"Edge","","Represents either the **Start** or **End** **Edge** of a **Range**.",null,null],[13,"Start","","The beginning of a **Range**.",58,null],[13,"End","","The end of a **Range**.",58,null],[4,"Place","","Place the widget at a position on some other widget.",null,null],[13,"Start","","Place upon the **Start** of the Widget&#39;s `kid_area`.",59,null],[13,"Middle","","Place upon the **Middle** of the Widget&#39;s `kid_area`.",59,null],[13,"End","","Place upon the **End** of the Widget&#39;s `kid_area`.",59,null],[4,"Position","","Some **Position** of some **Widget** along a single axis.",null,null],[13,"Absolute","","A specific position.",60,null],[13,"Relative","","A position relative to some other Widget.",60,null],[13,"Align","","A position aligned with some other Widget.",60,null],[13,"Direction","","A direction relative to some other Widget.",60,null],[13,"Place","","A position at a place on some other Widget.",60,null],[4,"MaybeParent","","The builder argument for the **Widget**&#39;s parent.",null,null],[13,"None","","The user specified the widget should not have any parents, so the Root will be used.",61,null],[13,"Some","","The user gave a specific parent widget.",61,null],[13,"Unspecified","","No parent widget was specified, so we will assume they want the last parent.",61,null],[4,"WidgetIndex","","An index either given in the form of a publicly instantiated `Widget`&#39;s `WidgetId`, or an\ninternally instantiated `Widget`&#39;s `NodeIndex`,",null,null],[13,"Public","","A public identifier given by a user of a conrod library/widget, usually generated by the\n`widget_ids` macro.",62,null],[13,"Internal","","An index to an internal widget, usually used to construct some other widget.",62,null],[5,"default_x_dimension","","Determines the default **Dimension** for a **Widget**.",null,{"inputs":[{"name":"w"},{"name":"ui"}],"output":{"name":"dimension"}}],[5,"default_y_dimension","","Determines the default **Dimension** for a **Widget**.",null,{"inputs":[{"name":"w"},{"name":"ui"}],"output":{"name":"dimension"}}],[0,"drag","","",null,null],[4,"State","conrod::drag","The current drag interaction for the Widget.",null,null],[13,"Normal","","Idle drag state.",63,null],[13,"Highlighted","","The drag area is highlighted.",63,null],[13,"Clicked","","The drag area is clicked at the given point.",63,null],[5,"drag_widget","","Drag the widget from its position `xy` and return the new position.",null,null],[11,"eq","","",63,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[0,"scroll","conrod","Scroll related types and logic.",null,null],[3,"Scroll","conrod::scroll","Arguments given via a scrollable `Widget`&#39;s builder methods for the scrolling along a single\naxis.",null,null],[3,"State","","Scroll state calculated for a single axis.",null,null],[12,"offset","","The distance that has been scrolled from the origin.",64,null],[12,"thickness","","The width for vertical scrollbars, the height for horizontal scrollbars.",64,null],[12,"color","","The color of the scrollbar.",64,null],[12,"interaction","","The current state of interaction between the mouse and the scrollbar.",64,null],[12,"is_scrolling","","Whether or not the this axis is currently scrolling.",64,null],[3,"Style","","Style for the Scrolling.",null,null],[12,"maybe_thickness","","The width for vertical scrollbars, the height for horizontal scrollbars.",65,null],[12,"maybe_color","","The color of the scrollbar.",65,null],[4,"Interaction","","Represents an interaction between the mouse cursor and the scroll bar.",null,null],[13,"Normal","","There are currently no interactions.",66,null],[13,"Highlighted","","The mouse is over either the track or the handle of the scroll bar.",66,null],[13,"Clicked","","The scrollbar handle is currently clicked by the mouse.",66,null],[4,"Elem","","The elements that make up the scrollbar.",null,null],[13,"Handle","","The draggable part of the scrollbar and the mouse&#39;s position.",67,null],[13,"Track","","The track along which the `Handle` can be dragged.",67,null],[4,"X","","Behaviour for scrolling across the `X` axis.",null,null],[4,"Y","","Behaviour for scrolling across the `Y` axis.",null,null],[5,"track","","Calculates the `Rect` for a scroll &quot;track&quot; with the given `thickness` over the given axis for\nthe given `container`.",null,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[5,"handle","","Calculates the `Rect` for a scroll &quot;handle&quot; sitting on the given `track` with an offset and\nlength that represents the given `Axis`&#39; `state`.",null,{"inputs":[{"name":"rect"},{"name":"state"}],"output":{"name":"rect"}}],[6,"StateX","","State for scrolling along the **X** axis.",null,null],[6,"StateY","","State for scrolling along the **Y** axis.",null,null],[8,"Axis","","Methods for distinguishing behaviour between both scroll axes at compile-time.",null,null],[10,"parallel_range","","The range of the given `Rect` that is parallel with this `Axis`.",68,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[10,"perpendicular_range","","The range of the given `Rect` that is perpendicular with this `Axis`.",68,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[10,"padding_range","","Given some rectangular `Padding`, return the `Range` that corresponds with this `Axis`.",68,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[10,"track","","The `Rect` for a scroll &quot;track&quot; with the given `thickness` for a container with the given\n`Rect`.",68,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[10,"mouse_scalar","","The coordinate of the given mouse position that corresponds with this `Axis`.",68,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[10,"mouse_scroll_axis","","The coordinate of the given `MouseScroll` that corresponds with this `Axis`.",68,{"inputs":[{"name":"mousescroll"}],"output":{"name":"scalar"}}],[10,"handle_rect","","The `Rect` for a scroll handle given both `Range`s.",68,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[10,"offset_direction","","A `Scalar` multiplier representing the direction in which positive offset shifts the\n`scrollable_range` (either `-1.0` or `1.0).",68,{"inputs":[],"output":{"name":"scalar"}}],[11,"eq","","",69,{"inputs":[{"name":"scroll"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"scroll"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"scroll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"scroll"}],"output":{"name":"scroll"}}],[11,"eq","","",64,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"eq","","",65,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"style"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"eq","","",66,{"inputs":[{"name":"interaction"},{"name":"interaction"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"interaction"},{"name":"interaction"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"interaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"interaction"}],"output":{"name":"interaction"}}],[11,"eq","","",67,{"inputs":[{"name":"elem"},{"name":"elem"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"elem"},{"name":"elem"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"elem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"elem"}],"output":{"name":"elem"}}],[11,"eq","","",70,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"x"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"x"}],"output":{"name":"x"}}],[11,"eq","","",71,{"inputs":[{"name":"y"},{"name":"y"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"y"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"y"}],"output":{"name":"y"}}],[11,"new","","The default `Scroll` args.",69,{"inputs":[],"output":{"name":"self"}}],[11,"update","","Calculate the new scroll state for the single axis of a `Widget`.",64,{"inputs":[{"name":"ui"},{"name":"index"},{"name":"scroll"},{"name":"kidarea"},{"name":"option"}],"output":{"name":"self"}}],[11,"is_over","","Whether or not the given `xy` point is over the scroll track.",64,{"inputs":[{"name":"state"},{"name":"point"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"new","","Construct a new default Style.",65,{"inputs":[],"output":{"name":"style"}}],[11,"thickness","","Get the thickness of the scrollbar or a default from the theme.",65,{"inputs":[{"name":"style"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"color","","Get the **Color** for the scrollbar.",65,{"inputs":[{"name":"style"},{"name":"theme"}],"output":{"name":"color"}}],[11,"parallel_range","","",70,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"perpendicular_range","","",70,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"padding_range","","",70,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[11,"track","","",70,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[11,"mouse_scalar","","",70,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"mouse_scroll_axis","","",70,{"inputs":[{"name":"mousescroll"}],"output":{"name":"scalar"}}],[11,"handle_rect","","",70,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[11,"offset_direction","","",70,{"inputs":[],"output":{"name":"scalar"}}],[11,"parallel_range","","",71,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"perpendicular_range","","",71,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"padding_range","","",71,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[11,"track","","",71,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[11,"mouse_scalar","","",71,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"mouse_scroll_axis","","",71,{"inputs":[{"name":"mousescroll"}],"output":{"name":"scalar"}}],[11,"handle_rect","","",71,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[11,"offset_direction","","",71,{"inputs":[],"output":{"name":"scalar"}}],[0,"events","conrod","This module contains all the logic for handling input events and providing them to widgets.\nAll user input is provided to the `Ui` in the form of `input::Input` events, which are continuously\npolled from the backend window implementation. These raw input events tend to be fairly low level.\nThe `Ui` passes each of these events off to it&#39;s `GlobalInput`, which keeps track of the state of\naffairs for the entire `Ui`. `GlobalInput` will also aggregate the low level events into higher\nlevel ones. For instance, two events indicating that a mouse button was pressed then released\nwould cause a new `UiEvent::MouseClick` to be generated. This saves individual widgets from\nhaving to interpret these themselves, thus freeing them from also having to store input state.",null,null],[0,"ui_event","conrod::events","Contains all the structs and enums to describe all of the input events that `Widget`s\ncan handle. The core of this module is the `UiEvent` enum, which encapsulates all\nof those events.",null,null],[3,"MouseDrag","conrod::events::ui_event","Contains all the relevant information for a mouse drag.",null,null],[12,"button","","Which mouse button was being held during the drag",72,null],[12,"start","","The origin of the drag. This will always be the position of the mouse whenever the\nbutton was first pressed",72,null],[12,"end","","The end position of the mouse. If `in_progress` is true, then subsequent `MouseDrag`\nevents may be created with a new `end` as the mouse continues to move.",72,null],[12,"modifier","","Which modifier keys are being held during the mouse drag.",72,null],[12,"in_progress","","Indicates whether the mouse button is still being held down. If it is, then\n`in_progress` will be `true` and more `MouseDrag` events can likely be expected.",72,null],[3,"MouseClick","","Contains all the relevant information for a mouse click.",null,null],[12,"button","","Which mouse button was clicked",73,null],[12,"location","","The location of the click",73,null],[12,"modifier","","Which modifier keys, if any, that were being held down when the user clicked",73,null],[3,"Scroll","","Holds all the relevant information about a scroll event",null,null],[12,"x","","The amount of scroll along the x axis.",74,null],[12,"y","","The amount of scroll along the y axis.",74,null],[12,"modifiers","","Which modifier keys, if any, that were being held down while the scroll occured",74,null],[4,"UiEvent","","Enum containing all the events that `Widget`s can listen for.",null,null],[13,"Raw","","Represents a raw `input::Input` event",75,null],[13,"MouseClick","","Represents a mouse button being pressed and subsequently released while the\nmouse stayed in roughly the same place.",75,null],[13,"MouseDrag","","Represents a mouse button being pressed and a subsequent movement of the mouse.",75,null],[13,"Scroll","","This is a generic scroll event. This is different from the `input::Movement::MouseScroll`\nevent in several aspects. For one, it does not necessarily have to get created by a\nmouse wheel, it could be generated from a keypress, or as a response to handling some\nother event. Secondly, it contains a field holding the `input::keyboard::ModifierKey`\nthat was held while the scroll occured.",75,null],[13,"WidgetCapturesMouse","","Indicates that the given widget is starting to capture the mouse.",75,null],[13,"WidgetUncapturesMouse","","Indicates that the given widget is losing mouse capture.",75,null],[13,"WidgetCapturesKeyboard","","Indicates that the given widget is starting to capture the keyboard.",75,null],[13,"WidgetUncapturesKeyboard","","Indicates that the given widget is losing keyboard capture.",75,null],[11,"fmt","","",75,{"inputs":[{"name":"uievent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"uievent"},{"name":"uievent"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"uievent"},{"name":"uievent"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"uievent"}],"output":{"name":"uievent"}}],[11,"fmt","","",72,{"inputs":[{"name":"mousedrag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"mousedrag"},{"name":"mousedrag"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"mousedrag"},{"name":"mousedrag"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"mousedrag"}],"output":{"name":"mousedrag"}}],[11,"fmt","","",73,{"inputs":[{"name":"mouseclick"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"mouseclick"},{"name":"mouseclick"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"mouseclick"},{"name":"mouseclick"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"mouseclick"}],"output":{"name":"mouseclick"}}],[11,"fmt","","",74,{"inputs":[{"name":"scroll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"scroll"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"scroll"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"scroll"}],"output":{"name":"scroll"}}],[11,"relative_to","","Returns a copy of the MouseClick relative to the given `position::Point`",73,{"inputs":[{"name":"mouseclick"},{"name":"point"}],"output":{"name":"mouseclick"}}],[11,"relative_to","","Returns a copy of the MouseDrag relative to the given `position::Point`",72,{"inputs":[{"name":"mousedrag"},{"name":"point"}],"output":{"name":"mousedrag"}}],[11,"relative_to","","Returns a copy of the UiEvent relative to the given `position::Point`",75,{"inputs":[{"name":"uievent"},{"name":"point"}],"output":{"name":"self"}}],[11,"is_mouse_event","","Returns `true` if this event is related to the mouse. Note that just because this method\nreturns true does not mean that the event necessarily came from the mouse.\nA `UiEvent::Scroll` is considered to be both a mouse and a keyboard event.",75,{"inputs":[{"name":"uievent"}],"output":{"name":"bool"}}],[11,"is_keyboard_event","","Returns `true` if this event is related to the keyboard. Note that just because this method\nreturns true does not mean that the event necessarily came from the keyboard.\nA `UiEvent::Scroll` is considered to be both a mouse and a keyboard event.",75,{"inputs":[{"name":"uievent"}],"output":{"name":"bool"}}],[0,"input_state","conrod::events","Everything related to storing the state of user input. This includes the state of any\nbuttons on either the keyboard or the mouse, as well as the position of the mouse.\nIt also includes which widgets, if any, are capturing the keyboard and mouse.\nThis module exists mostly to support the `events::InputProvider` trait.",null,null],[3,"InputState","conrod::events::input_state","Holds the current state of user input. This includes the state of all buttons on\nthe keyboard and mouse, as well as the position of the mouse. It also includes which\nwidgets, if any, are capturing keyboard and mouse input.",null,null],[12,"mouse_buttons","","A map that stores the up/down state of each button. If the button is down, then\nit stores the position of the mouse when the button was first pressed.",76,null],[12,"mouse_position","","The current position of the mouse.",76,null],[12,"widget_capturing_keyboard","","Which widget, if any, is currently capturing the keyboard",76,null],[12,"widget_capturing_mouse","","Which widget, if any, is currently capturing the mouse",76,null],[12,"modifiers","","Which modifier keys are being held down.",76,null],[3,"ButtonMap","","Stores the state of all mouse buttons. If the mouse button is down,\nit stores the position of the mouse when the button was pressed",null,null],[6,"ButtonDownPosition","","Describes the position of the mouse when the button was pressed. Will be\n`None` if the mouse button is currently in the up position.",null,null],[17,"NUM_MOUSE_BUTTONS","","The max total number of buttons on a mouse.",null,null],[11,"eq","","",76,{"inputs":[{"name":"inputstate"},{"name":"inputstate"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"inputstate"},{"name":"inputstate"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"inputstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"inputstate"}],"output":{"name":"inputstate"}}],[11,"new","","Returns a fresh new input state",76,{"inputs":[],"output":{"name":"inputstate"}}],[11,"update","","Updates the input state based on an event.",76,{"inputs":[{"name":"inputstate"},{"name":"uievent"}],"output":null}],[11,"relative_to","","Returns a copy of the InputState relative to the given `position::Point`",76,{"inputs":[{"name":"inputstate"},{"name":"point"}],"output":{"name":"inputstate"}}],[11,"eq","","",77,{"inputs":[{"name":"buttonmap"},{"name":"buttonmap"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"buttonmap"},{"name":"buttonmap"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"buttonmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"buttonmap"}],"output":{"name":"buttonmap"}}],[11,"new","","Returns a new button map with all states set to `None`",77,{"inputs":[],"output":{"name":"buttonmap"}}],[11,"set","","Sets the state of a specific `MouseButton`",77,{"inputs":[{"name":"buttonmap"},{"name":"mousebutton"},{"name":"buttondownposition"}],"output":null}],[11,"get","","Returns the state of a mouse button",77,{"inputs":[{"name":"buttonmap"},{"name":"mousebutton"}],"output":{"name":"buttondownposition"}}],[11,"take","","Returns the current state of a mouse button, leaving `None` in its place",77,{"inputs":[{"name":"buttonmap"},{"name":"mousebutton"}],"output":{"name":"buttondownposition"}}],[11,"pressed_button","","If any mouse buttons are currently pressed, will return a tuple containing\nboth the `MouseButton` that is pressed and the `Point` describing the location of the\nmouse when it was pressed.",77,{"inputs":[{"name":"buttonmap"}],"output":{"name":"option"}}],[11,"relative_to","","Returns a copy of the ButtonMap relative to the given `Point`",77,{"inputs":[{"name":"buttonmap"},{"name":"point"}],"output":{"name":"buttonmap"}}],[0,"widget_input","conrod::events","Contains all the logic for filtering input events and making them relative to widgets.\nThe core of this module is the `WidgetInput::for_widget` method, which creates an\n`InputProvider` that provides input events for a specific widget.",null,null],[3,"WidgetInput","conrod::events::widget_input","Holds any events meant to be given to a `Widget`. This is what widgets will interface with\nwhen handling events in their `update` method. All events returned from methods on `WidgetInput`\nwill be relative to the widget&#39;s own (0,0) origin. Additionally, `WidgetInput` will not provide\nmouse or keyboard events that do not directly pertain to the widget.",null,null],[3,"WidgetInputEventIterator","","Alows iterating over events for a specific widget. All events provided by this Iterator\nwill be filtered, so that input intended for other widgets is excluded. In addition,\nall mouse events will have their coordinates relative to the widget&#39;s own (0,0) origin.",null,null],[11,"for_widget","","Returns a `WidgetInput` with events specifically for the given widget.\nFilters out only the events that directly pertain to the widget.\nAll events will also be made relative to the widget&#39;s own (0,0) origin.",78,{"inputs":[{"name":"index"},{"name":"rect"},{"name":"globalinput"}],"output":{"name":"widgetinput"}}],[11,"mouse_is_over_widget","","Returns true if the mouse is currently over the widget, otherwise false",78,{"inputs":[{"name":"widgetinput"}],"output":{"name":"bool"}}],[11,"maybe_mouse_position","","If the mouse is over the widget and no other widget is capturing the mouse, then\nthis will return the position of the mouse relative to the widget. Otherwise, it\nwill return `None`",78,{"inputs":[{"name":"widgetinput"}],"output":{"name":"option"}}],[11,"next","","",79,{"inputs":[{"name":"widgetinputeventiterator"}],"output":{"name":"option"}}],[11,"all_events","","",78,{"inputs":[{"name":"widgetinput"}],"output":{"name":"events"}}],[11,"current_state","","",78,{"inputs":[{"name":"widgetinput"}],"output":{"name":"inputstate"}}],[11,"mouse_click","","",78,{"inputs":[{"name":"widgetinput"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"mouse_drag","","",78,{"inputs":[{"name":"widgetinput"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"mouse_button_down","","",78,{"inputs":[{"name":"widgetinput"},{"name":"mousebutton"}],"output":{"name":"option"}}],[0,"global_input","conrod::events","Handles all of the global input events and state.\nThe core of this module is the `GlobalInput` struct. It is responsible for aggregating\nand interpreting raw input events into high-level semantic events.",null,null],[3,"GlobalInput","conrod::events::global_input","Global input event handler that also implements `InputProvider`. The `Ui` passes all events\nto it&#39;s `GlobalInput` instance, which aggregates and interprets the events to provide\nso-called &#39;high-level&#39; events to widgets. This input gets reset after every update by the `Ui`.",null,null],[12,"start_state","","The `InputState` as it was at the end of the last update cycle.",80,null],[12,"current_state","","The most recent `InputState`, with updates from handling all the events\nthis update cycle",80,null],[6,"GlobalInputEventIterator","","Iterator over global `UiEvent`s. Unlike the `WidgetInputEventIterator`, this will\nnever filter out any events, and all coordinates will be reative to the (0,0) origin\nof the window.",null,null],[11,"all_events","","",80,{"inputs":[{"name":"globalinput"}],"output":{"name":"events"}}],[11,"current_state","","",80,{"inputs":[{"name":"globalinput"}],"output":{"name":"inputstate"}}],[11,"mouse_button_down","","",80,{"inputs":[{"name":"globalinput"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"new","","Returns a fresh new `GlobalInput`",80,{"inputs":[{"name":"scalar"}],"output":{"name":"globalinput"}}],[11,"push_event","","Adds a new event and updates the internal state.",80,{"inputs":[{"name":"globalinput"},{"name":"uievent"}],"output":null}],[11,"reset","","Called at the end of every update cycle in order to prepare the `GlobalInput` to\nhandle events for the next one.",80,{"inputs":[{"name":"globalinput"}],"output":null}],[11,"mouse_position","","Returns the most up to date position of the mouse",80,{"inputs":[{"name":"globalinput"}],"output":{"name":"point"}}],[11,"starting_state","","Returns the input state as it was after the last update",80,{"inputs":[{"name":"globalinput"}],"output":{"name":"inputstate"}}],[11,"currently_capturing_mouse","","Returns the most up to date info on which widget is capturing the mouse",80,{"inputs":[{"name":"globalinput"}],"output":{"name":"option"}}],[11,"currently_capturing_keyboard","","Returns the most up to date info on which widget is capturing the keyboard",80,{"inputs":[{"name":"globalinput"}],"output":{"name":"option"}}],[0,"input_provider","conrod::events","Contains the `InputProvider` trait, which is used to provide input events to widgets.",null,null],[3,"TextJustEntered","conrod::events::input_provider","An iterator yielding the `&amp;str` of each `Text` event&#39;s `String` that was just entered.",null,null],[3,"KeysJustReleased","","An Iterator over `input::keyboard::Key`s that were just released.",null,null],[3,"KeysJustPressed","","An Iterator over `input::keyboard::Key`s that were just pressed.",null,null],[3,"MouseButtonsJustPressed","","An Iterator over `input::mouse::MouseButton`s that were just pressed.",null,null],[3,"MouseButtonsJustReleased","","An Iterator over `input::mouse::MouseButton`s that were just released.",null,null],[8,"InputProvider","","Trait for something that provides events to be consumed by a widget.",null,null],[16,"Events","","An iterator yielding references to the `InputProvider`&#39;s `UiEvent`s.",81,null],[10,"all_events","","This is the only method that needs to be implemented.\nJust provided a reference to a `Vec&lt;UiEvent&gt;` that contains\nall the events for this update cycle.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"events"}}],[10,"current_state","","Returns the current input state. The returned state is assumed to be up to\ndate with all of the events so far.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"inputstate"}}],[10,"mouse_button_down","","If the given mouse button is currently pressed, returns the current position of the mouse.\nOtherwise, returns `None`",81,{"inputs":[{"name":"inputprovider"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"text_just_entered","","Returns a reference to each slice of `Text` that was entered since the last update.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"textjustentered"}}],[11,"keys_just_released","","Returns all of the `Key`s that were released since the last update.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"keysjustreleased"}}],[11,"keys_just_pressed","","Returns all of the keyboard `Key`s that were pressed since the last update.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"keysjustpressed"}}],[11,"mouse_buttons_just_pressed","","Returns all of the `MouseButton`s that were pressed since the last update.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"mousebuttonsjustpressed"}}],[11,"mouse_buttons_just_released","","Returns all of the `MouseButton`s that were released since the last update.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"mousebuttonsjustreleased"}}],[11,"scroll","","Returns a `Scroll` struct if any scrolling was done since the last update.\nIf multiple raw scroll events occured since the last update (which could very well\nhappen if the user is scrolling quickly), then the `Scroll` returned will represent an\naggregate total of all the scrolling.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"option"}}],[11,"mouse_left_drag","","Convenience method to call `mouse_drag`, passing in `MouseButton::Left`.\nSaves widgets from having to `use input::mouse::MouseButton` if all they care\nabout is the left mouse button.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"option"}}],[11,"mouse_drag","","Returns a `MouseDrag` if one has occured involving the given mouse button.\nIf multiple raw mouse movement events have\noccured since the last update (which will happen if the user moves the mouse quickly),\nthen the returned `MouseDrag` will be only the _most recent_ one, which will contain\nthe most recent mouse position.",81,{"inputs":[{"name":"inputprovider"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"mouse_left_click","","Convenience method to call `mouse_click`, passing in passing in `MouseButton::Left`.\nSaves widgets from having to `use input::mouse::MouseButton` if all they care\nabout is the left mouse button.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"option"}}],[11,"mouse_right_click","","Convenience method to call `mouse_click`, passing in passing in `MouseButton::Right`.\nSaves widgets from having to `use input::mouse::MouseButton` if all they care\nabout is the left mouse button.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"option"}}],[11,"mouse_click","","Returns a `MouseClick` if one has occured with the given mouse button.\nA _click_ is determined to have occured if a mouse button was pressed and subsequently\nreleased while the mouse was in roughly the same place.",81,{"inputs":[{"name":"inputprovider"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"mouse_left_button_down","","Convenience method for checking if the Left mouse button is down.\nReturns mouse position if the Left mouse button is currently pressed, otherwise `None`.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"option"}}],[11,"mouse_right_button_down","","Convenience method for checking if the Right mouse button is down.\nReturns mouse position if the Right mouse button is currently pressed, otherwise `None`.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"option"}}],[11,"mouse_position","","Convenience method for returning the current mouse position.",81,{"inputs":[{"name":"inputprovider"}],"output":{"name":"point"}}],[11,"fmt","","",82,{"inputs":[{"name":"textjustentered"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"textjustentered"}],"output":{"name":"textjustentered"}}],[11,"next","","",82,{"inputs":[{"name":"textjustentered"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"keysjustreleased"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"keysjustreleased"}],"output":{"name":"keysjustreleased"}}],[11,"next","","",83,{"inputs":[{"name":"keysjustreleased"}],"output":{"name":"option"}}],[11,"fmt","","",84,{"inputs":[{"name":"keysjustpressed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"keysjustpressed"}],"output":{"name":"keysjustpressed"}}],[11,"next","","",84,{"inputs":[{"name":"keysjustpressed"}],"output":{"name":"option"}}],[11,"fmt","","",85,{"inputs":[{"name":"mousebuttonsjustpressed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"mousebuttonsjustpressed"}],"output":{"name":"mousebuttonsjustpressed"}}],[11,"next","","",85,{"inputs":[{"name":"mousebuttonsjustpressed"}],"output":{"name":"option"}}],[11,"fmt","","",86,{"inputs":[{"name":"mousebuttonsjustreleased"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"mousebuttonsjustreleased"}],"output":{"name":"mousebuttonsjustreleased"}}],[11,"next","","",86,{"inputs":[{"name":"mousebuttonsjustreleased"}],"output":{"name":"option"}}],[0,"backend","conrod","Traits and functionality related to Conrod&#39;s generic backend.",null,null],[8,"CharacterCache","conrod::backend","Stores characters in a buffer and loads them by demand.",null,null],[16,"Texture","","The textyre type associated with the character cache.",0,null],[10,"character","","Get reference to character.",0,{"inputs":[{"name":"charactercache"},{"name":"u32"},{"name":"char"}],"output":{"name":"character"}}],[11,"width","","Return the width for some given text.",0,{"inputs":[{"name":"charactercache"},{"name":"u32"},{"name":"str"}],"output":{"name":"f64"}}],[8,"Graphics","","Implemented by all graphics back-ends.",null,null],[16,"Texture","","The texture type associated with the back-end.",1,null],[10,"clear_color","","Clears background with a color.",1,null],[10,"clear_stencil","","Clears stencil buffer with a value, usually 0.",1,null],[10,"tri_list","","Renders list of 2d triangles using a solid color.",1,null],[10,"tri_list_uv","","Renders list of 2d triangles using a color and a texture.",1,null],[11,"rectangle","","Draws a rectangle.",1,null],[11,"polygon","","Draws a polygon.",1,null],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",1,null],[11,"image","","Draws image.",1,null],[11,"ellipse","","Draws ellipse.",1,null],[11,"line","","Draws line.",1,null],[11,"circle_arc","","Draws circle arc.",1,null],[11,"deform_image","","Draws deformed image.",1,null],[0,"graphics","","Conrod&#39;s generic graphics backend.",null,null],[11,"new","graphics::context","Creates a new drawing context.",87,{"inputs":[],"output":{"name":"context"}}],[11,"new_viewport","","Creates a new context with absolute transform in point coordinates.",87,{"inputs":[{"name":"viewport"}],"output":{"name":"context"}}],[11,"new_abs","","Creates a new drawing context in absolute coordinates.",87,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"context"}}],[11,"view","","Moves the current transform to the view coordinate system.",87,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"reset","","Moves the current transform to the default coordinate system.",87,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"store_view","","Stores the current transform as new view.",87,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"get_view_size","","Computes the current view size.",87,null],[11,"clone","","",87,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"append_transform","","",87,null],[11,"prepend_transform","","",87,null],[11,"trans","","",87,{"inputs":[{"name":"context"},{"name":"f64"},{"name":"f64"}],"output":{"name":"context"}}],[11,"rot_rad","","",87,{"inputs":[{"name":"context"},{"name":"f64"}],"output":{"name":"context"}}],[11,"orient","","",87,{"inputs":[{"name":"context"},{"name":"f64"},{"name":"f64"}],"output":{"name":"context"}}],[11,"scale","","",87,{"inputs":[{"name":"context"},{"name":"f64"},{"name":"f64"}],"output":{"name":"context"}}],[11,"shear","","",87,null],[3,"Context","conrod::backend::graphics","Drawing 2d context.",null,null],[12,"viewport","","Viewport information.",87,null],[12,"view","","View transformation.",87,null],[12,"transform","","Current transformation.",87,null],[12,"draw_state","","Current draw state settings.",87,null],[11,"new_alpha","graphics::draw_state","Uses alpha blending.",88,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_clip","","Draws to stencil buffer with value 255.\nThis can be used for clipping.",88,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_inside","","Tests against stencil buffer with value 255.\nDraws inside the shape defined by stencil buffer.",88,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_outside","","Tests against stencil buffer with value 255.\nDraws outside the shape defined by stencil buffer.",88,{"inputs":[],"output":{"name":"drawstate"}}],[11,"blend","","Sets blending.",88,{"inputs":[{"name":"drawstate"},{"name":"blend"}],"output":{"name":"drawstate"}}],[11,"scissor","","Sets scissor `[x, y, w, h]`.",88,null],[11,"default","","",88,{"inputs":[],"output":{"name":"drawstate"}}],[11,"clone","","",88,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"eq","","",88,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"drawstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[3,"DrawState","conrod::backend::graphics","Graphics draw state used for blending, clipping and stencil rendering.",null,null],[12,"scissor","","Scissor mask to use. If set, no pixel outside of this\nrectangle (in screen space) will be written to as a result of rendering.",88,null],[12,"stencil","","Stencil test to use. If None, no stencil testing is done.",88,null],[12,"blend","","Blend function to use. If None, blending is disabled.",88,null],[8,"Graphics","","Implemented by all graphics back-ends.",null,null],[16,"Texture","","The texture type associated with the back-end.",1,null],[10,"clear_color","","Clears background with a color.",1,null],[10,"clear_stencil","","Clears stencil buffer with a value, usually 0.",1,null],[10,"tri_list","","Renders list of 2d triangles using a solid color.",1,null],[10,"tri_list_uv","","Renders list of 2d triangles using a color and a texture.",1,null],[11,"rectangle","","Draws a rectangle.",1,null],[11,"polygon","","Draws a polygon.",1,null],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",1,null],[11,"image","","Draws image.",1,null],[11,"ellipse","","Draws ellipse.",1,null],[11,"line","","Draws line.",1,null],[11,"circle_arc","","Draws circle arc.",1,null],[11,"deform_image","","Draws deformed image.",1,null],[8,"ImageSize","","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",89,null],[11,"get_width","","Gets the image width.",89,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[11,"get_height","","Gets the image height.",89,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[8,"Transformed","","Implemented by contexts that can transform.",null,null],[10,"append_transform","","Appends transform to the current one.",90,null],[10,"prepend_transform","","Prepends transform to the current one.",90,null],[10,"trans","","Translate x an y in local coordinates.",90,{"inputs":[{"name":"transformed"},{"name":"f64"},{"name":"f64"}],"output":{"name":"self"}}],[11,"rot_deg","","Rotates degrees in local coordinates.",90,{"inputs":[{"name":"transformed"},{"name":"f64"}],"output":{"name":"self"}}],[10,"rot_rad","","Rotate radians in local coordinates.",90,{"inputs":[{"name":"transformed"},{"name":"f64"}],"output":{"name":"self"}}],[10,"orient","","Orients x axis to look at point locally.",90,{"inputs":[{"name":"transformed"},{"name":"f64"},{"name":"f64"}],"output":{"name":"self"}}],[10,"scale","","Scales in local coordinates.",90,{"inputs":[{"name":"transformed"},{"name":"f64"},{"name":"f64"}],"output":{"name":"self"}}],[11,"zoom","","Scales in both directions in local coordinates.",90,{"inputs":[{"name":"transformed"},{"name":"f64"}],"output":{"name":"self"}}],[11,"flip_v","","Flips vertically in local coordinates.",90,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"flip_h","","Flips horizontally in local coordinates.",90,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"flip_hv","","Flips horizontally and vertically in local coordinates.",90,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[10,"shear","","Shears in local coordinates.",90,null],[11,"left","graphics::character","The left offset.",91,{"inputs":[{"name":"character"}],"output":{"name":"f64"}}],[11,"top","","The top offset.",91,{"inputs":[{"name":"character"}],"output":{"name":"f64"}}],[11,"width","","Gets width of character, including space to the next one.",91,{"inputs":[{"name":"character"}],"output":{"name":"f64"}}],[11,"height","","Sets height of character, including space to the next one.",91,{"inputs":[{"name":"character"}],"output":{"name":"f64"}}],[11,"clone","","",91,{"inputs":[{"name":"character"}],"output":{"name":"character"}}],[3,"Character","conrod::backend::graphics","Holds rendered character data.",null,null],[12,"offset","","The offset of character.",91,null],[12,"size","","The size of character, including space.",91,null],[12,"texture","","The texture of the character.",91,null],[8,"CharacterCache","","Stores characters in a buffer and loads them by demand.",null,null],[16,"Texture","","The textyre type associated with the character cache.",0,null],[10,"character","","Get reference to character.",0,{"inputs":[{"name":"charactercache"},{"name":"u32"},{"name":"char"}],"output":{"name":"character"}}],[11,"width","","Return the width for some given text.",0,{"inputs":[{"name":"charactercache"},{"name":"u32"},{"name":"str"}],"output":{"name":"f64"}}],[5,"draw_from_graph","","Draw the given **Graph** using the given **CharacterCache** and **Graphics** backends.",null,null],[5,"draw_from_container","","Use the given **CharacterCache** and **Graphics** backends to draw the given widget.",null,{"inputs":[{"name":"context"},{"name":"g"},{"name":"charactercache"},{"name":"container"},{"name":"theme"}],"output":null}],[5,"conrod_rect_to_graphics_rect","","Converts a conrod `Rect` to a `graphics::types::Rectangle` expected by the Graphics backend.",null,{"inputs":[{"name":"rect"}],"output":{"name":"rectangle"}}],[5,"draw_rectangle","","Draw a rectangle at the given Rect.",null,{"inputs":[{"name":"context"},{"name":"g"},{"name":"rect"},{"name":"color"}],"output":null}],[5,"draw_lines","","Draw a series of lines between the given **Point**s using the given style.",null,{"inputs":[{"name":"context"},{"name":"g"},{"name":"theme"},{"name":"i"},{"name":"style"}],"output":null}],[5,"draw_scrolling","","Draw the scroll bars (if necessary) for the given widget&#39;s scroll state.",null,{"inputs":[{"name":"context"},{"name":"g"},{"name":"rect"},{"name":"option"},{"name":"option"}],"output":null}],[8,"Backend","conrod::backend","A trait to be implemented by all backends to conrod.",null,null],[16,"Texture","","The `Texture` type used by the `Graphics` and `CharacterCache` backends.",92,null],[16,"CharacterCache","","The character cache used by the backend.",92,null],[11,"clone","conrod","",93,{"inputs":[{"name":"background"}],"output":{"name":"background"}}],[11,"new","","Construct a background.",93,{"inputs":[],"output":{"name":"background"}}],[11,"set","","Set the color used clear the background with before drawing widgets.",93,{"inputs":[{"name":"background"},{"name":"ui"}],"output":null}],[11,"color","","",93,{"inputs":[{"name":"background"},{"name":"color"}],"output":{"name":"self"}}],[0,"color","","",null,null],[3,"Hsla","conrod::color","The parts of HSL along with an alpha for transparency.",null,null],[12,"0","","",94,null],[12,"1","","",94,null],[12,"2","","",94,null],[12,"3","","",94,null],[3,"Rgba","","The parts of RGB along with an alpha for transparency.",null,null],[12,"0","","",95,null],[12,"1","","",95,null],[12,"2","","",95,null],[12,"3","","",95,null],[4,"Color","","Color supporting RGB and HSL variants.",null,null],[13,"Rgba","","Red, Green, Blue, Alpha - All values&#39; scales represented between 0.0 and 1.0.",96,null],[13,"Hsla","","Hue, Saturation, Lightness, Alpha - all valuess scales represented between 0.0 and 1.0.",96,null],[4,"Gradient","","Linear or Radial Gradient.",null,null],[13,"Linear","","Takes a start and end point and then a series of color stops that indicate how to\ninterpolate between the start and end points.",97,null],[13,"Radial","","First takes a start point and inner radius. Then takes an end point and outer radius.\nIt then takes a series of color stops that indicate how to interpolate between the\ninner and outer circles.",97,null],[5,"rgba","","Create RGB colors with an alpha component for transparency.\nThe alpha component is specified with numbers between 0 and 1.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgb","","Create RGB colors from numbers between 0.0 and 1.0.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgba_bytes","","Create RGB colors from numbers between 0 and 255 inclusive.\nThe alpha component is specified with numbers between 0 and 1.",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"f32"}],"output":{"name":"color"}}],[5,"rgb_bytes","","Create RGB colors from numbers between 0 and 255 inclusive.",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"color"}}],[5,"hsla","","Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV) with an alpha component for\ntransparency.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"hsl","","Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV). This gives you access to colors\nmore like a color wheel, where all hues are arranged in a circle that you specify with radians.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[5,"grayscale","","Produce a gray based on the input. 0.0 is white, 1.0 is black.",null,{"inputs":[{"name":"f32"}],"output":{"name":"color"}}],[5,"greyscale","","Produce a gray based on the input. 0.0 is white, 1.0 is black.",null,{"inputs":[{"name":"f32"}],"output":{"name":"color"}}],[5,"random","","Construct a random color.",null,{"inputs":[],"output":{"name":"color"}}],[5,"f32_to_byte","","Convert an f32 color to a byte.",null,{"inputs":[{"name":"f32"}],"output":{"name":"u8"}}],[5,"rgb_to_hsl","","Pure function for converting rgb to hsl.",null,null],[5,"hsl_to_rgb","","Pure function for converting hsl to rgb.",null,null],[5,"linear","","Create a linear gradient.",null,null],[5,"radial","","Create a radial gradient.",null,null],[6,"Colour","","Regional spelling alias.",null,null],[17,"LIGHT_RED","","Scarlet Red - Light - #EF2929",null,null],[17,"RED","","Scarlet Red - Regular - #CC0000",null,null],[17,"DARK_RED","","Scarlet Red - Dark - #A30000",null,null],[17,"LIGHT_ORANGE","","Orange - Light - #FCAF3E",null,null],[17,"ORANGE","","Orange - Regular - #F57900",null,null],[17,"DARK_ORANGE","","Orange - Dark - #CE5C00",null,null],[17,"LIGHT_YELLOW","","Butter - Light - #FCE94F",null,null],[17,"YELLOW","","Butter - Regular - #EDD400",null,null],[17,"DARK_YELLOW","","Butter - Dark - #C4A000",null,null],[17,"LIGHT_GREEN","","Chameleon - Light - #8AE234",null,null],[17,"GREEN","","Chameleon - Regular - #73D216",null,null],[17,"DARK_GREEN","","Chameleon - Dark - #4E9A06",null,null],[17,"LIGHT_BLUE","","Sky Blue - Light - #729FCF",null,null],[17,"BLUE","","Sky Blue - Regular - #3465A4",null,null],[17,"DARK_BLUE","","Sky Blue - Dark - #204A87",null,null],[17,"LIGHT_PURPLE","","Plum - Light - #AD7FA8",null,null],[17,"PURPLE","","Plum - Regular - #75507B",null,null],[17,"DARK_PURPLE","","Plum - Dark - #5C3566",null,null],[17,"LIGHT_BROWN","","Chocolate - Light - #E9B96E",null,null],[17,"BROWN","","Chocolate - Regular - #C17D11",null,null],[17,"DARK_BROWN","","Chocolate - Dark - #8F5902",null,null],[17,"BLACK","","Straight Black.",null,null],[17,"WHITE","","Straight White.",null,null],[17,"LIGHT_GRAY","","Alluminium - Light",null,null],[17,"GRAY","","Alluminium - Regular",null,null],[17,"DARK_GRAY","","Alluminium - Dark",null,null],[17,"LIGHT_GREY","","Aluminium - Light - #EEEEEC",null,null],[17,"GREY","","Aluminium - Regular - #D3D7CF",null,null],[17,"DARK_GREY","","Aluminium - Dark - #BABDB6",null,null],[17,"LIGHT_CHARCOAL","","Charcoal - Light - #888A85",null,null],[17,"CHARCOAL","","Charcoal - Regular - #555753",null,null],[17,"DARK_CHARCOAL","","Charcoal - Dark - #2E3436",null,null],[17,"TRANSPARENT","","Transparent",null,null],[8,"Colorable","","Types that can be colored.",null,null],[10,"color","","Set the color of the widget.",98,{"inputs":[{"name":"colorable"},{"name":"color"}],"output":{"name":"self"}}],[11,"rgba","","Set the color of the widget from rgba values.",98,{"inputs":[{"name":"colorable"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"rgb","","Set the color of the widget from rgb values.",98,{"inputs":[{"name":"colorable"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"hsla","","Set the color of the widget from hsla values.",98,{"inputs":[{"name":"colorable"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"hsl","","Set the color of the widget from hsl values.",98,{"inputs":[{"name":"colorable"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"fmt","","",96,{"inputs":[{"name":"color"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"eq","","",96,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"complement","","Produce a complementary color. The two colors will accent each other. This is the same as\nrotating the hue by 180 degrees.",96,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"luminance","","Calculate and return the luminance of the Color.",96,{"inputs":[{"name":"color"}],"output":{"name":"f32"}}],[11,"plain_contrast","","Return either black or white, depending which contrasts the Color the most. This will be\nuseful for determining a readable color for text on any given background Color.",96,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"to_hsl","","Extract the components of a color in the HSL format.",96,{"inputs":[{"name":"color"}],"output":{"name":"hsla"}}],[11,"to_rgb","","Extract the components of a color in the RGB format.",96,{"inputs":[{"name":"color"}],"output":{"name":"rgba"}}],[11,"to_fsa","","Extract the components of a color in the RGB format within a fixed-size array.",96,null],[11,"to_byte_fsa","","Same as `to_fsa`, except r, g, b and a are represented in byte form.",96,null],[11,"with_luminance","","Return the same color but with the given luminance.",96,{"inputs":[{"name":"color"},{"name":"f32"}],"output":{"name":"color"}}],[11,"alpha","","Return the same color but with the alpha multiplied by the given alpha.",96,{"inputs":[{"name":"color"},{"name":"f32"}],"output":{"name":"color"}}],[11,"with_alpha","","Return the same color but with the given alpha.",96,{"inputs":[{"name":"color"},{"name":"f32"}],"output":{"name":"color"}}],[11,"highlighted","","Return a highlighted version of the current Color.",96,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"clicked","","Return a clicked version of the current Color.",96,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"invert","","Return the Color&#39;s invert.",96,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"red","","Return the red value.",96,{"inputs":[{"name":"color"}],"output":{"name":"f32"}}],[11,"green","","Return the green value.",96,{"inputs":[{"name":"color"}],"output":{"name":"f32"}}],[11,"blue","","Return the blue value.",96,{"inputs":[{"name":"color"}],"output":{"name":"f32"}}],[11,"set_red","","Set the red value.",96,{"inputs":[{"name":"color"},{"name":"f32"}],"output":null}],[11,"set_green","","Set the green value.",96,{"inputs":[{"name":"color"},{"name":"f32"}],"output":null}],[11,"set_blue","","Set the blue value.",96,{"inputs":[{"name":"color"},{"name":"f32"}],"output":null}],[11,"fmt","","",94,{"inputs":[{"name":"hsla"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"hsla"}],"output":{"name":"hsla"}}],[11,"fmt","","",95,{"inputs":[{"name":"rgba"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"fmt","","",97,{"inputs":[{"name":"gradient"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"gradient"}],"output":{"name":"gradient"}}],[11,"clone","conrod","",51,{"inputs":[{"name":"framing"}],"output":{"name":"framing"}}],[0,"glyph_cache","","Conrod&#39;s character caching API.",null,null],[3,"GlyphCache","conrod::glyph_cache","A wrapper over some CharacterCache, exposing it&#39;s functionality via a RefCell.",null,null],[3,"CharWidths","","An iterator yielding the widths of each consecutive character in some sequence.",null,null],[3,"CharXs","","An iterator that converts the given sequnce of `char`s into their consecutive positions along\nthe x-axis.",null,null],[3,"Widths","","An iterator yielding the widths of each consecutive `&amp;str` in some sequence.",null,null],[3,"LineBreaksBy","","An iterator that yields the indices at which some text should wrap in accordance with the given\nwrap function.",null,null],[3,"Lines","","A wrapper over an iterator yielding **LineBreak**s that yields each line divided by the breaks.",null,null],[4,"LineBreak","","The two types of **LineBreak** indices returned by the **WrapIndicesBy** iterators.",null,null],[13,"Wrap","","The first `usize` is an index at which the string should wrap due to exceeding a maximum\nwidth.",99,null],[13,"Newline","","An index at which the string breaks due to a newline character, along with the width of the\n&quot;newline&quot; token in bytes.",99,null],[6,"X","","Some position along the X axis (used within `CharXs`).",null,null],[6,"HalfW","","The half of the width of some character (used within `CharXs`).",null,null],[6,"NextLineBreakFn","","A function that returns the first index at which the text should wrap for the given max width.",null,null],[6,"LineBreaksByCharacter","","An iterator that yields the indices at which some text should wrap via a character.",null,null],[6,"LineBreaksByWhitespace","","An iterator that yields the indices at which some text should wrap via whitespace.",null,null],[6,"LinesWrappedBy","","An iterator yielding lines for text wrapped with the given function.",null,null],[6,"LinesWrappedByCharacter","","An iterator yielding lines for text wrapped via the first character exceeding a max width.",null,null],[6,"LinesWrappedByWhitespace","","An iterator yielding lines for text wrapped via the first character exceeding a max width.",null,null],[11,"clone","","",100,{"inputs":[{"name":"charwidths"}],"output":{"name":"charwidths"}}],[11,"clone","","",101,{"inputs":[{"name":"charxs"}],"output":{"name":"charxs"}}],[11,"clone","","",102,{"inputs":[{"name":"widths"}],"output":{"name":"widths"}}],[11,"eq","","",99,{"inputs":[{"name":"linebreak"},{"name":"linebreak"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"linebreak"},{"name":"linebreak"}],"output":{"name":"bool"}}],[11,"fmt","","",99,{"inputs":[{"name":"linebreak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"linebreak"}],"output":{"name":"linebreak"}}],[11,"clone","","",103,{"inputs":[{"name":"linebreaksby"}],"output":{"name":"linebreaksby"}}],[11,"new","","Construct a new **GlyphCache**.",104,{"inputs":[{"name":"c"}],"output":{"name":"self"}}],[11,"char_width","","The width of a single character with the given size.",104,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"char"}],"output":{"name":"scalar"}}],[11,"char_widths","","Converts the given sequence of `char`s into their Scalar widths.",104,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"i"}],"output":{"name":"charwidths"}}],[11,"char_xs","","Converts the given sequnce of `char`s into their consecutive positions along the x-axis.",104,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"scalar"},{"name":"i"}],"output":{"name":"charxs"}}],[11,"width","","Return the width of the given text.",104,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"str"}],"output":{"name":"scalar"}}],[11,"widths","","Converts the given sequence of `&amp;str`s into their Scalar widths.",104,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"i"}],"output":{"name":"widths"}}],[11,"line_breaks_by","","An iterator that yields the indices at which some text should wrap in accordance with the\ngiven wrap function.",104,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"str"},{"name":"scalar"},{"name":"f"}],"output":{"name":"linebreaksby"}}],[11,"line_breaks_by_character","","An iterator that yields the indices at which some text should wrap via a character.",104,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"str"},{"name":"scalar"}],"output":{"name":"linebreaksbycharacter"}}],[11,"line_breaks_by_whitespace","","An iterator that yields the indices at which some text should wrap via whitespace.",104,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"str"},{"name":"scalar"}],"output":{"name":"linebreaksbywhitespace"}}],[11,"lines_wrapped_by","","An iterator that behaves the same as `text.lines()` but inserts a break before the first\ncharacter that would cause the line to exceed the given `max_width`.",104,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"str"},{"name":"scalar"},{"name":"f"}],"output":{"name":"lineswrappedby"}}],[11,"lines_wrapped_by_character","","An iterator that behaves the same as `text.lines()` but inserts a break before the first\ncharacter that would cause the line to exceed the given `max_width`.",104,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"str"},{"name":"scalar"}],"output":{"name":"lineswrappedbycharacter"}}],[11,"lines_wrapped_by_whitespace","","An iterator that behaves the same as `text.lines()` but inserts a break before the first\ncharacter that would cause the line to exceed the given `max_width`.",104,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"str"},{"name":"scalar"}],"output":{"name":"lineswrappedbywhitespace"}}],[11,"new","core::cell","Creates a new `RefCell` containing `value`.",105,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",105,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",105,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",105,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",105,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",105,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"fmt","","",105,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"refcell"}}],[11,"clone","","",105,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"deref","conrod::glyph_cache","",104,{"inputs":[{"name":"glyphcache"}],"output":{"name":"refcell"}}],[11,"deref_mut","","",104,{"inputs":[{"name":"glyphcache"}],"output":{"name":"refcell"}}],[11,"next","","",100,{"inputs":[{"name":"charwidths"}],"output":{"name":"option"}}],[11,"next","","",102,{"inputs":[{"name":"widths"}],"output":{"name":"option"}}],[11,"next","","",101,{"inputs":[{"name":"charxs"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"linebreaksby"}],"output":{"name":"option"}}],[11,"next","","",106,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"index","","Extracts the index at which the break occurs within the text (i.e. the index following the\nlast byte of the line).",99,{"inputs":[{"name":"linebreak"}],"output":{"name":"usize"}}],[11,"next_by_character","","Returns the next index at which the text will break by either:\n- A newline character.\n- A line wrap at the beginning of the first character exceeding the `max_width`.",99,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"str"},{"name":"scalar"}],"output":{"name":"option"}}],[11,"next_by_whitespace","","Returns the next index at which the text will break by either:\n- A newline character.\n- A line wrap at the beginning of the whitespace that preceeds the first word exceeding the\n`max_width`.",99,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"str"},{"name":"scalar"}],"output":{"name":"option"}}],[11,"new","","Construct a new **Lines** iterator from the given text and line_breaks.",106,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"self"}}],[0,"graph","conrod","Conrod uses a directed acyclic graph to manage both storing widgets and describing their\nrelationships.",null,null],[8,"Walker","conrod::graph","A trait providing a variety of useful methods for traversing some graph type **G**.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",107,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given\n**Graph**.",107,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_edge","","The next edge in our walk for the given **Graph**.",107,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_node","","The next node in our walk for the given **Graph**.",107,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"count","","Counts all the steps in the entire walk of the given graph.",107,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"usize"}}],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",107,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",107,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",107,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"nth","","Walks &quot;n&quot; number of steps and produces the resulting edge node pair.",107,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_edge","","Walks &quot;n&quot; number of steps and produces the resulting edge.",107,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_node","","Walks &quot;n&quot; number of steps and produces the resulting node.",107,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",107,{"inputs":[{"name":"walker"},{"name":"o"}],"output":{"name":"chain"}}],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker.\nThe only elements that will be yielded are those that make the predicate evaluate to true.",107,{"inputs":[{"name":"walker"},{"name":"p"}],"output":{"name":"filter"}}],[11,"peekable","","Creates a walker that has a `.peek(&amp;graph)` method that returns an optional next neighbor.",107,{"inputs":[{"name":"walker"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the\npredicate returns false, that element and all further elements are yielded.",107,{"inputs":[{"name":"walker"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the\npredicate returns false for the first time, no further elements will be yielded.",107,{"inputs":[{"name":"walker"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further\nsteps.",107,{"inputs":[{"name":"walker"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates a walker that yields the first n steps of this walk.",107,{"inputs":[{"name":"walker"},{"name":"usize"}],"output":{"name":"take"}}],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",107,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",107,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",107,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",107,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_node","","Returns the node index satisfying the specified predicate.",107,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"cycle","","Repeats the walker endlessly.",107,{"inputs":[{"name":"walker"}],"output":{"name":"cycle"}}],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end\nof the walk.",107,{"inputs":[{"name":"walker"},{"name":"b"},{"name":"g"},{"name":"f"}],"output":{"name":"b"}}],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding\nthem. This is often useful for debugging a walker pipeline.",107,{"inputs":[{"name":"walker"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"iter","","Converts the walker into an iterator yielding index pairs.",107,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"iter"}}],[11,"iter_weights","","Converts the walker into an iterator yielding `(&amp;e, &amp;n)`, where `e` is the edge weight for\nthe next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",107,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"iterweights"}}],[3,"UniqueWidgetState","","The state type that we&#39;ll dynamically cast to and from `Any` for storage within the cache.",null,null],[12,"state","","A **Widget**&#39;s unique &quot;State&quot;.",108,null],[12,"style","","A **Widget**&#39;s unique &quot;Style&quot;.",108,null],[3,"Container","","A container for caching a Widget&#39;s state inside a Graph Node.",null,null],[12,"maybe_state","","Dynamically stored widget state.",109,null],[12,"kind","","A unique widget kind identifier.",109,null],[12,"rect","","The rectangle describing the Widget&#39;s area.",109,null],[12,"depth","","The depth at which the widget will be rendered comparatively to its siblings.",109,null],[12,"drag_state","","The drag state of the Widget.",109,null],[12,"kid_area","","The area in which child widgets are placed.",109,null],[12,"maybe_floating","","Whether or not the widget is a &quot;Floating&quot; widget.",109,null],[12,"maybe_x_scroll_state","","Scroll related state (is only `Some` if this axis is scrollable).",109,null],[12,"maybe_y_scroll_state","","Scroll related state (is only `Some` if this axis is scrollable).",109,null],[12,"instantiation_order_idx","","Represents the Widget&#39;s position within the overall instantiation ordering of the widgets.",109,null],[3,"Graph","","Stores the dynamic state of a UI tree of Widgets.",null,null],[4,"Node","","A node for use within the **Graph**.",null,null],[13,"Widget","","A widget constructed by a user.",110,null],[13,"Placeholder","","A placeholder node - used when reserving a place for a **Widget** within the **Graph**.",110,null],[4,"Edge","","An edge between nodes within the UI Graph.",null,null],[13,"Position","","Describes the relative positioning of widgets.",111,null],[13,"Depth","","Describes the rendering order of the widgets.",111,null],[13,"Graphic","","Describes when a widget is used solely as a graphical element for another widget.",111,null],[0,"algo","","This module was created in order to keep the `graph` module clean and focused upon the\n**Graph** data structure behaviour.",null,null],[5,"cropped_area_of_widget","conrod::graph::algo","The rectangle that represents the maximum visible area for the widget with the given index.",null,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[5,"cropped_area_of_widget_within_depth","","The rectangle that represents the maximum visible area for the widget with the given index.",null,{"inputs":[{"name":"graph"},{"name":"i"},{"name":"nodeindex"}],"output":{"name":"option"}}],[5,"pick_widget","","If the given Point is currently on a Widget, return an index to that widget.",null,null],[5,"pick_scrollable_widget","","If the given **Point** is currently over a scrollable widget, return an index to that widget.",null,null],[5,"kids_bounding_box","","Find the absolute `Rect` that bounds all widgets that are `Depth` children of the widget at the\ngiven `idx`.",null,{"inputs":[{"name":"graph"},{"name":"hashset"},{"name":"i"}],"output":{"name":"option"}}],[5,"scroll_offset","","Return the `scroll_offset` for the widget at the given index.",null,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"point"}}],[0,"depth_order","conrod::graph","Types and functionality related to the calculation of a **Graph**&#39;s rendering depth order.",null,null],[3,"DepthOrder","conrod::graph::depth_order","Contains Node indices in order of depth, starting with the deepest.",null,null],[12,"indices","","The primary **Vec** storing the **DepthOrder**&#39;s ordered indices.",112,null],[4,"Visitable","","Parts of the graph that are significant when visiting and sorting by depth.",null,null],[13,"Widget","","The index of some widget in the graph.",113,null],[13,"Scrollbar","","The scrollbar for the widget at the given NodeIndex.",113,null],[11,"eq","","",113,{"inputs":[{"name":"visitable"},{"name":"visitable"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"visitable"},{"name":"visitable"}],"output":{"name":"bool"}}],[11,"fmt","","",113,{"inputs":[{"name":"visitable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"visitable"}],"output":{"name":"visitable"}}],[11,"new","","Construct a new empty **DepthOrder**.",112,{"inputs":[],"output":{"name":"depthorder"}}],[11,"with_node_capacity","","Construct a new empty **DepthOrder**.",112,{"inputs":[{"name":"usize"}],"output":{"name":"depthorder"}}],[11,"update","","Update the **DepthOrder** (starting with the deepest) for all nodes in the given **Graph**.",112,{"inputs":[{"name":"depthorder"},{"name":"graph"},{"name":"nodeindex"},{"name":"hashset"},{"name":"option"},{"name":"option"}],"output":null}],[11,"to_widget_id","conrod","",48,{"inputs":[{"name":"widgetid"},{"name":"indexmap"}],"output":{"name":"option"}}],[11,"to_node_index","","",48,{"inputs":[{"name":"widgetid"},{"name":"indexmap"}],"output":{"name":"option"}}],[11,"from_idx","","",48,{"inputs":[{"name":"i"},{"name":"indexmap"}],"output":{"name":"option"}}],[11,"to_node_index","","Coerce a widget::Index into an Option&lt;NodeIndex&gt;.\nIf the Index is the Internal variant, that idx will be used directly.\nIf the Index is the Public variant, the index_map will be used to find the matching\nNodeIndex.",62,{"inputs":[{"name":"widgetindex"},{"name":"indexmap"}],"output":{"name":"option"}}],[11,"to_widget_id","","Coerce a widget::Index into an Option&lt;WidgetId&gt;.\nIf the Index is the Public variant, that id will be used directly.\nIf the Index is the Internal variant, the index_map will be used to find the matching\nWidgetId.",62,{"inputs":[{"name":"widgetindex"},{"name":"indexmap"}],"output":{"name":"option"}}],[11,"from_idx","","Construct a widget::Index from some GraphIndex.\nFirst tries to construct a Public variant by checking the IndexMap for a matching WidgetId.\nIf not WidgetId is found, then tries to find a matching NodeIndex.",62,{"inputs":[{"name":"i"},{"name":"indexmap"}],"output":{"name":"option"}}],[6,"NodeIndex","conrod::graph","An alias for our Graph&#39;s Node Index.",null,null],[6,"EdgeIndex","","An alias for our Graph&#39;s Edge Index.",null,null],[6,"IndexPair","","An alias for a tuple containing an associated `Edge/NodeIndex` pair.",null,null],[6,"Parents","","A **Walker** over some node&#39;s parent nodes.",null,null],[6,"Children","","A **Walker** over some node&#39;s child nodes.",null,null],[6,"PositionParents","","An alias for the iterator yielding both **X** and **Y** **Position** parents.",null,null],[6,"FilteredChildren","","An alias for some filtered children walker.",null,null],[6,"DepthChildren","","An alias for a **Walker** over a node&#39;s **Depth** children.",null,null],[6,"XPositionChildren","","An alias for a **Walker** over a node&#39;s **X Position** children.",null,null],[6,"YPositionChildren","","An alias for a **Walker** over a node&#39;s **Y Position** children.",null,null],[6,"PositionChildren","","An alias for a **Walker** over a node&#39;s **X** and **Y** **Position** children respectively.",null,null],[6,"GraphicChildren","","An alias for a **Walker** over a node&#39;s **Graphic** children.",null,null],[6,"RecursiveWalk","","An alias for our Graph&#39;s recursive walker.",null,null],[6,"WouldCycle","","An alias for our Graph&#39;s **WouldCycle** error type.",null,null],[17,"NUM_EDGE_VARIANTS","","The number of different variants within the **Edge** enum.",null,null],[8,"GraphIndex","","A trait for being generic over both WidgetId and NodeIndex.\nEach method should only return `Some` if they are contained as a key within the given IndexMap.",null,null],[10,"to_widget_id","","If not one already, convert Self to a WidgetId if it exists within the IndexMap.",114,{"inputs":[{"name":"graphindex"},{"name":"indexmap"}],"output":{"name":"option"}}],[10,"to_node_index","","If not one already, convert Self to a NodeIndex if it exists within the IndexMap.",114,{"inputs":[{"name":"graphindex"},{"name":"indexmap"}],"output":{"name":"option"}}],[10,"from_idx","","Convert some GraphIndex type to Self.",114,{"inputs":[{"name":"i"},{"name":"indexmap"}],"output":{"name":"option"}}],[11,"fmt","","",108,{"inputs":[{"name":"uniquewidgetstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"container"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"node"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"edge"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"edge"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"fmt","","",111,{"inputs":[{"name":"edge"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"edge"}],"output":{"name":"edge"}}],[11,"fmt","","",115,{"inputs":[{"name":"graph"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"state_and_style","","Borrow the **Container**&#39;s unique widget State and Style if there is any.",109,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"unique_widget_state","","Same as [**Container::state_and_style**](./struct.Container#method.state_and_style) but\naccessed using a **Widget** type parameter instead of the unique State and Style types.",109,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"take_unique_widget_state","","A method for taking only the unique state from the container.",109,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"take_widget_state","","Take the widget state from the container and cast it to type W.",109,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"is_widget","","Whether or not the **Node** is of the **Widget** variant.",110,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"new","","A new empty **Graph**.",115,{"inputs":[],"output":{"name":"self"}}],[11,"with_node_capacity","","A new **Graph** with the given node capacity.",115,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Removes all **Node**s and **Edge**s from the **Graph**.",115,{"inputs":[{"name":"graph"}],"output":null}],[11,"node_count","","The total number of **Node**s in the **Graph**.",115,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[11,"widget_count","","The total number of **Node::Widget**s in the **Graph**.",115,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[11,"edge_count","","The total number of **Edge**s in the **Graph**.",115,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[11,"node_capacity","","The current capacity for the **Graph**&#39;s internal node `Vec`.",115,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[11,"convert_idx","","Converts the given **GraphIndex** into an index of type **J**.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"node_index","","Get the **NodeIndex** for the given **GraphIndex**.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"widget_id","","Get the **WidgetId** for the given **GraphIndex**.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"widget_index","","Get the **widget::Index** for the given **GraphIndex**.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"add_placeholder","","Add a new placeholder node and return it&#39;s `NodeIndex` into the `Graph`.",115,{"inputs":[{"name":"graph"}],"output":{"name":"nodeindex"}}],[11,"node","","Borrow the node at the given **GraphIndex** if there is one.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"node_mut","","Mutably borrow the node at the given **GraphIndex** if there is one.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"edge","","Borrow the edge at the given **EdgeIndex** if there is one.",115,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_mut","","Mutably borrow the edge at the given **EdgeIndex** if there is one.",115,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Return the parent and child nodes on either end of the **Edge** at the given index.",115,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"widget","","If there is a Widget for the given index, return a reference to it.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"widget_mut","","If there is a Widget for the given Id, return a mutable reference to it.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"parents","","A **Walker** type that may be used to step through the parents of the given child node.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"parents"}}],[11,"recursive_walk","","A **Walker** type that recursively walks the **Graph** using the given `recursive_fn`.",115,{"inputs":[{"name":"graph"},{"name":"i"},{"name":"f"}],"output":{"name":"recursivewalk"}}],[11,"edge_parent","","If the widget at the given index has some parent along an **Edge** of the given variant,\nreturn an index to it.",115,{"inputs":[{"name":"graph"},{"name":"i"},{"name":"edge"}],"output":{"name":"option"}}],[11,"depth_parent","","Return the index of the parent along the given widget&#39;s **Depth** **Edge**.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"x_position_parent","","Return the index of the parent along the given widget&#39;s **Position** **Edge**.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"y_position_parent","","Return the index of the parent along the given widget&#39;s **Position** **Edge**.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"position_parents","","Produces an iterator yielding the parents along both the **X** and **Y** **Position**\n**Edge**s respectively.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"positionparents"}}],[11,"graphic_parent","","Return the index of the parent along the given widget&#39;s **Graphic** **Edge**.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"option"}}],[11,"depth_parent_recursion","","A **Walker** type that recursively walks **Depth** parents starting from the given node.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"recursivewalk"}}],[11,"x_position_parent_recursion","","A **Walker** type that recursively walks **X** **Position** parents starting from the given\nnode.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"recursivewalk"}}],[11,"y_position_parent_recursion","","A **Walker** type that recursively walks **Y** **Position** parents starting from the given\nnode.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"recursivewalk"}}],[11,"graphic_parent_recursion","","A **Walker** type that recursively walks **Graphic** parents starting from the given node.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"recursivewalk"}}],[11,"children","","A **Walker** type that may be used to step through the children of the given parent node.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"children"}}],[11,"depth_children","","For walking the **Depth** children of the given parent node.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"depthchildren"}}],[11,"x_position_children","","For walking the **Position(X)** children of the given parent node.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"xpositionchildren"}}],[11,"y_position_children","","For walking the **Position(Y)** children of the given parent node.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"ypositionchildren"}}],[11,"position_children","","For walking the **Position** children of the given parent node.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"positionchildren"}}],[11,"graphic_children","","For walking the **Graphic** children of the given parent node.",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"graphicchildren"}}],[11,"does_edge_exist","","Does the given edge type exist between the nodes `parent` -&gt; `child`.",115,{"inputs":[{"name":"graph"},{"name":"p"},{"name":"c"},{"name":"f"}],"output":{"name":"bool"}}],[11,"does_depth_edge_exist","","Does a **Edge::Depth** exist between the nodes `parent` -&gt; `child`.",115,{"inputs":[{"name":"graph"},{"name":"p"},{"name":"c"}],"output":{"name":"bool"}}],[11,"does_position_edge_exist","","Does a **Edge::Position** exist between the nodes `parent` -&gt; `child`.",115,{"inputs":[{"name":"graph"},{"name":"p"},{"name":"c"}],"output":{"name":"bool"}}],[11,"does_graphic_edge_exist","","Does a **Edge::Graphic** exist between the nodes `parent` -&gt; `child`.",115,{"inputs":[{"name":"graph"},{"name":"p"},{"name":"c"}],"output":{"name":"bool"}}],[11,"does_recursive_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of edges of the given\nkind?",115,{"inputs":[{"name":"graph"},{"name":"p"},{"name":"c"},{"name":"f"}],"output":{"name":"bool"}}],[11,"does_recursive_depth_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of **Depth** edges?",115,{"inputs":[{"name":"graph"},{"name":"p"},{"name":"c"}],"output":{"name":"bool"}}],[11,"does_recursive_graphic_edge_exist","","Are the given `parent` and `child` nodes connected by a single chain of **Graphic** edges?",115,{"inputs":[{"name":"graph"},{"name":"p"},{"name":"c"}],"output":{"name":"bool"}}],[11,"pre_update_cache","","Cache some `PreUpdateCache` widget data into the graph.",115,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"preupdatecache"},{"name":"usize"}],"output":null}],[11,"post_update_cache","","Cache some `PostUpdateCache` widget data into the graph.",115,{"inputs":[{"name":"graph"},{"name":"postupdatecache"}],"output":null}],[11,"next","","",116,{"inputs":[{"name":"children"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next","","",117,{"inputs":[{"name":"parents"},{"name":"graph"}],"output":{"name":"option"}}],[11,"index","","",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"node"}}],[11,"index_mut","","",115,{"inputs":[{"name":"graph"},{"name":"i"}],"output":{"name":"node"}}],[11,"index","","",115,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[11,"index_mut","","",115,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[0,"guide","conrod","**The Conrod Guide**",null,null],[0,"chapter_1","conrod::guide","**What is Conrod?**",null,null],[0,"chapter_2","","**Getting Started**",null,null],[11,"fmt","conrod","",34,{"inputs":[{"name":"mousebuttonstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"mousebuttonstate"}],"output":{"name":"buttonstate"}}],[11,"eq","","",52,{"inputs":[{"name":"mousebuttonposition"},{"name":"buttonposition"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"mousebuttonposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"mousebuttonposition"}],"output":{"name":"buttonposition"}}],[11,"fmt","","",33,{"inputs":[{"name":"mouse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"mouse"}],"output":{"name":"mouse"}}],[11,"fmt","","",35,{"inputs":[{"name":"mousescroll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"mousescroll"}],"output":{"name":"scroll"}}],[11,"new","","Constructor for a default ButtonState.",34,{"inputs":[],"output":{"name":"buttonstate"}}],[11,"reset_pressed_and_released","","Reset the `was_just_released` and `was_just_pressed` flags.",34,{"inputs":[{"name":"mousebuttonstate"}],"output":null}],[11,"new","","Constructor for a default Mouse struct.",33,{"inputs":[],"output":{"name":"mouse"}}],[11,"relative_to","","Return the mouse state with its position relative to the given position.",33,{"inputs":[{"name":"mouse"},{"name":"point"}],"output":{"name":"mouse"}}],[11,"eq","","",37,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",58,{"inputs":[{"name":"edge"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"edge"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"edge"}],"output":{"name":"edge"}}],[11,"new","","Construct a new `Range` from a given range, i.e. `Range::new(start, end)`.",37,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"from_pos_and_len","","Construct a new `Range` from a given length and its centered position.",37,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"magnitude","","The `start` value subtracted from the `end` value.",37,{"inputs":[{"name":"range"}],"output":{"name":"scalar"}}],[11,"len","","The absolute length of the Range aka the absolute magnitude.",37,{"inputs":[{"name":"range"}],"output":{"name":"scalar"}}],[11,"middle","","Return the value directly between the start and end values.",37,{"inputs":[{"name":"range"}],"output":{"name":"scalar"}}],[11,"invert","","The current range with its start and end values swapped.",37,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"map_value_to","","Map the given Scalar from `Self` to some other given `Range`.",37,{"inputs":[{"name":"range"},{"name":"scalar"},{"name":"range"}],"output":{"name":"scalar"}}],[11,"shift","","Shift the `Range` start and end points by a given `Scalar`.",37,{"inputs":[{"name":"range"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"direction","","The direction of the Range represented as a normalised scalar.",37,{"inputs":[{"name":"range"}],"output":{"name":"scalar"}}],[11,"undirected","","Converts the Range to an undirected Range. By ensuring that `start` &lt;= `end`.",37,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"max","","The Range that encompasses both self and the given Range.",37,{"inputs":[{"name":"range"},{"name":"self"}],"output":{"name":"range"}}],[11,"overlap","","The Range that represents the range of the overlap between two Ranges if there is some.",37,{"inputs":[{"name":"range"},{"name":"self"}],"output":{"name":"option"}}],[11,"max_directed","","The Range that encompasses both self and the given Range.",37,{"inputs":[{"name":"range"},{"name":"self"}],"output":{"name":"range"}}],[11,"is_over","","Is the given scalar within our range.",37,{"inputs":[{"name":"range"},{"name":"scalar"}],"output":{"name":"bool"}}],[11,"round","","Round the values at both ends of the Range and return the result.",37,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"floor","","Floor the values at both ends of the Range and return the result.",37,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"pad_start","","The Range with some padding given to the `start` value.",37,{"inputs":[{"name":"range"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad_end","","The Range with some padding given to the `end` value.",37,{"inputs":[{"name":"range"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad","","The Range with some given padding to be applied to each end.",37,{"inputs":[{"name":"range"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"pad_ends","","The Range with some padding given for each end.",37,{"inputs":[{"name":"range"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"clamp_value","","Clamp the given value to the range.",37,{"inputs":[{"name":"range"},{"name":"scalar"}],"output":{"name":"scalar"}}],[11,"stretch_to_value","","Stretch the end that is closest to the given value only if it lies outside the Range.",37,{"inputs":[{"name":"range"},{"name":"scalar"}],"output":{"name":"range"}}],[11,"has_same_direction","","Does `self` have the same direction as `other`.",37,{"inputs":[{"name":"range"},{"name":"self"}],"output":{"name":"bool"}}],[11,"align_start_of","","Align the `start` of `self` to the `start` of the `other` **Range**.",37,{"inputs":[{"name":"range"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_end_of","","Align the `end` of `self` to the `end` of the `other` **Range**.",37,{"inputs":[{"name":"range"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_of","","Align the middle of `self` to the middle of the `other` **Range**.",37,{"inputs":[{"name":"range"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_after","","Aligns the `start` of `self` with the `end` of `other`.",37,{"inputs":[{"name":"range"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_before","","Aligns the `end` of `self` with the `start` of `other`.",37,{"inputs":[{"name":"range"},{"name":"self"}],"output":{"name":"self"}}],[11,"closest_edge","","The closest **Edge** of `self` to the given `scalar`.",37,{"inputs":[{"name":"range"},{"name":"scalar"}],"output":{"name":"edge"}}],[11,"eq","","",38,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"eq","","",55,{"inputs":[{"name":"corner"},{"name":"corner"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"corner"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"corner"}],"output":{"name":"corner"}}],[11,"from_xy_dim","","Construct a Rect from a given `Point` and `Dimensions`.",38,{"inputs":[{"name":"point"},{"name":"dimensions"}],"output":{"name":"self"}}],[11,"from_corners","","Construct a Rect from the coordinates of two points.",38,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"overlap","","The Rect representing the area in which two Rects overlap.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"option"}}],[11,"max","","The Rect that encompass the two given sets of Rect.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"x","","The position in the middle of the x bounds.",38,{"inputs":[{"name":"rect"}],"output":{"name":"scalar"}}],[11,"y","","The position in the middle of the y bounds.",38,{"inputs":[{"name":"rect"}],"output":{"name":"scalar"}}],[11,"xy","","The xy position in the middle of the bounds.",38,{"inputs":[{"name":"rect"}],"output":{"name":"point"}}],[11,"x_y","","The centered x and y coordinates as a tuple.",38,null],[11,"w","","The width of the Rect.",38,{"inputs":[{"name":"rect"}],"output":{"name":"scalar"}}],[11,"h","","The height of the Rect.",38,{"inputs":[{"name":"rect"}],"output":{"name":"scalar"}}],[11,"dim","","The total dimensions of the Rect.",38,{"inputs":[{"name":"rect"}],"output":{"name":"dimensions"}}],[11,"w_h","","The width and height of the Rect as a tuple.",38,null],[11,"xy_dim","","Convert the Rect to a `Point` and `Dimensions`.",38,null],[11,"x_y_w_h","","The Rect&#39;s centered coordinates and dimensions in a tuple.",38,null],[11,"len","","The length of the longest side of the rectangle.",38,{"inputs":[{"name":"rect"}],"output":{"name":"scalar"}}],[11,"bottom","","The Rect&#39;s lowest y value.",38,{"inputs":[{"name":"rect"}],"output":{"name":"scalar"}}],[11,"top","","The Rect&#39;s highest y value.",38,{"inputs":[{"name":"rect"}],"output":{"name":"scalar"}}],[11,"left","","The Rect&#39;s lowest x value.",38,{"inputs":[{"name":"rect"}],"output":{"name":"scalar"}}],[11,"right","","The Rect&#39;s highest x value.",38,{"inputs":[{"name":"rect"}],"output":{"name":"scalar"}}],[11,"top_left","","The top left corner **Point**.",38,{"inputs":[{"name":"rect"}],"output":{"name":"point"}}],[11,"bottom_left","","The bottom left corner **Point**.",38,{"inputs":[{"name":"rect"}],"output":{"name":"point"}}],[11,"top_right","","The top right corner **Point**.",38,{"inputs":[{"name":"rect"}],"output":{"name":"point"}}],[11,"bottom_right","","The bottom right corner **Point**.",38,{"inputs":[{"name":"rect"}],"output":{"name":"point"}}],[11,"l_r_b_t","","The edges of the **Rect** in a tuple (top, bottom, left, right).",38,null],[11,"l_t_w_h","","The left and top edges of the **Rect** along with the width and height.",38,null],[11,"l_b_w_h","","The left and bottom edges of the **Rect** along with the width and height.",38,null],[11,"shift_x","","Shift the Rect along the x axis.",38,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shift_y","","Shift the Rect along the y axis.",38,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shift","","Shift the Rect by the given Point.",38,{"inputs":[{"name":"rect"},{"name":"point"}],"output":{"name":"self"}}],[11,"is_over","","Does the given point touch the Rectangle.",38,{"inputs":[{"name":"rect"},{"name":"point"}],"output":{"name":"bool"}}],[11,"pad_left","","The Rect with some padding applied to the left edge.",38,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","The Rect with some padding applied to the right edge.",38,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","The rect with some padding applied to the bottom edge.",38,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","The Rect with some padding applied to the top edge.",38,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad","","The Rect with some padding amount applied to each edge.",38,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"padding","","The Rect with some padding applied.",38,{"inputs":[{"name":"rect"},{"name":"padding"}],"output":{"name":"self"}}],[11,"stretch_to_point","","Stretches the closest edge(s) to the given point if the point lies outside of the Rect area.",38,{"inputs":[{"name":"rect"},{"name":"point"}],"output":{"name":"self"}}],[11,"left_of","","Align `self`&#39;s right edge with the left edge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"right_of","","Align `self`&#39;s left edge with the right dge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"below","","Align `self`&#39;s top edge with the bottom edge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"above","","Align `self`&#39;s bottom edge with the top edge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_left_of","","Align `self`&#39;s left edge with the left edge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_x_of","","Align the middle of `self` with the middle of the `other` **Rect** along the *x* axis.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_right_of","","Align `self`&#39;s right edge with the right edge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_bottom_of","","Align `self`&#39;s bottom edge with the bottom edge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_y_of","","Align the middle of `self` with the middle of the `other` **Rect** along the *y* axis.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_top_of","","Align `self`&#39;s top edge with the top edge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"top_left_of","","Place `self` along the top left edges of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"top_right_of","","Place `self` along the top right edges of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_left_of","","Place `self` along the bottom left edges of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"bottom_right_of","","Place `self` along the bottom right edges of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_top_of","","Place `self` in the middle of the top edge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_bottom_of","","Place `self` in the middle of the bottom edge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_left_of","","Place `self` in the middle of the left edge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"mid_right_of","","Place `self` in the middle of the right edge of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"middle_of","","Place `self` directly in the middle of the `other` **Rect**.",38,{"inputs":[{"name":"rect"},{"name":"self"}],"output":{"name":"self"}}],[11,"closest_corner","","Return the **Corner** of `self` that is closest to the given **Point**.",38,{"inputs":[{"name":"rect"},{"name":"point"}],"output":{"name":"corner"}}],[11,"eq","","",54,{"inputs":[{"name":"axis"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"axis"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"axis"}],"output":{"name":"axis"}}],[11,"eq","","",60,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"position"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"eq","","",56,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"direction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"eq","","",53,{"inputs":[{"name":"align"},{"name":"align"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"align"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"align"}],"output":{"name":"align"}}],[11,"eq","","",59,{"inputs":[{"name":"place"},{"name":"place"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"place"},{"name":"place"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"place"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"place"}],"output":{"name":"place"}}],[11,"eq","","",57,{"inputs":[{"name":"dimension"},{"name":"dimension"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"dimension"},{"name":"dimension"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"dimension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"dimension"}],"output":{"name":"dimension"}}],[11,"eq","","",36,{"inputs":[{"name":"padding"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"padding"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"padding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"padding"}],"output":{"name":"padding"}}],[11,"none","","No padding.",36,{"inputs":[],"output":{"name":"padding"}}],[0,"theme","","",null,null],[3,"Theme","conrod::theme","A serializable collection of canvas and widget styling defaults.",null,null],[12,"name","","A name for the theme used for identification.",118,null],[12,"padding","","Padding for Canvas layout and positioning.",118,null],[12,"x_position","","A default widget position along the *x* axis.",118,null],[12,"y_position","","A default widget position along the *y* axis.",118,null],[12,"background_color","","A default background for the theme.",118,null],[12,"shape_color","","A default color for widget shapes.",118,null],[12,"frame_color","","A default color for widget frames.",118,null],[12,"frame_width","","A default width for widget frames.",118,null],[12,"label_color","","A default color for widget labels.",118,null],[12,"font_size_large","","A default &quot;large&quot; font size.",118,null],[12,"font_size_medium","","A default &quot;medium&quot; font size.",118,null],[12,"font_size_small","","A default &quot;small&quot; font size.",118,null],[12,"maybe_scrollbar","","Optional style defaults for a Scrollbar.",118,null],[12,"widget_styling","","Unique styling for each widget, index-able by the **Widget::kind**.",118,null],[12,"mouse_drag_threshold","","Mouse Drag distance threshold determines the minimum distance from the mouse-down point\nthat the mouse must move before starting a drag operation.",118,null],[3,"WidgetDefault","","The defaults for a specific widget.",null,null],[12,"style","","The unique style of a widget.",119,null],[12,"common","","The attributes commonly shared between widgets.",119,null],[3,"UniqueDefault","","A **WidgetDefault** downcast to a **Widget**&#39;s unique **Style** type.",null,null],[12,"style","","The unique style for the widget.",120,null],[12,"common","","Attributes that are common to all widgets.",120,null],[17,"DEFAULT_MOUSE_DRAG_THRESHOLD","","This is the default value that is used for `Theme::mouse_drag_threshold`.",null,null],[11,"fmt","","",120,{"inputs":[{"name":"uniquedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"uniquedefault"}],"output":{"name":"uniquedefault"}}],[11,"new","","Constructor for a WidgetDefault.",119,{"inputs":[{"name":"box"}],"output":{"name":"widgetdefault"}}],[11,"default","","The default theme if not loading from file.",118,{"inputs":[],"output":{"name":"theme"}}],[11,"widget_style","","Retrieve the unique default styling for a widget.",118,{"inputs":[{"name":"theme"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","conrod","",40,{"inputs":[{"name":"userinput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"userinput"}],"output":{"name":"userinput"}}],[11,"new","","A new, empty **Ui**.",39,{"inputs":[{"name":"charactercache"},{"name":"theme"}],"output":{"name":"self"}}],[11,"with_capacity","","A new **Ui** with the capacity given as a number of widgets.",39,{"inputs":[{"name":"charactercache"},{"name":"theme"},{"name":"usize"}],"output":{"name":"self"}}],[11,"widget_input","","Returns a `WidgetInput` for the given widget",39,{"inputs":[{"name":"ui"},{"name":"i"}],"output":{"name":"widgetinput"}}],[11,"rect_of","","The **Rect** for the widget at the given index.",39,{"inputs":[{"name":"ui"},{"name":"i"}],"output":{"name":"option"}}],[11,"w_of","","The absolute width of the widget at the given index.",39,{"inputs":[{"name":"ui"},{"name":"i"}],"output":{"name":"option"}}],[11,"h_of","","The absolute height of the widget at the given index.",39,{"inputs":[{"name":"ui"},{"name":"i"}],"output":{"name":"option"}}],[11,"wh_of","","The absolute dimensions for the widget at the given index.",39,{"inputs":[{"name":"ui"},{"name":"i"}],"output":{"name":"option"}}],[11,"xy_of","","The coordinates for the widget at the given index.",39,{"inputs":[{"name":"ui"},{"name":"i"}],"output":{"name":"option"}}],[11,"kid_area_of","","The `kid_area` of the widget at the given index.",39,{"inputs":[{"name":"ui"},{"name":"i"}],"output":{"name":"option"}}],[11,"maybe_prev_widget","","An index to the previously updated widget if there is one.",39,{"inputs":[{"name":"ui"}],"output":{"name":"option"}}],[11,"widget_graph","","Borrow the **Ui**&#39;s `widget_graph`.",39,{"inputs":[{"name":"ui"}],"output":{"name":"graph"}}],[11,"updated_widgets","","Borrow the **Ui**&#39;s set of updated widgets.",39,{"inputs":[{"name":"ui"}],"output":{"name":"hashset"}}],[11,"prev_updated_widgets","","Borrow the **Ui**&#39;s set of updated widgets.",39,{"inputs":[{"name":"ui"}],"output":{"name":"hashset"}}],[11,"handle_event","","Handle game events and update the state.",39,{"inputs":[{"name":"ui"},{"name":"e"}],"output":null}],[11,"calc_xy","","Get the centred xy coords for some given `Dimension`s, `Position` and alignment.",39,{"inputs":[{"name":"ui"},{"name":"option"},{"name":"position"},{"name":"position"},{"name":"dimensions"},{"name":"bool"}],"output":{"name":"point"}}],[11,"set_widgets","","A function within which all widgets are instantiated by the user, normally situated within\nthe &quot;update&quot; stage of an event loop.",39,{"inputs":[{"name":"ui"},{"name":"f"}],"output":null}],[11,"set_num_redraw_frames","","Set the number of frames that the `Ui` should draw in the case that `needs_redraw` is\ncalled. The default is `3` (see the SAFE_REDRAW_COUNT docs for details).",39,{"inputs":[{"name":"ui"},{"name":"u8"}],"output":null}],[11,"needs_redraw","","Tells the `Ui` that it needs to be re-draw everything. It does this by setting the redraw\ncount to `num_redraw_frames`. See the docs for `set_num_redraw_frames`, SAFE_REDRAW_COUNT\nor `draw_if_changed` for more info on how/why the redraw count is used.",39,{"inputs":[{"name":"ui"}],"output":null}],[11,"draw","","Draw the `Ui` in it&#39;s current state.",39,{"inputs":[{"name":"ui"},{"name":"context"},{"name":"g"}],"output":null}],[11,"draw_if_changed","","Same as the `Ui::draw` method, but *only* draws if the `redraw_count` is greater than 0.",39,{"inputs":[{"name":"ui"},{"name":"context"},{"name":"g"}],"output":null}],[11,"kids_bounding_box","","The **Rect** that bounds the kids of the widget with the given index.",39,{"inputs":[{"name":"ui"},{"name":"i"}],"output":{"name":"option"}}],[11,"visible_area","","The **Rect** that represents the maximum fully visible area for the widget with the given\nindex, including consideration of cropped scroll area.",39,{"inputs":[{"name":"ui"},{"name":"i"}],"output":{"name":"option"}}],[11,"theme","","A reference to the `Theme` that is currently active within the `Ui`.",121,{"inputs":[{"name":"uicell"}],"output":{"name":"theme"}}],[11,"glyph_cache","","A reference to the `Ui`&#39;s `GlyphCache`.",121,{"inputs":[{"name":"uicell"}],"output":{"name":"glyphcache"}}],[11,"window_dim","","Returns the dimensions of the window",121,{"inputs":[{"name":"uicell"}],"output":{"name":"dimensions"}}],[11,"input","","A struct representing the user input that has occurred since the last update, relevant to\nthe widget with the given index.",121,{"inputs":[{"name":"uicell"},{"name":"i"}],"output":{"name":"userinput"}}],[11,"global_input","","Returns an immutable reference to the `GlobalInput` of the `Ui`.",121,{"inputs":[{"name":"uicell"}],"output":{"name":"globalinput"}}],[11,"widget_input","","Returns a `WidgetInput` with input events for the widget.",121,{"inputs":[{"name":"uicell"},{"name":"i"}],"output":{"name":"widgetinput"}}],[11,"capture_mouse","","Have the widget capture the mouse input. The mouse state will be hidden from other\nwidgets while captured.",121,{"inputs":[{"name":"uicell"},{"name":"i"}],"output":{"name":"bool"}}],[11,"uncapture_mouse","","Uncapture the mouse input.",121,{"inputs":[{"name":"uicell"},{"name":"i"}],"output":{"name":"bool"}}],[11,"capture_keyboard","","Have the widget capture the keyboard input. The keyboard state will be hidden from other\nwidgets while captured.",121,{"inputs":[{"name":"uicell"},{"name":"i"}],"output":{"name":"bool"}}],[11,"uncapture_keyboard","","Uncapture the keyboard input.",121,{"inputs":[{"name":"uicell"},{"name":"i"}],"output":{"name":"bool"}}],[11,"new_unique_node_index","","Generate a new, unique NodeIndex into a Placeholder node within the `Ui`&#39;s widget graph.\nThis should only be called once for each unique widget needed to avoid unnecessary bloat\nwithin the `Ui`&#39;s widget graph.",121,{"inputs":[{"name":"uicell"}],"output":{"name":"nodeindex"}}],[11,"kids_bounding_box","","The **Rect** that bounds the kids of the widget with the given index.",121,{"inputs":[{"name":"uicell"},{"name":"i"}],"output":{"name":"option"}}],[11,"deref","","",121,{"inputs":[{"name":"uicell"}],"output":{"name":"ui"}}],[11,"as_ref","","",121,{"inputs":[{"name":"uicell"}],"output":{"name":"ui"}}],[0,"utils","","",null,null],[4,"IterDiff","conrod::utils","A type returned by the `iter_diff` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with the iterator&#39;s remaining elements\nstarting with the first mis-matched element.",122,null],[13,"Longer","","The remaining elements of the iterator.",122,null],[13,"Shorter","","The total number of elements that were in the iterator.",122,null],[5,"partial_min","","Compare to PartialOrd values and return the min.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_max","","Compare to PartialOrd values and return the min.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"clamp","","Clamp a value between some range.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"degrees","","Convert degrees to radians.",null,{"inputs":[{"name":"f"}],"output":{"name":"f"}}],[5,"fmod","","Modulo float.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"modulo","","The modulo function.",null,{"inputs":[{"name":"i"},{"name":"i"}],"output":{"name":"i"}}],[5,"map_range","","Map a value from a given range to a new given range.",null,{"inputs":[{"name":"x"},{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"}],"output":{"name":"y"}}],[5,"percentage","","Get value percentage between max and min.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"f32"}}],[5,"turns","","Convert turns to radians.",null,{"inputs":[{"name":"f"}],"output":{"name":"f"}}],[5,"value_from_perc","","Adjust the value to the given percentage.",null,{"inputs":[{"name":"f32"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"val_to_string","","Get a suitable string from the value, its max and the pixel range.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":{"name":"string"}}],[5,"bounding_box_for_points","","Find the bounding rect for the given series of points.",null,{"inputs":[{"name":"i"}],"output":{"name":"rect"}}],[5,"iter_diff","","Compares every element yielded by both elems and new_elems in lock-step.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"option"}}],[5,"write_if_different","","Returns `Borrowed` `elems` if `elems` contains the same elements as yielded by `new_elems`.",null,null],[5,"iter_eq","","Compares two iterators to see if they yield the same thing.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","conrod::drag","",63,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"cmp","conrod","",48,{"inputs":[{"name":"widgetid"},{"name":"id"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"widgetid"},{"name":"id"}],"output":{"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"widgetid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"widgetid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"widgetid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"widgetid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"widgetid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"widgetid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"widgetid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"widgetid"}],"output":{"name":"id"}}],[11,"from","","",48,{"inputs":[{"name":"usize"}],"output":{"name":"id"}}],[11,"add","","",48,{"inputs":[{"name":"widgetid"},{"name":"usize"}],"output":{"name":"id"}}],[11,"cmp","","",62,{"inputs":[{"name":"widgetindex"},{"name":"index"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"widgetindex"},{"name":"index"}],"output":{"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"widgetindex"},{"name":"index"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"widgetindex"},{"name":"index"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"widgetindex"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"widgetindex"},{"name":"index"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"widgetindex"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"widgetindex"},{"name":"index"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"widgetindex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"widgetindex"}],"output":{"name":"index"}}],[11,"from","","",62,{"inputs":[{"name":"widgetid"}],"output":{"name":"index"}}],[11,"from","","",62,{"inputs":[{"name":"nodeindex"}],"output":{"name":"index"}}],[11,"eq","conrod::scroll","",69,{"inputs":[{"name":"scroll"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"scroll"},{"name":"scroll"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"scroll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"scroll"}],"output":{"name":"scroll"}}],[11,"eq","","",64,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"eq","","",65,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"style"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"eq","","",66,{"inputs":[{"name":"interaction"},{"name":"interaction"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"interaction"},{"name":"interaction"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"interaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"interaction"}],"output":{"name":"interaction"}}],[11,"eq","","",67,{"inputs":[{"name":"elem"},{"name":"elem"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"elem"},{"name":"elem"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"elem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"elem"}],"output":{"name":"elem"}}],[11,"eq","","",70,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"x"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"x"}],"output":{"name":"x"}}],[11,"eq","","",71,{"inputs":[{"name":"y"},{"name":"y"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"y"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"y"}],"output":{"name":"y"}}],[11,"new","","The default `Scroll` args.",69,{"inputs":[],"output":{"name":"self"}}],[11,"update","","Calculate the new scroll state for the single axis of a `Widget`.",64,{"inputs":[{"name":"ui"},{"name":"index"},{"name":"scroll"},{"name":"kidarea"},{"name":"option"}],"output":{"name":"self"}}],[11,"is_over","","Whether or not the given `xy` point is over the scroll track.",64,{"inputs":[{"name":"state"},{"name":"point"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"new","","Construct a new default Style.",65,{"inputs":[],"output":{"name":"style"}}],[11,"thickness","","Get the thickness of the scrollbar or a default from the theme.",65,{"inputs":[{"name":"style"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"color","","Get the **Color** for the scrollbar.",65,{"inputs":[{"name":"style"},{"name":"theme"}],"output":{"name":"color"}}],[11,"parallel_range","","",70,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"perpendicular_range","","",70,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"padding_range","","",70,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[11,"track","","",70,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[11,"mouse_scalar","","",70,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"mouse_scroll_axis","","",70,{"inputs":[{"name":"mousescroll"}],"output":{"name":"scalar"}}],[11,"handle_rect","","",70,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[11,"offset_direction","","",70,{"inputs":[],"output":{"name":"scalar"}}],[11,"parallel_range","","",71,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"perpendicular_range","","",71,{"inputs":[{"name":"rect"}],"output":{"name":"range"}}],[11,"padding_range","","",71,{"inputs":[{"name":"padding"}],"output":{"name":"range"}}],[11,"track","","",71,{"inputs":[{"name":"rect"},{"name":"scalar"}],"output":{"name":"rect"}}],[11,"mouse_scalar","","",71,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"mouse_scroll_axis","","",71,{"inputs":[{"name":"mousescroll"}],"output":{"name":"scalar"}}],[11,"handle_rect","","",71,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"rect"}}],[11,"offset_direction","","",71,{"inputs":[],"output":{"name":"scalar"}}],[11,"fmt","conrod","",2,{"inputs":[{"name":"line"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"line"}],"output":{"name":"line"}}],[11,"eq","","",18,{"inputs":[{"name":"linestyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"linestyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"linestyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"linestyle"}],"output":{"name":"style"}}],[11,"styled","","Build a new **Line** widget with the given style.",2,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"new","","Build a new default **Line** widget.",2,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"abs","","Build a new **Line** whose bounding box is fit to the absolute co-ordinates of the line\npoints.",2,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"abs_styled","","The same as [**Line::abs**](./struct.Line#method.abs) but with the given style.",2,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred","","Build a new **Line** and shift the location of the start and end points so that the centre\nof their bounding rectangle lies at the position determined by the layout for the **Line**\nwidget.",2,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"self"}}],[11,"centred_styled","","The same as [**Line::centred**](./struct.Line#method.centred) but with the given style.",2,{"inputs":[{"name":"point"},{"name":"point"},{"name":"style"}],"output":{"name":"self"}}],[11,"thickness","","The thickness or width of the Line.",2,{"inputs":[{"name":"line"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"solid","","Make a solid line.",2,{"inputs":[{"name":"line"}],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",2,{"inputs":[{"name":"line"}],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",2,{"inputs":[{"name":"line"}],"output":{"name":"self"}}],[11,"new","","Constructor for a default Line Style.",18,{"inputs":[],"output":{"name":"self"}}],[11,"solid","","Make a solid line.",18,{"inputs":[],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",18,{"inputs":[],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",18,{"inputs":[],"output":{"name":"self"}}],[11,"pattern","","The style with some given pattern.",18,{"inputs":[{"name":"linestyle"},{"name":"pattern"}],"output":{"name":"self"}}],[11,"color","","The style with some given color.",18,{"inputs":[{"name":"linestyle"},{"name":"color"}],"output":{"name":"self"}}],[11,"thickness","","The style with some given thickness.",18,{"inputs":[{"name":"linestyle"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"cap","","The style for the ends of the Line.",18,{"inputs":[{"name":"linestyle"},{"name":"cap"}],"output":{"name":"self"}}],[11,"set_pattern","","Set the pattern for the line.",18,{"inputs":[{"name":"linestyle"},{"name":"pattern"}],"output":null}],[11,"set_color","","Set the color for the line.",18,{"inputs":[{"name":"linestyle"},{"name":"color"}],"output":null}],[11,"set_thickness","","Set the thickness for the line.",18,{"inputs":[{"name":"linestyle"},{"name":"scalar"}],"output":null}],[11,"set_cap","","Set the **Cap** for the line.",18,{"inputs":[{"name":"linestyle"},{"name":"cap"}],"output":null}],[11,"get_pattern","","The Pattern for the Line.",18,{"inputs":[{"name":"linestyle"},{"name":"theme"}],"output":{"name":"pattern"}}],[11,"get_color","","The Color for the Line.",18,{"inputs":[{"name":"linestyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"get_thickness","","The width or thickness of the Line.",18,{"inputs":[{"name":"linestyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"get_cap","","The styling for the ends of the Line.",18,{"inputs":[{"name":"linestyle"},{"name":"theme"}],"output":{"name":"cap"}}],[11,"common","","",2,{"inputs":[{"name":"line"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",2,{"inputs":[{"name":"line"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",2,{"inputs":[{"name":"line"}],"output":{"name":"str"}}],[11,"init_state","","",2,{"inputs":[{"name":"line"}],"output":{"name":"state"}}],[11,"style","","",2,{"inputs":[{"name":"line"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Line.",2,{"inputs":[{"name":"line"},{"name":"updateargs"}],"output":null}],[11,"color","","",2,{"inputs":[{"name":"line"},{"name":"color"}],"output":{"name":"self"}}],[11,"eq","","",19,{"inputs":[{"name":"imagestyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"imagestyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"imagestyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"imagestyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",19,{"inputs":[],"output":{"name":"self"}}],[11,"maybe_color","","Retrieves the value from the `Style`.",19,{"inputs":[{"name":"imagestyle"},{"name":"theme"}],"output":{"name":"option"}}],[11,"from_texture","","Construct a new `Image` from a texture.",3,{"inputs":[{"name":"arc"}],"output":{"name":"self"}}],[11,"source_rectangle","","Build the type&#39;s self.$($assignee).+ with the given $Type.",3,{"inputs":[{"name":"image"},{"name":"rect"}],"output":{"name":"self"}}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",3,{"inputs":[{"name":"image"},{"name":"option"}],"output":{"name":"self"}}],[11,"common","","",3,{"inputs":[{"name":"image"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",3,{"inputs":[{"name":"image"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",3,{"inputs":[{"name":"image"}],"output":{"name":"str"}}],[11,"init_state","","",3,{"inputs":[{"name":"image"}],"output":{"name":"state"}}],[11,"style","","",3,{"inputs":[{"name":"image"}],"output":{"name":"style"}}],[11,"default_x_dimension","","",3,{"inputs":[{"name":"image"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","",3,{"inputs":[{"name":"image"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","",3,{"inputs":[{"name":"image"},{"name":"updateargs"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"pointpath"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"pointpath"}],"output":{"name":"pointpath"}}],[11,"styled","","The same as [**PointPath::new**](./struct.PointPath#method.new) but with th given style.",4,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"new","","Build a new default PointPath widget.",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs","","Build a new PointPath whose bounding box is fit to the absolute co-ordinates of the points.",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_styled","","The same as [**PointPath::abs**](./struct.PointPath#method.abs) but constructs the\n**PointPath** with the given style.",4,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred","","Build a new **PointPath** and shift the location of the points so that the centre of their\nbounding rectangle lies at the position determined for the **PointPath** widget.",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_styled","","The same as [**PointPath::centred**](./struct.PointPath#method.centred) but constructs the\n**PointPath** with the given style.",4,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"thickness","","The thickness or width of the **PointPath**&#39;s lines.",4,{"inputs":[{"name":"pointpath"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"solid","","Make a Solid line.",4,{"inputs":[{"name":"pointpath"}],"output":{"name":"self"}}],[11,"dashed","","Make a line with a Dashed pattern.",4,{"inputs":[{"name":"pointpath"}],"output":{"name":"self"}}],[11,"dotted","","Make a line with a Dotted pattern.",4,{"inputs":[{"name":"pointpath"}],"output":{"name":"self"}}],[11,"common","","",4,{"inputs":[{"name":"pointpath"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",4,{"inputs":[{"name":"pointpath"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",4,{"inputs":[{"name":"pointpath"}],"output":{"name":"kind"}}],[11,"init_state","","",4,{"inputs":[{"name":"pointpath"}],"output":{"name":"state"}}],[11,"style","","",4,{"inputs":[{"name":"pointpath"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Line.",4,{"inputs":[{"name":"pointpath"},{"name":"updateargs"}],"output":null}],[11,"color","","",4,{"inputs":[{"name":"pointpath"},{"name":"color"}],"output":{"name":"self"}}],[11,"fmt","","",123,{"inputs":[{"name":"circle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"circle"}],"output":{"name":"circle"}}],[11,"styled","","Build a circular **Oval** with the given dimensions and style.",123,{"inputs":[{"name":"scalar"},{"name":"style"}],"output":{"name":"oval"}}],[11,"fill","","Build a new **Fill**ed circular **Oval**.",123,{"inputs":[{"name":"scalar"}],"output":{"name":"oval"}}],[11,"fill_with","","Build a new circular **Oval** **Fill**ed with the given color.",123,{"inputs":[{"name":"scalar"},{"name":"color"}],"output":{"name":"oval"}}],[11,"outline","","Build a new circular **Outline**d **Oval** widget.",123,{"inputs":[{"name":"scalar"}],"output":{"name":"oval"}}],[11,"outline_styled","","Build a new circular **Oval** **Outline**d with the given style.",123,{"inputs":[{"name":"scalar"},{"name":"linestyle"}],"output":{"name":"oval"}}],[11,"fmt","","",7,{"inputs":[{"name":"oval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"oval"}],"output":{"name":"oval"}}],[11,"styled","","Build an **Oval** with the given dimensions and style.",7,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a new **Fill**ed **Oval**.",7,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"fill_with","","Build a new **Oval** **Fill**ed with the given color.",7,{"inputs":[{"name":"dimensions"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a new **Outline**d **Oval** widget.",7,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"outline_styled","","Build a new **Oval** **Outline**d with the given style.",7,{"inputs":[{"name":"dimensions"},{"name":"linestyle"}],"output":{"name":"self"}}],[11,"common","","",7,{"inputs":[{"name":"oval"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",7,{"inputs":[{"name":"oval"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",7,{"inputs":[{"name":"oval"}],"output":{"name":"str"}}],[11,"init_state","","",7,{"inputs":[{"name":"oval"}],"output":{"name":"state"}}],[11,"style","","",7,{"inputs":[{"name":"oval"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Oval.",7,{"inputs":[{"name":"oval"},{"name":"updateargs"}],"output":null}],[11,"color","","",7,{"inputs":[{"name":"oval"},{"name":"color"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"polygon"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"polygon"}],"output":{"name":"polygon"}}],[11,"styled","","Build a polygon with the given points and style.",6,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a **Polygon** with the default **Fill** style.",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fill_with","","Build a **Polygon** **Fill**ed with the given **Color**.",6,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a **Polygon** with the default **Outline** style.",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"outline_styled","","Build a **Polygon** **Outline**ed with the given line style.",6,{"inputs":[{"name":"i"},{"name":"linestyle"}],"output":{"name":"self"}}],[11,"abs_styled","","Build a new filled **Polygon** whose bounding box is fit to the absolute co-ordinates of\nthe points.",6,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"abs_fill","","The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the\n**Polygon** with the default **Fill** style.",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_fill_with","","The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the\n**Polygon** **Fill**ed with the given **Color**.",6,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"abs_outline","","The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the\n**Polygon** with the default **Outline** style.",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"abs_outline_styled","","The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the\n**Polygon** with the given **Outline** styling.",6,{"inputs":[{"name":"i"},{"name":"linestyle"}],"output":{"name":"self"}}],[11,"centred_styled","","Build a new **Polygon** and shift the location of the points so that the centre of their\nbounding rectangle lies at the position determined for the **Polygon** widget.",6,{"inputs":[{"name":"i"},{"name":"style"}],"output":{"name":"self"}}],[11,"centred_fill","","The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but\nconstructs the **Polygon** with the default **Fill** style.",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_fill_with","","The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but\nconstructs the **Polygon** **Fill**ed with the given color.",6,{"inputs":[{"name":"i"},{"name":"color"}],"output":{"name":"self"}}],[11,"centred_outline","","The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but\nconstructs the **Polygon** with the default **Outline** style.",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"centred_outline_styled","","The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but\nconstructs the **Polygon** **Outline**d with the given styling.",6,{"inputs":[{"name":"i"},{"name":"linestyle"}],"output":{"name":"self"}}],[11,"common","","",6,{"inputs":[{"name":"polygon"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",6,{"inputs":[{"name":"polygon"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",6,{"inputs":[{"name":"polygon"}],"output":{"name":"str"}}],[11,"init_state","","",6,{"inputs":[{"name":"polygon"}],"output":{"name":"state"}}],[11,"style","","",6,{"inputs":[{"name":"polygon"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Polygon.",6,{"inputs":[{"name":"polygon"},{"name":"updateargs"}],"output":null}],[11,"color","","",6,{"inputs":[{"name":"polygon"},{"name":"color"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"rectangle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"rectangle"}],"output":{"name":"rectangle"}}],[11,"styled","","Build a rectangle with the dimensions and style.",8,{"inputs":[{"name":"dimensions"},{"name":"style"}],"output":{"name":"self"}}],[11,"fill","","Build a new filled rectangle.",8,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"fill_with","","Build a new filled rectangle widget filled with the given color.",8,{"inputs":[{"name":"dimensions"},{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","Build a new outlined rectangle widget.",8,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"outline_styled","","Build an outlined rectangle rather than a filled one.",8,{"inputs":[{"name":"dimensions"},{"name":"linestyle"}],"output":{"name":"self"}}],[11,"common","","",8,{"inputs":[{"name":"rectangle"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",8,{"inputs":[{"name":"rectangle"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",8,{"inputs":[{"name":"rectangle"}],"output":{"name":"str"}}],[11,"init_state","","",8,{"inputs":[{"name":"rectangle"}],"output":{"name":"state"}}],[11,"style","","",8,{"inputs":[{"name":"rectangle"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Rectangle.",8,{"inputs":[{"name":"rectangle"},{"name":"updateargs"}],"output":null}],[11,"color","","",8,{"inputs":[{"name":"rectangle"},{"name":"color"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"framedrectangle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"framedrectangle"}],"output":{"name":"framedrectangle"}}],[11,"eq","","",20,{"inputs":[{"name":"framedrectanglestyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"framedrectanglestyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"framedrectanglestyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"framedrectanglestyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",20,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",20,{"inputs":[{"name":"framedrectanglestyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"frame","","Retrieves the value from the `Style`.",20,{"inputs":[{"name":"framedrectanglestyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"frame_color","","Retrieves the value from the `Style`.",20,{"inputs":[{"name":"framedrectanglestyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"new","","Build a new **FramedRectangle**.",5,{"inputs":[{"name":"dimensions"}],"output":{"name":"self"}}],[11,"with_style","","Build the type&#39;s self.$($assignee).+ with the given $Type.",5,{"inputs":[{"name":"framedrectangle"},{"name":"style"}],"output":{"name":"self"}}],[11,"common","","",5,{"inputs":[{"name":"framedrectangle"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",5,{"inputs":[{"name":"framedrectangle"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",5,{"inputs":[{"name":"framedrectangle"}],"output":{"name":"str"}}],[11,"init_state","","",5,null],[11,"style","","",5,{"inputs":[{"name":"framedrectangle"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Rectangle.",5,{"inputs":[{"name":"framedrectangle"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",5,{"inputs":[{"name":"framedrectangle"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","Build the type&#39;s self.$($assignee).+ with the given $Type.",5,{"inputs":[{"name":"framedrectangle"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"frame_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",5,{"inputs":[{"name":"framedrectangle"},{"name":"color"}],"output":{"name":"self"}}],[11,"eq","","",50,{"inputs":[{"name":"shapestyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"shapestyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"shapestyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"shapestyle"}],"output":{"name":"style"}}],[11,"fill","","A default `Fill` style.",50,{"inputs":[],"output":{"name":"self"}}],[11,"fill_with","","A `Fill` style with some given `Color`.",50,{"inputs":[{"name":"color"}],"output":{"name":"self"}}],[11,"outline","","A default `Outline` style.",50,{"inputs":[],"output":{"name":"self"}}],[11,"outline_styled","","A default `Outline` style.",50,{"inputs":[{"name":"linestyle"}],"output":{"name":"self"}}],[11,"color","","The style with some given Color.",50,{"inputs":[{"name":"shapestyle"},{"name":"color"}],"output":{"name":"self"}}],[11,"set_color","","Set the color for the style.",50,{"inputs":[{"name":"shapestyle"},{"name":"color"}],"output":null}],[11,"get_color","","Get the color of the Rectangle.",50,{"inputs":[{"name":"shapestyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"eq","","",21,{"inputs":[{"name":"textstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"textstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"textstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"textstyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",21,{"inputs":[],"output":{"name":"self"}}],[11,"font_size","","Retrieves the value from the `Style`.",21,{"inputs":[{"name":"textstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"color","","Retrieves the value from the `Style`.",21,{"inputs":[{"name":"textstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"maybe_wrap","","Retrieves the value from the `Style`.",21,{"inputs":[{"name":"textstyle"},{"name":"theme"}],"output":{"name":"option"}}],[11,"line_spacing","","Retrieves the value from the `Style`.",21,{"inputs":[{"name":"textstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"text_align","","Retrieves the value from the `Style`.",21,{"inputs":[{"name":"textstyle"},{"name":"theme"}],"output":{"name":"align"}}],[11,"eq","","",49,{"inputs":[{"name":"wrap"},{"name":"wrap"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"wrap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"wrap"}],"output":{"name":"wrap"}}],[11,"new","","Build a new **Text** widget.",9,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"font_size","","Build the **Text** with the given font size.",9,{"inputs":[{"name":"text"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"no_line_wrap","","Specify that the **Text** should not wrap lines around the width.",9,{"inputs":[{"name":"text"}],"output":{"name":"self"}}],[11,"wrap_by_word","","Line wrap the **Text** at the beginning of the first word that exceeds the width.",9,{"inputs":[{"name":"text"}],"output":{"name":"self"}}],[11,"wrap_by_character","","Line wrap the **Text** at the beginning of the first character that exceeds the width.",9,{"inputs":[{"name":"text"}],"output":{"name":"self"}}],[11,"with_style","","Build the **Text** with the given **Style**.",9,{"inputs":[{"name":"text"},{"name":"style"}],"output":{"name":"self"}}],[11,"align_text_left","","Align the text to the left of its bounding **Rect**&#39;s *x* axis range.",9,{"inputs":[{"name":"text"}],"output":{"name":"self"}}],[11,"align_text_middle","","Align the text to the middle of its bounding **Rect**&#39;s *x* axis range.",9,{"inputs":[{"name":"text"}],"output":{"name":"self"}}],[11,"align_text_right","","Align the text to the right of its bounding **Rect**&#39;s *x* axis range.",9,{"inputs":[{"name":"text"}],"output":{"name":"self"}}],[11,"line_spacing","","The height of the space used between consecutive lines.",9,{"inputs":[{"name":"text"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"common","","",9,{"inputs":[{"name":"text"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",9,{"inputs":[{"name":"text"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",9,{"inputs":[{"name":"text"}],"output":{"name":"str"}}],[11,"init_state","","",9,{"inputs":[{"name":"text"}],"output":{"name":"state"}}],[11,"style","","",9,{"inputs":[{"name":"text"}],"output":{"name":"style"}}],[11,"default_x_dimension","","If no specific width was given, we&#39;ll use the width of the widest line as a default.",9,{"inputs":[{"name":"text"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","If no specific height was given, we&#39;ll use the total height of the text as a default.",9,{"inputs":[{"name":"text"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","Update the state of the Text.",9,{"inputs":[{"name":"text"},{"name":"updateargs"}],"output":null}],[11,"color","","",9,{"inputs":[{"name":"text"},{"name":"color"}],"output":{"name":"self"}}],[11,"eq","","",22,{"inputs":[{"name":"buttonstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"buttonstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"buttonstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"buttonstyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",22,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",22,{"inputs":[{"name":"buttonstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"frame","","Retrieves the value from the `Style`.",22,{"inputs":[{"name":"buttonstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"frame_color","","Retrieves the value from the `Style`.",22,{"inputs":[{"name":"buttonstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",22,{"inputs":[{"name":"buttonstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",22,{"inputs":[{"name":"buttonstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"new","","Create a button context to be built upon.",10,{"inputs":[],"output":{"name":"self"}}],[11,"react","","Build the type&#39;s self.$($assignee).+ with the given $Type.",10,{"inputs":[{"name":"button"},{"name":"f"}],"output":{"name":"self"}}],[11,"enabled","","Build the type&#39;s self.$($assignee).+ with the given $Type.",10,{"inputs":[{"name":"button"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",10,{"inputs":[{"name":"button"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",10,{"inputs":[{"name":"button"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",10,{"inputs":[{"name":"button"}],"output":{"name":"kind"}}],[11,"init_state","","",10,{"inputs":[{"name":"button"}],"output":{"name":"state"}}],[11,"style","","",10,{"inputs":[{"name":"button"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Button.",10,{"inputs":[{"name":"button"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",10,{"inputs":[{"name":"button"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","Build the type&#39;s self.$($assignee).+ with the given $Type.",10,{"inputs":[{"name":"button"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"frame_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",10,{"inputs":[{"name":"button"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type&#39;s self.$($assignee).+ with the given $Type.",10,{"inputs":[{"name":"button"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",10,{"inputs":[{"name":"button"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",10,{"inputs":[{"name":"button"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"canvas"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"canvas"}],"output":{"name":"canvas"}}],[11,"eq","","",23,{"inputs":[{"name":"canvasstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"canvasstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"canvasstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"canvasstyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",23,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"frame","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"frame_color","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"length","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"length"}}],[11,"pad_left","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"pad_right","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"pad_bottom","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"pad_top","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"title_bar_text_color","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"title_bar_font_size","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"title_bar_maybe_wrap","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"option"}}],[11,"title_bar_line_spacing","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"title_bar_text_align","","Retrieves the value from the `Style`.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"align"}}],[11,"new","","Construct a new Canvas builder.",11,{"inputs":[],"output":{"name":"self"}}],[11,"title_bar","","Build the type&#39;s self.$($assignee).+ with the given $Type.",11,{"inputs":[{"name":"canvas"},{"name":"str"}],"output":{"name":"self"}}],[11,"pad_left","","Build the type&#39;s self.$($assignee).+ with the given $Type.",11,{"inputs":[{"name":"canvas"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","Build the type&#39;s self.$($assignee).+ with the given $Type.",11,{"inputs":[{"name":"canvas"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","Build the type&#39;s self.$($assignee).+ with the given $Type.",11,{"inputs":[{"name":"canvas"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","Build the type&#39;s self.$($assignee).+ with the given $Type.",11,{"inputs":[{"name":"canvas"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"with_style","","Build the type&#39;s self.$($assignee).+ with the given $Type.",11,{"inputs":[{"name":"canvas"},{"name":"style"}],"output":{"name":"self"}}],[11,"length","","Set the length of the Split as an absolute scalar.",11,{"inputs":[{"name":"canvas"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"length_weight","","Set the length of the Split as a weight.",11,{"inputs":[{"name":"canvas"},{"name":"weight"}],"output":{"name":"self"}}],[11,"flow_right","","Set the child Canvasses flowing to the right.",11,{"inputs":[{"name":"canvas"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_left","","Set the child Canvasses flowing to the left.",11,{"inputs":[{"name":"canvas"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_up","","Set the child Canvasses flowing upwards.",11,{"inputs":[{"name":"canvas"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"flow_down","","Set the child Canvasses flowing downwards.",11,{"inputs":[{"name":"canvas"},{"name":"listofsplits"}],"output":{"name":"self"}}],[11,"pad","","Set the padding for all edges of the area where child widgets will be placed.",11,{"inputs":[{"name":"canvas"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"padding","","Set the padding of the area where child widgets will be placed.",11,{"inputs":[{"name":"canvas"},{"name":"padding"}],"output":{"name":"self"}}],[11,"common","","",11,{"inputs":[{"name":"canvas"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",11,{"inputs":[{"name":"canvas"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",11,{"inputs":[{"name":"canvas"}],"output":{"name":"kind"}}],[11,"init_state","","",11,{"inputs":[{"name":"canvas"}],"output":{"name":"state"}}],[11,"style","","",11,{"inputs":[{"name":"canvas"}],"output":{"name":"style"}}],[11,"default_x_position","","",11,{"inputs":[{"name":"canvas"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_y_position","","",11,{"inputs":[{"name":"canvas"},{"name":"ui"}],"output":{"name":"position"}}],[11,"drag_area","","The title bar area at which the Canvas can be clicked and dragged.",11,{"inputs":[{"name":"canvas"},{"name":"dimensions"},{"name":"style"},{"name":"theme"}],"output":{"name":"option"}}],[11,"kid_area","","The area of the widget below the title bar, upon which child widgets will be placed.",11,{"inputs":[{"name":"canvas"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Canvas.",11,{"inputs":[{"name":"canvas"},{"name":"updateargs"}],"output":null}],[11,"padding","","Get the Padding for the Canvas&#39; kid area.",23,{"inputs":[{"name":"canvasstyle"},{"name":"theme"}],"output":{"name":"padding"}}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",11,{"inputs":[{"name":"canvas"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","Build the type&#39;s self.$($assignee).+ with the given $Type.",11,{"inputs":[{"name":"canvas"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"frame_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",11,{"inputs":[{"name":"canvas"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","",11,{"inputs":[{"name":"canvas"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",11,{"inputs":[{"name":"canvas"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",11,{"inputs":[{"name":"canvas"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"eq","","",24,{"inputs":[{"name":"dropdownliststyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"dropdownliststyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"dropdownliststyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"dropdownliststyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",24,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",24,{"inputs":[{"name":"dropdownliststyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"frame","","Retrieves the value from the `Style`.",24,{"inputs":[{"name":"dropdownliststyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"frame_color","","Retrieves the value from the `Style`.",24,{"inputs":[{"name":"dropdownliststyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",24,{"inputs":[{"name":"dropdownliststyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",24,{"inputs":[{"name":"dropdownliststyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"maybe_max_visible_height","","Retrieves the value from the `Style`.",24,{"inputs":[{"name":"dropdownliststyle"},{"name":"theme"}],"output":{"name":"option"}}],[11,"new","","Construct a new DropDownList.",124,{"inputs":[{"name":"vec"},{"name":"option"}],"output":{"name":"self"}}],[11,"react","","Build the type&#39;s self.$($assignee).+ with the given $Type.",124,{"inputs":[{"name":"dropdownlist"},{"name":"f"}],"output":{"name":"self"}}],[11,"enabled","","Build the type&#39;s self.$($assignee).+ with the given $Type.",124,{"inputs":[{"name":"dropdownlist"},{"name":"bool"}],"output":{"name":"self"}}],[11,"max_visible_items","","Set the maximum height of the DropDownList (before the scrollbar appears) as a number of\nitems.",124,{"inputs":[{"name":"dropdownlist"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_visible_height","","Set the maximum height of the DropDownList (before the scrollbar appears) as a scalar\nheight.",124,{"inputs":[{"name":"dropdownlist"},{"name":"f64"}],"output":{"name":"self"}}],[11,"common","","",124,{"inputs":[{"name":"dropdownlist"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",124,{"inputs":[{"name":"dropdownlist"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",124,{"inputs":[{"name":"dropdownlist"}],"output":{"name":"str"}}],[11,"init_state","","",124,{"inputs":[{"name":"dropdownlist"}],"output":{"name":"state"}}],[11,"style","","",124,{"inputs":[{"name":"dropdownlist"}],"output":{"name":"style"}}],[11,"update","","Update the state of the DropDownList.",124,{"inputs":[{"name":"dropdownlist"},{"name":"updateargs"}],"output":null}],[11,"button_style","","Style for a `Button` given this `Style`&#39;s current state.",24,{"inputs":[{"name":"dropdownliststyle"},{"name":"bool"}],"output":{"name":"buttonstyle"}}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",124,{"inputs":[{"name":"dropdownlist"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","Build the type&#39;s self.$($assignee).+ with the given $Type.",124,{"inputs":[{"name":"dropdownlist"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"frame_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",124,{"inputs":[{"name":"dropdownlist"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type&#39;s self.$($assignee).+ with the given $Type.",124,{"inputs":[{"name":"dropdownlist"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",124,{"inputs":[{"name":"dropdownlist"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",124,{"inputs":[{"name":"dropdownlist"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"eq","","",25,{"inputs":[{"name":"envelopeeditorstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"envelopeeditorstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"envelopeeditorstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"envelopeeditorstyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",25,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",25,{"inputs":[{"name":"envelopeeditorstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"frame","","Retrieves the value from the `Style`.",25,{"inputs":[{"name":"envelopeeditorstyle"},{"name":"theme"}],"output":{"name":"f64"}}],[11,"frame_color","","Retrieves the value from the `Style`.",25,{"inputs":[{"name":"envelopeeditorstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",25,{"inputs":[{"name":"envelopeeditorstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",25,{"inputs":[{"name":"envelopeeditorstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"value_font_size","","Retrieves the value from the `Style`.",25,{"inputs":[{"name":"envelopeeditorstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"point_radius","","Retrieves the value from the `Style`.",25,{"inputs":[{"name":"envelopeeditorstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"line_thickness","","Retrieves the value from the `Style`.",25,{"inputs":[{"name":"envelopeeditorstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"new","","Construct an EnvelopeEditor widget.",12,{"inputs":[{"name":"vec"},{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"}],"output":{"name":"envelopeeditor"}}],[11,"point_radius","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"line_thickness","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"value_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"skew_y","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"f32"}],"output":{"name":"self"}}],[11,"react","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"f"}],"output":{"name":"self"}}],[11,"enabled","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",12,{"inputs":[{"name":"envelopeeditor"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",12,{"inputs":[{"name":"envelopeeditor"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",12,{"inputs":[{"name":"envelopeeditor"}],"output":{"name":"kind"}}],[11,"init_state","","",12,{"inputs":[{"name":"envelopeeditor"}],"output":{"name":"state"}}],[11,"style","","",12,{"inputs":[{"name":"envelopeeditor"}],"output":{"name":"style"}}],[11,"update","","Update the state of the EnvelopeEditor&#39;s cached state.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"frame_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",12,{"inputs":[{"name":"envelopeeditor"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"clone","","",125,{"inputs":[{"name":"widgetmatrix"}],"output":{"name":"matrix"}}],[11,"new","","Create a widget matrix context.",125,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"each_widget","","The function that will be called for each and every element in the Matrix.\nThe function should return the widget that will be displayed in the element associated with\nthe given row and column number.\nNote that the returned Widget&#39;s position and dimensions will be overridden with the\ndimensions and position of the matrix element&#39;s rectangle.",125,{"inputs":[{"name":"widgetmatrix"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"cell_padding","","A builder method for adding padding to the cell.",125,{"inputs":[{"name":"widgetmatrix"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"matrix"}}],[11,"common","","",125,{"inputs":[{"name":"widgetmatrix"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",125,{"inputs":[{"name":"widgetmatrix"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",125,{"inputs":[{"name":"widgetmatrix"}],"output":{"name":"str"}}],[11,"init_state","","",125,{"inputs":[{"name":"widgetmatrix"}],"output":{"name":"state"}}],[11,"style","","",125,{"inputs":[{"name":"widgetmatrix"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Matrix.",125,{"inputs":[{"name":"widgetmatrix"},{"name":"updateargs"}],"output":null}],[11,"eq","","",26,{"inputs":[{"name":"numberdialerstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"numberdialerstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"numberdialerstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"numberdialerstyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",26,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",26,{"inputs":[{"name":"numberdialerstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"frame","","Retrieves the value from the `Style`.",26,{"inputs":[{"name":"numberdialerstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"frame_color","","Retrieves the value from the `Style`.",26,{"inputs":[{"name":"numberdialerstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",26,{"inputs":[{"name":"numberdialerstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",26,{"inputs":[{"name":"numberdialerstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"new","","Construct a new NumberDialer widget.",126,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"u8"}],"output":{"name":"self"}}],[11,"react","","Build the type&#39;s self.$($assignee).+ with the given $Type.",126,{"inputs":[{"name":"numberdialer"},{"name":"f"}],"output":{"name":"self"}}],[11,"enabled","","Build the type&#39;s self.$($assignee).+ with the given $Type.",126,{"inputs":[{"name":"numberdialer"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",126,{"inputs":[{"name":"numberdialer"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",126,{"inputs":[{"name":"numberdialer"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",126,{"inputs":[{"name":"numberdialer"}],"output":{"name":"str"}}],[11,"init_state","","",126,{"inputs":[{"name":"numberdialer"}],"output":{"name":"state"}}],[11,"style","","",126,{"inputs":[{"name":"numberdialer"}],"output":{"name":"style"}}],[11,"update","","Update the state of the NumberDialer.",126,{"inputs":[{"name":"numberdialer"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",126,{"inputs":[{"name":"numberdialer"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","Build the type&#39;s self.$($assignee).+ with the given $Type.",126,{"inputs":[{"name":"numberdialer"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"frame_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",126,{"inputs":[{"name":"numberdialer"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type&#39;s self.$($assignee).+ with the given $Type.",126,{"inputs":[{"name":"numberdialer"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",126,{"inputs":[{"name":"numberdialer"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",126,{"inputs":[{"name":"numberdialer"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"eq","","",27,{"inputs":[{"name":"sliderstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"sliderstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"sliderstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"sliderstyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",27,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",27,{"inputs":[{"name":"sliderstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"frame","","Retrieves the value from the `Style`.",27,{"inputs":[{"name":"sliderstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"frame_color","","Retrieves the value from the `Style`.",27,{"inputs":[{"name":"sliderstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",27,{"inputs":[{"name":"sliderstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",27,{"inputs":[{"name":"sliderstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"new","","Construct a new Slider widget.",13,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"skew","","Build the type&#39;s self.$($assignee).+ with the given $Type.",13,{"inputs":[{"name":"slider"},{"name":"f32"}],"output":{"name":"self"}}],[11,"react","","Build the type&#39;s self.$($assignee).+ with the given $Type.",13,{"inputs":[{"name":"slider"},{"name":"f"}],"output":{"name":"self"}}],[11,"enabled","","Build the type&#39;s self.$($assignee).+ with the given $Type.",13,{"inputs":[{"name":"slider"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",13,{"inputs":[{"name":"slider"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",13,{"inputs":[{"name":"slider"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",13,{"inputs":[{"name":"slider"}],"output":{"name":"str"}}],[11,"init_state","","",13,{"inputs":[{"name":"slider"}],"output":{"name":"state"}}],[11,"style","","",13,{"inputs":[{"name":"slider"}],"output":{"name":"style"}}],[11,"kid_area","","",13,{"inputs":[{"name":"slider"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Slider.",13,{"inputs":[{"name":"slider"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",13,{"inputs":[{"name":"slider"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","Build the type&#39;s self.$($assignee).+ with the given $Type.",13,{"inputs":[{"name":"slider"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"frame_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",13,{"inputs":[{"name":"slider"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type&#39;s self.$($assignee).+ with the given $Type.",13,{"inputs":[{"name":"slider"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",13,{"inputs":[{"name":"slider"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",13,{"inputs":[{"name":"slider"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"eq","","",28,{"inputs":[{"name":"tabsstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"tabsstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"tabsstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"tabsstyle"}],"output":{"name":"style"}}],[11,"new","","Construct some new Canvas Tabs.",127,null],[11,"starting_canvas","","Set the initially selected tab with a Canvas via its widget::Id.",127,{"inputs":[{"name":"tabs"},{"name":"id"}],"output":{"name":"self"}}],[11,"pad","","Set the padding for all edges.",127,{"inputs":[{"name":"tabs"},{"name":"scalar"}],"output":{"name":"tabs"}}],[11,"layout_horizontally","","Layout the tabs horizontally.",127,{"inputs":[{"name":"tabs"}],"output":{"name":"self"}}],[11,"layout_vertically","","Layout the tabs vertically.",127,{"inputs":[{"name":"tabs"}],"output":{"name":"self"}}],[11,"bar_width","","Build the type&#39;s self.$($assignee).+ with the given $Type.",127,{"inputs":[{"name":"tabs"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"starting_tab_idx","","Build the type&#39;s self.$($assignee).+ with the given $Type.",127,{"inputs":[{"name":"tabs"},{"name":"usize"}],"output":{"name":"self"}}],[11,"label_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",127,{"inputs":[{"name":"tabs"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",127,{"inputs":[{"name":"tabs"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"canvas_style","","Build the type&#39;s self.$($assignee).+ with the given $Type.",127,{"inputs":[{"name":"tabs"},{"name":"style"}],"output":{"name":"self"}}],[11,"pad_left","","Build the type&#39;s self.$($assignee).+ with the given $Type.",127,{"inputs":[{"name":"tabs"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_right","","Build the type&#39;s self.$($assignee).+ with the given $Type.",127,{"inputs":[{"name":"tabs"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_bottom","","Build the type&#39;s self.$($assignee).+ with the given $Type.",127,{"inputs":[{"name":"tabs"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"pad_top","","Build the type&#39;s self.$($assignee).+ with the given $Type.",127,{"inputs":[{"name":"tabs"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"common","","",127,{"inputs":[{"name":"tabs"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",127,{"inputs":[{"name":"tabs"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",127,{"inputs":[{"name":"tabs"}],"output":{"name":"str"}}],[11,"init_state","","",127,{"inputs":[{"name":"tabs"}],"output":{"name":"state"}}],[11,"style","","",127,{"inputs":[{"name":"tabs"}],"output":{"name":"style"}}],[11,"kid_area","","The area on which child widgets will be placed when using the `Place` Positionable methods.",127,{"inputs":[{"name":"tabs"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the Tabs.",127,{"inputs":[{"name":"tabs"},{"name":"updateargs"}],"output":null}],[11,"new","","Construct the default `Tabs` style.",28,{"inputs":[],"output":{"name":"style"}}],[11,"layout","","Get the layout of the tabs for the `Tabs` widget.",28,{"inputs":[{"name":"tabsstyle"},{"name":"theme"}],"output":{"name":"layout"}}],[11,"label_color","","Get the color for the tab labels.",28,{"inputs":[{"name":"tabsstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"font_size","","Get the font size for the tab labels.",28,{"inputs":[{"name":"tabsstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"color","","",127,{"inputs":[{"name":"tabs"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","",127,{"inputs":[{"name":"tabs"},{"name":"f64"}],"output":{"name":"self"}}],[11,"frame_color","","",127,{"inputs":[{"name":"tabs"},{"name":"color"}],"output":{"name":"self"}}],[11,"eq","","",29,{"inputs":[{"name":"textboxstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"textboxstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"textboxstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"textboxstyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",29,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",29,{"inputs":[{"name":"textboxstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"frame","","Retrieves the value from the `Style`.",29,{"inputs":[{"name":"textboxstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"frame_color","","Retrieves the value from the `Style`.",29,{"inputs":[{"name":"textboxstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"font_size","","Retrieves the value from the `Style`.",29,{"inputs":[{"name":"textboxstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"text_color","","Retrieves the value from the `Style`.",29,{"inputs":[{"name":"textboxstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"new","","Construct a TextBox widget.",14,{"inputs":[{"name":"string"}],"output":{"name":"textbox"}}],[11,"font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",14,{"inputs":[{"name":"textbox"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"react","","Build the type&#39;s self.$($assignee).+ with the given $Type.",14,{"inputs":[{"name":"textbox"},{"name":"f"}],"output":{"name":"self"}}],[11,"enabled","","Build the type&#39;s self.$($assignee).+ with the given $Type.",14,{"inputs":[{"name":"textbox"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",14,{"inputs":[{"name":"textbox"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",14,{"inputs":[{"name":"textbox"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",14,{"inputs":[{"name":"textbox"}],"output":{"name":"str"}}],[11,"init_state","","",14,{"inputs":[{"name":"textbox"}],"output":{"name":"state"}}],[11,"style","","",14,{"inputs":[{"name":"textbox"}],"output":{"name":"style"}}],[11,"kid_area","","",14,{"inputs":[{"name":"textbox"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"update","","Update the state of the TextBox.",14,{"inputs":[{"name":"textbox"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",14,{"inputs":[{"name":"textbox"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","Build the type&#39;s self.$($assignee).+ with the given $Type.",14,{"inputs":[{"name":"textbox"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"frame_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",14,{"inputs":[{"name":"textbox"},{"name":"color"}],"output":{"name":"self"}}],[11,"eq","","",30,{"inputs":[{"name":"titlebarstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"titlebarstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"titlebarstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"titlebarstyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",30,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",30,{"inputs":[{"name":"titlebarstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"frame","","Retrieves the value from the `Style`.",30,{"inputs":[{"name":"titlebarstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"frame_color","","Retrieves the value from the `Style`.",30,{"inputs":[{"name":"titlebarstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"text_color","","Retrieves the value from the `Style`.",30,{"inputs":[{"name":"titlebarstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"font_size","","Retrieves the value from the `Style`.",30,{"inputs":[{"name":"titlebarstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"maybe_wrap","","Retrieves the value from the `Style`.",30,{"inputs":[{"name":"titlebarstyle"},{"name":"theme"}],"output":{"name":"option"}}],[11,"line_spacing","","Retrieves the value from the `Style`.",30,{"inputs":[{"name":"titlebarstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"text_align","","Retrieves the value from the `Style`.",30,{"inputs":[{"name":"titlebarstyle"},{"name":"theme"}],"output":{"name":"align"}}],[11,"new","","Construct a new TitleBar widget and attach it to the widget at the given index.",15,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"self"}}],[11,"align_text_left","","Align the text to the left of its bounding **Rect**&#39;s *x* axis range.",15,{"inputs":[{"name":"titlebar"}],"output":{"name":"self"}}],[11,"align_text_middle","","Align the text to the middle of its bounding **Rect**&#39;s *x* axis range.",15,{"inputs":[{"name":"titlebar"}],"output":{"name":"self"}}],[11,"align_text_right","","Align the text to the right of its bounding **Rect**&#39;s *x* axis range.",15,{"inputs":[{"name":"titlebar"}],"output":{"name":"self"}}],[11,"line_spacing","","Build the type&#39;s self.$($assignee).+ with the given $Type.",15,{"inputs":[{"name":"titlebar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"react","","Build the type&#39;s self.$($assignee).+ with the given $Type.",15,{"inputs":[{"name":"titlebar"},{"name":"f"}],"output":{"name":"self"}}],[11,"common","","",15,{"inputs":[{"name":"titlebar"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",15,{"inputs":[{"name":"titlebar"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",15,{"inputs":[{"name":"titlebar"}],"output":{"name":"str"}}],[11,"init_state","","",15,{"inputs":[{"name":"titlebar"}],"output":{"name":"state"}}],[11,"style","","",15,{"inputs":[{"name":"titlebar"}],"output":{"name":"style"}}],[11,"default_y_dimension","","",15,{"inputs":[{"name":"titlebar"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"update","","",15,{"inputs":[{"name":"titlebar"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",15,{"inputs":[{"name":"titlebar"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","Build the type&#39;s self.$($assignee).+ with the given $Type.",15,{"inputs":[{"name":"titlebar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"frame_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",15,{"inputs":[{"name":"titlebar"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type&#39;s self.$($assignee).+ with the given $Type.",15,{"inputs":[{"name":"titlebar"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",15,{"inputs":[{"name":"titlebar"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",15,{"inputs":[{"name":"titlebar"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"eq","","",31,{"inputs":[{"name":"togglestyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"togglestyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"togglestyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"togglestyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",31,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",31,{"inputs":[{"name":"togglestyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"frame","","Retrieves the value from the `Style`.",31,{"inputs":[{"name":"togglestyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"frame_color","","Retrieves the value from the `Style`.",31,{"inputs":[{"name":"togglestyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",31,{"inputs":[{"name":"togglestyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",31,{"inputs":[{"name":"togglestyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"new","","Construct a new Toggle widget.",16,{"inputs":[{"name":"bool"}],"output":{"name":"toggle"}}],[11,"react","","Build the type&#39;s self.$($assignee).+ with the given $Type.",16,{"inputs":[{"name":"toggle"},{"name":"f"}],"output":{"name":"self"}}],[11,"enabled","","Build the type&#39;s self.$($assignee).+ with the given $Type.",16,{"inputs":[{"name":"toggle"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",16,{"inputs":[{"name":"toggle"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",16,{"inputs":[{"name":"toggle"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",16,{"inputs":[{"name":"toggle"}],"output":{"name":"str"}}],[11,"init_state","","",16,{"inputs":[{"name":"toggle"}],"output":{"name":"state"}}],[11,"style","","",16,{"inputs":[{"name":"toggle"}],"output":{"name":"style"}}],[11,"update","","Update the state of the Toggle.",16,{"inputs":[{"name":"toggle"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",16,{"inputs":[{"name":"toggle"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","Build the type&#39;s self.$($assignee).+ with the given $Type.",16,{"inputs":[{"name":"toggle"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"frame_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",16,{"inputs":[{"name":"toggle"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type&#39;s self.$($assignee).+ with the given $Type.",16,{"inputs":[{"name":"toggle"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",16,{"inputs":[{"name":"toggle"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",16,{"inputs":[{"name":"toggle"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"eq","","",32,{"inputs":[{"name":"xypadstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"xypadstyle"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"xypadstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"xypadstyle"}],"output":{"name":"style"}}],[11,"new","","Construct the default `Style`, initialising all fields to `None`.",32,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Retrieves the value from the `Style`.",32,{"inputs":[{"name":"xypadstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"frame","","Retrieves the value from the `Style`.",32,{"inputs":[{"name":"xypadstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"frame_color","","Retrieves the value from the `Style`.",32,{"inputs":[{"name":"xypadstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_color","","Retrieves the value from the `Style`.",32,{"inputs":[{"name":"xypadstyle"},{"name":"theme"}],"output":{"name":"color"}}],[11,"label_font_size","","Retrieves the value from the `Style`.",32,{"inputs":[{"name":"xypadstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"value_font_size","","Retrieves the value from the `Style`.",32,{"inputs":[{"name":"xypadstyle"},{"name":"theme"}],"output":{"name":"fontsize"}}],[11,"line_thickness","","Retrieves the value from the `Style`.",32,{"inputs":[{"name":"xypadstyle"},{"name":"theme"}],"output":{"name":"scalar"}}],[11,"new","","Build a new XYPad widget.",17,{"inputs":[{"name":"x"},{"name":"x"},{"name":"x"},{"name":"y"},{"name":"y"},{"name":"y"}],"output":{"name":"self"}}],[11,"line_thickness","","Build the type&#39;s self.$($assignee).+ with the given $Type.",17,{"inputs":[{"name":"xypad"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"value_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",17,{"inputs":[{"name":"xypad"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"react","","Build the type&#39;s self.$($assignee).+ with the given $Type.",17,{"inputs":[{"name":"xypad"},{"name":"f"}],"output":{"name":"self"}}],[11,"enabled","","Build the type&#39;s self.$($assignee).+ with the given $Type.",17,{"inputs":[{"name":"xypad"},{"name":"bool"}],"output":{"name":"self"}}],[11,"common","","",17,{"inputs":[{"name":"xypad"}],"output":{"name":"commonbuilder"}}],[11,"common_mut","","",17,{"inputs":[{"name":"xypad"}],"output":{"name":"commonbuilder"}}],[11,"unique_kind","","",17,{"inputs":[{"name":"xypad"}],"output":{"name":"str"}}],[11,"init_state","","",17,{"inputs":[{"name":"xypad"}],"output":{"name":"state"}}],[11,"style","","",17,{"inputs":[{"name":"xypad"}],"output":{"name":"style"}}],[11,"update","","Update the XYPad&#39;s cached state.",17,{"inputs":[{"name":"xypad"},{"name":"updateargs"}],"output":null}],[11,"color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",17,{"inputs":[{"name":"xypad"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame","","Build the type&#39;s self.$($assignee).+ with the given $Type.",17,{"inputs":[{"name":"xypad"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"frame_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",17,{"inputs":[{"name":"xypad"},{"name":"color"}],"output":{"name":"self"}}],[11,"label","","Build the type&#39;s self.$($assignee).+ with the given $Type.",17,{"inputs":[{"name":"xypad"},{"name":"str"}],"output":{"name":"self"}}],[11,"label_color","","Build the type&#39;s self.$($assignee).+ with the given $Type.",17,{"inputs":[{"name":"xypad"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_font_size","","Build the type&#39;s self.$($assignee).+ with the given $Type.",17,{"inputs":[{"name":"xypad"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"eq","","",128,{"inputs":[{"name":"indexslot"},{"name":"indexslot"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"indexslot"},{"name":"indexslot"}],"output":{"name":"bool"}}],[11,"fmt","","",128,{"inputs":[{"name":"indexslot"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"indexslot"}],"output":{"name":"indexslot"}}],[11,"eq","","",46,{"inputs":[{"name":"kidarea"},{"name":"kidarea"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"kidarea"},{"name":"kidarea"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"kidarea"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"kidarea"}],"output":{"name":"kidarea"}}],[11,"eq","","",61,{"inputs":[{"name":"maybeparent"},{"name":"maybeparent"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"maybeparent"},{"name":"maybeparent"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"maybeparent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"maybeparent"}],"output":{"name":"maybeparent"}}],[11,"get_unchecked","","Convert the **MaybeParent** into an **Option&lt;Index&gt;**.",61,{"inputs":[{"name":"maybeparent"},{"name":"ui"},{"name":"position"},{"name":"position"}],"output":{"name":"index"}}],[11,"get","","The same as `get_unchecked`, but checks whether or not the widget that we&#39;re inferring the\nparent for is the `Ui`&#39;s window (which cannot have a parent, without creating a cycle).",61,{"inputs":[{"name":"maybeparent"},{"name":"index"},{"name":"ui"},{"name":"position"},{"name":"position"}],"output":{"name":"option"}}],[11,"eq","","",44,{"inputs":[{"name":"floating"},{"name":"floating"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"floating"},{"name":"floating"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"floating"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"floating"}],"output":{"name":"floating"}}],[11,"fmt","","",41,{"inputs":[{"name":"commonbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"commonbuilder"}],"output":{"name":"commonbuilder"}}],[11,"fmt","","",43,{"inputs":[{"name":"commonstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"commonstyle"}],"output":{"name":"commonstyle"}}],[11,"fmt","","",129,{"inputs":[{"name":"widgetstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"commonstate"},{"name":"commonstate"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"commonstate"},{"name":"commonstate"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"commonstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"commonstate"}],"output":{"name":"commonstate"}}],[11,"new","","Construct a new empty **IndexSlot**.",128,{"inputs":[],"output":{"name":"self"}}],[11,"get","","Returns the **NodeIndex** held by the **IndexSlot**.",128,{"inputs":[{"name":"indexslot"},{"name":"uicell"}],"output":{"name":"nodeindex"}}],[11,"view","","Immutably borrow the internal widget state.",129,{"inputs":[{"name":"widgetstate"}],"output":{"name":"t"}}],[11,"update","","Mutate the internal widget state and set a flag notifying us that there has been a mutation.",129,{"inputs":[{"name":"widgetstate"},{"name":"f"}],"output":null}],[11,"new","","Construct an empty, initialised CommonBuilder.",41,{"inputs":[],"output":{"name":"commonbuilder"}}],[11,"new","","A new default CommonStyle.",43,{"inputs":[],"output":{"name":"self"}}],[6,"FontSize","","Font size used throughout Conrod.",null,null],[6,"Depth","","The depth at which the widget will be rendered.",null,null],[6,"Dimensions","","General use 2D spatial dimensions.",null,null],[6,"Margin","","The margin for some `Place`ment on either end of an axis.",null,null],[6,"Point","","General use 2D spatial point.",null,null],[6,"Scalar","","An alias over the Scalar type used throughout Conrod.",null,null],[6,"WidgetKind","","A unique identifier for a **Widget** type.",null,null],[8,"EnvelopePoint","","`EnvPoint` must be implemented for any type that is used as a 2D point within the\nEnvelopeEditor.",null,null],[16,"X","","A value on the X-axis of the envelope.",130,null],[16,"Y","","A value on the Y-axis of the envelope.",130,null],[10,"get_x","","Return the X value.",130,{"inputs":[{"name":"envelopepoint"}],"output":{"name":"x"}}],[10,"get_y","","Return the Y value.",130,{"inputs":[{"name":"envelopepoint"}],"output":{"name":"y"}}],[10,"set_x","","Set the X value.",130,{"inputs":[{"name":"envelopepoint"},{"name":"x"}],"output":null}],[10,"set_y","","Set the Y value.",130,{"inputs":[{"name":"envelopepoint"},{"name":"y"}],"output":null}],[11,"get_curve","","Return the bezier curve depth (-1. to 1.) for the next interpolation.",130,{"inputs":[{"name":"envelopepoint"}],"output":{"name":"f32"}}],[11,"set_curve","","Set the bezier curve depth (-1. to 1.) for the next interpolation.",130,{"inputs":[{"name":"envelopepoint"},{"name":"f32"}],"output":null}],[10,"new","","Create a new EnvPoint.",130,{"inputs":[{"name":"x"},{"name":"y"}],"output":{"name":"self"}}],[8,"Frameable","","Widgets that may display a frame.",null,null],[10,"frame","","Set the width of the widget&#39;s frame.",131,{"inputs":[{"name":"frameable"},{"name":"f64"}],"output":{"name":"self"}}],[10,"frame_color","","Set the color of the widget&#39;s frame.",131,{"inputs":[{"name":"frameable"},{"name":"color"}],"output":{"name":"self"}}],[11,"frame_rgba","","Set the color of the widget&#39;s frame with rgba values.",131,{"inputs":[{"name":"frameable"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"frame_rgb","","Set the color of the widget&#39;s frame with rgb values.",131,{"inputs":[{"name":"frameable"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"frame_hsla","","Set the color of the widget&#39;s frame with hsla values.",131,{"inputs":[{"name":"frameable"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"frame_hsl","","Set the color of the widget&#39;s frame with hsl values.",131,{"inputs":[{"name":"frameable"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[8,"Labelable","","Widgets that may display some label.",null,null],[10,"label","","Set the label for the widget.",132,{"inputs":[{"name":"labelable"},{"name":"str"}],"output":{"name":"self"}}],[10,"label_color","","Set the color of the widget&#39;s label.",132,{"inputs":[{"name":"labelable"},{"name":"color"}],"output":{"name":"self"}}],[11,"label_rgba","","Set the color of the widget&#39;s label from rgba values.",132,{"inputs":[{"name":"labelable"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_rgb","","Set the color of the widget&#39;s label from rgb values.",132,{"inputs":[{"name":"labelable"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsla","","Set the color of the widget&#39;s label from hsla values.",132,{"inputs":[{"name":"labelable"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsl","","Set the color of the widget&#39;s label from hsl values.",132,{"inputs":[{"name":"labelable"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[10,"label_font_size","","Set the font size for the widget&#39;s label.",132,{"inputs":[{"name":"labelable"},{"name":"fontsize"}],"output":{"name":"self"}}],[11,"small_font","","Set a &quot;small&quot; font size for the widget&#39;s label.",132,{"inputs":[{"name":"labelable"},{"name":"ui"}],"output":{"name":"self"}}],[11,"medium_font","","Set a &quot;medium&quot; font size for the widget&#39;s label.",132,{"inputs":[{"name":"labelable"},{"name":"ui"}],"output":{"name":"self"}}],[11,"large_font","","Set a &quot;large&quot; font size for the widget&#39;s label.",132,{"inputs":[{"name":"labelable"},{"name":"ui"}],"output":{"name":"self"}}],[8,"Positionable","","Widgets that are positionable.",null,null],[10,"x_position","","Build with the given **Position** along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"position"}],"output":{"name":"self"}}],[10,"y_position","","Build with the given **Position** along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"position"}],"output":{"name":"self"}}],[10,"get_x_position","","Get the **Position** along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"ui"}],"output":{"name":"position"}}],[10,"get_y_position","","Get the **Position** along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"ui"}],"output":{"name":"position"}}],[11,"x","","Build with the given **Absolute** **Position** along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y","","Build with the given **Absolute** **Position** along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy","","Set the **Position** with some Point.",133,{"inputs":[{"name":"positionable"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y","","Set the **Position** with *x* *y* coordinates.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_relative","","Set the **Position** along the *x* axis **Relative** to the previous widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative","","Set the **Position** along the *y* axis **Relative** to the previous widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative","","Set the **Position** **Relative** to the previous widget.",133,{"inputs":[{"name":"positionable"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative","","Set the **Position** **Relative** to the previous widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_relative_to","","Set the position relative to the widget with the given widget::Index.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative_to","","Set the position relative to the widget with the given widget::Index.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative_to","","Set the position relative to the widget with the given widget::Index.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative_to","","Set the position relative to the widget with the given widget::Index.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction","","Build with the **Position** along the *x* axis as some distance from another widget.",133,{"inputs":[{"name":"positionable"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction","","Build with the **Position** along the *y* axis as some distance from another widget.",133,{"inputs":[{"name":"positionable"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down","","Build with the **Position** as some distance below another widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up","","Build with the **Position** as some distance above another widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left","","Build with the **Position** as some distance to the left of another widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right","","Build with the **Position** as some distance to the right of another widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction_from","","Build with the **Position** along the *x* axis as some distance from the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction_from","","Build with the **Position** along the *y* axis as some distance from the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down_from","","Build with the **Position** as some distance below the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up_from","","Build with the **Position** as some distance above the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left_from","","Build with the **Position** as some distance to the left of the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right_from","","Build with the **Position** as some distance to the right of the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_align","","Align the **Position** of the widget along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align","","Align the **Position** of the widget along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left","","Align the position to the left (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"align_middle_x","","Align the position to the middle (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"align_right","","Align the position to the right (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"align_top","","Align the position to the top (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"align_middle_y","","Align the position to the middle (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"align_bottom","","Align the position to the bottom (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"x_align_to","","Align the **Position** of the widget with the given widget along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align_to","","Align the **Position** of the widget with the given widget along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left_of","","Align the position to the left (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"align_middle_x_of","","Align the position to the middle (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"align_right_of","","Align the position to the right (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"align_top_of","","Align the position to the top (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"align_middle_y_of","","Align the position to the middle (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"align_bottom_of","","Align the position to the bottom (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"x_place_on","","Place the widget at some position on the `other` Widget along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place_on","","Place the widget at some position on the `other` Widget along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle_of","","Place the widget in the middle of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"top_left_of","","Place the widget in the top left corner of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"top_left_with_margin_on","","Place the widget in the top left corner of the given Widget with the given margin between\nboth edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins_on","","Place the widget in the top left corner of the given Widget with the given margins between\neach respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_of","","Place the widget in the top right corner of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"top_right_with_margin_on","","Place the widget in the top right corner of the given Widget with the given margin\nbetween both edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins_on","","Place the widget in the top right corner of the given Widget with the given margins between\neach respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_of","","Place the widget in the bottom left corner of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin_on","","Place the widget in the bottom left corner of the given Widget with the given margin\nbetween both edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins_on","","Place the widget in the bottom left corner of the given Widget with the given margins\nbetween each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_of","","Place the widget in the bottom right corner of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin_on","","Place the widget in the bottom right corner of the given Widget with the given margin\nbetween both edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins_on","","Place the widget in the bottom right corner of the given Widget with the given margins\nbetween each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top_of","","Place the widget in the middle of the top edge of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"mid_top_with_margin_on","","Place the widget in the middle of the top edge of the given Widget with the given margin\nbetween the edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom_of","","Place the widget in the middle of the bottom edge of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin_on","","Place the widget in the middle of the bottom edge of the given Widget with the given margin\nbetween the edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left_of","","Place the widget in the middle of the left edge of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"mid_left_with_margin_on","","Place the widget in the middle of the left edge of the given Widget with the given margin\nbetween the edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right_of","","Place the widget in the middle of the right edge of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"mid_right_with_margin_on","","Place the widget in the middle of the right edge of the given Widget with the given margin\nbetween the edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_place","","Place the widget at some position on the Widget along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place","","Place the widget at some position on the Widget along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle","","Place the widget in the middle of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"top_left","","Place the widget in the top left corner of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"top_left_with_margin","","Place the widget in the top left corner of the current parent Widget with the given margin\nbetween both edges.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins","","Place the widget in the top left corner of the current parent Widget with the given margins\nbetween each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right","","Place the widget in the top right corner of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"top_right_with_margin","","Place the widget in the top right corner of the current parent Widget with the given margin\nbetween both edges.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins","","Place the widget in the top right corner of the current parent Widget with the given margins\nbetween each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left","","Place the widget in the bottom left corner of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin","","Place the widget in the bottom left corner of the current parent Widget with the given\nmargin between both edges.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins","","Place the widget in the bottom left corner of the current parent Widget with the given\nmargins between each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right","","Place the widget in the bottom right corner of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin","","Place the widget in the bottom right corner of the current parent Widget with the given\nmargin between both edges.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins","","Place the widget in the bottom right corner of the current parent Widget with the given\nmargins between each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top","","Place the widget in the middle of the top edge of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"mid_top_with_margin","","Place the widget in the middle of the top edge of the current parent Widget with the given\nmargin from the edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom","","Place the widget in the middle of the bottom edge of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin","","Place the widget in the middle of the bottom edge of the current parent Widget with the\ngiven margin from the edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left","","Place the widget in the middle of the left edge of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"mid_left_with_margin","","Place the widget in the middle of the left edge of the current parent Widget with the\ngiven margin from the edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right","","Place the widget in the middle of the right edge of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"mid_right_with_margin","","Place the widget in the middle of the right edge of the current parent Widget with the\ngiven margin from the edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"depth","","The depth at which the widget should be rendered relatively to its sibling widgets.",133,{"inputs":[{"name":"positionable"},{"name":"depth"}],"output":{"name":"self"}}],[10,"get_depth","","Return the depth.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"depth"}}],[8,"Sizeable","","Widgets that support different dimensions.",null,null],[10,"x_dimension","","Set the length along the x axis.",134,{"inputs":[{"name":"sizeable"},{"name":"dimension"}],"output":{"name":"self"}}],[10,"y_dimension","","Set the length along the y axis.",134,{"inputs":[{"name":"sizeable"},{"name":"dimension"}],"output":{"name":"self"}}],[10,"get_x_dimension","","The widget&#39;s length along the x axis as a Dimension.",134,{"inputs":[{"name":"sizeable"},{"name":"ui"}],"output":{"name":"dimension"}}],[10,"get_y_dimension","","The widget&#39;s length along the y axis as a Dimension.",134,{"inputs":[{"name":"sizeable"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"w","","Set the absolute width for the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h","","Set the absolute height for the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh","","Set the dimensions for the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"dimensions"}],"output":{"name":"self"}}],[11,"w_h","","Set the width and height for the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"w_of","","Set the width as the width of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_w_of","","Set the width as the width of the widget at the given index padded at both ends by the\ngiven Scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h_of","","Set the height as the height of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_h_of","","Set the height as the height of the widget at the given index padded at both ends by the\ngiven Scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh_of","","Set the dimensions as the dimensions of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_wh_of","","Set the dimensions as the dimensions of the widget at the given index with all four edges\npadded by the given scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_w_of","","Set the width as the width of the padded area of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_kid_area_w_of","","Set the width as the `KidArea` width for the widget at the given index, padded at both ends\nby the given scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index, padded at both\nends by the given scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index, padded at\nall four edges by the given scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"get_w","","Get the absolute width of the widget as a Scalar value.",134,{"inputs":[{"name":"sizeable"},{"name":"ui"}],"output":{"name":"option"}}],[11,"get_h","","Get the height of the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"ui"}],"output":{"name":"option"}}],[11,"get_wh","","The dimensions for the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"ui"}],"output":{"name":"option"}}],[8,"Widget","","A trait to be implemented by all **Widget** types.",null,null],[16,"State","","State to be stored within the `Ui`s widget cache.",135,null],[16,"Style","","Every widget is required to have its own associated `Style` type. This type is intended to\ncontain high-level styling information for the widget that can be *optionally specified* by\na user of the widget.",135,null],[10,"common","","Return a reference to a **CommonBuilder** struct owned by the Widget.\nThis method allows us to do a blanket impl of Positionable and Sizeable for T: Widget.",135,{"inputs":[{"name":"widget"}],"output":{"name":"commonbuilder"}}],[10,"common_mut","","Return a mutable reference to a CommonBuilder struct owned by the Widget.\nThis method allows us to do a blanket impl of Positionable and Sizeable for T: Widget.",135,{"inputs":[{"name":"widget"}],"output":{"name":"commonbuilder"}}],[10,"unique_kind","","Return the kind of the widget as a &amp;&#39;static str.",135,{"inputs":[{"name":"widget"}],"output":{"name":"kind"}}],[10,"init_state","","Return the initial **State** of the Widget.",135,{"inputs":[{"name":"widget"}],"output":{"name":"state"}}],[10,"style","","Return the styling of the widget.",135,{"inputs":[{"name":"widget"}],"output":{"name":"style"}}],[10,"update","","Update our **Widget**&#39;s unique **Widget::State** via the **State** wrapper type (the\n`state` field within the [**UpdateArgs**](./struct.UpdateArgs)).",135,{"inputs":[{"name":"widget"},{"name":"updateargs"}],"output":null}],[11,"default_x_position","","The default **Position** for the widget along the *x* axis.",135,{"inputs":[{"name":"widget"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_y_position","","The default **Position** for the widget along the *y* axis.",135,{"inputs":[{"name":"widget"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_x_dimension","","The default width for the **Widget**.",135,{"inputs":[{"name":"widget"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","The default height of the widget.",135,{"inputs":[{"name":"widget"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"drag_area","","If the widget is draggable, implement this method and return the position an dimensions\nof the draggable space. The position should be relative to the center of the widget.",135,{"inputs":[{"name":"widget"},{"name":"dimensions"},{"name":"style"},{"name":"theme"}],"output":{"name":"option"}}],[11,"kid_area","","The area on which child widgets will be placed when using the `Place` `Position` methods.",135,{"inputs":[{"name":"widget"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"parent","","Set the parent widget for this Widget by passing the WidgetId of the parent.",135,{"inputs":[{"name":"widget"},{"name":"i"}],"output":{"name":"self"}}],[11,"no_parent","","Specify that this widget has no parent widgets.",135,{"inputs":[{"name":"widget"}],"output":{"name":"self"}}],[11,"place_on_kid_area","","Set whether or not the **Widget** should be placed on the kid_area.",135,{"inputs":[{"name":"widget"},{"name":"bool"}],"output":{"name":"self"}}],[11,"graphics_for","","Indicates that the **Widget** is used as a non-interactive graphical element for some other\nwidget.",135,{"inputs":[{"name":"widget"},{"name":"i"}],"output":{"name":"self"}}],[11,"floating","","Set whether or not the widget is floating (the default is `false`).\nA typical example of a floating widget would be a pop-up or alert window.",135,{"inputs":[{"name":"widget"},{"name":"bool"}],"output":{"name":"self"}}],[11,"scroll_kids","","Set whether or not the widget&#39;s `KidArea` is scrollable (the default is false).",135,{"inputs":[{"name":"widget"}],"output":{"name":"self"}}],[11,"scroll_kids_vertically","","Set whether or not the widget&#39;s `KidArea` is scrollable (the default is false).",135,{"inputs":[{"name":"widget"}],"output":{"name":"self"}}],[11,"scroll_kids_horizontally","","Set whether or not the widget&#39;s `KidArea` is scrollable (the default is false).",135,{"inputs":[{"name":"widget"}],"output":{"name":"self"}}],[11,"and","","A builder method that &quot;lifts&quot; the **Widget** through the given `build` function.",135,{"inputs":[{"name":"widget"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_mut","","A builder method that mutates the **Widget** with the given `mutate` function.",135,{"inputs":[{"name":"widget"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_if","","A method that conditionally builds the **Widget** with the given `build` function.",135,{"inputs":[{"name":"widget"},{"name":"bool"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_then","","A method that optionally builds the the **Widget** with the given `build` function.",135,{"inputs":[{"name":"widget"},{"name":"option"},{"name":"f"}],"output":{"name":"self"}}],[11,"set","","Note: There should be no need to override this method.",135,{"inputs":[{"name":"widget"},{"name":"i"},{"name":"uicell"}],"output":null}],[14,"builder_method!","","A macro for simplifying implementation of methods for the `builder pattern`.",null,null],[14,"builder_methods!","","A macro to simplify implementation of\n[&quot;builder-pattern&quot;](https://en.wikipedia.org/wiki/Builder_pattern) methods.",null,null],[14,"widget_style!","","A macro for vastly simplifying the definition and implementation of a widget&#39;s associated\n`Style` type.",null,null],[14,"widget_ids!","","Generate a list of unique IDs given a list of identifiers.",null,null],[11,"frame_rgba","","Set the color of the widget&#39;s frame with rgba values.",131,{"inputs":[{"name":"frameable"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"frame_rgb","","Set the color of the widget&#39;s frame with rgb values.",131,{"inputs":[{"name":"frameable"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"frame_hsla","","Set the color of the widget&#39;s frame with hsla values.",131,{"inputs":[{"name":"frameable"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"frame_hsl","","Set the color of the widget&#39;s frame with hsl values.",131,{"inputs":[{"name":"frameable"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"to_widget_id","conrod::graph","",136,{"inputs":[{"name":"nodeindex"},{"name":"indexmap"}],"output":{"name":"option"}}],[11,"to_node_index","","",136,{"inputs":[{"name":"nodeindex"},{"name":"indexmap"}],"output":{"name":"option"}}],[11,"from_idx","","",136,{"inputs":[{"name":"i"},{"name":"indexmap"}],"output":{"name":"option"}}],[11,"label_rgba","conrod","Set the color of the widget&#39;s label from rgba values.",132,{"inputs":[{"name":"labelable"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_rgb","","Set the color of the widget&#39;s label from rgb values.",132,{"inputs":[{"name":"labelable"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsla","","Set the color of the widget&#39;s label from hsla values.",132,{"inputs":[{"name":"labelable"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"label_hsl","","Set the color of the widget&#39;s label from hsl values.",132,{"inputs":[{"name":"labelable"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"small_font","","Set a &quot;small&quot; font size for the widget&#39;s label.",132,{"inputs":[{"name":"labelable"},{"name":"ui"}],"output":{"name":"self"}}],[11,"medium_font","","Set a &quot;medium&quot; font size for the widget&#39;s label.",132,{"inputs":[{"name":"labelable"},{"name":"ui"}],"output":{"name":"self"}}],[11,"large_font","","Set a &quot;large&quot; font size for the widget&#39;s label.",132,{"inputs":[{"name":"labelable"},{"name":"ui"}],"output":{"name":"self"}}],[11,"x","","Build with the given **Absolute** **Position** along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y","","Build with the given **Absolute** **Position** along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy","","Set the **Position** with some Point.",133,{"inputs":[{"name":"positionable"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y","","Set the **Position** with *x* *y* coordinates.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_relative","","Set the **Position** along the *x* axis **Relative** to the previous widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative","","Set the **Position** along the *y* axis **Relative** to the previous widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative","","Set the **Position** **Relative** to the previous widget.",133,{"inputs":[{"name":"positionable"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative","","Set the **Position** **Relative** to the previous widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_relative_to","","Set the position relative to the widget with the given widget::Index.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_relative_to","","Set the position relative to the widget with the given widget::Index.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"xy_relative_to","","Set the position relative to the widget with the given widget::Index.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"point"}],"output":{"name":"self"}}],[11,"x_y_relative_to","","Set the position relative to the widget with the given widget::Index.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction","","Build with the **Position** along the *x* axis as some distance from another widget.",133,{"inputs":[{"name":"positionable"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction","","Build with the **Position** along the *y* axis as some distance from another widget.",133,{"inputs":[{"name":"positionable"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down","","Build with the **Position** as some distance below another widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up","","Build with the **Position** as some distance above another widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left","","Build with the **Position** as some distance to the left of another widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right","","Build with the **Position** as some distance to the right of another widget.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_direction_from","","Build with the **Position** along the *x* axis as some distance from the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"y_direction_from","","Build with the **Position** along the *y* axis as some distance from the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"direction"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"down_from","","Build with the **Position** as some distance below the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"up_from","","Build with the **Position** as some distance above the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"left_from","","Build with the **Position** as some distance to the left of the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"right_from","","Build with the **Position** as some distance to the right of the given widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_align","","Align the **Position** of the widget along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align","","Align the **Position** of the widget along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left","","Align the position to the left (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"align_middle_x","","Align the position to the middle (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"align_right","","Align the position to the right (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"align_top","","Align the position to the top (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"align_middle_y","","Align the position to the middle (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"align_bottom","","Align the position to the bottom (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"x_align_to","","Align the **Position** of the widget with the given widget along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"align"}],"output":{"name":"self"}}],[11,"y_align_to","","Align the **Position** of the widget with the given widget along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"align"}],"output":{"name":"self"}}],[11,"align_left_of","","Align the position to the left (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"align_middle_x_of","","Align the position to the middle (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"align_right_of","","Align the position to the right (only effective for Up or Down `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"align_top_of","","Align the position to the top (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"align_middle_y_of","","Align the position to the middle (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"align_bottom_of","","Align the position to the bottom (only effective for Left or Right `Direction`s).",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"x_place_on","","Place the widget at some position on the `other` Widget along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place_on","","Place the widget at some position on the `other` Widget along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle_of","","Place the widget in the middle of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"top_left_of","","Place the widget in the top left corner of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"top_left_with_margin_on","","Place the widget in the top left corner of the given Widget with the given margin between\nboth edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins_on","","Place the widget in the top left corner of the given Widget with the given margins between\neach respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_of","","Place the widget in the top right corner of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"top_right_with_margin_on","","Place the widget in the top right corner of the given Widget with the given margin\nbetween both edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins_on","","Place the widget in the top right corner of the given Widget with the given margins between\neach respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_of","","Place the widget in the bottom left corner of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin_on","","Place the widget in the bottom left corner of the given Widget with the given margin\nbetween both edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins_on","","Place the widget in the bottom left corner of the given Widget with the given margins\nbetween each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_of","","Place the widget in the bottom right corner of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin_on","","Place the widget in the bottom right corner of the given Widget with the given margin\nbetween both edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins_on","","Place the widget in the bottom right corner of the given Widget with the given margins\nbetween each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top_of","","Place the widget in the middle of the top edge of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"mid_top_with_margin_on","","Place the widget in the middle of the top edge of the given Widget with the given margin\nbetween the edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom_of","","Place the widget in the middle of the bottom edge of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin_on","","Place the widget in the middle of the bottom edge of the given Widget with the given margin\nbetween the edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left_of","","Place the widget in the middle of the left edge of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"mid_left_with_margin_on","","Place the widget in the middle of the left edge of the given Widget with the given margin\nbetween the edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right_of","","Place the widget in the middle of the right edge of the given Widget.",133,{"inputs":[{"name":"positionable"},{"name":"i"}],"output":{"name":"self"}}],[11,"mid_right_with_margin_on","","Place the widget in the middle of the right edge of the given Widget with the given margin\nbetween the edges.",133,{"inputs":[{"name":"positionable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"x_place","","Place the widget at some position on the Widget along the *x* axis.",133,{"inputs":[{"name":"positionable"},{"name":"place"}],"output":{"name":"self"}}],[11,"y_place","","Place the widget at some position on the Widget along the *y* axis.",133,{"inputs":[{"name":"positionable"},{"name":"place"}],"output":{"name":"self"}}],[11,"middle","","Place the widget in the middle of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"top_left","","Place the widget in the top left corner of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"top_left_with_margin","","Place the widget in the top left corner of the current parent Widget with the given margin\nbetween both edges.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_left_with_margins","","Place the widget in the top left corner of the current parent Widget with the given margins\nbetween each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right","","Place the widget in the top right corner of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"top_right_with_margin","","Place the widget in the top right corner of the current parent Widget with the given margin\nbetween both edges.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"top_right_with_margins","","Place the widget in the top right corner of the current parent Widget with the given margins\nbetween each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left","","Place the widget in the bottom left corner of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"bottom_left_with_margin","","Place the widget in the bottom left corner of the current parent Widget with the given\nmargin between both edges.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_left_with_margins","","Place the widget in the bottom left corner of the current parent Widget with the given\nmargins between each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right","","Place the widget in the bottom right corner of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"bottom_right_with_margin","","Place the widget in the bottom right corner of the current parent Widget with the given\nmargin between both edges.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"bottom_right_with_margins","","Place the widget in the bottom right corner of the current parent Widget with the given\nmargins between each respective edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_top","","Place the widget in the middle of the top edge of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"mid_top_with_margin","","Place the widget in the middle of the top edge of the current parent Widget with the given\nmargin from the edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_bottom","","Place the widget in the middle of the bottom edge of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"mid_bottom_with_margin","","Place the widget in the middle of the bottom edge of the current parent Widget with the\ngiven margin from the edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_left","","Place the widget in the middle of the left edge of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"mid_left_with_margin","","Place the widget in the middle of the left edge of the current parent Widget with the\ngiven margin from the edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"mid_right","","Place the widget in the middle of the right edge of the current parent Widget.",133,{"inputs":[{"name":"positionable"}],"output":{"name":"self"}}],[11,"mid_right_with_margin","","Place the widget in the middle of the right edge of the current parent Widget with the\ngiven margin from the edge.",133,{"inputs":[{"name":"positionable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"w","","Set the absolute width for the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h","","Set the absolute height for the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh","","Set the dimensions for the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"dimensions"}],"output":{"name":"self"}}],[11,"w_h","","Set the width and height for the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"w_of","","Set the width as the width of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_w_of","","Set the width as the width of the widget at the given index padded at both ends by the\ngiven Scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"h_of","","Set the height as the height of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_h_of","","Set the height as the height of the widget at the given index padded at both ends by the\ngiven Scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"wh_of","","Set the dimensions as the dimensions of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_wh_of","","Set the dimensions as the dimensions of the widget at the given index with all four edges\npadded by the given scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_w_of","","Set the width as the width of the padded area of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_kid_area_w_of","","Set the width as the `KidArea` width for the widget at the given index, padded at both ends\nby the given scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_kid_area_h_of","","Set the height as the `KidArea` height of the widget at the given index, padded at both\nends by the given scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index.",134,{"inputs":[{"name":"sizeable"},{"name":"i"}],"output":{"name":"self"}}],[11,"padded_kid_area_wh_of","","Set the dimensions as the `KidArea` dimensions of the widget at the given index, padded at\nall four edges by the given scalar.",134,{"inputs":[{"name":"sizeable"},{"name":"i"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"get_w","","Get the absolute width of the widget as a Scalar value.",134,{"inputs":[{"name":"sizeable"},{"name":"ui"}],"output":{"name":"option"}}],[11,"get_h","","Get the height of the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"ui"}],"output":{"name":"option"}}],[11,"get_wh","","The dimensions for the widget.",134,{"inputs":[{"name":"sizeable"},{"name":"ui"}],"output":{"name":"option"}}],[11,"get_curve","","Return the bezier curve depth (-1. to 1.) for the next interpolation.",130,{"inputs":[{"name":"envelopepoint"}],"output":{"name":"f32"}}],[11,"set_curve","","Set the bezier curve depth (-1. to 1.) for the next interpolation.",130,{"inputs":[{"name":"envelopepoint"},{"name":"f32"}],"output":null}],[11,"get_x","","Return the X value.",137,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"get_y","","Return the Y value.",137,{"inputs":[{"name":"point"}],"output":{"name":"scalar"}}],[11,"set_x","","Return the X value.",137,{"inputs":[{"name":"point"},{"name":"scalar"}],"output":null}],[11,"set_y","","Return the Y value.",137,{"inputs":[{"name":"point"},{"name":"scalar"}],"output":null}],[11,"new","","Create a new Envelope Point.",137,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"point"}}],[11,"default_x_position","","The default **Position** for the widget along the *x* axis.",135,{"inputs":[{"name":"widget"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_y_position","","The default **Position** for the widget along the *y* axis.",135,{"inputs":[{"name":"widget"},{"name":"ui"}],"output":{"name":"position"}}],[11,"default_x_dimension","","The default width for the **Widget**.",135,{"inputs":[{"name":"widget"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"default_y_dimension","","The default height of the widget.",135,{"inputs":[{"name":"widget"},{"name":"ui"}],"output":{"name":"dimension"}}],[11,"drag_area","","If the widget is draggable, implement this method and return the position an dimensions\nof the draggable space. The position should be relative to the center of the widget.",135,{"inputs":[{"name":"widget"},{"name":"dimensions"},{"name":"style"},{"name":"theme"}],"output":{"name":"option"}}],[11,"kid_area","","The area on which child widgets will be placed when using the `Place` `Position` methods.",135,{"inputs":[{"name":"widget"},{"name":"kidareaargs"}],"output":{"name":"kidarea"}}],[11,"parent","","Set the parent widget for this Widget by passing the WidgetId of the parent.",135,{"inputs":[{"name":"widget"},{"name":"i"}],"output":{"name":"self"}}],[11,"no_parent","","Specify that this widget has no parent widgets.",135,{"inputs":[{"name":"widget"}],"output":{"name":"self"}}],[11,"place_on_kid_area","","Set whether or not the **Widget** should be placed on the kid_area.",135,{"inputs":[{"name":"widget"},{"name":"bool"}],"output":{"name":"self"}}],[11,"graphics_for","","Indicates that the **Widget** is used as a non-interactive graphical element for some other\nwidget.",135,{"inputs":[{"name":"widget"},{"name":"i"}],"output":{"name":"self"}}],[11,"floating","","Set whether or not the widget is floating (the default is `false`).\nA typical example of a floating widget would be a pop-up or alert window.",135,{"inputs":[{"name":"widget"},{"name":"bool"}],"output":{"name":"self"}}],[11,"scroll_kids","","Set whether or not the widget&#39;s `KidArea` is scrollable (the default is false).",135,{"inputs":[{"name":"widget"}],"output":{"name":"self"}}],[11,"scroll_kids_vertically","","Set whether or not the widget&#39;s `KidArea` is scrollable (the default is false).",135,{"inputs":[{"name":"widget"}],"output":{"name":"self"}}],[11,"scroll_kids_horizontally","","Set whether or not the widget&#39;s `KidArea` is scrollable (the default is false).",135,{"inputs":[{"name":"widget"}],"output":{"name":"self"}}],[11,"and","","A builder method that &quot;lifts&quot; the **Widget** through the given `build` function.",135,{"inputs":[{"name":"widget"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_mut","","A builder method that mutates the **Widget** with the given `mutate` function.",135,{"inputs":[{"name":"widget"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_if","","A method that conditionally builds the **Widget** with the given `build` function.",135,{"inputs":[{"name":"widget"},{"name":"bool"},{"name":"f"}],"output":{"name":"self"}}],[11,"and_then","","A method that optionally builds the the **Widget** with the given `build` function.",135,{"inputs":[{"name":"widget"},{"name":"option"},{"name":"f"}],"output":{"name":"self"}}],[11,"set","","Note: There should be no need to override this method.",135,{"inputs":[{"name":"widget"},{"name":"i"},{"name":"uicell"}],"output":null}]],"paths":[[8,"CharacterCache"],[8,"Graphics"],[3,"Line"],[3,"Image"],[3,"PointPath"],[3,"FramedRectangle"],[3,"Polygon"],[3,"Oval"],[3,"Rectangle"],[3,"Text"],[3,"Button"],[3,"Canvas"],[3,"EnvelopeEditor"],[3,"Slider"],[3,"TextBox"],[3,"TitleBar"],[3,"Toggle"],[3,"XYPad"],[3,"LineStyle"],[3,"ImageStyle"],[3,"FramedRectangleStyle"],[3,"TextStyle"],[3,"ButtonStyle"],[3,"CanvasStyle"],[3,"DropDownListStyle"],[3,"EnvelopeEditorStyle"],[3,"NumberDialerStyle"],[3,"SliderStyle"],[3,"TabsStyle"],[3,"TextBoxStyle"],[3,"TitleBarStyle"],[3,"ToggleStyle"],[3,"XYPadStyle"],[3,"Mouse"],[3,"MouseButtonState"],[3,"MouseScroll"],[3,"Padding"],[3,"Range"],[3,"Rect"],[3,"Ui"],[3,"UserInput"],[3,"CommonBuilder"],[3,"CommonState"],[3,"CommonStyle"],[3,"Floating"],[3,"UpdateArgs"],[3,"KidArea"],[3,"KidAreaArgs"],[3,"WidgetId"],[4,"Wrap"],[4,"ShapeStyle"],[4,"Framing"],[4,"MouseButtonPosition"],[4,"Align"],[4,"Axis"],[4,"Corner"],[4,"Direction"],[4,"Dimension"],[4,"Edge"],[4,"Place"],[4,"Position"],[4,"MaybeParent"],[4,"WidgetIndex"],[4,"State"],[3,"State"],[3,"Style"],[4,"Interaction"],[4,"Elem"],[8,"Axis"],[3,"Scroll"],[4,"X"],[4,"Y"],[3,"MouseDrag"],[3,"MouseClick"],[3,"Scroll"],[4,"UiEvent"],[3,"InputState"],[3,"ButtonMap"],[3,"WidgetInput"],[3,"WidgetInputEventIterator"],[3,"GlobalInput"],[8,"InputProvider"],[3,"TextJustEntered"],[3,"KeysJustReleased"],[3,"KeysJustPressed"],[3,"MouseButtonsJustPressed"],[3,"MouseButtonsJustReleased"],[3,"Context"],[3,"DrawState"],[8,"ImageSize"],[8,"Transformed"],[3,"Character"],[8,"Backend"],[3,"Background"],[3,"Hsla"],[3,"Rgba"],[4,"Color"],[4,"Gradient"],[8,"Colorable"],[4,"LineBreak"],[3,"CharWidths"],[3,"CharXs"],[3,"Widths"],[3,"LineBreaksBy"],[3,"GlyphCache"],[3,"RefCell"],[3,"Lines"],[8,"Walker"],[3,"UniqueWidgetState"],[3,"Container"],[4,"Node"],[4,"Edge"],[3,"DepthOrder"],[4,"Visitable"],[8,"GraphIndex"],[3,"Graph"],[6,"Children"],[6,"Parents"],[3,"Theme"],[3,"WidgetDefault"],[3,"UniqueDefault"],[3,"UiCell"],[4,"IterDiff"],[3,"Circle"],[3,"DropDownList"],[3,"WidgetMatrix"],[3,"NumberDialer"],[3,"Tabs"],[3,"IndexSlot"],[3,"WidgetState"],[8,"EnvelopePoint"],[8,"Frameable"],[8,"Labelable"],[8,"Positionable"],[8,"Sizeable"],[8,"Widget"],[6,"NodeIndex"],[6,"Point"]]};
searchIndex["graphics"] = {"doc":"A library for 2D graphics that works with multiple back-ends.","items":[[8,"ImageSize","graphics","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",0,null],[11,"get_width","","Gets the image width.",0,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[11,"get_height","","Gets the image height.",0,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[11,"abs_transform","viewport","Computes absolute transform for 2D graphics,\nwhich uses a row major 2x3 matrix.\nThe origin is in the upper left corner of the viewport rectangle.\nThe x axis points to the right, and the y axis points down.\nThe units are in points (window coordinates).",1,null],[11,"clone","","",1,{"inputs":[{"name":"viewport"}],"output":{"name":"viewport"}}],[3,"Viewport","graphics","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels.\n```[x, y, width height]``` where ```(x, y)``` is lower left corner.",1,null],[12,"draw_size","","The size of frame buffer in pixels.",1,null],[12,"window_size","","The size of window in points.",1,null],[5,"clear","","Clears the screen.",null,{"inputs":[{"name":"color"},{"name":"g"}],"output":null}],[5,"image","","Draws image.",null,null],[5,"ellipse","","Draws ellipse.",null,{"inputs":[{"name":"color"},{"name":"r"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"circle_arc","","Draws arc",null,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"scalar"},{"name":"scalar"},{"name":"r"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"rectangle","","Draws rectangle.",null,{"inputs":[{"name":"color"},{"name":"r"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"polygon","","Draws polygon.",null,{"inputs":[{"name":"color"},{"name":"polygon"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"line","","Draws line.",null,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"l"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"text","","Draws text.",null,{"inputs":[{"name":"color"},{"name":"fontsize"},{"name":"str"},{"name":"c"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"draw_state","","Graphics draw state.",null,null],[3,"DrawState","graphics::draw_state","Graphics draw state used for blending, clipping and stencil rendering.",null,null],[12,"scissor","","Scissor mask to use. If set, no pixel outside of this\nrectangle (in screen space) will be written to as a result of rendering.",2,null],[12,"stencil","","Stencil test to use. If None, no stencil testing is done.",2,null],[12,"blend","","Blend function to use. If None, blending is disabled.",2,null],[4,"Blend","","The blend setting to use when drawing.",null,null],[13,"Alpha","","Alpha blending (allows semi-transparent pixels).",3,null],[13,"Add","","Additive blending.",3,null],[13,"Multiply","","Multiply color components.",3,null],[13,"Invert","","Invert colors when rendering a white shape.",3,null],[4,"Stencil","","Stencil buffer settings.",null,null],[13,"Clip","","Draw to stencil buffer.",4,null],[13,"Inside","","Draw pixels that have stencil value.",4,null],[13,"Outside","","Draw pixels that does not have stencil value.",4,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"drawstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"new_alpha","","Uses alpha blending.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_clip","","Draws to stencil buffer with value 255.\nThis can be used for clipping.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_inside","","Tests against stencil buffer with value 255.\nDraws inside the shape defined by stencil buffer.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_outside","","Tests against stencil buffer with value 255.\nDraws outside the shape defined by stencil buffer.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"blend","","Sets blending.",2,{"inputs":[{"name":"drawstate"},{"name":"blend"}],"output":{"name":"drawstate"}}],[11,"scissor","","Sets scissor `[x, y, w, h]`.",2,null],[11,"partial_cmp","","",3,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"option"}}],[11,"eq","","",3,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[0,"character","graphics","A text character",null,null],[3,"Character","graphics::character","Holds rendered character data.",null,null],[12,"offset","","The offset of character.",5,null],[12,"size","","The size of character, including space.",5,null],[12,"texture","","The texture of the character.",5,null],[8,"CharacterCache","","Stores characters in a buffer and loads them by demand.",null,null],[16,"Texture","","The textyre type associated with the character cache.",6,null],[10,"character","","Get reference to character.",6,{"inputs":[{"name":"charactercache"},{"name":"fontsize"},{"name":"char"}],"output":{"name":"character"}}],[11,"width","","Return the width for some given text.",6,{"inputs":[{"name":"charactercache"},{"name":"fontsize"},{"name":"str"}],"output":{"name":"scalar"}}],[11,"clone","","",5,{"inputs":[{"name":"character"}],"output":{"name":"character"}}],[11,"left","","The left offset.",5,{"inputs":[{"name":"character"}],"output":{"name":"scalar"}}],[11,"top","","The top offset.",5,{"inputs":[{"name":"character"}],"output":{"name":"scalar"}}],[11,"width","","Gets width of character, including space to the next one.",5,{"inputs":[{"name":"character"}],"output":{"name":"scalar"}}],[11,"height","","Sets height of character, including space to the next one.",5,{"inputs":[{"name":"character"}],"output":{"name":"scalar"}}],[0,"context","graphics","Transformation context",null,null],[3,"Context","graphics::context","Drawing 2d context.",null,null],[12,"viewport","","Viewport information.",7,null],[12,"view","","View transformation.",7,null],[12,"transform","","Current transformation.",7,null],[12,"draw_state","","Current draw state settings.",7,null],[11,"clone","","",7,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"new","","Creates a new drawing context.",7,{"inputs":[],"output":{"name":"context"}}],[11,"new_viewport","","Creates a new context with absolute transform in point coordinates.",7,{"inputs":[{"name":"viewport"}],"output":{"name":"context"}}],[11,"new_abs","","Creates a new drawing context in absolute coordinates.",7,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"context"}}],[11,"view","","Moves the current transform to the view coordinate system.",7,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"reset","","Moves the current transform to the default coordinate system.",7,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"store_view","","Stores the current transform as new view.",7,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"get_view_size","","Computes the current view size.",7,{"inputs":[{"name":"context"}],"output":{"name":"vec2d"}}],[0,"color","graphics","Helper methods for colors",null,null],[5,"grey","graphics::color","Returns a grey color",null,{"inputs":[{"name":"colorcomponent"}],"output":{"name":"color"}}],[5,"alpha","","Returns a semi-transparent white color",null,{"inputs":[{"name":"colorcomponent"}],"output":{"name":"color"}}],[5,"hex","","Converts from hexadecimal color format",null,{"inputs":[{"name":"str"}],"output":{"name":"color"}}],[5,"gamma_srgb_to_linear","","Converts gamma (brightness) from sRGB to linear color space.",null,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[5,"gamma_linear_to_srgb","","Converts gamma (brightness) of a color from linear color space to sRGB.",null,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[17,"WHITE","","White color.",null,null],[17,"BLACK","","Black color.",null,null],[17,"TRANSPARENT","","Transparent color.",null,null],[0,"polygon","graphics","Draw polygon",null,null],[3,"Polygon","graphics::polygon","A polygon",null,null],[12,"color","","The color of the polygon",8,null],[11,"clone","","",8,{"inputs":[{"name":"polygon"}],"output":{"name":"polygon"}}],[11,"new","","Creates new polygon",8,{"inputs":[{"name":"color"}],"output":{"name":"polygon"}}],[11,"color","","Sets color.",8,{"inputs":[{"name":"polygon"},{"name":"color"}],"output":{"name":"self"}}],[11,"draw","","Draws polygon using the default method.",8,{"inputs":[{"name":"polygon"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws polygon using triangulation.",8,{"inputs":[{"name":"polygon"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tween_lerp","","Draws tweened polygon with linear interpolation, using default method.",8,{"inputs":[{"name":"polygon"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tween_lerp_tri","","Draws tweened polygon with linear interpolation, using triangulation.",8,{"inputs":[{"name":"polygon"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"line","graphics","Draw Line",null,null],[3,"Line","graphics::line","A colored line with a default border radius",null,null],[12,"color","","The line color",9,null],[12,"radius","","The line radius",9,null],[12,"shape","","The line shape",9,null],[4,"Shape","","The shape of the line",null,null],[13,"Square","","Square edges",10,null],[13,"Round","","Round edges",10,null],[13,"Bevel","","Bevel edges",10,null],[11,"clone","","",10,{"inputs":[{"name":"shape"}],"output":{"name":"shape"}}],[11,"clone","","",9,{"inputs":[{"name":"line"}],"output":{"name":"line"}}],[11,"new","","Creates a new line",9,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"line"}}],[11,"new_round","","Creates a new line",9,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"line"}}],[11,"color","","Sets color.",9,{"inputs":[{"name":"line"},{"name":"color"}],"output":{"name":"self"}}],[11,"radius","","Sets radius.",9,{"inputs":[{"name":"line"},{"name":"radius"}],"output":{"name":"self"}}],[11,"width","","Sets width.",9,{"inputs":[{"name":"line"},{"name":"width"}],"output":{"name":"self"}}],[11,"shape","","Sets shape.",9,{"inputs":[{"name":"line"},{"name":"shape"}],"output":{"name":"self"}}],[11,"draw","","Draws line using default method.",9,{"inputs":[{"name":"line"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws line using triangulation.",9,{"inputs":[{"name":"line"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_arrow","","Draws an arrow",9,{"inputs":[{"name":"line"},{"name":"l"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"circle_arc","graphics","Draw an arc",null,null],[3,"CircleArc","graphics::circle_arc","A curved line",null,null],[12,"color","","The arcs color",11,null],[12,"radius","","The radius of the arc (Thickness of the drawing, not the radius of the circle)",11,null],[12,"start","","The start of the arc in radians",11,null],[12,"end","","The end of the arc in radians",11,null],[12,"resolution","","The resolution for the arc.",11,null],[11,"clone","","",11,{"inputs":[{"name":"circlearc"}],"output":{"name":"circlearc"}}],[11,"new","","Creates a new arc",11,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"circlearc"}}],[11,"color","","Sets the arcs color.",11,{"inputs":[{"name":"circlearc"},{"name":"color"}],"output":{"name":"self"}}],[11,"radius","","Sets the radius of the arc (Thickness of the arc, not the radius of the circle it wraps)",11,{"inputs":[{"name":"circlearc"},{"name":"radius"}],"output":{"name":"self"}}],[11,"start","","Sets the start of the arc (in radians).",11,{"inputs":[{"name":"circlearc"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"end","","Sets the end of the arc (in radians).",11,{"inputs":[{"name":"circlearc"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"resolution","","Sets the resolution of the arcs smoothness.",11,{"inputs":[{"name":"circlearc"},{"name":"resolution"}],"output":{"name":"self"}}],[11,"draw","","Draws circle arc using default method.",11,{"inputs":[{"name":"circlearc"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws circle arc using triangulation.",11,{"inputs":[{"name":"circlearc"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"ellipse","graphics","Draw ellipse",null,null],[3,"Border","graphics::ellipse","Ellipse border",null,null],[12,"color","","The border color",12,null],[12,"radius","","The border radius",12,null],[3,"Ellipse","","An ellipse with filled color",null,null],[12,"color","","The ellipse color",13,null],[12,"border","","The ellipse border",13,null],[12,"resolution","","The resolution for the shape, 360 degrees.",13,null],[11,"clone","","",12,{"inputs":[{"name":"border"}],"output":{"name":"border"}}],[11,"clone","","",13,{"inputs":[{"name":"ellipse"}],"output":{"name":"ellipse"}}],[11,"new","","Creates a new ellipse",13,{"inputs":[{"name":"color"}],"output":{"name":"ellipse"}}],[11,"new_border","","Creates a new ellipse border",13,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"ellipse"}}],[11,"color","","Sets ellipse color.",13,{"inputs":[{"name":"ellipse"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Sets ellipse border.",13,{"inputs":[{"name":"ellipse"},{"name":"border"}],"output":{"name":"self"}}],[11,"maybe_border","","Sets optional ellipse border.",13,{"inputs":[{"name":"ellipse"},{"name":"option"}],"output":{"name":"self"}}],[11,"resolution","","Sets resolution of the ellipse smoothness.",13,{"inputs":[{"name":"ellipse"},{"name":"resolution"}],"output":{"name":"self"}}],[11,"draw","","Draws ellipse using default method.",13,{"inputs":[{"name":"ellipse"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws ellipse using triangulation.",13,{"inputs":[{"name":"ellipse"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"rectangle","graphics","Draw rectangle",null,null],[3,"Border","graphics::rectangle","The border of the rectangle",null,null],[12,"color","","The color of the border",14,null],[12,"radius","","The radius of the border",14,null],[3,"Rectangle","","A filled rectangle",null,null],[12,"color","","The rectangle color",15,null],[12,"shape","","The roundness of the rectangle",15,null],[12,"border","","The border",15,null],[4,"Shape","","The shape of the rectangle",null,null],[13,"Square","","Square corners",16,null],[13,"Round","","Round corners, with resolution per corner.",16,null],[13,"Bevel","","Bevel corners",16,null],[5,"centered","","Use x, y, half-width, half-height",null,{"inputs":[{"name":"rectangle"}],"output":{"name":"rectangle"}}],[5,"centered_square","","Use centered square",null,{"inputs":[{"name":"scalar"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rectangle"}}],[5,"square","","Use square with x, y in upper left corner",null,{"inputs":[{"name":"scalar"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rectangle"}}],[11,"clone","","",16,{"inputs":[{"name":"shape"}],"output":{"name":"shape"}}],[11,"clone","","",14,{"inputs":[{"name":"border"}],"output":{"name":"border"}}],[11,"clone","","",15,{"inputs":[{"name":"rectangle"}],"output":{"name":"rectangle"}}],[11,"new","","Creates a new rectangle.",15,{"inputs":[{"name":"color"}],"output":{"name":"rectangle"}}],[11,"new_round","","Creates a new round rectangle.",15,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"rectangle"}}],[11,"new_border","","Creates a new rectangle border.",15,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"rectangle"}}],[11,"new_round_border","","Creates a new round rectangle border.",15,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"radius"}],"output":{"name":"rectangle"}}],[11,"color","","Sets color.",15,{"inputs":[{"name":"rectangle"},{"name":"color"}],"output":{"name":"self"}}],[11,"shape","","Sets shape.",15,{"inputs":[{"name":"rectangle"},{"name":"shape"}],"output":{"name":"self"}}],[11,"border","","Sets border.",15,{"inputs":[{"name":"rectangle"},{"name":"border"}],"output":{"name":"self"}}],[11,"maybe_border","","Sets optional border.",15,{"inputs":[{"name":"rectangle"},{"name":"option"}],"output":{"name":"self"}}],[11,"draw","","Draws the rectangle using default method.",15,{"inputs":[{"name":"rectangle"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws the rectangle using triangulation.",15,{"inputs":[{"name":"rectangle"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"image","graphics","Draw an image",null,null],[3,"Image","graphics::image","An image",null,null],[12,"color","","The color",17,null],[12,"rectangle","","The rectangle to draw image inside",17,null],[12,"source_rectangle","","The image source rectangle",17,null],[5,"draw_many","","Draws many images.",null,null],[11,"clone","","",17,{"inputs":[{"name":"image"}],"output":{"name":"image"}}],[11,"new","","Creates a new image",17,{"inputs":[],"output":{"name":"image"}}],[11,"new_color","","Creates a new colored image",17,{"inputs":[{"name":"color"}],"output":{"name":"image"}}],[11,"color","","Sets color.",17,{"inputs":[{"name":"image"},{"name":"color"}],"output":{"name":"self"}}],[11,"maybe_color","","Sets optional color.",17,{"inputs":[{"name":"image"},{"name":"option"}],"output":{"name":"self"}}],[11,"rect","","Sets rectangle.",17,{"inputs":[{"name":"image"},{"name":"r"}],"output":{"name":"self"}}],[11,"maybe_rect","","Sets optional rectangle.",17,{"inputs":[{"name":"image"},{"name":"option"}],"output":{"name":"self"}}],[11,"src_rect","","Sets source rectangle.",17,{"inputs":[{"name":"image"},{"name":"sourcerectangle"}],"output":{"name":"self"}}],[11,"maybe_src_rect","","Sets optional source rectangle.",17,{"inputs":[{"name":"image"},{"name":"option"}],"output":{"name":"self"}}],[11,"draw","","Draws image using default method.",17,null],[11,"draw_tri","","Draws image using triangulation.",17,null],[0,"types","graphics","Contains type aliases used in this library",null,null],[6,"Area","graphics::types","The type used for area.",null,null],[6,"Color","","[red, green, blue, alpha]",null,null],[6,"ColorComponent","","The type used for color component.",null,null],[6,"Line","","[x1, y1, x2, y2]",null,null],[6,"SourceRectangle","","[x, y, w, h]",null,null],[6,"Polygon","","[p0, p1, ...]",null,null],[6,"Polygons","","A slice of polygons.",null,null],[6,"Radius","","The type used for radius.",null,null],[6,"Resolution","","The type used for resolution.",null,null],[6,"Ray","","[x, y, dir_x, dir_y]",null,null],[6,"Rectangle","","[x, y, w, h]",null,null],[6,"Triangle","","[x1, y1, x2, y2, x3, y3]",null,null],[6,"Width","","The type used for width.",null,null],[6,"FontSize","","The type used for font size.",null,null],[0,"modular_index","graphics","Helper functions for computing modular index safely.",null,null],[5,"offset","graphics::modular_index","Computes modular offset safely for indices.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"isize"}],"output":{"name":"usize"}}],[5,"previous","","Computes previous modular index safely.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"next","","Computes next modular index safely.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"text","graphics","Draw text",null,null],[3,"Text","graphics::text","Renders text",null,null],[12,"color","","The color",18,null],[12,"font_size","","The font size",18,null],[12,"round","","Whether or not the text&#39;s position should be rounded (to a signed distance field).",18,null],[11,"clone","","",18,{"inputs":[{"name":"text"}],"output":{"name":"text"}}],[11,"new","","Creates a new text with black color",18,{"inputs":[{"name":"fontsize"}],"output":{"name":"text"}}],[11,"new_color","","Creates a new colored text",18,{"inputs":[{"name":"color"},{"name":"fontsize"}],"output":{"name":"text"}}],[11,"round","","A builder method indicating that the Text&#39;s position should be rounded upon drawing.",18,{"inputs":[{"name":"text"}],"output":{"name":"text"}}],[11,"draw","","Draws text with a character cache",18,{"inputs":[{"name":"text"},{"name":"str"},{"name":"c"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"triangulation","graphics","Methods for converting shapes into triangles.",null,null],[5,"tx","graphics::triangulation","Transformed x coordinate as f32.",null,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"f32"}}],[5,"ty","","Transformed y coordinate as f32.",null,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"f32"}}],[5,"with_lerp_polygons_tri_list","","Streams tweened polygons using linear interpolation.",null,{"inputs":[{"name":"matrix2d"},{"name":"polygons"},{"name":"scalar"},{"name":"f"}],"output":null}],[5,"with_ellipse_tri_list","","Streams an ellipse specified by a resolution.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"f"}],"output":null}],[5,"with_round_border_line_tri_list","","Streams a round border line.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"line"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"with_round_rectangle_tri_list","","Streams a round rectangle.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"stream_polygon_tri_list","","Streams a polygon into tri list.\nUses buffers that fit inside L1 cache.",null,{"inputs":[{"name":"matrix2d"},{"name":"e"},{"name":"f"}],"output":null}],[5,"with_ellipse_border_tri_list","","Streams an ellipse border specified by a resolution.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"with_arc_tri_list","","Streams an arc between the two radian boundaries.",null,{"inputs":[{"name":"scalar"},{"name":"scalar"},{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"with_round_rectangle_border_tri_list","","Streams a round rectangle border.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"stream_quad_tri_list","","Streams a quad into tri list.",null,{"inputs":[{"name":"matrix2d"},{"name":"e"},{"name":"f"}],"output":null}],[5,"with_polygon_tri_list","","Splits polygon into convex segments.\nCreate a buffer that fits into L1 cache with 1KB overhead.",null,{"inputs":[{"name":"matrix2d"},{"name":"polygon"},{"name":"f"}],"output":null}],[5,"rect_tri_list_xy","","Creates triangle list vertices from rectangle.",null,null],[5,"rect_border_tri_list_xy","","Creates triangle list vertices from rectangle.",null,null],[5,"rect_tri_list_uv","","Creates triangle list texture coords from image.",null,null],[0,"math","graphics","Various methods for computing with vectors.",null,null],[5,"multiply","graphics::math","Multiplies two matrices.",null,null],[5,"dot","","Computes the dot product.",null,null],[5,"cross","","Computes the cross product.",null,null],[5,"add","","Adds two vectors.",null,null],[5,"sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,null],[5,"cast","","Converts to another vector type.",null,null],[5,"mul","","Multiplies two vectors component wise.",null,null],[5,"mul_scalar","","Multiplies the vector with a scalar.",null,null],[5,"square_len","","Computes the square length of a vector.",null,null],[5,"transform_pos","","Transforms a 2D position through matrix.",null,null],[5,"transform_vec","","Transforms a 2D vector through matrix.",null,null],[5,"perp","","Creates a perpendicular vector.",null,null],[5,"abs_transform","","Transforms from normalized to absolute coordinates.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"translate","","Creates a translation matrix.",null,{"inputs":[{"name":"vec2d"}],"output":{"name":"matrix2d"}}],[5,"rotate_radians","","Creates a rotation matrix.",null,{"inputs":[{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"orient","","Orients x axis to look at point.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"scale","","Create a scale matrix.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"shear","","Create a shear matrix.",null,{"inputs":[{"name":"vec2d"}],"output":{"name":"matrix2d"}}],[5,"identity","","Create an identity matrix.",null,{"inputs":[],"output":{"name":"matrix2d"}}],[5,"get_scale","","Extract scale information from matrix.",null,{"inputs":[{"name":"matrix2d"}],"output":{"name":"vec2d"}}],[5,"separation","","Compute the shortest vector from point to ray.\nA ray stores starting point and directional vector.",null,{"inputs":[{"name":"ray"},{"name":"vec2d"}],"output":{"name":"vec2d"}}],[5,"least_separation_4","","Returns the least separation out of four.\nEach seperation can be computed using `separation` function.\nThe separation returned can be used\nto solve collision of rectangles.",null,{"inputs":[{"name":"vec2d"},{"name":"vec2d"},{"name":"vec2d"},{"name":"vec2d"}],"output":{"name":"vec2d"}}],[5,"margin_rectangle","","Shrinks a rectangle by a factor on all sides.",null,{"inputs":[{"name":"rectangle"},{"name":"t"}],"output":{"name":"rectangle"}}],[5,"relative_rectangle","","Computes a relative rectangle using the rectangle as a tile.",null,{"inputs":[{"name":"rectangle"},{"name":"vec2d"}],"output":{"name":"rectangle"}}],[5,"overlap_rectangle","","Computes overlap between two rectangles.\nThe area of the overlapping rectangle is positive.\nA shared edge or corner is not considered overlap.",null,{"inputs":[{"name":"rectangle"},{"name":"rectangle"}],"output":{"name":"option"}}],[5,"relative_source_rectangle","","Computes a relative source rectangle using\nthe source rectangle as a tile.",null,{"inputs":[{"name":"sourcerectangle"},{"name":"i32"},{"name":"i32"}],"output":{"name":"sourcerectangle"}}],[5,"modular_offset","","Computes modular offset safely for numbers.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"area_centroid","","Computes the area and centroid of a simple polygon.",null,null],[5,"area","","Computes area of a simple polygon.",null,{"inputs":[{"name":"polygon"}],"output":{"name":"t"}}],[5,"centroid","","Computes centroid of a simple polygon.",null,{"inputs":[{"name":"polygon"}],"output":{"name":"vec2d"}}],[5,"line_side","","Returns a number that tells which side it is relative to a line.",null,{"inputs":[{"name":"line"},{"name":"vec2d"}],"output":{"name":"t"}}],[5,"inside_triangle","","Returns true if point is inside triangle.",null,{"inputs":[{"name":"triangle"},{"name":"vec2d"}],"output":{"name":"bool"}}],[5,"triangle_face","","Returns true if triangle is clockwise.",null,{"inputs":[{"name":"triangle"}],"output":{"name":"bool"}}],[5,"to_barycentric","","Transforms from cartesian coordinates to barycentric.",null,{"inputs":[{"name":"triangle"},{"name":"vec2d"}],"output":{"name":"vec3d"}}],[5,"from_barycentric","","Transforms from barycentric coordinates to cartesian.",null,{"inputs":[{"name":"triangle"},{"name":"vec3d"}],"output":{"name":"vec2d"}}],[5,"hsv","","Transform color with hue, saturation and value.",null,{"inputs":[{"name":"color"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[6,"Scalar","","The type used for scalars.",null,null],[6,"Matrix2d","","The type used for matrices.",null,null],[6,"Vec2d","","The type used for 2D vectors.",null,null],[6,"Vec3d","","The type used for 3D vectors.",null,null],[0,"deform","graphics","Least square deforming of a 2D grid.",null,null],[3,"DeformGrid","graphics::deform","Represents a deformed grid.",null,null],[12,"cols","","The number of columns in the grid.",19,null],[12,"rows","","The number of rows in the grid.",19,null],[12,"rect","","The grid undeformed, which is a plain rectangle.",19,null],[12,"vertices","","The vertices, deformed.",19,null],[12,"indices","","The triangle indices.",19,null],[12,"texture_coords","","The texture coordinates.",19,null],[12,"ps","","Initial position of control points.",19,null],[12,"qs","","The current position of control points.",19,null],[12,"wis","","A weight computation buffer, one for each control point.",19,null],[11,"clone","","",19,{"inputs":[{"name":"deformgrid"}],"output":{"name":"deformgrid"}}],[11,"new","","Creates a new DeformGrid.",19,{"inputs":[{"name":"rectangle"},{"name":"usize"},{"name":"usize"}],"output":{"name":"deformgrid"}}],[11,"set_current","","Sets current control position.",19,{"inputs":[{"name":"deformgrid"},{"name":"usize"},{"name":"vec2d"}],"output":null}],[11,"set_original","","Sets original control position.",19,{"inputs":[{"name":"deformgrid"},{"name":"usize"},{"name":"vec2d"}],"output":null}],[11,"reset_control_points","","Removes all control points.",19,{"inputs":[{"name":"deformgrid"}],"output":null}],[11,"reset_vertices_and_texture_coords","","Sets vertices and texture coords back to default.",19,{"inputs":[{"name":"deformgrid"}],"output":null}],[11,"hit","","Finds original coordinate.\nIf the deformed grid is overlapping itself, multiple hits might occur.\nReturns the first hit it finds.",19,{"inputs":[{"name":"deformgrid"},{"name":"vec2d"}],"output":{"name":"option"}}],[11,"draw_image","","Draws deformed image using default method.",19,null],[11,"draw_image_tri","","Draws deformed image using triangulation.",19,null],[11,"add_control_point","","Adds a control point, in original coordinates.",19,{"inputs":[{"name":"deformgrid"},{"name":"vec2d"}],"output":null}],[11,"draw_vertical_lines","","Draw vertical grid lines.",19,{"inputs":[{"name":"deformgrid"},{"name":"line"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_horizontal_lines","","Draw horizontal grid lines.",19,{"inputs":[{"name":"deformgrid"},{"name":"line"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"update","","Updates the grid, by deforming the vertices.",19,{"inputs":[{"name":"deformgrid"}],"output":null}],[0,"grid","graphics","A flat grid with square cells.",null,null],[3,"Grid","graphics::grid","Represents a flat grid with square cells.",null,null],[12,"cols","","Number of columns.",20,null],[12,"rows","","Number of rows.",20,null],[12,"units","","The width and height of each grid cell.",20,null],[3,"GridCells","","Iterates through the cells of a grid as (u32, u32).",null,null],[11,"clone","","",20,{"inputs":[{"name":"grid"}],"output":{"name":"grid"}}],[11,"clone","","",21,{"inputs":[{"name":"gridcells"}],"output":{"name":"gridcells"}}],[11,"draw","","Draws the grid.",20,{"inputs":[{"name":"grid"},{"name":"line"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"cells","","Get a GridIterator for the grid",20,{"inputs":[{"name":"grid"}],"output":{"name":"gridcells"}}],[11,"cell_position","","Get on-screen position of a grid cell",20,null],[11,"x_pos","","Get on-screen x position of a grid cell",20,null],[11,"y_pos","","Get on-screen y position of a grid cell",20,null],[11,"next","","",21,{"inputs":[{"name":"gridcells"}],"output":{"name":"option"}}],[0,"radians","graphics","Reexport radians helper trait from vecmath",null,null],[8,"Radians","graphics::radians","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",22,{"inputs":[],"output":{"name":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",22,{"inputs":[],"output":{"name":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",22,{"inputs":[],"output":{"name":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees.\nEquivalent to ```value * (π / 180)```.",22,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians.\nEquivalent to ```value * (180 / π)```.",22,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[7,"BACK_END_MAX_VERTEX_COUNT","graphics","Any triangulation method called on the back-end\nnever exceeds this number of vertices.\nThis can be used to initialize buffers that fit the chunk size.",null,null],[8,"Graphics","","Implemented by all graphics back-ends.",null,null],[16,"Texture","","The texture type associated with the back-end.",23,null],[10,"clear_color","","Clears background with a color.",23,{"inputs":[{"name":"graphics"},{"name":"color"}],"output":null}],[10,"clear_stencil","","Clears stencil buffer with a value, usually 0.",23,{"inputs":[{"name":"graphics"},{"name":"u8"}],"output":null}],[10,"tri_list","","Renders list of 2d triangles using a solid color.",23,null],[10,"tri_list_uv","","Renders list of 2d triangles using a color and a texture.",23,null],[11,"rectangle","","Draws a rectangle.",23,{"inputs":[{"name":"graphics"},{"name":"rectangle"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon","","Draws a polygon.",23,{"inputs":[{"name":"graphics"},{"name":"polygon"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",23,{"inputs":[{"name":"graphics"},{"name":"polygon"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"image","","Draws image.",23,{"inputs":[{"name":"graphics"},{"name":"image"},{"name":"texture"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"ellipse","","Draws ellipse.",23,{"inputs":[{"name":"graphics"},{"name":"ellipse"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"line","","Draws line.",23,{"inputs":[{"name":"graphics"},{"name":"line"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"circle_arc","","Draws circle arc.",23,{"inputs":[{"name":"graphics"},{"name":"circlearc"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"deform_image","","Draws deformed image.",23,{"inputs":[{"name":"graphics"},{"name":"deformgrid"},{"name":"texture"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[8,"SourceRectangled","","Should be implemented by contexts that\nhave source rectangle information.",null,null],[10,"src_rect","","Adds a source rectangle.",24,{"inputs":[{"name":"sourcerectangled"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[10,"src_rel","","Moves to a relative source rectangle using\nthe current source rectangle as tile.",24,{"inputs":[{"name":"sourcerectangled"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[10,"src_flip_h","","Flips the source rectangle horizontally.",24,{"inputs":[{"name":"sourcerectangled"}],"output":{"name":"self"}}],[10,"src_flip_v","","Flips the source rectangle vertically.",24,{"inputs":[{"name":"sourcerectangled"}],"output":{"name":"self"}}],[10,"src_flip_hv","","Flips the source rectangle horizontally and vertically.",24,{"inputs":[{"name":"sourcerectangled"}],"output":{"name":"self"}}],[8,"Rectangled","","Should be implemented by contexts that have rectangle information.",null,null],[10,"margin","","Shrinks the current rectangle equally by all sides.",25,{"inputs":[{"name":"rectangled"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"expand","","Expands the current rectangle equally by all sides.",25,{"inputs":[{"name":"rectangled"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"rel","","Moves to a relative rectangle using the current rectangle as tile.",25,{"inputs":[{"name":"rectangled"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[8,"Transformed","","Implemented by contexts that can transform.",null,null],[10,"append_transform","","Appends transform to the current one.",26,{"inputs":[{"name":"transformed"},{"name":"matrix2d"}],"output":{"name":"self"}}],[10,"prepend_transform","","Prepends transform to the current one.",26,{"inputs":[{"name":"transformed"},{"name":"matrix2d"}],"output":{"name":"self"}}],[10,"trans","","Translate x an y in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_deg","","Rotates degrees in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"rot_rad","","Rotate radians in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"orient","","Orients x axis to look at point locally.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"scale","","Scales in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"zoom","","Scales in both directions in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"flip_v","","Flips vertically in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"flip_h","","Flips horizontally in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"flip_hv","","Flips horizontally and vertically in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[10,"shear","","Shears in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"vec2d"}],"output":{"name":"self"}}],[8,"Colored","","Implemented by contexts that contains color.",null,null],[10,"mul_rgba","","Multiplies with red, green, blue and alpha values.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"tint","","Mixes the current color with white.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"shade","","Mixes the current color with black.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_deg","","Rotates hue by degrees.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[10,"hue_rad","","Rotates hue by radians.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"rectangle","","Draws a rectangle.",23,{"inputs":[{"name":"graphics"},{"name":"rectangle"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon","","Draws a polygon.",23,{"inputs":[{"name":"graphics"},{"name":"polygon"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",23,{"inputs":[{"name":"graphics"},{"name":"polygon"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"image","","Draws image.",23,{"inputs":[{"name":"graphics"},{"name":"image"},{"name":"texture"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"ellipse","","Draws ellipse.",23,{"inputs":[{"name":"graphics"},{"name":"ellipse"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"line","","Draws line.",23,{"inputs":[{"name":"graphics"},{"name":"line"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"circle_arc","","Draws circle arc.",23,{"inputs":[{"name":"graphics"},{"name":"circlearc"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"deform_image","","Draws deformed image.",23,{"inputs":[{"name":"graphics"},{"name":"deformgrid"},{"name":"texture"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"src_rect","graphics::types","",28,{"inputs":[{"name":"sourcerectangle"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"src_rel","","",28,{"inputs":[{"name":"sourcerectangle"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"src_flip_h","","",28,{"inputs":[{"name":"sourcerectangle"}],"output":{"name":"self"}}],[11,"src_flip_v","","",28,{"inputs":[{"name":"sourcerectangle"}],"output":{"name":"self"}}],[11,"src_flip_hv","","",28,{"inputs":[{"name":"sourcerectangle"}],"output":{"name":"self"}}],[11,"expand","graphics","Expands the current rectangle equally by all sides.",25,{"inputs":[{"name":"rectangled"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"margin","graphics::types","",29,{"inputs":[{"name":"rectangle"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rel","","",29,{"inputs":[{"name":"rectangle"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_deg","graphics","Rotates degrees in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"zoom","","Scales in both directions in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"flip_v","","Flips vertically in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"flip_h","","Flips horizontally in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"flip_hv","","Flips horizontally and vertically in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"append_transform","graphics::math","",30,{"inputs":[{"name":"matrix2d"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"prepend_transform","","",30,{"inputs":[{"name":"matrix2d"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"trans","","",30,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_rad","","",30,{"inputs":[{"name":"matrix2d"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"orient","","",30,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scale","","",30,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shear","","",30,{"inputs":[{"name":"matrix2d"},{"name":"vec2d"}],"output":{"name":"self"}}],[11,"append_transform","graphics::context","",7,{"inputs":[{"name":"context"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"prepend_transform","","",7,{"inputs":[{"name":"context"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"trans","","",7,{"inputs":[{"name":"context"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_rad","","",7,{"inputs":[{"name":"context"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"orient","","",7,{"inputs":[{"name":"context"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scale","","",7,{"inputs":[{"name":"context"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shear","","",7,{"inputs":[{"name":"context"},{"name":"vec2d"}],"output":{"name":"self"}}],[11,"tint","graphics","Mixes the current color with white.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"shade","","Mixes the current color with black.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_deg","","Rotates hue by degrees.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::types","",31,{"inputs":[{"name":"color"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",31,{"inputs":[{"name":"color"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::line","",9,{"inputs":[{"name":"line"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",9,{"inputs":[{"name":"line"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::ellipse","",13,{"inputs":[{"name":"ellipse"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",13,{"inputs":[{"name":"ellipse"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::rectangle","",15,{"inputs":[{"name":"rectangle"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",15,{"inputs":[{"name":"rectangle"},{"name":"colorcomponent"}],"output":{"name":"self"}}]],"paths":[[8,"ImageSize"],[3,"Viewport"],[3,"DrawState"],[4,"Blend"],[4,"Stencil"],[3,"Character"],[8,"CharacterCache"],[3,"Context"],[3,"Polygon"],[3,"Line"],[4,"Shape"],[3,"CircleArc"],[3,"Border"],[3,"Ellipse"],[3,"Border"],[3,"Rectangle"],[4,"Shape"],[3,"Image"],[3,"Text"],[3,"DeformGrid"],[3,"Grid"],[3,"GridCells"],[8,"Radians"],[8,"Graphics"],[8,"SourceRectangled"],[8,"Rectangled"],[8,"Transformed"],[8,"Colored"],[6,"SourceRectangle"],[6,"Rectangle"],[6,"Matrix2d"],[6,"Color"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[11,"new","num_bigint","Creates and initializes a BigInt.",0,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",0,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",0,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",0,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",0,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",0,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",0,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"to_i64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",0,null],[11,"div_floor","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",0,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"checked_div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"neg","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"shr","","",0,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shl","","",0,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"cmp","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"to_biguint","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[3,"BigInt","num","A big signed integer type.",null,null],[11,"to_bigint","num_bigint","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",1,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",1,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",1,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"to_biguint","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from_i64","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"to_i64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",1,null],[11,"div_floor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",1,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"checked_div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"neg","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"one","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"zero","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"shr","","",1,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl","","",1,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"bitxor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"cmp","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"encode","","",1,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[3,"BigUint","num","A big unsigned integer type.",null,null],[6,"Rational","","",null,null],[6,"BigRational","","",null,null],[11,"new","num_complex","Create a new Complex",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",2,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",2,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",2,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",2,null],[11,"from_polar","","Convert a polar representation into a complex number.",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",2,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",2,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",2,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",2,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"complex"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",2,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"div","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"neg","","",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"encode","","",2,{"inputs":[{"name":"complex"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Complex","num","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",2,null],[12,"im","","Imaginary portion of the complex number",2,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",3,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",3,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",3,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",3,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",4,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",4,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",5,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",5,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",6,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",7,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",10,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",11,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",12,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",13,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",15,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",15,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",15,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",15,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",15,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[6,"BigDigit","num::bigint","",null,null],[6,"DoubleBigDigit","","",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[0,"big_digit","","",null,null],[17,"BITS","num::bigint::big_digit","",null,null],[17,"BASE","","",null,null],[5,"from_doublebigdigit","","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u64"}}],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",19,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[11,"hash","num_bigint","",20,null],[11,"mul","","",20,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"neg","","Negate Sign value.",20,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"encode","","",20,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"cmp","","",20,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",20,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","","",20,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Sign","num::bigint","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",20,null],[13,"NoSign","","",20,null],[13,"Plus","","",20,null],[3,"BigInt","","A big signed integer type.",null,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",21,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",22,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",22,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",22,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",22,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",22,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","num_bigint","",23,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"from","","",23,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[11,"description","","",23,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"ParseBigIntError","num::bigint","",null,null],[13,"ParseInt","","",23,null],[13,"Other","","",23,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",2,null],[12,"im","","Imaginary portion of the complex number",2,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",3,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",3,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",3,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",3,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"next_back","num_iter","",24,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"clone","","",24,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[11,"next_back","num_iter","",25,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[3,"RangeInclusive","num::iter","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[11,"clone","num_iter","",26,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",26,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[3,"RangeStep","num::iter","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[11,"clone","num_iter","",27,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",27,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[3,"RangeStepInclusive","num::iter","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",5,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",5,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",6,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",7,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",10,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",11,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",12,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",13,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[0,"float","num::traits","",null,null],[8,"Float","num::traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",15,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",15,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",15,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",15,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",15,null],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num::traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",4,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",4,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","num_traits","",28,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"FloatErrorKind","num::traits","",null,null],[13,"Empty","","",28,null],[13,"Invalid","","",28,null],[11,"fmt","num_traits","",29,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",29,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",10,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",12,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",11,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",15,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",15,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",15,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",15,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",15,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",5,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",5,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",13,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",6,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",7,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[11,"from_str","num_rational","Parses `numer/denom` or just `numer`.",30,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"abs","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",30,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"one","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"zero","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"neg","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"eq","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"from_float","","Converts a float into a rational number.",30,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"pow","","Raises the ratio to the power of an exponent",30,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",30,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"encode","","",30,{"inputs":[{"name":"ratio"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[6,"Rational","","",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","",null,null],[11,"description","num_rational","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[3,"ParseRatioError","num::rational","",null,null],[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[3,"BigInt"],[3,"BigUint"],[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[8,"RandBigInt"],[4,"ParseBigIntError"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"ratio"},{"name":"__st"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",0,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["daggy"] = {"doc":"**daggy** is a directed acyclic graph data structure library.","items":[[0,"algo","daggy::petgraph","Graph algorithms.",null,null],[5,"is_cyclic_undirected","daggy::petgraph::algo","Return `true` if the input graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic","","**Deprecated: Renamed to `is_cyclic_undirected`.**",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic_directed","","Return `true` if the input directed graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"toposort","","Perform a topological sort of a directed graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"scc","","Compute the *strongly connected components* using Kosaraju&#39;s algorithm.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"condensation","","Condense every strongly connected component into a single node and return the result.",null,{"inputs":[{"name":"graph"},{"name":"bool"}],"output":{"name":"graph"}}],[5,"connected_components","","Return the number of connected components of the graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[5,"min_spanning_tree","","Compute a *minimum spanning tree* of a graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"graph"}}],[5,"dijkstra","","Dijkstra&#39;s shortest path algorithm.",null,null],[5,"is_isomorphic_matching","","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"},{"name":"f"},{"name":"g"}],"output":{"name":"bool"}}],[5,"is_isomorphic","","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"}],"output":{"name":"bool"}}],[0,"graphmap","daggy::petgraph","`GraphMap&lt;N, E&gt;` is an undirected graph where node values are mapping keys.",null,null],[11,"new","petgraph::graphmap","Create a new `GraphMap`.",0,{"inputs":[],"output":{"name":"graphmap"}}],[11,"with_capacity","","Create a new `GraphMap` with estimated capacity.",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"graphmap"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",0,null],[11,"from_edges","","Create a new `GraphMap` from an iterable of edges.",0,{"inputs":[{"name":"i"}],"output":{"name":"graphmap"}}],[11,"node_count","","Return the number of nodes in the graph.",0,{"inputs":[{"name":"graphmap"}],"output":{"name":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",0,{"inputs":[{"name":"graphmap"}],"output":{"name":"usize"}}],[11,"clear","","Remove all nodes and edges",0,null],[11,"add_node","","Add node `n` to the graph.",0,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"n"}}],[11,"remove_node","","Return `true` if node `n` was removed.",0,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"bool"}}],[11,"contains_node","","Return `true` if the node is contained in the graph.",0,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"bool"}}],[11,"add_edge","","Add an edge connecting `a` and `b` to the graph, with associated\ndata `weight`.",0,{"inputs":[{"name":"graphmap"},{"name":"n"},{"name":"n"},{"name":"e"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove edge from `a` to `b` from the graph and return the edge weight.",0,{"inputs":[{"name":"graphmap"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"contains_edge","","Return `true` if the edge connecting `a` with `b` is contained in the graph.",0,{"inputs":[{"name":"graphmap"},{"name":"n"},{"name":"n"}],"output":{"name":"bool"}}],[11,"nodes","","Return an iterator over the nodes of the graph.",0,{"inputs":[{"name":"graphmap"}],"output":{"name":"nodes"}}],[11,"neighbors","","Return an iterator over the nodes that are connected with `from` by edges.",0,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"neighbors"}}],[11,"edges","","Return an iterator over the nodes that are connected with `from` by edges,\npaired with the edge weight.",0,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"edges"}}],[11,"edge_weight","","Return a reference to the edge weight connecting `a` with `b`, or\n`None` if the edge does not exist in the graph.",0,{"inputs":[{"name":"graphmap"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting `a` with `b`, or\n`None` if the edge does not exist in the graph.",0,{"inputs":[{"name":"graphmap"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"all_edges","","Return an iterator over all edges of the graph with their weight in arbitrary order.",0,{"inputs":[{"name":"graphmap"}],"output":{"name":"alledges"}}],[11,"adjacency_matrix","","",0,null],[11,"is_adjacent","","",0,null],[11,"reset_map","","",0,null],[11,"visit_map","","",0,{"inputs":[{"name":"graphmap"}],"output":{"name":"hashset"}}],[11,"neighbors","","",0,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"neighbors"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"graphmap"}}],[11,"index_mut","","",0,null],[11,"index","","",0,null],[11,"extend","","",0,null],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"graphmap"}}],[11,"fmt","","",0,{"inputs":[{"name":"graphmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"graphmap"}],"output":{"name":"graphmap"}}],[3,"GraphMap","daggy::petgraph::graphmap","`GraphMap&lt;N, E&gt;` is an undirected graph, with generic node values `N` and edge weights `E`.",null,null],[8,"NodeTrait","","A trait group for `GraphMap`&#39;s node identifier.",null,null],[11,"next","petgraph::graphmap","",1,{"inputs":[{"name":"nodes"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[3,"Nodes","daggy::petgraph::graphmap","",null,null],[11,"clone","petgraph::graphmap","",2,{"inputs":[{"name":"neighbors"}],"output":{"name":"neighbors"}}],[11,"next_back","","",2,{"inputs":[{"name":"neighbors"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"neighbors"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[3,"Neighbors","daggy::petgraph::graphmap","",null,null],[11,"next","petgraph::graphmap","",3,{"inputs":[{"name":"edges"}],"output":{"name":"option"}}],[3,"Edges","daggy::petgraph::graphmap","",null,null],[11,"next","petgraph::graphmap","",4,{"inputs":[{"name":"alledges"}],"output":{"name":"option"}}],[3,"AllEdges","daggy::petgraph::graphmap","",null,null],[11,"fmt","petgraph::graphmap","",5,{"inputs":[{"name":"ptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"deref","","",5,{"inputs":[{"name":"ptr"}],"output":{"name":"t"}}],[11,"cmp","","Ptr is ordered by pointer value, i.e. an arbitrary but stable and total order.",5,{"inputs":[{"name":"ptr"},{"name":"ptr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"ptr"},{"name":"ptr"}],"output":{"name":"option"}}],[11,"eq","","Ptr compares by pointer equality, i.e if they point to the same value",5,{"inputs":[{"name":"ptr"},{"name":"ptr"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"ptr"}],"output":{"name":"ptr"}}],[3,"Ptr","daggy::petgraph::graphmap","A reference that is hashed and compared by its pointer value.",null,null],[12,"0","","",5,null],[0,"graph","daggy::petgraph","`Graph&lt;N, E, Ty, Ix&gt;` is a graph datastructure using an adjacency list representation.",null,null],[6,"DefIndex","daggy::petgraph::graph","",null,null],[8,"IndexType","","Trait for the unsigned integer type used for node and edge indices.",null,null],[10,"new","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"index","","",6,{"inputs":[{"name":"indextype"}],"output":{"name":"usize"}}],[10,"max","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"index","petgraph::graph","",7,{"inputs":[{"name":"nodeindex"}],"output":{"name":"usize"}}],[11,"is_node_index","","",7,{"inputs":[],"output":{"name":"bool"}}],[11,"from","","",7,{"inputs":[{"name":"ix"}],"output":{"name":"nodeindex"}}],[11,"new","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[11,"index","","",7,{"inputs":[{"name":"nodeindex"}],"output":{"name":"usize"}}],[11,"end","","",7,{"inputs":[],"output":{"name":"nodeindex"}}],[11,"clone","","",7,{"inputs":[{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"fmt","","",7,{"inputs":[{"name":"nodeindex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"ordering"}}],[11,"hash","","",7,null],[3,"NodeIndex","daggy::petgraph::graph","Node identifier.",null,null],[5,"node_index","","Short version of `NodeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[5,"edge_index","","Short version of `EdgeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[11,"index","petgraph::graph","",8,{"inputs":[{"name":"edgeindex"}],"output":{"name":"usize"}}],[11,"is_node_index","","",8,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"edgeindex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[11,"index","","",8,{"inputs":[{"name":"edgeindex"}],"output":{"name":"usize"}}],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example\nto end an adjacency list.",8,{"inputs":[],"output":{"name":"edgeindex"}}],[11,"clone","","",8,{"inputs":[{"name":"edgeindex"}],"output":{"name":"edgeindex"}}],[11,"eq","","",8,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[3,"EdgeIndex","daggy::petgraph::graph","Edge identifier.",null,null],[11,"next_edge","petgraph::graph","Accessor for data structure internals: the first edge in the given direction.",9,{"inputs":[{"name":"node"},{"name":"edgedirection"}],"output":{"name":"edgeindex"}}],[11,"fmt","","",9,{"inputs":[{"name":"node"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[3,"Node","daggy::petgraph::graph","The graph&#39;s node type.",null,null],[12,"weight","","Associated node data.",9,null],[11,"next_edge","petgraph::graph","Accessor for data structure internals: the next edge for the given direction.",10,{"inputs":[{"name":"edge"},{"name":"edgedirection"}],"output":{"name":"edgeindex"}}],[11,"source","","Return the source node index.",10,{"inputs":[{"name":"edge"}],"output":{"name":"nodeindex"}}],[11,"target","","Return the target node index.",10,{"inputs":[{"name":"edge"}],"output":{"name":"nodeindex"}}],[11,"fmt","","",10,{"inputs":[{"name":"edge"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"edge"}],"output":{"name":"edge"}}],[3,"Edge","daggy::petgraph::graph","The graph&#39;s edge type.",null,null],[12,"weight","","Associated edge data.",10,null],[11,"neighbors_directed","petgraph::graph","",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"neighbors"}}],[11,"neighbors","","",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"graph"}}],[11,"index_mut","","",11,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"index","","",11,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"index_mut","","",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index","","",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"with_capacity","","Create a new `Graph` with estimated capacity.",11,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"graph"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",11,null],[11,"node_count","","Return the number of nodes (vertices) in the graph.",11,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",11,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[11,"is_directed","","Whether the graph has directed edges or not.",11,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",11,{"inputs":[{"name":"graph"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"node_weight","","Access the weight for node `a`.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated\ndata `weight`.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"update_edge","","Add or update an edge from `a` to `b`.\nIf the edge already exists, its weight is updated.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"edge_weight","","Access the weight for edge `e`.",11,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably.",11,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Access the source and target nodes for `e`.",11,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight.\nIf it doesn&#39;t exist in the graph, return `None`.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn&#39;t exist.",11,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`,\nin the specified direction.\nIf the graph&#39;s edges are undirected, this is equivalent to *.neighbors(a)*.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"neighbors"}}],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`,\nin either direction.\nIf the graph&#39;s edges are undirected, this is equivalent to *.neighbors(a)*.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"edges","","Return an iterator over the neighbors of node `a`, paired with their respective edge\nweights.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"edges"}}],[11,"edges_directed","","Return an iterator of all neighbors that have an edge between them and `a`,\nin the specified direction, paired with the respective edge weights.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"edges"}}],[11,"find_edge","","Lookup an edge from `a` to `b`.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"externals","","Return an iterator over either the nodes without edges to them\n(`Incoming`) or from them (`Outgoing`).",11,{"inputs":[{"name":"graph"},{"name":"edgedirection"}],"output":{"name":"externals"}}],[11,"node_indices","","Return an iterator over the node indices of the graph",11,{"inputs":[{"name":"graph"}],"output":{"name":"nodeindices"}}],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node weights.",11,{"inputs":[{"name":"graph"}],"output":{"name":"nodeweightsmut"}}],[11,"edge_indices","","Return an iterator over the edge indices of the graph",11,{"inputs":[{"name":"graph"}],"output":{"name":"edgeindices"}}],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge weights.",11,{"inputs":[{"name":"graph"}],"output":{"name":"edgeweightsmut"}}],[11,"raw_nodes","","Access the internal node array.",11,null],[11,"raw_edges","","Access the internal edge array.",11,null],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of Edges",11,null],[11,"first_edge","","Accessor for data structure internals: the first edge in the given direction.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"option"}}],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",11,{"inputs":[{"name":"graph"},{"name":"edgeindex"},{"name":"edgedirection"}],"output":{"name":"option"}}],[11,"walk_edges_directed","","**Deprecated:** Use [`.neighbors_directed(a, dir).detach()`][1] instead.",11,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"walkedges"}}],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of\nnode or edge indices is fine.",11,null],[11,"reverse","","Reverse the direction of all edges",11,null],[11,"clear","","Remove all nodes and edges",11,null],[11,"clear_edges","","Remove all edges",11,null],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure,\nremove the others.",11,null],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure,\nremove the others.",11,null],[11,"from_edges","","Create a new `Graph` from an iterable of edges.",11,{"inputs":[{"name":"i"}],"output":{"name":"graph"}}],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",11,null],[11,"map","","Create a new `Graph` by mapping node and\nedge weights to new values.",11,{"inputs":[{"name":"graph"},{"name":"f"},{"name":"g"}],"output":{"name":"graph"}}],[11,"filter_map","","Create a new `Graph` by mapping nodes and edges.\nA node or edge may be mapped to `None` to exclude it from\nthe resulting graph.",11,{"inputs":[{"name":"graph"},{"name":"f"},{"name":"g"}],"output":{"name":"graph"}}],[11,"into_edge_type","","Convert the graph into either undirected or directed. No edge adjustments\nare done, so you may want to go over the result to remove or add edges.",11,{"inputs":[{"name":"graph"}],"output":{"name":"graph"}}],[11,"new_undirected","","Create a new `Graph` with undirected edges.",11,{"inputs":[],"output":{"name":"graph"}}],[11,"new","","Create a new `Graph` with directed edges.",11,{"inputs":[],"output":{"name":"graph"}}],[11,"fmt","","",11,{"inputs":[{"name":"graph"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"graph"}],"output":{"name":"graph"}}],[11,"clone_from","","",11,null],[11,"externals","","",11,{"inputs":[{"name":"graph"},{"name":"edgedirection"}],"output":{"name":"externals"}}],[11,"reset_map","","",11,null],[11,"visit_map","","",11,{"inputs":[{"name":"graph"}],"output":{"name":"fixedbitset"}}],[11,"adjacency_matrix","","",11,{"inputs":[{"name":"graph"}],"output":{"name":"fixedbitset"}}],[11,"is_adjacent","","",11,{"inputs":[{"name":"graph"},{"name":"fixedbitset"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[3,"Graph","daggy::petgraph::graph","`Graph&lt;N, E, Ty, Ix&gt;` is a graph datastructure using an adjacency list representation.",null,null],[11,"next","petgraph::graph","",12,{"inputs":[{"name":"externals"}],"output":{"name":"option"}}],[3,"Externals","daggy::petgraph::graph","An iterator over either the nodes without edges to them or from them.",null,null],[11,"detach","petgraph::graph","Return a “walker” object that can be used to step through the\nneighbors and edges from the origin node.",13,{"inputs":[{"name":"neighbors"}],"output":{"name":"walkneighbors"}}],[11,"clone","","",13,{"inputs":[{"name":"neighbors"}],"output":{"name":"neighbors"}}],[11,"next","","",13,{"inputs":[{"name":"neighbors"}],"output":{"name":"option"}}],[3,"Neighbors","daggy::petgraph::graph","Iterator over the neighbors of a node.",null,null],[11,"clone","petgraph::graph","",14,{"inputs":[{"name":"edges"}],"output":{"name":"edges"}}],[11,"next","","",14,{"inputs":[{"name":"edges"}],"output":{"name":"option"}}],[3,"Edges","daggy::petgraph::graph","Iterator over the edges of a node.",null,null],[11,"next","petgraph::graph","",15,{"inputs":[{"name":"nodeweightsmut"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[3,"NodeWeightsMut","daggy::petgraph::graph","Iterator yielding mutable access to all node weights.",null,null],[11,"next","petgraph::graph","",16,{"inputs":[{"name":"edgeweightsmut"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[3,"EdgeWeightsMut","daggy::petgraph::graph","Iterator yielding mutable access to all edge weights.",null,null],[8,"GraphIndex","","A  `GraphIndex` is a node or edge index.",null,null],[11,"next","petgraph::graph","Step to the next edge and its endpoint node in the walk for graph `g`.",17,{"inputs":[{"name":"walkneighbors"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_node","","",17,{"inputs":[{"name":"walkneighbors"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_edge","","",17,{"inputs":[{"name":"walkneighbors"},{"name":"graph"}],"output":{"name":"option"}}],[11,"clone","","",17,{"inputs":[{"name":"walkneighbors"}],"output":{"name":"walkneighbors"}}],[3,"WalkNeighbors","daggy::petgraph::graph","A “walker” object that can be used to step through the edge list of a node.",null,null],[11,"clone","petgraph::graph","",18,{"inputs":[{"name":"walkedges"}],"output":{"name":"walkedges"}}],[11,"fmt","","",18,{"inputs":[{"name":"walkedges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Fetch the next edge index in the walk for graph `g`.",18,{"inputs":[{"name":"walkedges"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_neighbor","","Fetch the next edge index and the next node index in the walk for graph `g`.",18,{"inputs":[{"name":"walkedges"},{"name":"graph"}],"output":{"name":"option"}}],[3,"WalkEdges","daggy::petgraph::graph","**Deprecated.**",null,null],[11,"fmt","petgraph::graph","",19,{"inputs":[{"name":"nodeindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"nodeindices"}],"output":{"name":"nodeindices"}}],[11,"next","","",19,{"inputs":[{"name":"nodeindices"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"nodeindices"}],"output":{"name":"option"}}],[3,"NodeIndices","daggy::petgraph::graph","Iterator over the node indices of a graph.",null,null],[11,"fmt","petgraph::graph","",20,{"inputs":[{"name":"edgeindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",20,{"inputs":[{"name":"edgeindices"}],"output":{"name":"option"}}],[11,"next","","",20,{"inputs":[{"name":"edgeindices"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"edgeindices"}],"output":{"name":"edgeindices"}}],[3,"EdgeIndices","daggy::petgraph::graph","Iterator over the edge indices of a graph.",null,null],[0,"dot","daggy::petgraph","Simple graphviz dot file format output.",null,null],[11,"new","petgraph::dot","Create a `Dot` formatting wrapper with default configuration.",21,{"inputs":[{"name":"g"}],"output":{"name":"dot"}}],[11,"with_config","","Create a `Dot` formatting wrapper with custom configuration.",21,null],[11,"fmt","","",21,{"inputs":[{"name":"dot"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"dot"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"dot"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"dot"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Dot","daggy::petgraph::dot","`Dot` implements output to graphviz .dot format for a graph.",null,null],[11,"fmt","petgraph::dot","",22,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"config"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"config"},{"name":"config"}],"output":{"name":"bool"}}],[4,"Config","daggy::petgraph::dot","`Dot` configuration.",null,null],[13,"NodeIndexLabel","","Use indices for node labels.",22,null],[13,"EdgeIndexLabel","","Use indices for edge labels.",22,null],[13,"EdgeNoLabel","","Use no edge labels.",22,null],[0,"visit","daggy::petgraph","Graph visitor algorithms.",null,null],[8,"Graphlike","daggy::petgraph::visit","Base trait for graphs that defines the node identifier.",null,null],[16,"NodeId","","",23,null],[8,"NeighborIter","","NeighborIter gives access to the neighbors iterator.",null,null],[16,"Iter","","",24,null],[10,"neighbors","","Return an iterator that visits all neighbors of the node **n**.",24,null],[11,"neighbors","petgraph::visit","",25,{"inputs":[{"name":"asundirected"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"visit_map","","",25,null],[3,"AsUndirected","daggy::petgraph::visit","Wrapper type for walking the graph as if it is undirected",null,null],[12,"0","","",25,null],[11,"externals","petgraph::visit","",26,null],[11,"neighbors_directed","","",26,null],[11,"reset_map","","",26,null],[11,"neighbors","","",26,{"inputs":[{"name":"reversed"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"visit_map","","",26,null],[3,"Reversed","daggy::petgraph::visit","Wrapper type for walking the graph as if all edges are reversed.",null,null],[12,"0","","",26,null],[8,"NeighborsDirected","","NeighborsDirected gives access to neighbors of both `Incoming` and `Outgoing`\nedges of a node.",null,null],[16,"NeighborsDirected","","",27,null],[10,"neighbors_directed","","Return an iterator that visits all neighbors of the node **n**.",27,null],[8,"Externals","","Externals returns an iterator of all nodes that either have either no\nincoming or no outgoing edges.",null,null],[16,"Externals","","",28,null],[10,"externals","","Return an iterator of all nodes with no edges in the given direction",28,null],[8,"VisitMap","","A mapping for storing the visited status for NodeId `N`.",null,null],[10,"visit","","Return **true** if the value is not already present.",29,{"inputs":[{"name":"visitmap"},{"name":"n"}],"output":{"name":"bool"}}],[10,"is_visited","","",29,{"inputs":[{"name":"visitmap"},{"name":"n"}],"output":{"name":"bool"}}],[8,"Visitable","","A graph that can create a visitor map.",null,null],[16,"Map","","",30,null],[10,"visit_map","","",30,null],[8,"Revisitable","","A graph that can reset and resize its visitor map.",null,null],[10,"reset_map","","",31,null],[8,"GetAdjacencyMatrix","","Create or access the adjacency matrix of a graph",null,null],[16,"AdjMatrix","","",32,null],[10,"adjacency_matrix","","",32,null],[10,"is_adjacent","","",32,null],[11,"new","petgraph::visit","Create a new **Dfs**, using the graph&#39;s visitor map, and put **start**\nin the stack of nodes to visit.",33,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"dfs"}}],[11,"empty","","Create a new **Dfs** using the graph&#39;s visitor map, and no stack.",33,{"inputs":[{"name":"g"}],"output":{"name":"dfs"}}],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart\nthe dfs from a particular node.",33,null],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",33,{"inputs":[{"name":"dfs"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"dfs"}],"output":{"name":"dfs"}}],[11,"fmt","","",33,{"inputs":[{"name":"dfs"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Dfs","daggy::petgraph::visit","A depth first search (DFS) of a graph.",null,null],[12,"stack","","The stack of nodes to visit",33,null],[12,"discovered","","The map of discovered nodes",33,null],[11,"clone","petgraph::visit","",34,{"inputs":[{"name":"dfsiter"}],"output":{"name":"dfsiter"}}],[11,"next","","",34,{"inputs":[{"name":"dfsiter"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"new","","",34,null],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart\nthe DFS traversal from a particular node.",34,null],[3,"DfsIter","daggy::petgraph::visit","An iterator for a depth first traversal of a graph.",null,null],[11,"new","petgraph::visit","Create a new **Bfs**, using the graph&#39;s visitor map, and put **start**\nin the stack of nodes to visit.",35,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"bfs"}}],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",35,{"inputs":[{"name":"bfs"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"bfs"}],"output":{"name":"bfs"}}],[3,"Bfs","daggy::petgraph::visit","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",35,null],[12,"discovered","","The map of discovered nodes",35,null],[11,"new","petgraph::visit","",36,null],[11,"clone","","",36,{"inputs":[{"name":"bfsiter"}],"output":{"name":"bfsiter"}}],[11,"next","","",36,{"inputs":[{"name":"bfsiter"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[3,"BfsIter","daggy::petgraph::visit","An iterator for a breadth first traversal of a graph.",null,null],[11,"new","petgraph::visit","Create a new `Topo`, using the graph&#39;s visitor map, and put all\ninitial nodes in the to-visit list.",37,{"inputs":[{"name":"g"}],"output":{"name":"topo"}}],[11,"reset","","Clear visited state, and put all initial nodes into the visit list.",37,null],[11,"next","","Return the next node in the current topological order traversal, or\n`None` if the traversal is at the end.",37,{"inputs":[{"name":"topo"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",37,{"inputs":[{"name":"topo"}],"output":{"name":"topo"}}],[3,"Topo","daggy::petgraph::visit","A topological order traversal for a graph.",null,null],[11,"from_node","petgraph::visit","Create a new `SubTopo`, using the graph&#39;s visitor map, and put single\nnode in the to-visit list.",38,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"subtopo"}}],[11,"reset_with_node","","Clear visited state, and put a single node into the visit list.",38,null],[11,"next","","Return the next node in the current topological order traversal, or\n`None` if the traversal is at the end.",38,{"inputs":[{"name":"subtopo"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"subtopo"}],"output":{"name":"subtopo"}}],[3,"SubTopo","daggy::petgraph::visit","A topological order traversal for a subgraph.",null,null],[0,"unionfind","daggy::petgraph","`UnionFind&lt;K&gt;` is a disjoint-set data structure.",null,null],[11,"new","petgraph::unionfind","Create a new `UnionFind` of `n` disjoint sets.",39,{"inputs":[{"name":"usize"}],"output":{"name":"unionfind"}}],[11,"find","","Return the representative for `x`.",39,{"inputs":[{"name":"unionfind"},{"name":"k"}],"output":{"name":"k"}}],[11,"find_mut","","Return the representative for `x`.",39,{"inputs":[{"name":"unionfind"},{"name":"k"}],"output":{"name":"k"}}],[11,"union","","Unify the two sets containing `x` and `y`.",39,{"inputs":[{"name":"unionfind"},{"name":"k"},{"name":"k"}],"output":{"name":"bool"}}],[11,"into_labeling","","Return a vector mapping each element to its representative.",39,{"inputs":[{"name":"unionfind"}],"output":{"name":"vec"}}],[11,"fmt","","",39,{"inputs":[{"name":"unionfind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"unionfind"}],"output":{"name":"unionfind"}}],[3,"UnionFind","daggy::petgraph::unionfind","`UnionFind&lt;K&gt;` is a disjoint-set data structure. It tracks set membership of *n* elements\nindexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.",null,null],[11,"opposite","petgraph","Return the opposite `EdgeDirection`.",40,{"inputs":[{"name":"edgedirection"}],"output":{"name":"edgedirection"}}],[11,"hash","","",40,null],[11,"cmp","","",40,{"inputs":[{"name":"edgedirection"},{"name":"edgedirection"}],"output":{"name":"ordering"}}],[11,"clone","","",40,{"inputs":[{"name":"edgedirection"}],"output":{"name":"edgedirection"}}],[11,"fmt","","",40,{"inputs":[{"name":"edgedirection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"edgedirection"},{"name":"edgedirection"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"edgedirection"},{"name":"edgedirection"}],"output":{"name":"option"}}],[4,"EdgeDirection","daggy::petgraph","Edge direction",null,null],[13,"Outgoing","","An `Outgoing` edge is an outward edge *from* the current node.",40,null],[13,"Incoming","","An `Incoming` edge is an inbound edge *to* the current node.",40,null],[11,"is_directed","petgraph","",41,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"directed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"directed"}],"output":{"name":"directed"}}],[4,"Directed","daggy::petgraph","Marker type for a directed graph.",null,null],[11,"clone","petgraph","",42,{"inputs":[{"name":"undirected"}],"output":{"name":"undirected"}}],[11,"fmt","","",42,{"inputs":[{"name":"undirected"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_directed","","",42,{"inputs":[],"output":{"name":"bool"}}],[4,"Undirected","daggy::petgraph","Marker type for an undirected graph.",null,null],[8,"EdgeType","","A graph&#39;s edge type determines whether is has directed edges or not.",null,null],[10,"is_directed","","",43,{"inputs":[],"output":{"name":"bool"}}],[8,"IntoWeightedEdge","","Convert an element like `(i, j)` or `(i, j, w)` into\na triple of source, target, edge weight.",null,null],[16,"NodeId","","",44,null],[10,"into_weighted_edge","","",44,null],[3,"DfsIter","","An iterator for a depth first traversal of a graph.",null,null],[3,"Dfs","","A depth first search (DFS) of a graph.",null,null],[12,"stack","","The stack of nodes to visit",33,null],[12,"discovered","","The map of discovered nodes",33,null],[3,"Graph","","`Graph&lt;N, E, Ty, Ix&gt;` is a graph datastructure using an adjacency list representation.",null,null],[3,"Bfs","","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",35,null],[12,"discovered","","The map of discovered nodes",35,null],[3,"GraphMap","","`GraphMap&lt;N, E&gt;` is an undirected graph, with generic node values `N` and edge weights `E`.",null,null],[3,"BfsIter","","An iterator for a breadth first traversal of a graph.",null,null],[3,"EdgeIndex","daggy","Edge identifier.",null,null],[3,"NodeIndex","","Node identifier.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"Dag","","A Directed acyclic graph (DAG) data structure.",null,null],[3,"Children","","A **Walker** type that can be used to step through the children of some parent node.",null,null],[3,"Parents","","A **Walker** type that can be used to step through the children of some parent node.",null,null],[3,"EdgeIndices","","An iterator yielding multiple `EdgeIndex`s, returned by the `Graph::add_edges` method.",null,null],[3,"WouldCycle","","An error returned by the `Dag::add_edge` method in the case that adding an edge would have\ncaused the graph to cycle.",null,null],[12,"0","","",45,null],[0,"walker","","**Walker** is a trait providing a variety of useful methods for traversing graph types.",null,null],[3,"Recursive","daggy::walker","Recursively walks a graph using the recursive function `recursive_fn`.",null,null],[3,"Chain","","Walks the entirety of `a` before walking the entirety of `b`.",null,null],[3,"Filter","","A walker that applies some given predicate to each element returned by its walker.\nThe only index pairs that will be yielded are those that make the predicate evaluate to true.",null,null],[3,"Peekable","","A walker that has a `.peek(&amp;graph)` method that returns an optional next neighbor.",null,null],[3,"SkipWhile","","A walker that invokes the predicate on elements until it returns false. Once the predicate\nreturns false, that element and all further elements are yielded.",null,null],[3,"TakeWhile","","A walker that yields elements so long as the predicate returns true. After the\npredicate returns false for the first time, no further elements will be yielded.",null,null],[3,"Skip","","A walker that skips the first n steps of this walk, and then yields all further steps.",null,null],[3,"Take","","A walker that yields the first n steps of this walk.",null,null],[3,"Cycle","","A walker that repeats its internal walker endlessly.",null,null],[3,"Inspect","","A walker that calls a function with a reference to each index pair before yielding them.\nThis is often useful for debugging a walker pipeline.",null,null],[3,"Iter","","An iterator yielding index pairs produced by its internal walker and graph.",null,null],[3,"IterEdges","","An iterator yielding edge indices produced by its internal walker and graph.",null,null],[3,"IterNodes","","An iterator yielding node indices produced by its internal walker and graph.",null,null],[3,"IterWeights","","An iterator yielding weights associated with the index pairs produced by its internal walker\nand graph.",null,null],[3,"IterEdgeWeights","","An iterator yielding edge weights associated with the indices produced by its internal walker\nand graph.",null,null],[3,"IterNodeWeights","","An iterator yielding node weights associated with the indices produced by its internal walker\nand graph.",null,null],[6,"IndexPair","","Short-hand for an edge node index pair.",null,null],[8,"Walker","","A trait providing a variety of useful methods for traversing some graph type **G**.",null,null],[16,"Index","","The unsigned integer type used for node and edge indices.",46,null],[10,"next","","Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given\n**Graph**.",46,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_edge","","The next edge in our walk for the given **Graph**.",46,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"next_node","","The next node in our walk for the given **Graph**.",46,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"count","","Counts all the steps in the entire walk of the given graph.",46,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"usize"}}],[11,"last","","Walks the whole walk until reaching and returning the last edge node pair.",46,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_edge","","Walks the whole walk until reaching and returning the last edge.",46,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"last_node","","Walks the whole walk until reaching and returning the last node.",46,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"option"}}],[11,"nth","","Walks &quot;n&quot; number of steps and produces the resulting edge node pair.",46,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_edge","","Walks &quot;n&quot; number of steps and produces the resulting edge.",46,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"nth_node","","Walks &quot;n&quot; number of steps and produces the resulting node.",46,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Produces a walker that will walk the entirey of `self` before walking the entirey of other.",46,{"inputs":[{"name":"walker"},{"name":"o"}],"output":{"name":"chain"}}],[11,"filter","","Creates a walker that applies the predicate to each element returned by this walker.\nThe only elements that will be yielded are those that make the predicate evaluate to true.",46,{"inputs":[{"name":"walker"},{"name":"p"}],"output":{"name":"filter"}}],[11,"peekable","","Creates a walker that has a `.peek(&amp;graph)` method that returns an optional next neighbor.",46,{"inputs":[{"name":"walker"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates a walker that invokes the predicate on elements until it returns false. Once the\npredicate returns false, that element and all further elements are yielded.",46,{"inputs":[{"name":"walker"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates a walker that yields elements so long as the predicate returns true. After the\npredicate returns false for the first time, no further elements will be yielded.",46,{"inputs":[{"name":"walker"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates a walker that skips the first n steps of this walk, and then yields all further\nsteps.",46,{"inputs":[{"name":"walker"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates a walker that yields the first n steps of this walk.",46,{"inputs":[{"name":"walker"},{"name":"usize"}],"output":{"name":"take"}}],[11,"all","","Tests whether the predicate holds true for all steps in the walk.",46,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"any","","Tests whether any step in the walk satisfies the given predicate.",46,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"p"}],"output":{"name":"bool"}}],[11,"find","","Returns the first edge node index pair satisfying the specified predicate.",46,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_edge","","Returns the edge index satisfying the specified predicate.",46,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_node","","Returns the node index satisfying the specified predicate.",46,{"inputs":[{"name":"walker"},{"name":"g"},{"name":"p"}],"output":{"name":"option"}}],[11,"cycle","","Repeats the walker endlessly.",46,{"inputs":[{"name":"walker"}],"output":{"name":"cycle"}}],[11,"fold","","Performs a fold operation over the entire walker, returning the eventual state at the end\nof the walk.",46,{"inputs":[{"name":"walker"},{"name":"b"},{"name":"g"},{"name":"f"}],"output":{"name":"b"}}],[11,"inspect","","Creates a walker that calls a function with a reference to each index pair before yielding\nthem. This is often useful for debugging a walker pipeline.",46,{"inputs":[{"name":"walker"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"iter","","Converts the walker into an iterator yielding index pairs.",46,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"iter"}}],[11,"iter_weights","","Converts the walker into an iterator yielding `(&amp;e, &amp;n)`, where `e` is the edge weight for\nthe next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.",46,{"inputs":[{"name":"walker"},{"name":"g"}],"output":{"name":"iterweights"}}],[11,"fmt","","",47,{"inputs":[{"name":"recursive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"recursive"}],"output":{"name":"recursive"}}],[11,"new","","Construct a new **Recursive** **Walker** starting from the node at the given index.",47,{"inputs":[{"name":"nodeindex"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",47,{"inputs":[{"name":"recursive"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",48,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",48,{"inputs":[{"name":"chain"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",49,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",49,{"inputs":[{"name":"filter"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",50,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"peek","","The edge node index pair of the neighbor at the next step in our walk of the given graph.",50,{"inputs":[{"name":"peekable"},{"name":"g"}],"output":{"name":"option"}}],[11,"peek_edge","","The edge index of the neighbor at the next step in our walk of the given graph.",50,{"inputs":[{"name":"peekable"},{"name":"g"}],"output":{"name":"option"}}],[11,"peek_node","","The node index of the neighbor at the next step in our walk of the given graph.",50,{"inputs":[{"name":"peekable"},{"name":"g"}],"output":{"name":"option"}}],[11,"next","","",50,{"inputs":[{"name":"peekable"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",51,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",51,{"inputs":[{"name":"skipwhile"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",52,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",52,{"inputs":[{"name":"takewhile"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",53,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",53,{"inputs":[{"name":"skip"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",54,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",54,{"inputs":[{"name":"take"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",55,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",55,{"inputs":[{"name":"cycle"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",56,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",56,{"inputs":[{"name":"inspect"},{"name":"g"}],"output":{"name":"option"}}],[11,"fmt","","",57,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"edges","","Convert to an iterator that only yields the edge indices.",57,{"inputs":[{"name":"iter"}],"output":{"name":"iteredges"}}],[11,"nodes","","Convert to an iterator that only yields the node indices.",57,{"inputs":[{"name":"iter"}],"output":{"name":"iternodes"}}],[11,"next","","",57,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"fmt","","",58,{"inputs":[{"name":"iteredges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"iteredges"}],"output":{"name":"iteredges"}}],[11,"next","","",58,{"inputs":[{"name":"iteredges"}],"output":{"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"iternodes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"iternodes"}],"output":{"name":"iternodes"}}],[11,"next","","",59,{"inputs":[{"name":"iternodes"}],"output":{"name":"option"}}],[11,"fmt","","",60,{"inputs":[{"name":"iterweights"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"iterweights"}],"output":{"name":"iterweights"}}],[11,"edges","","Convert to an iterator yielding only the edge weights.",60,{"inputs":[{"name":"iterweights"}],"output":{"name":"iteredgeweights"}}],[11,"nodes","","Convert to an iterator yielding only the node weights.",60,{"inputs":[{"name":"iterweights"}],"output":{"name":"iternodeweights"}}],[11,"next","","",60,{"inputs":[{"name":"iterweights"}],"output":{"name":"option"}}],[11,"fmt","","",61,{"inputs":[{"name":"iteredgeweights"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"iteredgeweights"}],"output":{"name":"iteredgeweights"}}],[11,"next","","",61,{"inputs":[{"name":"iteredgeweights"}],"output":{"name":"option"}}],[11,"fmt","","",62,{"inputs":[{"name":"iternodeweights"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"iternodeweights"}],"output":{"name":"iternodeweights"}}],[11,"next","","",62,{"inputs":[{"name":"iternodeweights"}],"output":{"name":"option"}}],[6,"PetGraph","daggy","The Petgraph to be used internally within the Dag for storing/managing nodes and edges.",null,null],[6,"RawNodes","","Read only access into a **Dag**&#39;s internal node array.",null,null],[6,"RawEdges","","Read only access into a **Dag**&#39;s internal edge array.",null,null],[6,"RecursiveWalk","","An alias to simplify the **Recursive** **Walker** type returned by **Dag**.",null,null],[11,"fmt","","",63,{"inputs":[{"name":"dag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"dag"}],"output":{"name":"dag"}}],[11,"fmt","","",45,{"inputs":[{"name":"wouldcycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"wouldcycle"}],"output":{"name":"wouldcycle"}}],[11,"new","","Create a new, empty `Dag`.",63,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Dag` with estimated capacity for its node and edge Vecs.",63,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Removes all nodes and edges from the **Dag**.",63,{"inputs":[{"name":"dag"}],"output":null}],[11,"node_count","","The total number of nodes in the **Dag**.",63,{"inputs":[{"name":"dag"}],"output":{"name":"usize"}}],[11,"edge_count","","The total number of edgees in the **Dag**.",63,{"inputs":[{"name":"dag"}],"output":{"name":"usize"}}],[11,"graph","","Borrow the `Dag`&#39;s underlying `PetGraph&lt;N, Ix&gt;`.\nAll existing indices may be used to index into this `PetGraph` the same way they may be\nused to index into the `Dag`.",63,{"inputs":[{"name":"dag"}],"output":{"name":"petgraph"}}],[11,"into_graph","","Take ownership of the `Dag` and return the internal `PetGraph`.\nAll existing indices may be used to index into this `PetGraph` the same way they may be\nused to index into the `Dag`.",63,{"inputs":[{"name":"dag"}],"output":{"name":"petgraph"}}],[11,"add_node","","Add a new node to the `Dag` with the given weight.",63,{"inputs":[{"name":"dag"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"add_edge","","Add a new directed edge to the `Dag` with the given weight.",63,{"inputs":[{"name":"dag"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"result"}}],[11,"add_edges","","Adds the given directed edges to the `Dag`, each with their own given weight.",63,{"inputs":[{"name":"dag"},{"name":"i"}],"output":{"name":"result"}}],[11,"update_edge","","Update the edge from nodes `a` -&gt; `b` with the given weight.",63,{"inputs":[{"name":"dag"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"result"}}],[11,"find_edge","","Find and return the index to the edge that describes `a` -&gt; `b` if there is one.",63,{"inputs":[{"name":"dag"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Access the parent and child nodes for the given `EdgeIndex`.",63,{"inputs":[{"name":"dag"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"clear_edges","","Remove all edges.",63,{"inputs":[{"name":"dag"}],"output":null}],[11,"add_parent","","Add a new edge and parent node to the node at the given `NodeIndex`.\nReturns both the edge&#39;s `EdgeIndex` and the node&#39;s `NodeIndex`.",63,null],[11,"add_child","","Add a new edge and child node to the node at the given `NodeIndex`.\nReturns both the edge&#39;s `EdgeIndex` and the node&#39;s `NodeIndex`.",63,null],[11,"node_weight","","Borrow the weight from the node at the given index.",63,{"inputs":[{"name":"dag"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"node_weight_mut","","Mutably borrow the weight from the node at the given index.",63,{"inputs":[{"name":"dag"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"raw_nodes","","Read from the internal node array.",63,{"inputs":[{"name":"dag"}],"output":{"name":"rawnodes"}}],[11,"node_weights_mut","","An iterator yielding mutable access to all node weights.",63,{"inputs":[{"name":"dag"}],"output":{"name":"nodeweightsmut"}}],[11,"edge_weight","","Borrow the weight from the edge at the given index.",63,{"inputs":[{"name":"dag"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Mutably borrow the weight from the edge at the given index.",63,{"inputs":[{"name":"dag"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"raw_edges","","Read from the internal edge array.",63,{"inputs":[{"name":"dag"}],"output":{"name":"rawedges"}}],[11,"edge_weights_mut","","An iterator yielding mutable access to all edge weights.",63,{"inputs":[{"name":"dag"}],"output":{"name":"edgeweightsmut"}}],[11,"index_twice_mut","","Index the `Dag` by two indices.",63,null],[11,"remove_node","","Remove the node at the given index from the `Dag` and return it if it exists.",63,{"inputs":[{"name":"dag"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove an edge and return its weight, or `None` if it didn&#39;t exist.",63,{"inputs":[{"name":"dag"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"parents","","A **Walker** type that may be used to step through the parents of the given child node.",63,{"inputs":[{"name":"dag"},{"name":"nodeindex"}],"output":{"name":"parents"}}],[11,"children","","A &quot;walker&quot; object that may be used to step through the children of the given parent node.",63,{"inputs":[{"name":"dag"},{"name":"nodeindex"}],"output":{"name":"children"}}],[11,"recursive_walk","","A **Walker** type that recursively walks the **Dag** using the given `recursive_fn`.",63,{"inputs":[{"name":"dag"},{"name":"nodeindex"},{"name":"f"}],"output":{"name":"recursivewalk"}}],[11,"index","","",63,{"inputs":[{"name":"dag"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index_mut","","",63,{"inputs":[{"name":"dag"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index","","",63,{"inputs":[{"name":"dag"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"index_mut","","",63,{"inputs":[{"name":"dag"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"next","","",64,{"inputs":[{"name":"children"},{"name":"dag"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"parents"},{"name":"dag"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"edgeindices"}],"output":{"name":"option"}}],[11,"fmt","","",45,{"inputs":[{"name":"wouldcycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",45,{"inputs":[{"name":"wouldcycle"}],"output":{"name":"str"}}]],"paths":[[3,"GraphMap"],[3,"Nodes"],[3,"Neighbors"],[3,"Edges"],[3,"AllEdges"],[3,"Ptr"],[8,"IndexType"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Node"],[3,"Edge"],[3,"Graph"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"WalkEdges"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"Dot"],[4,"Config"],[8,"Graphlike"],[8,"NeighborIter"],[3,"AsUndirected"],[3,"Reversed"],[8,"NeighborsDirected"],[8,"Externals"],[8,"VisitMap"],[8,"Visitable"],[8,"Revisitable"],[8,"GetAdjacencyMatrix"],[3,"Dfs"],[3,"DfsIter"],[3,"Bfs"],[3,"BfsIter"],[3,"Topo"],[3,"SubTopo"],[3,"UnionFind"],[4,"EdgeDirection"],[4,"Directed"],[4,"Undirected"],[8,"EdgeType"],[8,"IntoWeightedEdge"],[3,"WouldCycle"],[8,"Walker"],[3,"Recursive"],[3,"Chain"],[3,"Filter"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Cycle"],[3,"Inspect"],[3,"Iter"],[3,"IterEdges"],[3,"IterNodes"],[3,"IterWeights"],[3,"IterEdgeWeights"],[3,"IterNodeWeights"],[3,"Dag"],[3,"Children"],[3,"Parents"],[3,"EdgeIndices"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"]]};
searchIndex["petgraph"] = {"doc":"**petgraph** is a graph data structure library.","items":[[4,"EdgeDirection","petgraph","Edge direction",null,null],[13,"Outgoing","","An `Outgoing` edge is an outward edge *from* the current node.",0,null],[13,"Incoming","","An `Incoming` edge is an inbound edge *to* the current node.",0,null],[4,"Directed","","Marker type for a directed graph.",null,null],[4,"Undirected","","Marker type for an undirected graph.",null,null],[0,"algo","","Graph algorithms.",null,null],[5,"is_isomorphic","petgraph::algo","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_isomorphic_matching","","Return `true` if the graphs `g0` and `g1` are isomorphic.",null,{"inputs":[{"name":"graph"},{"name":"graph"},{"name":"f"},{"name":"g"}],"output":{"name":"bool"}}],[5,"dijkstra","","Dijkstra&#39;s shortest path algorithm.",null,{"inputs":[{"name":"g"},{"name":"nodeid"},{"name":"option"},{"name":"f"}],"output":{"name":"hashmap"}}],[5,"is_cyclic_undirected","","Return `true` if the input graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic","","**Deprecated: Renamed to `is_cyclic_undirected`.**",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"is_cyclic_directed","","Return `true` if the input directed graph contains a cycle.",null,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[5,"toposort","","Perform a topological sort of a directed graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"scc","","Compute the *strongly connected components* using Kosaraju&#39;s algorithm.",null,{"inputs":[{"name":"graph"}],"output":{"name":"vec"}}],[5,"condensation","","Condense every strongly connected component into a single node and return the result.",null,{"inputs":[{"name":"graph"},{"name":"bool"}],"output":{"name":"graph"}}],[5,"connected_components","","Return the number of connected components of the graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[5,"min_spanning_tree","","Compute a *minimum spanning tree* of a graph.",null,{"inputs":[{"name":"graph"}],"output":{"name":"graph"}}],[0,"graphmap","petgraph","`GraphMap&lt;N, E&gt;` is an undirected graph where node values are mapping keys.",null,null],[3,"GraphMap","petgraph::graphmap","`GraphMap&lt;N, E&gt;` is an undirected graph, with generic node values `N` and edge weights `E`.",null,null],[3,"Nodes","","",null,null],[3,"Neighbors","","",null,null],[3,"Edges","","",null,null],[3,"AllEdges","","",null,null],[3,"Ptr","","A reference that is hashed and compared by its pointer value.",null,null],[12,"0","","",1,null],[8,"NodeTrait","","A trait group for `GraphMap`&#39;s node identifier.",null,null],[11,"clone","","",2,{"inputs":[{"name":"graphmap"}],"output":{"name":"graphmap"}}],[11,"fmt","","",2,{"inputs":[{"name":"graphmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `GraphMap`.",2,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `GraphMap` with estimated capacity.",2,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",2,null],[11,"from_edges","","Create a new `GraphMap` from an iterable of edges.",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"node_count","","Return the number of nodes in the graph.",2,{"inputs":[{"name":"graphmap"}],"output":{"name":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",2,{"inputs":[{"name":"graphmap"}],"output":{"name":"usize"}}],[11,"clear","","Remove all nodes and edges",2,{"inputs":[{"name":"graphmap"}],"output":null}],[11,"add_node","","Add node `n` to the graph.",2,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"n"}}],[11,"remove_node","","Return `true` if node `n` was removed.",2,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"bool"}}],[11,"contains_node","","Return `true` if the node is contained in the graph.",2,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"bool"}}],[11,"add_edge","","Add an edge connecting `a` and `b` to the graph, with associated\ndata `weight`.",2,{"inputs":[{"name":"graphmap"},{"name":"n"},{"name":"n"},{"name":"e"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove edge from `a` to `b` from the graph and return the edge weight.",2,{"inputs":[{"name":"graphmap"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"contains_edge","","Return `true` if the edge connecting `a` with `b` is contained in the graph.",2,{"inputs":[{"name":"graphmap"},{"name":"n"},{"name":"n"}],"output":{"name":"bool"}}],[11,"nodes","","Return an iterator over the nodes of the graph.",2,{"inputs":[{"name":"graphmap"}],"output":{"name":"nodes"}}],[11,"neighbors","","Return an iterator over the nodes that are connected with `from` by edges.",2,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"neighbors"}}],[11,"edges","","Return an iterator over the nodes that are connected with `from` by edges,\npaired with the edge weight.",2,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"edges"}}],[11,"edge_weight","","Return a reference to the edge weight connecting `a` with `b`, or\n`None` if the edge does not exist in the graph.",2,{"inputs":[{"name":"graphmap"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting `a` with `b`, or\n`None` if the edge does not exist in the graph.",2,{"inputs":[{"name":"graphmap"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"all_edges","","Return an iterator over all edges of the graph with their weight in arbitrary order.",2,{"inputs":[{"name":"graphmap"}],"output":{"name":"alledges"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",2,{"inputs":[{"name":"graphmap"},{"name":"i"}],"output":null}],[11,"next","","",3,{"inputs":[{"name":"nodes"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"neighbors"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"neighbors"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"neighbors"}],"output":{"name":"self"}}],[11,"next","","",5,{"inputs":[{"name":"edges"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"alledges"}],"output":{"name":"option"}}],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"ptr"}],"output":{"name":"self"}}],[11,"eq","","Ptr compares by pointer equality, i.e if they point to the same value",1,{"inputs":[{"name":"ptr"},{"name":"ptr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"ptr"},{"name":"ptr"}],"output":{"name":"option"}}],[11,"cmp","","Ptr is ordered by pointer value, i.e. an arbitrary but stable and total order.",1,{"inputs":[{"name":"ptr"},{"name":"ptr"}],"output":{"name":"ordering"}}],[11,"deref","","",1,{"inputs":[{"name":"ptr"}],"output":{"name":"t"}}],[11,"hash","","",1,{"inputs":[{"name":"ptr"},{"name":"h"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"ptr"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"graph","petgraph","`Graph&lt;N, E, Ty, Ix&gt;` is a graph datastructure using an adjacency list representation.",null,null],[3,"NodeIndex","petgraph::graph","Node identifier.",null,null],[3,"EdgeIndex","","Edge identifier.",null,null],[3,"Node","","The graph&#39;s node type.",null,null],[12,"weight","","Associated node data.",7,null],[3,"Edge","","The graph&#39;s edge type.",null,null],[12,"weight","","Associated edge data.",8,null],[3,"Graph","","`Graph&lt;N, E, Ty, Ix&gt;` is a graph datastructure using an adjacency list representation.",null,null],[3,"Externals","","An iterator over either the nodes without edges to them or from them.",null,null],[3,"Neighbors","","Iterator over the neighbors of a node.",null,null],[3,"Edges","","Iterator over the edges of a node.",null,null],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",null,null],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",null,null],[3,"WalkNeighbors","","A “walker” object that can be used to step through the edge list of a node.",null,null],[3,"WalkEdges","","**Deprecated.**",null,null],[3,"NodeIndices","","Iterator over the node indices of a graph.",null,null],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",null,null],[5,"node_index","","Short version of `NodeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[5,"edge_index","","Short version of `EdgeIndex::new`",null,{"inputs":[{"name":"usize"}],"output":{"name":"edgeindex"}}],[6,"DefIndex","","The default integer type for node and edge indices in `Graph`.\n`u32` is the default to reduce the size of the graph&#39;s data and improve\nperformance in the common case.",null,null],[8,"IndexType","","Trait for the unsigned integer type used for node and edge indices.",null,null],[10,"new","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"index","","",9,{"inputs":[{"name":"indextype"}],"output":{"name":"usize"}}],[10,"max","","",9,{"inputs":[],"output":{"name":"self"}}],[8,"GraphIndex","","A  `GraphIndex` is a node or edge index.",null,null],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"nodeindex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"new","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",10,{"inputs":[{"name":"nodeindex"}],"output":{"name":"usize"}}],[11,"end","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"ix"}],"output":{"name":"self"}}],[11,"hash","","",11,null],[11,"cmp","","",11,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"edgeindex"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"edgeindex"}],"output":{"name":"edgeindex"}}],[11,"new","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"index","","",11,{"inputs":[{"name":"edgeindex"}],"output":{"name":"usize"}}],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example\nto end an adjacency list.",11,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"edgeindex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"fmt","","",7,{"inputs":[{"name":"node"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_edge","","Accessor for data structure internals: the first edge in the given direction.",7,{"inputs":[{"name":"node"},{"name":"edgedirection"}],"output":{"name":"edgeindex"}}],[11,"clone","","",8,{"inputs":[{"name":"edge"}],"output":{"name":"edge"}}],[11,"fmt","","",8,{"inputs":[{"name":"edge"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",8,{"inputs":[{"name":"edge"},{"name":"edgedirection"}],"output":{"name":"edgeindex"}}],[11,"source","","Return the source node index.",8,{"inputs":[{"name":"edge"}],"output":{"name":"nodeindex"}}],[11,"target","","Return the target node index.",8,{"inputs":[{"name":"edge"}],"output":{"name":"nodeindex"}}],[11,"clone","","",12,{"inputs":[{"name":"graph"}],"output":{"name":"self"}}],[11,"clone_from","","",12,{"inputs":[{"name":"graph"},{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"graph"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Graph` with directed edges.",12,{"inputs":[],"output":{"name":"self"}}],[11,"new_undirected","","Create a new `Graph` with undirected edges.",12,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Graph` with estimated capacity.",12,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Return the current node and edge capacity of the graph.",12,null],[11,"node_count","","Return the number of nodes (vertices) in the graph.",12,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[11,"edge_count","","Return the number of edges in the graph.",12,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[11,"is_directed","","Whether the graph has directed edges or not.",12,{"inputs":[{"name":"graph"}],"output":{"name":"bool"}}],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",12,{"inputs":[{"name":"graph"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"node_weight","","Access the weight for node `a`.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated\ndata `weight`.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"update_edge","","Add or update an edge from `a` to `b`.\nIf the edge already exists, its weight is updated.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"edge_weight","","Access the weight for edge `e`.",12,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably.",12,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"edge_endpoints","","Access the source and target nodes for `e`.",12,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight.\nIf it doesn&#39;t exist in the graph, return `None`.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn&#39;t exist.",12,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"option"}}],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`,\nin the specified direction.\nIf the graph&#39;s edges are undirected, this is equivalent to *.neighbors(a)*.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"neighbors"}}],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`,\nin either direction.\nIf the graph&#39;s edges are undirected, this is equivalent to *.neighbors(a)*.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"edges","","Return an iterator over the neighbors of node `a`, paired with their respective edge\nweights.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"edges"}}],[11,"edges_directed","","Return an iterator of all neighbors that have an edge between them and `a`,\nin the specified direction, paired with the respective edge weights.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"edges"}}],[11,"find_edge","","Lookup an edge from `a` to `b`.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"externals","","Return an iterator over either the nodes without edges to them\n(`Incoming`) or from them (`Outgoing`).",12,{"inputs":[{"name":"graph"},{"name":"edgedirection"}],"output":{"name":"externals"}}],[11,"node_indices","","Return an iterator over the node indices of the graph",12,{"inputs":[{"name":"graph"}],"output":{"name":"nodeindices"}}],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node weights.",12,{"inputs":[{"name":"graph"}],"output":{"name":"nodeweightsmut"}}],[11,"edge_indices","","Return an iterator over the edge indices of the graph",12,{"inputs":[{"name":"graph"}],"output":{"name":"edgeindices"}}],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge weights.",12,{"inputs":[{"name":"graph"}],"output":{"name":"edgeweightsmut"}}],[11,"raw_nodes","","Access the internal node array.",12,null],[11,"raw_edges","","Access the internal edge array.",12,null],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of Edges",12,null],[11,"first_edge","","Accessor for data structure internals: the first edge in the given direction.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"option"}}],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",12,{"inputs":[{"name":"graph"},{"name":"edgeindex"},{"name":"edgedirection"}],"output":{"name":"option"}}],[11,"walk_edges_directed","","**Deprecated:** Use [`.neighbors_directed(a, dir).detach()`][1] instead.",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"walkedges"}}],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of\nnode or edge indices is fine.",12,null],[11,"reverse","","Reverse the direction of all edges",12,{"inputs":[{"name":"graph"}],"output":null}],[11,"clear","","Remove all nodes and edges",12,{"inputs":[{"name":"graph"}],"output":null}],[11,"clear_edges","","Remove all edges",12,{"inputs":[{"name":"graph"}],"output":null}],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure,\nremove the others.",12,{"inputs":[{"name":"graph"},{"name":"f"}],"output":null}],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure,\nremove the others.",12,{"inputs":[{"name":"graph"},{"name":"f"}],"output":null}],[11,"from_edges","","Create a new `Graph` from an iterable of edges.",12,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",12,{"inputs":[{"name":"graph"},{"name":"i"}],"output":null}],[11,"map","","Create a new `Graph` by mapping node and\nedge weights to new values.",12,{"inputs":[{"name":"graph"},{"name":"f"},{"name":"g"}],"output":{"name":"graph"}}],[11,"filter_map","","Create a new `Graph` by mapping nodes and edges.\nA node or edge may be mapped to `None` to exclude it from\nthe resulting graph.",12,{"inputs":[{"name":"graph"},{"name":"f"},{"name":"g"}],"output":{"name":"graph"}}],[11,"into_edge_type","","Convert the graph into either undirected or directed. No edge adjustments\nare done, so you may want to go over the result to remove or add edges.",12,{"inputs":[{"name":"graph"}],"output":{"name":"graph"}}],[11,"next","","",13,{"inputs":[{"name":"externals"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"neighbors"}],"output":{"name":"option"}}],[11,"clone","","",14,{"inputs":[{"name":"neighbors"}],"output":{"name":"self"}}],[11,"detach","","Return a “walker” object that can be used to step through the\nneighbors and edges from the origin node.",14,{"inputs":[{"name":"neighbors"}],"output":{"name":"walkneighbors"}}],[11,"next","","",15,{"inputs":[{"name":"edges"}],"output":{"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"edges"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"nodeweightsmut"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next","","",17,{"inputs":[{"name":"edgeweightsmut"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"index","","",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index_mut","","",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"index","","",12,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"index_mut","","",12,{"inputs":[{"name":"graph"},{"name":"edgeindex"}],"output":{"name":"e"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",10,{"inputs":[{"name":"nodeindex"}],"output":{"name":"usize"}}],[11,"is_node_index","","",10,{"inputs":[],"output":{"name":"bool"}}],[11,"index","","",11,{"inputs":[{"name":"edgeindex"}],"output":{"name":"usize"}}],[11,"is_node_index","","",11,{"inputs":[],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"walkneighbors"}],"output":{"name":"self"}}],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",18,{"inputs":[{"name":"walkneighbors"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_node","","",18,{"inputs":[{"name":"walkneighbors"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_edge","","",18,{"inputs":[{"name":"walkneighbors"},{"name":"graph"}],"output":{"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"walkedges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"walkedges"}],"output":{"name":"walkedges"}}],[11,"next","","Fetch the next edge index in the walk for graph `g`.",19,{"inputs":[{"name":"walkedges"},{"name":"graph"}],"output":{"name":"option"}}],[11,"next_neighbor","","Fetch the next edge index and the next node index in the walk for graph `g`.",19,{"inputs":[{"name":"walkedges"},{"name":"graph"}],"output":{"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"nodeindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"nodeindices"}],"output":{"name":"nodeindices"}}],[11,"next","","",20,{"inputs":[{"name":"nodeindices"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"nodeindices"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"edgeindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"edgeindices"}],"output":{"name":"edgeindices"}}],[11,"next","","",21,{"inputs":[{"name":"edgeindices"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"edgeindices"}],"output":{"name":"option"}}],[0,"dot","petgraph","Simple graphviz dot file format output.",null,null],[3,"Dot","petgraph::dot","`Dot` implements output to graphviz .dot format for a graph.",null,null],[4,"Config","","`Dot` configuration.",null,null],[13,"NodeIndexLabel","","Use indices for node labels.",22,null],[13,"EdgeIndexLabel","","Use indices for edge labels.",22,null],[13,"EdgeNoLabel","","Use no edge labels.",22,null],[11,"new","","Create a `Dot` formatting wrapper with default configuration.",23,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"with_config","","Create a `Dot` formatting wrapper with custom configuration.",23,null],[11,"eq","","",22,{"inputs":[{"name":"config"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"config"},{"name":"config"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"dot"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"dot"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"dot"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"dot"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"visit","petgraph","Graph visitor algorithms.",null,null],[3,"AsUndirected","petgraph::visit","Wrapper type for walking the graph as if it is undirected",null,null],[12,"0","","",24,null],[3,"Reversed","","Wrapper type for walking the graph as if all edges are reversed.",null,null],[12,"0","","",25,null],[3,"Dfs","","A depth first search (DFS) of a graph.",null,null],[12,"stack","","The stack of nodes to visit",26,null],[12,"discovered","","The map of discovered nodes",26,null],[3,"DfsIter","","An iterator for a depth first traversal of a graph.",null,null],[3,"Bfs","","A breadth first search (BFS) of a graph.",null,null],[12,"stack","","The queue of nodes to visit",27,null],[12,"discovered","","The map of discovered nodes",27,null],[3,"BfsIter","","An iterator for a breadth first traversal of a graph.",null,null],[3,"Topo","","A topological order traversal for a graph.",null,null],[3,"SubTopo","","A topological order traversal for a subgraph.",null,null],[8,"Graphlike","","Base trait for graphs that defines the node identifier.",null,null],[16,"NodeId","","",28,null],[8,"NeighborIter","","NeighborIter gives access to the neighbors iterator.",null,null],[16,"Iter","","",29,null],[10,"neighbors","","Return an iterator that visits all neighbors of the node **n**.",29,{"inputs":[{"name":"neighboriter"},{"name":"nodeid"}],"output":{"name":"iter"}}],[8,"NeighborsDirected","","NeighborsDirected gives access to neighbors of both `Incoming` and `Outgoing`\nedges of a node.",null,null],[16,"NeighborsDirected","","",30,null],[10,"neighbors_directed","","Return an iterator that visits all neighbors of the node **n**.",30,{"inputs":[{"name":"neighborsdirected"},{"name":"nodeid"},{"name":"edgedirection"}],"output":{"name":"neighborsdirected"}}],[8,"Externals","","Externals returns an iterator of all nodes that either have either no\nincoming or no outgoing edges.",null,null],[16,"Externals","","",31,null],[10,"externals","","Return an iterator of all nodes with no edges in the given direction",31,{"inputs":[{"name":"externals"},{"name":"edgedirection"}],"output":{"name":"externals"}}],[8,"VisitMap","","A mapping for storing the visited status for NodeId `N`.",null,null],[10,"visit","","Return **true** if the value is not already present.",32,{"inputs":[{"name":"visitmap"},{"name":"n"}],"output":{"name":"bool"}}],[10,"is_visited","","",32,{"inputs":[{"name":"visitmap"},{"name":"n"}],"output":{"name":"bool"}}],[8,"Visitable","","A graph that can create a visitor map.",null,null],[16,"Map","","",33,null],[10,"visit_map","","",33,{"inputs":[{"name":"visitable"}],"output":{"name":"map"}}],[8,"Revisitable","","A graph that can reset and resize its visitor map.",null,null],[10,"reset_map","","",34,{"inputs":[{"name":"revisitable"},{"name":"map"}],"output":null}],[8,"GetAdjacencyMatrix","","Create or access the adjacency matrix of a graph",null,null],[16,"AdjMatrix","","",35,null],[10,"adjacency_matrix","","",35,{"inputs":[{"name":"getadjacencymatrix"}],"output":{"name":"adjmatrix"}}],[10,"is_adjacent","","",35,{"inputs":[{"name":"getadjacencymatrix"},{"name":"adjmatrix"},{"name":"nodeid"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"neighbors","petgraph::graph","",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors","petgraph::graphmap","",2,{"inputs":[{"name":"graphmap"},{"name":"n"}],"output":{"name":"neighbors"}}],[11,"neighbors","petgraph::visit","",24,{"inputs":[{"name":"asundirected"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors","","",25,{"inputs":[{"name":"reversed"},{"name":"nodeindex"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","petgraph::graph","",12,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"edgedirection"}],"output":{"name":"neighbors"}}],[11,"neighbors_directed","petgraph::visit","",25,{"inputs":[{"name":"reversed"},{"name":"nodeid"},{"name":"edgedirection"}],"output":{"name":"neighborsdirected"}}],[11,"externals","petgraph::graph","",12,{"inputs":[{"name":"graph"},{"name":"edgedirection"}],"output":{"name":"externals"}}],[11,"externals","petgraph::visit","",25,{"inputs":[{"name":"reversed"},{"name":"edgedirection"}],"output":{"name":"externals"}}],[11,"visit","fixedbitset","",36,{"inputs":[{"name":"fixedbitset"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"is_visited","","",36,{"inputs":[{"name":"fixedbitset"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"visit","","",36,{"inputs":[{"name":"fixedbitset"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"is_visited","","",36,{"inputs":[{"name":"fixedbitset"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"visit","std::collections::hash::set","",37,{"inputs":[{"name":"hashset"},{"name":"n"}],"output":{"name":"bool"}}],[11,"is_visited","","",37,{"inputs":[{"name":"hashset"},{"name":"n"}],"output":{"name":"bool"}}],[11,"visit_map","petgraph::graph","",12,{"inputs":[{"name":"graph"}],"output":{"name":"fixedbitset"}}],[11,"reset_map","","",12,{"inputs":[{"name":"graph"},{"name":"map"}],"output":null}],[11,"reset_map","petgraph::visit","",25,{"inputs":[{"name":"reversed"},{"name":"map"}],"output":null}],[11,"visit_map","petgraph::graphmap","",2,{"inputs":[{"name":"graphmap"}],"output":{"name":"hashset"}}],[11,"reset_map","","",2,{"inputs":[{"name":"graphmap"},{"name":"map"}],"output":null}],[11,"visit_map","petgraph::visit","",24,{"inputs":[{"name":"asundirected"}],"output":{"name":"map"}}],[11,"visit_map","","",25,{"inputs":[{"name":"reversed"}],"output":{"name":"map"}}],[11,"adjacency_matrix","petgraph::graphmap","",2,{"inputs":[{"name":"graphmap"}],"output":null}],[11,"is_adjacent","","",2,null],[11,"fmt","petgraph::visit","",26,{"inputs":[{"name":"dfs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"dfs"}],"output":{"name":"dfs"}}],[11,"new","","Create a new **Dfs**, using the graph&#39;s visitor map, and put **start**\nin the stack of nodes to visit.",26,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"empty","","Create a new **Dfs** using the graph&#39;s visitor map, and no stack.",26,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart\nthe dfs from a particular node.",26,{"inputs":[{"name":"dfs"},{"name":"n"}],"output":null}],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",26,{"inputs":[{"name":"dfs"},{"name":"g"}],"output":{"name":"option"}}],[11,"new","","",38,{"inputs":[{"name":"g"},{"name":"nodeid"}],"output":{"name":"self"}}],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart\nthe DFS traversal from a particular node.",38,{"inputs":[{"name":"dfsiter"},{"name":"nodeid"}],"output":null}],[11,"next","","",38,{"inputs":[{"name":"dfsiter"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"dfsiter"}],"output":{"name":"self"}}],[11,"clone","","",27,{"inputs":[{"name":"bfs"}],"output":{"name":"bfs"}}],[11,"new","","Create a new **Bfs**, using the graph&#39;s visitor map, and put **start**\nin the stack of nodes to visit.",27,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"next","","Return the next node in the dfs, or **None** if the traversal is done.",27,{"inputs":[{"name":"bfs"},{"name":"g"}],"output":{"name":"option"}}],[11,"new","","",39,{"inputs":[{"name":"g"},{"name":"nodeid"}],"output":{"name":"self"}}],[11,"next","","",39,{"inputs":[{"name":"bfsiter"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"clone","","",39,{"inputs":[{"name":"bfsiter"}],"output":{"name":"self"}}],[11,"clone","","",40,{"inputs":[{"name":"topo"}],"output":{"name":"topo"}}],[11,"new","","Create a new `Topo`, using the graph&#39;s visitor map, and put all\ninitial nodes in the to-visit list.",40,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"reset","","Clear visited state, and put all initial nodes into the visit list.",40,{"inputs":[{"name":"topo"},{"name":"g"}],"output":null}],[11,"next","","Return the next node in the current topological order traversal, or\n`None` if the traversal is at the end.",40,{"inputs":[{"name":"topo"},{"name":"g"}],"output":{"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"subtopo"}],"output":{"name":"subtopo"}}],[11,"from_node","","Create a new `SubTopo`, using the graph&#39;s visitor map, and put single\nnode in the to-visit list.",41,{"inputs":[{"name":"g"},{"name":"n"}],"output":{"name":"self"}}],[11,"reset_with_node","","Clear visited state, and put a single node into the visit list.",41,{"inputs":[{"name":"subtopo"},{"name":"g"},{"name":"n"}],"output":null}],[11,"next","","Return the next node in the current topological order traversal, or\n`None` if the traversal is at the end.",41,{"inputs":[{"name":"subtopo"},{"name":"g"}],"output":{"name":"option"}}],[0,"unionfind","petgraph","`UnionFind&lt;K&gt;` is a disjoint-set data structure.",null,null],[3,"UnionFind","petgraph::unionfind","`UnionFind&lt;K&gt;` is a disjoint-set data structure. It tracks set membership of *n* elements\nindexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.",null,null],[11,"clone","","",42,{"inputs":[{"name":"unionfind"}],"output":{"name":"unionfind"}}],[11,"fmt","","",42,{"inputs":[{"name":"unionfind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `UnionFind` of `n` disjoint sets.",42,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"find","","Return the representative for `x`.",42,{"inputs":[{"name":"unionfind"},{"name":"k"}],"output":{"name":"k"}}],[11,"find_mut","","Return the representative for `x`.",42,{"inputs":[{"name":"unionfind"},{"name":"k"}],"output":{"name":"k"}}],[11,"union","","Unify the two sets containing `x` and `y`.",42,{"inputs":[{"name":"unionfind"},{"name":"k"},{"name":"k"}],"output":{"name":"bool"}}],[11,"into_labeling","","Return a vector mapping each element to its representative.",42,{"inputs":[{"name":"unionfind"}],"output":{"name":"vec"}}],[11,"adjacency_matrix","petgraph::graph","",12,{"inputs":[{"name":"graph"}],"output":{"name":"fixedbitset"}}],[11,"is_adjacent","","",12,{"inputs":[{"name":"graph"},{"name":"fixedbitset"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[8,"EdgeType","petgraph","A graph&#39;s edge type determines whether is has directed edges or not.",null,null],[10,"is_directed","","",43,{"inputs":[],"output":{"name":"bool"}}],[8,"IntoWeightedEdge","","Convert an element like `(i, j)` or `(i, j, w)` into\na triple of source, target, edge weight.",null,null],[16,"NodeId","","",44,null],[10,"into_weighted_edge","","",44,null],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"edgedirection"},{"name":"edgedirection"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"edgedirection"},{"name":"edgedirection"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"edgedirection"},{"name":"edgedirection"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"edgedirection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"edgedirection"}],"output":{"name":"edgedirection"}}],[11,"opposite","","Return the opposite `EdgeDirection`.",0,{"inputs":[{"name":"edgedirection"}],"output":{"name":"edgedirection"}}],[11,"fmt","","",45,{"inputs":[{"name":"directed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"directed"}],"output":{"name":"directed"}}],[11,"fmt","","",46,{"inputs":[{"name":"undirected"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"undirected"}],"output":{"name":"undirected"}}],[11,"is_directed","","",45,{"inputs":[],"output":{"name":"bool"}}],[11,"is_directed","","",46,{"inputs":[],"output":{"name":"bool"}}]],"paths":[[4,"EdgeDirection"],[3,"Ptr"],[3,"GraphMap"],[3,"Nodes"],[3,"Neighbors"],[3,"Edges"],[3,"AllEdges"],[3,"Node"],[3,"Edge"],[8,"IndexType"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Graph"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"WalkEdges"],[3,"NodeIndices"],[3,"EdgeIndices"],[4,"Config"],[3,"Dot"],[3,"AsUndirected"],[3,"Reversed"],[3,"Dfs"],[3,"Bfs"],[8,"Graphlike"],[8,"NeighborIter"],[8,"NeighborsDirected"],[8,"Externals"],[8,"VisitMap"],[8,"Visitable"],[8,"Revisitable"],[8,"GetAdjacencyMatrix"],[3,"FixedBitSet"],[3,"HashSet"],[3,"DfsIter"],[3,"BfsIter"],[3,"Topo"],[3,"SubTopo"],[3,"UnionFind"],[8,"EdgeType"],[8,"IntoWeightedEdge"],[4,"Directed"],[4,"Undirected"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["input"] = {"doc":"A flexible structure for user interactions\nto be used in window frameworks and widgets libraries.","items":[[3,"UpdateArgs","input","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",0,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",1,null],[12,"width","","The width of rendered area in points.",1,null],[12,"height","","The height of rendered area in points.",1,null],[12,"draw_width","","The width of rendered area in pixels.",1,null],[12,"draw_height","","The height of rendered area in pixels.",1,null],[3,"AfterRenderArgs","","After render arguments.",null,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",2,null],[3,"EventId","","Used to identify events arguments provided by traits.",null,null],[12,"0","","",3,null],[4,"Event","","Adds render and update events to input events",null,null],[13,"Render","","Render graphics.",4,null],[13,"AfterRender","","After rendering and swapping buffers.",4,null],[13,"Update","","Update the state of the application.",4,null],[13,"Idle","","Do background tasks that can be done incrementally.",4,null],[13,"Input","","Input event.",4,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",5,null],[13,"Mouse","","A mouse button.",5,null],[13,"Controller","","A controller button.",5,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",6,null],[13,"MouseRelative","","x and y in relative coordinates.",6,null],[13,"MouseScroll","","x and y in scroll ticks.",6,null],[13,"ControllerAxis","","joystick axis move event.",6,null],[4,"Input","","Models input events.",null,null],[13,"Press","","Pressed a button.",7,null],[13,"Release","","Released a button.",7,null],[13,"Move","","Moved mouse cursor.",7,null],[13,"Text","","Text (usually from keyboard).",7,null],[13,"Resize","","Window got resized.",7,null],[13,"Focus","","Window gained or lost focus.",7,null],[13,"Cursor","","Window gained or lost cursor.",7,null],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","input::keyboard","",null,null],[4,"Key","","Represent a keyboard key.\nKeycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",8,null],[13,"Backspace","","",8,null],[13,"Tab","","",8,null],[13,"Return","","",8,null],[13,"Escape","","",8,null],[13,"Space","","",8,null],[13,"Exclaim","","",8,null],[13,"Quotedbl","","",8,null],[13,"Hash","","",8,null],[13,"Dollar","","",8,null],[13,"Percent","","",8,null],[13,"Ampersand","","",8,null],[13,"Quote","","",8,null],[13,"LeftParen","","",8,null],[13,"RightParen","","",8,null],[13,"Asterisk","","",8,null],[13,"Plus","","",8,null],[13,"Comma","","",8,null],[13,"Minus","","",8,null],[13,"Period","","",8,null],[13,"Slash","","",8,null],[13,"D0","","",8,null],[13,"D1","","",8,null],[13,"D2","","",8,null],[13,"D3","","",8,null],[13,"D4","","",8,null],[13,"D5","","",8,null],[13,"D6","","",8,null],[13,"D7","","",8,null],[13,"D8","","",8,null],[13,"D9","","",8,null],[13,"Colon","","",8,null],[13,"Semicolon","","",8,null],[13,"Less","","",8,null],[13,"Equals","","",8,null],[13,"Greater","","",8,null],[13,"Question","","",8,null],[13,"At","","",8,null],[13,"LeftBracket","","",8,null],[13,"Backslash","","",8,null],[13,"RightBracket","","",8,null],[13,"Caret","","",8,null],[13,"Underscore","","",8,null],[13,"Backquote","","",8,null],[13,"A","","",8,null],[13,"B","","",8,null],[13,"C","","",8,null],[13,"D","","",8,null],[13,"E","","",8,null],[13,"F","","",8,null],[13,"G","","",8,null],[13,"H","","",8,null],[13,"I","","",8,null],[13,"J","","",8,null],[13,"K","","",8,null],[13,"L","","",8,null],[13,"M","","",8,null],[13,"N","","",8,null],[13,"O","","",8,null],[13,"P","","",8,null],[13,"Q","","",8,null],[13,"R","","",8,null],[13,"S","","",8,null],[13,"T","","",8,null],[13,"U","","",8,null],[13,"V","","",8,null],[13,"W","","",8,null],[13,"X","","",8,null],[13,"Y","","",8,null],[13,"Z","","",8,null],[13,"Delete","","",8,null],[13,"CapsLock","","",8,null],[13,"F1","","",8,null],[13,"F2","","",8,null],[13,"F3","","",8,null],[13,"F4","","",8,null],[13,"F5","","",8,null],[13,"F6","","",8,null],[13,"F7","","",8,null],[13,"F8","","",8,null],[13,"F9","","",8,null],[13,"F10","","",8,null],[13,"F11","","",8,null],[13,"F12","","",8,null],[13,"PrintScreen","","",8,null],[13,"ScrollLock","","",8,null],[13,"Pause","","",8,null],[13,"Insert","","",8,null],[13,"Home","","",8,null],[13,"PageUp","","",8,null],[13,"End","","",8,null],[13,"PageDown","","",8,null],[13,"Right","","",8,null],[13,"Left","","",8,null],[13,"Down","","",8,null],[13,"Up","","",8,null],[13,"NumLockClear","","",8,null],[13,"NumPadDivide","","",8,null],[13,"NumPadMultiply","","",8,null],[13,"NumPadMinus","","",8,null],[13,"NumPadPlus","","",8,null],[13,"NumPadEnter","","",8,null],[13,"NumPad1","","",8,null],[13,"NumPad2","","",8,null],[13,"NumPad3","","",8,null],[13,"NumPad4","","",8,null],[13,"NumPad5","","",8,null],[13,"NumPad6","","",8,null],[13,"NumPad7","","",8,null],[13,"NumPad8","","",8,null],[13,"NumPad9","","",8,null],[13,"NumPad0","","",8,null],[13,"NumPadPeriod","","",8,null],[13,"Application","","",8,null],[13,"Power","","",8,null],[13,"NumPadEquals","","",8,null],[13,"F13","","",8,null],[13,"F14","","",8,null],[13,"F15","","",8,null],[13,"F16","","",8,null],[13,"F17","","",8,null],[13,"F18","","",8,null],[13,"F19","","",8,null],[13,"F20","","",8,null],[13,"F21","","",8,null],[13,"F22","","",8,null],[13,"F23","","",8,null],[13,"F24","","",8,null],[13,"Execute","","",8,null],[13,"Help","","",8,null],[13,"Menu","","",8,null],[13,"Select","","",8,null],[13,"Stop","","",8,null],[13,"Again","","",8,null],[13,"Undo","","",8,null],[13,"Cut","","",8,null],[13,"Copy","","",8,null],[13,"Paste","","",8,null],[13,"Find","","",8,null],[13,"Mute","","",8,null],[13,"VolumeUp","","",8,null],[13,"VolumeDown","","",8,null],[13,"NumPadComma","","",8,null],[13,"NumPadEqualsAS400","","",8,null],[13,"AltErase","","",8,null],[13,"Sysreq","","",8,null],[13,"Cancel","","",8,null],[13,"Clear","","",8,null],[13,"Prior","","",8,null],[13,"Return2","","",8,null],[13,"Separator","","",8,null],[13,"Out","","",8,null],[13,"Oper","","",8,null],[13,"ClearAgain","","",8,null],[13,"CrSel","","",8,null],[13,"ExSel","","",8,null],[13,"NumPad00","","",8,null],[13,"NumPad000","","",8,null],[13,"ThousandsSeparator","","",8,null],[13,"DecimalSeparator","","",8,null],[13,"CurrencyUnit","","",8,null],[13,"CurrencySubUnit","","",8,null],[13,"NumPadLeftParen","","",8,null],[13,"NumPadRightParen","","",8,null],[13,"NumPadLeftBrace","","",8,null],[13,"NumPadRightBrace","","",8,null],[13,"NumPadTab","","",8,null],[13,"NumPadBackspace","","",8,null],[13,"NumPadA","","",8,null],[13,"NumPadB","","",8,null],[13,"NumPadC","","",8,null],[13,"NumPadD","","",8,null],[13,"NumPadE","","",8,null],[13,"NumPadF","","",8,null],[13,"NumPadXor","","",8,null],[13,"NumPadPower","","",8,null],[13,"NumPadPercent","","",8,null],[13,"NumPadLess","","",8,null],[13,"NumPadGreater","","",8,null],[13,"NumPadAmpersand","","",8,null],[13,"NumPadDblAmpersand","","",8,null],[13,"NumPadVerticalBar","","",8,null],[13,"NumPadDblVerticalBar","","",8,null],[13,"NumPadColon","","",8,null],[13,"NumPadHash","","",8,null],[13,"NumPadSpace","","",8,null],[13,"NumPadAt","","",8,null],[13,"NumPadExclam","","",8,null],[13,"NumPadMemStore","","",8,null],[13,"NumPadMemRecall","","",8,null],[13,"NumPadMemClear","","",8,null],[13,"NumPadMemAdd","","",8,null],[13,"NumPadMemSubtract","","",8,null],[13,"NumPadMemMultiply","","",8,null],[13,"NumPadMemDivide","","",8,null],[13,"NumPadPlusMinus","","",8,null],[13,"NumPadClear","","",8,null],[13,"NumPadClearEntry","","",8,null],[13,"NumPadBinary","","",8,null],[13,"NumPadOctal","","",8,null],[13,"NumPadDecimal","","",8,null],[13,"NumPadHexadecimal","","",8,null],[13,"LCtrl","","",8,null],[13,"LShift","","",8,null],[13,"LAlt","","",8,null],[13,"LGui","","",8,null],[13,"RCtrl","","",8,null],[13,"RShift","","",8,null],[13,"RAlt","","",8,null],[13,"RGui","","",8,null],[13,"Mode","","",8,null],[13,"AudioNext","","",8,null],[13,"AudioPrev","","",8,null],[13,"AudioStop","","",8,null],[13,"AudioPlay","","",8,null],[13,"AudioMute","","",8,null],[13,"MediaSelect","","",8,null],[13,"Www","","",8,null],[13,"Mail","","",8,null],[13,"Calculator","","",8,null],[13,"Computer","","",8,null],[13,"AcSearch","","",8,null],[13,"AcHome","","",8,null],[13,"AcBack","","",8,null],[13,"AcForward","","",8,null],[13,"AcStop","","",8,null],[13,"AcRefresh","","",8,null],[13,"AcBookmarks","","",8,null],[13,"BrightnessDown","","",8,null],[13,"BrightnessUp","","",8,null],[13,"DisplaySwitch","","",8,null],[13,"KbdIllumToggle","","",8,null],[13,"KbdIllumDown","","",8,null],[13,"KbdIllumUp","","",8,null],[13,"Eject","","",8,null],[13,"Sleep","","",8,null],[17,"NO_MODIFIER","","No modifier.",null,null],[17,"CTRL","","Ctrl.",null,null],[17,"SHIFT","","Shift.",null,null],[17,"ALT","","Alt.",null,null],[17,"GUI","","Gui.",null,null],[17,"CTRL_SHIFT","","Ctrl + Shift.",null,null],[17,"CTRL_ALT","","Ctrl + Alt.",null,null],[17,"CTRL_GUI","","Ctrl + Gui.",null,null],[17,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",null,null],[17,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",null,null],[17,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",null,null],[17,"SHIFT_ALT","","Shift + Alt.",null,null],[17,"SHIFT_GUI","","Shift + Gui.",null,null],[17,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",null,null],[17,"ALT_GUI","","Alt + Gui.",null,null],[11,"hash","","",9,null],[11,"cmp","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"eq","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"encode","","",9,{"inputs":[{"name":"modifierkey"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"modifierkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"inputs":[{"name":"modifierkey"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",9,{"inputs":[{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"inputs":[{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"inputs":[{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"not","","Returns the complement of this set of flags.",9,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"from_iter","","",9,{"inputs":[{"name":"t"}],"output":{"name":"modifierkey"}}],[11,"event","","Change modifier key state depending on input.",9,{"inputs":[{"name":"modifierkey"},{"name":"e"}],"output":null}],[11,"default","","",9,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"key"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from","","",8,{"inputs":[{"name":"u32"}],"output":{"name":"key"}}],[11,"eq","","",8,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"ordering"}}],[11,"code","","Returns an id of the key",8,{"inputs":[{"name":"key"}],"output":{"name":"i32"}}],[0,"mouse","input","Back-end agnostic mouse buttons.",null,null],[4,"MouseButton","input::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",10,null],[13,"Left","","Left mouse button.",10,null],[13,"Right","","Right mouse button.",10,null],[13,"Middle","","Middle mouse button.",10,null],[13,"X1","","Extra mouse button number 1.",10,null],[13,"X2","","Extra mouse button number 2.",10,null],[13,"Button6","","Mouse button number 6.",10,null],[13,"Button7","","Mouse button number 7.",10,null],[13,"Button8","","Mouse button number 8.",10,null],[8,"MouseCursorEvent","","The position of the mouse cursor",null,null],[10,"from_xy","","Creates a mouse cursor event.",11,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_cursor","","Calls closure if this is a mouse cursor event.",11,{"inputs":[{"name":"mousecursorevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_cursor_args","","Returns mouse cursor arguments.",11,{"inputs":[{"name":"mousecursorevent"}],"output":{"name":"option"}}],[8,"MouseRelativeEvent","","The relative movement of mouse cursor",null,null],[10,"from_xy","","Creates a mouse relative event.",12,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_relative","","Calls closure if this is a mouse relative event.",12,{"inputs":[{"name":"mouserelativeevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_relative_args","","Returns mouse relative arguments.",12,{"inputs":[{"name":"mouserelativeevent"}],"output":{"name":"option"}}],[8,"MouseScrollEvent","","The scroll of the mouse wheel",null,null],[10,"from_xy","","Creates a mouse scroll event.",13,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_scroll","","Calls a closure if this is a mouse scroll event.",13,{"inputs":[{"name":"mousescrollevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_scroll_args","","Returns mouse scroll arguments.",13,{"inputs":[{"name":"mousescrollevent"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"partial_cmp","","",10,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"ordering"}}],[11,"eq","","",10,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"encode","","",10,{"inputs":[{"name":"mousebutton"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"from","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"mousebutton"}}],[0,"controller","input","Back-end agnostic controller events.",null,null],[3,"ControllerButton","input::controller","Components of a controller button event. Not guaranteed consistent across\nbackends.",null,null],[12,"id","","Which controller was the button on.",14,null],[12,"button","","Which button was pressed.",14,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across\nbackends.",null,null],[12,"id","","Which controller moved.",15,null],[12,"axis","","The axis that moved.",15,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use\na different range for various devices.",15,null],[8,"ControllerAxisEvent","","The position of a controller axis changed.",null,null],[10,"from_controller_axis_args","","Creates a controller axis event.",16,{"inputs":[{"name":"controlleraxisargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"controller_axis","","Calls closure if this is a controller axis event.",16,{"inputs":[{"name":"controlleraxisevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"controller_axis_args","","Returns controller axis arguments.",16,{"inputs":[{"name":"controlleraxisevent"}],"output":{"name":"option"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"controllerbutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"controllerbutton"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"controllerbutton"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"encode","","",14,{"inputs":[{"name":"controllerbutton"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"controllerbutton"}],"output":{"name":"controllerbutton"}}],[11,"new","","Create a new ControllerButton object. Intended for use by backends when\nemitting events.",14,{"inputs":[{"name":"i32"},{"name":"u8"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"controlleraxisargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"controlleraxisargs"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"controlleraxisargs"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"encode","","",15,{"inputs":[{"name":"controlleraxisargs"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"controlleraxisargs"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when\nemitting events.",15,{"inputs":[{"name":"i32"},{"name":"u8"},{"name":"f64"}],"output":{"name":"self"}}],[0,"generic_event","input","Trait for generic events",null,null],[8,"GenericEvent","input::generic_event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",17,{"inputs":[{"name":"genericevent"}],"output":{"name":"eventid"}}],[10,"with_args","","Calls closure with arguments",17,{"inputs":[{"name":"genericevent"},{"name":"f"}],"output":{"name":"u"}}],[10,"from_args","","Converts from arguments to `Self`",17,{"inputs":[{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"event_id","input","",7,{"inputs":[{"name":"input"}],"output":{"name":"eventid"}}],[11,"with_args","","",7,{"inputs":[{"name":"input"},{"name":"f"}],"output":{"name":"u"}}],[11,"from_args","","",7,{"inputs":[{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"event_id","","",4,{"inputs":[{"name":"event"}],"output":{"name":"eventid"}}],[11,"with_args","","",4,{"inputs":[{"name":"event"},{"name":"f"}],"output":{"name":"u"}}],[11,"from_args","","",4,{"inputs":[{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"updateargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"updateargs"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"updateargs"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"updateargs"}],"output":{"name":"updateargs"}}],[11,"fmt","","",1,{"inputs":[{"name":"renderargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"renderargs"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"renderargs"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"renderargs"}],"output":{"name":"renderargs"}}],[11,"viewport","","Returns viewport information filling entire render area.",1,{"inputs":[{"name":"renderargs"}],"output":{"name":"viewport"}}],[11,"fmt","","",18,{"inputs":[{"name":"afterrenderargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"afterrenderargs"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"afterrenderargs"}}],[11,"fmt","","",2,{"inputs":[{"name":"idleargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"idleargs"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"idleargs"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"idleargs"}],"output":{"name":"idleargs"}}],[11,"fmt","","",4,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"from","","",4,{"inputs":[{"name":"renderargs"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"updateargs"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"idleargs"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"input"}],"output":{"name":"self"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",19,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",19,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"update","","Calls closure if this is an update event.",19,{"inputs":[{"name":"updateevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",19,{"inputs":[{"name":"updateevent"}],"output":{"name":"option"}}],[8,"RenderEvent","","When the next frame should be rendered",null,null],[10,"from_render_args","","Creates a render event.",20,{"inputs":[{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"render","","Calls closure if this is a render event.",20,{"inputs":[{"name":"renderevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",20,{"inputs":[{"name":"renderevent"}],"output":{"name":"option"}}],[8,"AfterRenderEvent","","After rendering and buffers are swapped.",null,null],[10,"from_after_render_args","","Creates an after render event.",21,{"inputs":[{"name":"afterrenderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"after_render","","Calls closure if this is an after render event.",21,{"inputs":[{"name":"afterrenderevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",21,{"inputs":[{"name":"afterrenderevent"}],"output":{"name":"option"}}],[8,"IdleEvent","","When background tasks should be performed",null,null],[10,"from_idle_args","","Creates an idle event.",22,{"inputs":[{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",22,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"idle","","Calls closure if this is an idle event.",22,{"inputs":[{"name":"idleevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",22,{"inputs":[{"name":"idleevent"}],"output":{"name":"option"}}],[8,"PressEvent","","The press of a button",null,null],[10,"from_button","","Creates a press event.",23,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"press","","Calls closure if this is a press event.",23,{"inputs":[{"name":"pressevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",23,{"inputs":[{"name":"pressevent"}],"output":{"name":"option"}}],[8,"ReleaseEvent","","The release of a button",null,null],[10,"from_button","","Creates a release event.",24,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"release","","Calls closure if this is a release event.",24,{"inputs":[{"name":"releaseevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",24,{"inputs":[{"name":"releaseevent"}],"output":{"name":"option"}}],[8,"TextEvent","","When receiving text from user, such as typing a character",null,null],[10,"from_text","","Creates a text event.",25,{"inputs":[{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[10,"text","","Calls closure if this is a text event.",25,{"inputs":[{"name":"textevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",25,{"inputs":[{"name":"textevent"}],"output":{"name":"option"}}],[8,"ResizeEvent","","When the window is resized",null,null],[10,"from_width_height","","Creates a resize event.",26,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[10,"resize","","Calls closure if this is a resize event.",26,{"inputs":[{"name":"resizeevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",26,{"inputs":[{"name":"resizeevent"}],"output":{"name":"option"}}],[8,"FocusEvent","","When window gets or loses focus",null,null],[10,"from_focused","","Creates a focus event.",27,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"focus","","Calls closure if this is a focus event.",27,{"inputs":[{"name":"focusevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",27,{"inputs":[{"name":"focusevent"}],"output":{"name":"option"}}],[8,"CursorEvent","","When window gets or loses cursor",null,null],[10,"from_cursor","","Creates a cursor event.",28,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"cursor","","Calls closure if this is a cursor event.",28,{"inputs":[{"name":"cursorevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",28,{"inputs":[{"name":"cursorevent"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"eventid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"eventid"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"eventid"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"eventid"}],"output":{"name":"eventid"}}],[11,"fmt","","",5,{"inputs":[{"name":"button"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"button"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"button"},{"name":"button"}],"output":{"name":"bool"}}],[11,"encode","","",5,{"inputs":[{"name":"button"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"button"}],"output":{"name":"button"}}],[11,"fmt","","",6,{"inputs":[{"name":"motion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"motion"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"motion"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"encode","","",6,{"inputs":[{"name":"motion"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"motion"}],"output":{"name":"motion"}}],[11,"fmt","","",7,{"inputs":[{"name":"input"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"input"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"input"},{"name":"input"}],"output":{"name":"bool"}}],[11,"encode","","",7,{"inputs":[{"name":"input"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"input"}],"output":{"name":"input"}}],[11,"from","","",5,{"inputs":[{"name":"key"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"mousebutton"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"controllerbutton"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"motion"}],"output":{"name":"self"}}],[11,"from_dt","","Creates an update event with delta time.",19,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",19,{"inputs":[{"name":"updateevent"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",20,{"inputs":[{"name":"renderevent"}],"output":{"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",21,{"inputs":[{"name":"afterrenderevent"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",22,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",22,{"inputs":[{"name":"idleevent"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",23,{"inputs":[{"name":"pressevent"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",24,{"inputs":[{"name":"releaseevent"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",25,{"inputs":[{"name":"textevent"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",26,{"inputs":[{"name":"resizeevent"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",27,{"inputs":[{"name":"focusevent"}],"output":{"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",28,{"inputs":[{"name":"cursorevent"}],"output":{"name":"option"}}]],"paths":[[3,"UpdateArgs"],[3,"RenderArgs"],[3,"IdleArgs"],[3,"EventId"],[4,"Event"],[4,"Button"],[4,"Motion"],[4,"Input"],[4,"Key"],[3,"ModifierKey"],[4,"MouseButton"],[8,"MouseCursorEvent"],[8,"MouseRelativeEvent"],[8,"MouseScrollEvent"],[3,"ControllerButton"],[3,"ControllerAxisArgs"],[8,"ControllerAxisEvent"],[8,"GenericEvent"],[3,"AfterRenderArgs"],[8,"UpdateEvent"],[8,"RenderEvent"],[8,"AfterRenderEvent"],[8,"IdleEvent"],[8,"PressEvent"],[8,"ReleaseEvent"],[8,"TextEvent"],[8,"ResizeEvent"],[8,"FocusEvent"],[8,"CursorEvent"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"complex"},{"name":"__st"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"]]};
searchIndex["viewport"] = {"doc":"A library for storing viewport information","items":[[3,"Viewport","viewport","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels.\n```[x, y, width height]``` where ```(x, y)``` is lower left corner.",0,null],[12,"draw_size","","The size of frame buffer in pixels.",0,null],[12,"window_size","","The size of window in points.",0,null],[11,"clone","","",0,{"inputs":[{"name":"viewport"}],"output":{"name":"viewport"}}],[11,"abs_transform","","Computes absolute transform for 2D graphics,\nwhich uses a row major 2x3 matrix.\nThe origin is in the upper left corner of the viewport rectangle.\nThe x axis points to the right, and the y axis points down.\nThe units are in points (window coordinates).",0,null]],"paths":[[3,"Viewport"]]};
searchIndex["texture"] = {"doc":"A generic library for textures.","items":[[3,"TextureSettings","texture","Texture creation parameters.",null,null],[4,"Format","","Texture format.",null,null],[13,"Rgba8","","`(red, green, blue, alpha)` with values 0-255.",0,null],[4,"Filter","","Sampling filter",null,null],[13,"Linear","","A Weighted Linear Blend",1,null],[13,"Nearest","","Nearest Texel",1,null],[0,"ops","","Image operations for textures.",null,null],[5,"flip_vertical","texture::ops","Flips the image vertically.",null,null],[5,"alpha_to_rgba8","","Converts from alpha to rgba8.",null,null],[8,"ImageSize","texture","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",2,null],[11,"get_width","","Gets the image width.",2,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[11,"get_height","","Gets the image height.",2,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[8,"CreateTexture","","Implemented by textures for creation.",null,null],[16,"Error","","The error when creating texture.",3,null],[10,"create","","Create texture from memory.",3,null],[8,"UpdateTexture","","Implemented by textures for updating.",null,null],[16,"Error","","The error when updating texture.",4,null],[10,"update","","Update texture.",4,null],[11,"new","","Create default settings.",5,{"inputs":[],"output":{"name":"texturesettings"}}],[11,"get_convert_gamma","","Gets whether to convert gamma, treated as sRGB color space.",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"bool"}}],[11,"set_convert_gamma","","Sets convert gamma.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":null}],[11,"convert_gamma","","Sets convert gamma.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_compress","","Gets wheter compress on the GPU.",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"bool"}}],[11,"set_compress","","Sets compress.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":null}],[11,"compress","","Sets compress.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_generate_mipmap","","Gets generate mipmap.",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"bool"}}],[11,"set_generate_mipmap","","Sets generate mipmap.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":null}],[11,"generate_mipmap","","Sets generate mipmap.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_min","","Gets minify filter.",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"filter"}}],[11,"set_min","","Sets minify filter.",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":null}],[11,"min","","Sets minify filter.",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"self"}}],[11,"get_mag","","Gets magnify filter",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"filter"}}],[11,"set_mag","","Sets magnify filter",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":null}],[11,"mag","","Sets magnify filter",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"self"}}],[11,"get_mipmap","","Gets minify mipmap filter",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"filter"}}],[11,"set_mipmap","","Sets magnify mipmap filter, and sets generate_mipmap to true.",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":null}],[11,"mipmap","","Sets magnify mipmap filter, and sets generate_mipmap to true",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"self"}}],[11,"get_filter","","Returns the min and mag filter",5,null],[11,"set_filter","","Sets the min and mag filter",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":null}],[11,"filter","","Sets the min and mag filter",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"fmt","","",1,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}]],"paths":[[4,"Format"],[4,"Filter"],[8,"ImageSize"],[8,"CreateTexture"],[8,"UpdateTexture"],[3,"TextureSettings"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["read_color"] = {"doc":"A simple library for reading hex colors.","items":[[5,"char_to_hex","read_color","Converts a character into a u8 value.",null,{"inputs":[{"name":"char"}],"output":{"name":"option"}}],[5,"hex","","Reads a hex value from an iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"hex_pair","","Reads a pair of hex values, joining them in value range 0-255.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"rgb","","Reads RGB colors from iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"rgba","","Reads RGBA colors from iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"rgb_maybe_a","","Reads RGB with optional alpha from iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}]],"paths":[]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"stat64","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",50,null],[12,"uc_link","","",50,null],[12,"uc_stack","","",50,null],[12,"uc_mcontext","","",50,null],[12,"uc_sigmask","","",50,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",51,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",51,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",51,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",51,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",51,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",52,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",52,null],[11,"clone","libc","",48,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",49,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",53,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",54,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",50,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",55,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",37,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",38,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",39,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",40,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",41,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",42,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",43,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",44,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",45,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",27,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",28,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",29,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",30,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",31,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",56,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",57,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",58,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",59,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",32,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",33,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",34,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",35,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",60,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",36,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",61,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",18,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",19,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",62,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",23,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",24,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",25,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",26,{"inputs":[{"name":"lconv"}],"output":{"name":"lconv"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["fixedbitset"] = {"doc":"**FixedBitSet** is a simple fixed size set of bits.","items":[[3,"FixedBitSet","fixedbitset","**FixedBitSet** is a simple fixed size set of bits that can\nbe enabled (1 / **true**) or disabled (0 / **false**).",null,null],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"fixedbitset"},{"name":"fixedbitset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"fixedbitset"},{"name":"fixedbitset"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"fixedbitset"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"fixedbitset"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"fixedbitset"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"fixedbitset"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"fixedbitset"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"fixedbitset"},{"name":"fixedbitset"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"fixedbitset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_capacity","","Create a new **FixedBitSet** with a specific number of bits,\nall initially clear.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"grow","","Grow capacity to **bits**, all new bits initialized to zero",0,{"inputs":[{"name":"fixedbitset"},{"name":"usize"}],"output":null}],[11,"len","","Return the length of the **FixedBitSet** in bits.",0,{"inputs":[{"name":"fixedbitset"}],"output":{"name":"usize"}}],[11,"contains","","Return **true** if the bit is enabled in the **FixedBitSet**,\n**false** otherwise.",0,{"inputs":[{"name":"fixedbitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"clear","","Clear all bits.",0,{"inputs":[{"name":"fixedbitset"}],"output":null}],[11,"insert","","**Panics** if **bit** is out of bounds.",0,{"inputs":[{"name":"fixedbitset"},{"name":"usize"}],"output":null}],[11,"set","","**Panics** if **bit** is out of bounds.",0,{"inputs":[{"name":"fixedbitset"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"as_slice","","View the bitset as a slice of `u32` blocks",0,null],[11,"as_mut_slice","","View the bitset as a mutable slice of `u32` blocks. Writing past the bitlength in the last\nwill cause `contains` to return potentially incorrect results for bits past the bitlength.",0,null],[11,"clone","","",0,{"inputs":[{"name":"fixedbitset"}],"output":{"name":"self"}}],[11,"index","","",0,{"inputs":[{"name":"fixedbitset"},{"name":"usize"}],"output":{"name":"bool"}}]],"paths":[[3,"FixedBitSet"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",11,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[0,"error","bitflags::__core","Traits for working with Errors.",null,null],[8,"Error","bitflags::__core::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[0,"prelude","bitflags::__core","The Rust Prelude.",null,null],[0,"v1","bitflags::__core::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[8,"FnOnce","bitflags::__core::prelude::v1","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",1,null],[10,"call_once","","This is called when the call operator is used.",1,null],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",2,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",2,null],[11,"new","collections::string","Creates a new empty `String`.",3,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",3,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",3,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",3,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",3,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",3,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",3,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",3,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",3,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",3,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",3,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",3,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",3,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",3,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",3,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",3,null],[11,"push","","Appends the given `char` to the end of this `String`.",3,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",3,null],[11,"truncate","","Shortens this `String` to the specified length.",3,null],[11,"pop","","Removes the last character from the string buffer and returns it.",3,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",3,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",3,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",3,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",3,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",3,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",3,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",3,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",3,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"write_str","","",3,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",3,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"into","","",3,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"as_ref","","",3,null],[11,"as_ref","","",3,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref","","",3,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"index_mut","","",3,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",3,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",3,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",3,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",3,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",3,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",3,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",3,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",3,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",3,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",3,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",3,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"add","","",3,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"string"}}],[11,"eq","","",3,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"extend","","",3,null],[11,"extend","","",3,null],[11,"extend","","",3,null],[11,"extend","","",3,null],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"clone","","",3,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",3,null],[11,"partial_cmp","","",3,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"borrow","","",3,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[3,"String","bitflags::__core::prelude::v1","A UTF-8 encoded, growable string.",null,null],[11,"from","collections::vec","",4,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","","",4,null],[11,"as_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",4,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"vec"}}],[11,"drop","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"extend","","",4,null],[11,"extend","","",4,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",4,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"deref_mut","","",4,null],[11,"deref","","",4,null],[11,"index_mut","","",4,null],[11,"index_mut","","",4,null],[11,"index_mut","","",4,null],[11,"index_mut","","",4,null],[11,"index_mut","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",4,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",4,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",4,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",4,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",4,null],[11,"new","","Constructs a new, empty `Vec&lt;T&gt;`.",4,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",4,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",4,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",4,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",4,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",4,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",4,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",4,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",4,null],[11,"as_slice","","Extracts a slice containing the entire vector.",4,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,null],[11,"set_len","","Sets the length of a vector.",4,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",4,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",4,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",4,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",4,null],[11,"push","","Appends an element to the back of a collection.",4,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",4,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",4,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",4,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",4,null],[11,"len","","Returns the number of elements in the vector.",4,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",4,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",4,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"borrow_mut","","",4,null],[11,"borrow","","",4,null],[11,"from","","",4,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[3,"Vec","bitflags::__core::prelude::v1","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",5,{"inputs":[],"output":{"name":"self"}}],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",6,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",7,null],[10,"next","","Advances the iterator and returns the next value.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",7,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",7,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",7,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",7,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",7,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",7,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",7,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",7,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",8,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",8,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",8,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",8,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",8,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",9,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",9,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",9,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",9,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",9,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",9,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",9,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",9,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",9,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",9,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",9,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",9,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",9,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",9,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",9,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",9,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",9,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",9,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",9,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",9,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",9,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",9,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",9,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",9,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",9,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",9,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[4,"Option","bitflags::__core::prelude::v1","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",9,null],[13,"Some","","Some value `T`",9,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",10,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",11,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",12,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",12,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",13,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[11,"from_iter","core::result","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",14,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",14,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",14,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",14,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",14,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"is_ok","","Returns true if the result is `Ok`",14,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",14,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",14,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",14,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",14,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",14,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",14,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",14,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",14,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",14,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",14,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",14,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",14,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",14,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",14,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",14,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"clone","","",14,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"fmt","","",14,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[4,"Result","bitflags::__core::prelude::v1","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",14,null],[13,"Err","","Contains the error value",14,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",15,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",15,null],[10,"into_iter","","Creates an iterator from a value.",15,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",16,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",17,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"SliceConcatExt","","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",18,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",18,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",18,null],[10,"connect","","",18,null],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",19,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",20,null],[5,"drop","","Disposes of a value.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",21,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",22,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",23,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",24,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",25,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",25,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[0,"f32","bitflags::__core","The 32-bit floating point type.",null,null],[17,"DIGITS","bitflags::__core::f32","",null,null],[17,"INFINITY","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MIN_10_EXP","","",null,null],[17,"NEG_INFINITY","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"MAX","","Largest finite f32 value",null,null],[17,"RADIX","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"MIN","bitflags::__core::f32","Smallest finite f32 value",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"MIN_EXP","","",null,null],[17,"NAN","","",null,null],[17,"EPSILON","","",null,null],[0,"f64","bitflags::__core","The 64-bit floating point type.",null,null],[17,"MIN_EXP","bitflags::__core::f64","",null,null],[17,"MAX_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"NEG_INFINITY","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"RADIX","bitflags::__core::f64","",null,null],[17,"INFINITY","","",null,null],[17,"NAN","","",null,null],[0,"ascii","bitflags::__core","Operations on ASCII strings and characters.",null,null],[8,"AsciiExt","bitflags::__core::ascii","Extension methods for ASCII-subset only operations on string slices.",null,null],[16,"Owned","","Container type for copied ASCII characters.",26,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",26,{"inputs":[{"name":"asciiext"}],"output":{"name":"bool"}}],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case.",26,null],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case.",26,null],[10,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",26,{"inputs":[{"name":"asciiext"},{"name":"self"}],"output":{"name":"bool"}}],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",26,null],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",26,null],[11,"next_back","std::ascii","",27,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[3,"EscapeDefault","bitflags::__core::ascii","An iterator over the escaped version of a byte, constructed via\n`std::ascii::escape_default`.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[0,"num","bitflags::__core","Additional functionality for numerics.",null,null],[11,"bitand_assign","core::num","",28,null],[11,"bitand","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",28,null],[11,"bitor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",28,null],[11,"bitxor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",28,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",28,null],[11,"rem","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",28,null],[11,"div","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",28,null],[11,"mul","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",28,null],[11,"sub","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",28,null],[11,"add","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",28,null],[11,"bitand","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",28,null],[11,"bitor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",28,null],[11,"bitxor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",28,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",28,null],[11,"rem","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",28,null],[11,"div","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",28,null],[11,"mul","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",28,null],[11,"sub","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",28,null],[11,"add","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",28,null],[11,"bitand","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",28,null],[11,"bitor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",28,null],[11,"bitxor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",28,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",28,null],[11,"rem","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",28,null],[11,"div","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",28,null],[11,"mul","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",28,null],[11,"sub","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",28,null],[11,"add","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",28,null],[11,"bitand","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",28,null],[11,"bitor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",28,null],[11,"bitxor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",28,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",28,null],[11,"rem","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",28,null],[11,"div","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",28,null],[11,"mul","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",28,null],[11,"sub","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",28,null],[11,"add","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",28,null],[11,"bitand","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",28,null],[11,"bitor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",28,null],[11,"bitxor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",28,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",28,null],[11,"rem","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",28,null],[11,"div","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",28,null],[11,"mul","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",28,null],[11,"sub","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",28,null],[11,"add","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",28,null],[11,"bitand","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",28,null],[11,"bitor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",28,null],[11,"bitxor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",28,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",28,null],[11,"rem","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",28,null],[11,"div","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",28,null],[11,"mul","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",28,null],[11,"sub","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",28,null],[11,"add","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",28,null],[11,"bitand","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",28,null],[11,"bitor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",28,null],[11,"bitxor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",28,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",28,null],[11,"rem","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",28,null],[11,"div","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",28,null],[11,"mul","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",28,null],[11,"sub","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",28,null],[11,"add","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",28,null],[11,"bitand","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",28,null],[11,"bitor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",28,null],[11,"bitxor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",28,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",28,null],[11,"rem","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",28,null],[11,"div","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",28,null],[11,"mul","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",28,null],[11,"sub","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",28,null],[11,"add","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",28,null],[11,"bitand","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",28,null],[11,"bitor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",28,null],[11,"bitxor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",28,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",28,null],[11,"rem","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",28,null],[11,"div","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",28,null],[11,"mul","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",28,null],[11,"sub","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",28,null],[11,"add","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",28,null],[11,"bitand","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",28,null],[11,"bitor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",28,null],[11,"bitxor","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",28,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",28,null],[11,"rem","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",28,null],[11,"div","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",28,null],[11,"mul","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",28,null],[11,"sub","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",28,null],[11,"add","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",28,null],[11,"shr","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",28,null],[11,"shl","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",28,null],[11,"shr","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",28,null],[11,"shl","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",28,null],[11,"shr","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",28,null],[11,"shl","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",28,null],[11,"shr","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",28,null],[11,"shl","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",28,null],[11,"shr","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",28,null],[11,"shl","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",28,null],[11,"shr","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",28,null],[11,"shl","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",28,null],[11,"shr","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",28,null],[11,"shl","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",28,null],[11,"shr","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",28,null],[11,"shl","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",28,null],[11,"shr","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",28,null],[11,"shl","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",28,null],[11,"shr","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",28,null],[11,"shl","","",28,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"eq","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"clone","","",28,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",28,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"wrapping"}}],[3,"Wrapping","bitflags::__core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",28,null],[8,"One","","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",29,{"inputs":[],"output":{"name":"self"}}],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[11,"fmt","core::num","",30,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"eq","","",30,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[3,"ParseIntError","bitflags::__core::num","An error which can be returned when parsing an integer.",null,null],[11,"clone","core::num","",31,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",31,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"FpCategory","bitflags::__core::num","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",31,null],[13,"Infinite","","Positive or negative infinity",31,null],[13,"Zero","","Positive or negative zero",31,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",31,null],[13,"Normal","","A regular floating point number",31,null],[8,"Zero","","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",32,{"inputs":[],"output":{"name":"self"}}],[0,"thread","bitflags::__core","Native threads.",null,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",33,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",33,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",33,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",33,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[3,"Builder","bitflags::__core::thread","Thread configuration. Provides detailed control over the properties\nand behavior of new threads.",null,null],[5,"spawn","","Spawns a new thread, returning a `JoinHandle` for it.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"current","","Gets a handle to the thread that invokes it.",null,{"inputs":[],"output":{"name":"thread"}}],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,null],[5,"panicking","","Determines whether the current thread is unwinding because of panic.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"sleep_ms","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"sleep","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"park","","Blocks unless or until the current thread&#39;s token is made available.",null,null],[5,"park_timeout_ms","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[5,"park_timeout","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[11,"new","std::thread","",34,{"inputs":[{"name":"option"}],"output":{"name":"thread"}}],[11,"fmt","","",34,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",34,null],[11,"name","","Gets the thread&#39;s name.",34,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[3,"Thread","bitflags::__core::thread","A handle to a thread.",null,null],[6,"Result","","",null,null],[11,"thread","std::thread","Extracts a handle to the underlying thread",35,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",35,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[3,"JoinHandle","bitflags::__core::thread","An owned permission to join on a thread (block on its termination).",null,null],[11,"with","std::thread::local","Acquires a reference to the value in this TLS key.",36,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",36,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[3,"LocalKey","bitflags::__core::thread","A thread local storage key which owns its contents.",null,null],[11,"new","std::thread::scoped_tls::imp","",37,{"inputs":[],"output":{"name":"keyinner"}}],[11,"set","","",37,null],[11,"get","","",37,null],[3,"KeyInner","bitflags::__core::thread","",null,null],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",38,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",38,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",38,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[3,"ScopedKey","bitflags::__core::thread","Type representing a thread local storage key corresponding to a reference\nto the type parameter `T`.",null,null],[11,"new","std::thread::local::elf","",39,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",39,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[3,"Key","bitflags::__core::thread","",null,null],[11,"eq","std::thread::local","",40,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[4,"LocalKeyState","bitflags::__core::thread","Indicator of the state of a thread local storage key.",null,null],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will\ntransition to the `Valid` state once the first call to `with` happens\nand the initialization expression succeeds.",40,null],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid`\nstate. Keys in the `Valid` state will remain so until the thread exits,\nat which point the destructor will be run and the key will enter the\n`Destroyed` state.",40,null],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if\nnecessary). While a destructor is running, and possibly after a\ndestructor has run, a key is in the `Destroyed` state.",40,null],[11,"new","std::thread::local::os","",41,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",41,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[3,"Key","bitflags::__core::thread","",null,null],[0,"collections","bitflags::__core","Collection types.",null,null],[0,"hash_map","bitflags::__core::collections","A hashmap",null,null],[3,"HashMap","bitflags::__core::collections::hash_map","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[3,"Drain","","HashMap drain iterator.",null,null],[3,"Iter","","HashMap iterator.",null,null],[3,"IterMut","","HashMap mutable values iterator.",null,null],[3,"ValuesMut","","Mutable HashMap values iterator.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",42,null],[13,"Vacant","","A vacant Entry.",42,null],[3,"Values","","HashMap values iterator.",null,null],[3,"VacantEntry","","A view into a single empty location in a HashMap.",null,null],[3,"RandomState","","`RandomState` is the default state for `HashMap` types.",null,null],[3,"IntoIter","","HashMap move iterator.",null,null],[3,"Keys","","HashMap keys iterator.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a HashMap.",null,null],[0,"hash_set","bitflags::__core::collections","A hashset",null,null],[3,"HashSet","bitflags::__core::collections::hash_set","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[3,"Difference","","Difference iterator",null,null],[3,"IntoIter","","HashSet move iterator",null,null],[3,"Union","","Set union iterator.",null,null],[3,"Iter","","HashSet iterator",null,null],[3,"Intersection","","Intersection iterator",null,null],[3,"Drain","","HashSet drain iterator",null,null],[3,"SymmetricDifference","","Symmetric difference iterator.",null,null],[11,"hash","collections::linked_list","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"cmp","","",43,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"eq","","",43,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"extend","","",43,null],[11,"extend","","",43,null],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",43,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"drop","","",43,null],[11,"new","","Creates an empty `LinkedList`.",43,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",43,null],[11,"iter","","Provides a forward iterator.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",43,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",43,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",43,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",43,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",43,{"inputs":[{"name":"linkedlist"}],"output":{"name":"backplace"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"linkedlist"}}],[3,"LinkedList","bitflags::__core::collections","A doubly-linked list.",null,null],[11,"extend","collections::binary_heap","",44,null],[11,"extend","","",44,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",44,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",44,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from","","",44,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",44,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",44,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",44,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",44,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",44,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",44,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",44,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",44,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",44,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",44,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",44,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",44,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",44,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",44,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",44,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",44,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",44,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",44,null],[11,"fmt","","",44,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"clone","","",44,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",44,null],[3,"BinaryHeap","bitflags::__core::collections","A priority queue implemented with a binary heap.",null,null],[3,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[0,"linked_list","","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","bitflags::__core::collections::linked_list","A doubly-linked list.",null,null],[11,"next_back","collections::linked_list","",45,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"clone","","",45,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::linked_list","An iterator over references to the items of a `LinkedList`.",null,null],[11,"insert_next","collections::linked_list","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",46,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",46,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",46,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",46,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[3,"IterMut","bitflags::__core::collections::linked_list","An iterator over mutable references to the items of a `LinkedList`.",null,null],[11,"next_back","collections::linked_list","",47,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",47,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",47,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[3,"IntoIter","bitflags::__core::collections::linked_list","An iterator over the items of a `LinkedList`.",null,null],[11,"finalize","collections::linked_list","",48,null],[11,"pointer","","",48,null],[11,"make_place","","",48,{"inputs":[{"name":"frontplace"}],"output":{"name":"frontplace"}}],[3,"FrontPlace","bitflags::__core::collections::linked_list","A place for insertion at the front of a `LinkedList`.",null,null],[11,"finalize","collections::linked_list","",49,null],[11,"pointer","","",49,null],[11,"make_place","","",49,{"inputs":[{"name":"backplace"}],"output":{"name":"backplace"}}],[3,"BackPlace","bitflags::__core::collections::linked_list","A place for insertion at the back of a `LinkedList`.",null,null],[11,"clone","collections","",50,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"fmt","","",50,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"eq","","",50,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[4,"Bound","bitflags::__core::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",50,null],[13,"Excluded","","An exclusive bound.",50,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",50,null],[0,"btree_map","","",null,null],[11,"clone","collections::btree::map","",51,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"len","","",51,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next_back","","",51,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",51,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[3,"Keys","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s keys.",null,null],[11,"len","collections::btree::map","",52,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",52,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",52,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"drop","","",52,null],[3,"IntoIter","bitflags::__core::collections::btree_map","An owning iterator over a BTreeMap&#39;s entries.",null,null],[11,"key","collections::btree::map","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",53,{"inputs":[{"name":"vacantentry"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",53,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[3,"VacantEntry","bitflags::__core::collections::btree_map","A vacant Entry.",null,null],[11,"next_back","collections::btree::map","",54,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[3,"RangeMut","bitflags::__core::collections::btree_map","A mutable iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[11,"clone","collections::btree::map","",55,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"len","","",55,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next_back","","",55,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",55,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[3,"Iter","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s entries.",null,null],[11,"iter","collections::btree::map","Gets an iterator over the entries of the map, sorted by key.",56,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",56,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",56,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",56,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",56,{"inputs":[{"name":"btreemap"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",56,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",56,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"index","","",56,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"fmt","","",56,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",56,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"eq","","",56,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"btreemap"}}],[11,"hash","","",56,null],[11,"extend","","",56,null],[11,"extend","","",56,null],[11,"from_iter","","",56,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"into_iter","","",56,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",56,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",56,null],[11,"get","","Returns a reference to the value corresponding to the key.",56,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",56,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",56,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",56,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",56,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",56,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",56,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",56,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"clone","","",56,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"drop","","",56,null],[3,"BTreeMap","bitflags::__core::collections::btree_map","A map based on a B-Tree.",null,null],[11,"clone","collections::btree::map","",57,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next_back","","",57,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",57,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[3,"Range","bitflags::__core::collections::btree_map","An iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[11,"len","collections::btree::map","",58,{"inputs":[{"name":"valuesmut"}],"output":{"name":"usize"}}],[11,"next_back","","",58,{"inputs":[{"name":"valuesmut"}],"output":{"name":"option"}}],[11,"next","","",58,{"inputs":[{"name":"valuesmut"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[3,"ValuesMut","bitflags::__core::collections::btree_map","A mutable iterator over a BTreeMap&#39;s values.",null,null],[11,"key","collections::btree::map","Gets a reference to the key in the entry.",59,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",59,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",59,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",59,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",59,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",59,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[3,"OccupiedEntry","bitflags::__core::collections::btree_map","An occupied Entry.",null,null],[11,"clone","collections::btree::map","",60,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"len","","",60,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next_back","","",60,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",60,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[3,"Values","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s values.",null,null],[11,"len","collections::btree::map","",61,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next_back","","",61,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",61,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[3,"IterMut","bitflags::__core::collections::btree_map","A mutable iterator over a BTreeMap&#39;s entries.",null,null],[11,"or_insert","collections::btree::map","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",62,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",62,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[4,"Entry","bitflags::__core::collections::btree_map","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",62,null],[13,"Occupied","","An occupied Entry",62,null],[3,"HashMap","bitflags::__core::collections","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[11,"fmt","collections::btree::set","",63,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"btreeset"}}],[11,"extend","","",63,null],[11,"extend","","",63,null],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",63,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",63,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",63,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",63,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",63,null],[11,"contains","","Returns `true` if the set contains a value.",63,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",63,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",63,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",63,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",63,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",63,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",63,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",63,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",63,{"inputs":[],"output":{"name":"btreeset"}}],[11,"clone","","",63,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"hash","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",63,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[3,"BTreeSet","bitflags::__core::collections","A set based on a B-Tree.",null,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","bitflags::__core::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[11,"next_back","collections::binary_heap","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"clone","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::binary_heap","`BinaryHeap` iterator.",null,null],[11,"next_back","collections::binary_heap","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[3,"IntoIter","bitflags::__core::collections::binary_heap","An iterator that moves out of a `BinaryHeap`.",null,null],[11,"next_back","collections::binary_heap","",66,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[3,"Drain","bitflags::__core::collections::binary_heap","An iterator that drains a `BinaryHeap`.",null,null],[3,"BTreeMap","bitflags::__core::collections","A map based on a B-Tree.",null,null],[11,"fmt","collections::vec_deque","",67,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",67,null],[11,"extend","","",67,null],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",67,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"index_mut","","",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",67,null],[11,"new","","Creates an empty `VecDeque`.",67,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",67,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",67,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",67,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",67,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",67,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",67,null],[11,"iter","","Returns a front-to-back iterator.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",67,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",67,null],[11,"len","","Returns the number of elements in the `VecDeque`.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",67,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",67,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",67,null],[11,"push_back","","Appends an element to the back of a buffer",67,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",67,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",67,null],[11,"retain","","Retains only the elements specified by the predicate.",67,null],[11,"index","","",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"hash","","",67,null],[11,"default","","",67,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"drop","","",67,null],[11,"clone","","",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"cmp","","",67,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"eq","","",67,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[3,"VecDeque","bitflags::__core::collections","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[0,"vec_deque","","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer.",null,null],[3,"VecDeque","bitflags::__core::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[11,"next_back","collections::vec_deque","",68,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"clone","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::vec_deque","`VecDeque` iterator.",null,null],[11,"next","collections::vec_deque","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[3,"IterMut","bitflags::__core::collections::vec_deque","`VecDeque` mutable iterator.",null,null],[11,"clone","collections::vec_deque","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next_back","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[3,"IntoIter","bitflags::__core::collections::vec_deque","A by-value VecDeque iterator",null,null],[11,"next_back","collections::vec_deque","",71,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"drop","","",71,null],[3,"Drain","bitflags::__core::collections::vec_deque","A draining VecDeque iterator",null,null],[0,"btree_set","bitflags::__core::collections","",null,null],[11,"next","collections::btree::set","",72,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"clone","","",72,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[3,"SymmetricDifference","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[11,"len","collections::btree::set","",73,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next_back","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"clone","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::btree_set","An iterator over a BTreeSet&#39;s items.",null,null],[11,"len","collections::btree::set","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[3,"IntoIter","bitflags::__core::collections::btree_set","An owning iterator over a BTreeSet&#39;s items.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[11,"next","collections::btree::set","",75,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[3,"Intersection","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set intersection (in-order).",null,null],[11,"next_back","collections::btree::set","",76,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",76,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",76,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[3,"Range","bitflags::__core::collections::btree_set","An iterator over a sub-range of BTreeSet&#39;s items.",null,null],[11,"next","collections::btree::set","",77,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"clone","","",77,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[3,"Difference","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set difference (in-order).",null,null],[11,"next","collections::btree::set","",78,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"clone","","",78,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[3,"Union","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set union (in-order).",null,null],[0,"env","bitflags::__core","Inspection and manipulation of the process&#39;s environment.",null,null],[5,"current_dir","bitflags::__core::env","Returns the current working directory as a `PathBuf`.",null,{"inputs":[],"output":{"name":"result"}}],[5,"set_current_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[3,"Vars","","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process.",null,null],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"varsos"}}],[5,"var","","Fetches the environment variable `key` from the current process.",null,{"inputs":[{"name":"k"}],"output":{"name":"result"}}],[5,"var_os","","Fetches the environment variable `key` from the current process, returning\n`None` if the variable isn&#39;t set.",null,{"inputs":[{"name":"k"}],"output":{"name":"option"}}],[4,"VarError","","Possible errors from the `env::var` method.",null,null],[13,"NotPresent","","The specified environment variable was not present in the current\nprocess&#39;s environment.",79,null],[13,"NotUnicode","","The specified environment variable was found, but it did not contain\nvalid unicode data. The found data is returned as a payload of this\nvariant.",79,null],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running\nprocess.",null,null],[5,"remove_var","","Removes an environment variable from the environment of the currently running process.",null,null],[3,"SplitPaths","","An iterator over `PathBuf` instances for parsing an environment variable\naccording to platform-specific conventions.",null,null],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"t"}],"output":{"name":"splitpaths"}}],[3,"JoinPathsError","","Error type returned from `std::env::join_paths` when paths fail to be\njoined.",null,null],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"home_dir","","Returns the path of the current user&#39;s home directory if known.",null,{"inputs":[],"output":{"name":"option"}}],[5,"temp_dir","","Returns the path of a temporary directory.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"current_exe","","Returns the full filesystem path of the current running executable.",null,{"inputs":[],"output":{"name":"result"}}],[3,"Args","","An iterator over the arguments of a process, yielding a `String` value\nfor each argument.",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an `OsString` value\nfor each argument.",null,null],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"args"}}],[5,"args_os","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"argsos"}}],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","bitflags::__core::env::consts","A string describing the architecture of the CPU that is currently\nin use.",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use.\nExample value is `linux`.",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform. Example value is `lib`.",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform. Example value is `.so`.",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot. Example value is `so`.",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform. Example value is `.exe`.",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform. Example value is `exe`.",null,null],[0,"ffi","bitflags::__core","Utilities related to FFI bindings.",null,null],[3,"CString","bitflags::__core::ffi","A type representing an owned C-compatible string",null,null],[3,"IntoStringError","","An error returned from `CString::into_string` to indicate that a UTF-8 error\nwas encountered during the conversion.",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is\ncheaply inter-convertible with Rust strings.",null,null],[3,"OsStr","","Slices into OS strings (see `OsString`).",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"NulError","","An error returned from `CString::new` to indicate that a nul byte was found\nin the vector provided.",null,null],[0,"fs","bitflags::__core","Filesystem manipulation operations.",null,null],[3,"File","bitflags::__core::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the `ReadDir` iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","An structure representing a type of file with accessors for each file type.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file,\ndirectory, etc.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if\n`to` already exists.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components\nnormalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they\nare missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use\ncarefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[0,"io","bitflags::__core","Traits, helpers, and type definitions for core I/O functionality.",null,null],[0,"prelude","bitflags::__core::io","The I/O Prelude",null,null],[8,"BufRead","bitflags::__core::io::prelude","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",80,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",80,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",80,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",80,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",80,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",80,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",81,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",81,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",81,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",81,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",81,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",81,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",81,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",81,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",81,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",82,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",83,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",83,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",83,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",83,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",83,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[8,"Read","bitflags::__core::io","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",81,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",81,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",81,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",81,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",81,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",81,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",81,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",81,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",81,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",83,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",83,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",83,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",83,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",83,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",82,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",84,null],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",84,null],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",84,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",80,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",80,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",80,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",80,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",80,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",80,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",85,null],[13,"Other","","Variant representing that an I/O error occurred.",85,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that\nhappened while writing out the buffer, and the buffered writer object\nwhich may be used to recover from the condition.",null,null],[3,"Cursor","","A `Cursor` wraps another type and provides it with a\n[`Seek`](trait.Seek.html) implementation.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `&#39;\\n&#39;`) is detected.",null,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[6,"Result","","",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"BufReader","","The `BufReader` struct adds buffering to any reader.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",86,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",86,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",86,null],[13,"ConnectionReset","","The connection was reset by the remote server.",86,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",86,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",86,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in\nuse elsewhere.",86,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not\nlocal.",86,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",86,null],[13,"AlreadyExists","","An entity already exists, often a file.",86,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was\nrequested to not occur.",86,null],[13,"InvalidInput","","A parameter was incorrect.",86,null],[13,"InvalidData","","Data not valid for the operation were encountered.",86,null],[13,"TimedOut","","The I/O operation&#39;s timeout expired, causing it to be canceled.",86,null],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",86,null],[13,"Interrupted","","This operation was interrupted.",86,null],[13,"Other","","Any I/O error not part of this list.",86,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an\n&quot;end of file&quot; was reached prematurely.",86,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[3,"Empty","","A reader which is always at EOF.",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[0,"net","bitflags::__core","Networking primitives for TCP/UDP communication.",null,null],[4,"Shutdown","bitflags::__core::net","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",87,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",87,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",87,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[4,"SocketAddr","","Representation of a socket address for networking applications.",null,null],[13,"V4","","An IPv4 socket address which is a (ip, port) combination.",88,null],[13,"V6","","An IPv6 socket address",88,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[3,"AddrParseError","","An error returned when parsing an IP address or a socket address.",null,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",89,null],[13,"LinkLocal","","",89,null],[13,"RealmLocal","","",89,null],[13,"AdminLocal","","",89,null],[13,"SiteLocal","","",89,null],[13,"OrganizationLocal","","",89,null],[13,"Global","","",89,null],[3,"Ipv4Addr","","Representation of an IPv4 address.",null,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[3,"TcpStream","","A structure which represents a TCP stream between a local socket and a\nremote socket.",null,null],[3,"Incoming","","An infinite iterator over the connections from a `TcpListener`.",null,null],[4,"IpAddr","","An IP address, either an IPv4 or IPv6 address.",null,null],[13,"V4","","Representation of an IPv4 address.",90,null],[13,"V6","","Representation of an IPv6 address.",90,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more\n`SocketAddr` values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond\nto.",91,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",91,{"inputs":[{"name":"tosocketaddrs"}],"output":{"name":"result"}}],[3,"SocketAddrV4","","An IPv4 socket address which is a (ip, port) combination.",null,null],[3,"TcpListener","","A structure representing a socket server.",null,null],[0,"os","bitflags::__core","OS-specific functionality.",null,null],[0,"linux","bitflags::__core::os","Linux-specific definitions",null,null],[0,"raw","bitflags::__core::os::linux","Linux-specific raw type definitions",null,null],[6,"dev_t","bitflags::__core::os::linux::raw","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blksize_t","","",null,null],[6,"off_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",92,null],[12,"st_ino","","",92,null],[12,"st_nlink","","",92,null],[12,"st_mode","","",92,null],[12,"st_uid","","",92,null],[12,"st_gid","","",92,null],[12,"__pad0","","",92,null],[12,"st_rdev","","",92,null],[12,"st_size","","",92,null],[12,"st_blksize","","",92,null],[12,"st_blocks","","",92,null],[12,"st_atime","","",92,null],[12,"st_atime_nsec","","",92,null],[12,"st_mtime","","",92,null],[12,"st_mtime_nsec","","",92,null],[12,"st_ctime","","",92,null],[12,"st_ctime_nsec","","",92,null],[12,"__unused","","",92,null],[6,"nlink_t","","",null,null],[6,"time_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"ino_t","","",null,null],[0,"fs","bitflags::__core::os::linux","",null,null],[8,"MetadataExt","bitflags::__core::os::linux::fs","OS-specific extension methods for `fs::Metadata`",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which contains\nthe raw information returned by the OS.",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"stat"}}],[10,"st_dev","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_ino","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_mode","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_nlink","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_uid","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_gid","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_rdev","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_size","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_atime","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_atime_nsec","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_mtime","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_mtime_nsec","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_ctime","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_ctime_nsec","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_blksize","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_blocks","","",93,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[0,"raw","bitflags::__core::os","Raw OS-specific types for the current platform/architecture",null,null],[6,"c_char","bitflags::__core::os::raw","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[0,"ext","bitflags::__core::os","Experimental extensions to `std` for Unix platforms.",null,null],[0,"io","bitflags::__core::os::ext","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","bitflags::__core::os::ext::io","",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",94,{"inputs":[{"name":"asrawfd"}],"output":{"name":"i32"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",95,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",96,{"inputs":[{"name":"intorawfd"}],"output":{"name":"i32"}}],[0,"ffi","bitflags::__core::os::ext","Unix-specific extension to the primitives in the `std::ffi` module",null,null],[8,"OsStringExt","bitflags::__core::os::ext::ffi","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",97,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",97,{"inputs":[{"name":"osstringext"}],"output":{"name":"vec"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",98,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",98,null],[0,"fs","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::fs` module.",null,null],[8,"PermissionsExt","bitflags::__core::os::ext::fs","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",99,{"inputs":[{"name":"permissionsext"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",99,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",99,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",100,{"inputs":[{"name":"openoptionsext"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",100,{"inputs":[{"name":"openoptionsext"},{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"ino","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"mode","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"nlink","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"uid","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"gid","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"rdev","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"size","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"atime","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"atime_nsec","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"blksize","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"blocks","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",102,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",102,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",102,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",102,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",103,{"inputs":[{"name":"direntryext"}],"output":{"name":"u64"}}],[5,"symlink","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"DirBuilderExt","","An extension trait for `fs::DirBuilder` for unix-specific options.",null,null],[10,"mode","","Sets the mode to create new directories with. This option defaults to\n0o777.",104,{"inputs":[{"name":"dirbuilderext"},{"name":"u32"}],"output":{"name":"self"}}],[0,"process","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::process` module.",null,null],[8,"CommandExt","bitflags::__core::os::ext::process","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",105,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",105,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",105,{"inputs":[{"name":"commandext"},{"name":"bool"}],"output":{"name":"command"}}],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",105,{"inputs":[{"name":"commandext"},{"name":"f"}],"output":{"name":"command"}}],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",105,{"inputs":[{"name":"commandext"}],"output":{"name":"error"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"signal","","If the process was terminated by a signal, returns that signal.",106,{"inputs":[{"name":"exitstatusext"}],"output":{"name":"option"}}],[0,"raw","bitflags::__core::os::ext","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","bitflags::__core::os::ext::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[6,"time_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blksize_t","","",null,null],[6,"dev_t","","",null,null],[0,"thread","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::thread` module.",null,null],[6,"RawPthread","bitflags::__core::os::ext::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",107,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",107,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[0,"net","bitflags::__core::os::ext","Unix-specific networking functionality",null,null],[3,"SocketAddr","bitflags::__core::os::ext::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a `UnixListener`.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[0,"prelude","bitflags::__core::os::ext","A prelude for conveniently writing platform-specific code.",null,null],[8,"IntoRawFd","bitflags::__core::os::ext::prelude","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",96,{"inputs":[{"name":"intorawfd"}],"output":{"name":"i32"}}],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",103,{"inputs":[{"name":"direntryext"}],"output":{"name":"u64"}}],[8,"OsStringExt","","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",97,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",97,{"inputs":[{"name":"osstringext"}],"output":{"name":"vec"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",95,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[6,"RawFd","","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",107,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",107,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[8,"CommandExt","","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",105,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",105,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",105,{"inputs":[{"name":"commandext"},{"name":"bool"}],"output":{"name":"command"}}],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",105,{"inputs":[{"name":"commandext"},{"name":"f"}],"output":{"name":"command"}}],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",105,{"inputs":[{"name":"commandext"}],"output":{"name":"error"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"signal","","If the process was terminated by a signal, returns that signal.",106,{"inputs":[{"name":"exitstatusext"}],"output":{"name":"option"}}],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",102,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",102,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",102,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",102,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",99,{"inputs":[{"name":"permissionsext"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",99,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",99,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",98,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",98,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",94,{"inputs":[{"name":"asrawfd"}],"output":{"name":"i32"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",100,{"inputs":[{"name":"openoptionsext"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",100,{"inputs":[{"name":"openoptionsext"},{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"ino","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"mode","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"nlink","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"uid","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"gid","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"rdev","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"size","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"atime","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"atime_nsec","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"blksize","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"blocks","","",101,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[0,"panic","bitflags::__core","Panic support in the standard library",null,null],[5,"set_handler","bitflags::__core::panic","",null,null],[5,"take_handler","","",null,{"inputs":[],"output":{"name":"box"}}],[8,"UnwindSafe","","A marker trait which represents &quot;panic safe&quot; types in Rust.",null,null],[8,"RecoverSafe","","Deprecated, renamed to UnwindSafe",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference is considered\nrecover safe.",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is panic safe.",null,null],[12,"0","","",108,null],[3,"AssertRecoverSafe","","Deprecated, renamed to `AssertUnwindSafe`",null,null],[12,"0","","",109,null],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding panic if one occurs.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"recover","","Deprecated, renamed to `catch_unwind`",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"resume_unwind","","Triggers a panic without invoking the panic handler.",null,null],[5,"propagate","","Deprecated, use resume_unwind instead",null,null],[3,"Location","","A struct containing information about the location of a panic.",null,null],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,{"inputs":[],"output":{"name":"box"}}],[5,"set_hook","","Registers a custom panic hook, replacing any that was previously registered.",null,null],[3,"PanicInfo","","A struct providing information about a panic.",null,null],[0,"path","bitflags::__core","Cross-platform path manipulation.",null,null],[4,"Prefix","bitflags::__core::path","Path prefixes (Windows only).",null,null],[13,"Verbatim","","Prefix `\\\\?\\`, together with the given component immediately following it.",110,null],[13,"VerbatimUNC","","Prefix `\\\\?\\UNC\\`, with the &quot;server&quot; and &quot;share&quot; components following it.",110,null],[13,"VerbatimDisk","","Prefix like `\\\\?\\C:\\`, for the given drive letter",110,null],[13,"DeviceNS","","Prefix `\\\\.\\`, together with the given component immediately following it.",110,null],[13,"UNC","","Prefix `\\\\server\\share`, with the given &quot;server&quot; and &quot;share&quot; components.",110,null],[13,"Disk","","Prefix `C:` for the given disk drive.",110,null],[5,"is_separator","","Determines whether the character is one of the permitted path\nseparators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator for the current platform",null,null],[3,"PrefixComponent","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",null,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",111,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else",111,null],[13,"CurDir","","A reference to the current directory, i.e. `.`",111,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`",111,null],[13,"Normal","","A normal component, i.e. `a` and `b` in `a/b`",111,null],[3,"Components","","The core iterator giving the components of a path.",null,null],[3,"Iter","","An iterator over the components of a path, as `OsStr` slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to `String`).",null,null],[3,"Path","","A slice of a path (akin to `str`).",null,null],[3,"StripPrefixError","","An error returned from the `Path::strip_prefix` method indicating that the\nprefix was not found in `self`.",null,null],[3,"Display","","Helper struct for safely printing paths with `format!()` and `{}`",null,null],[0,"process","bitflags::__core","Working with processes.",null,null],[3,"Child","bitflags::__core::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child&#39;s stdin, if it has been captured",112,null],[12,"stdout","","The handle for reading from the child&#39;s stdout, if it has been captured",112,null],[12,"stderr","","The handle for reading from the child&#39;s stderr, if it has been captured",112,null],[3,"ChildStdin","","A handle to a child process&#39;s stdin",null,null],[3,"ChildStdout","","A handle to a child process&#39;s stdout",null,null],[3,"ChildStderr","","A handle to a child process&#39;s stderr",null,null],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",113,null],[12,"stdout","","The data that the process wrote to stdout.",113,null],[12,"stderr","","The data that the process wrote to stderr.",113,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a child process.",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,null],[0,"sync","bitflags::__core","Useful synchronization primitives.",null,null],[0,"mpsc","bitflags::__core::sync","Multi-producer, single-consumer FIFO queue communication primitives.",null,null],[3,"Receiver","bitflags::__core::sync::mpsc","The receiving-half of Rust&#39;s channel type. This half can only be owned by\none thread",null,null],[3,"Iter","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"IntoIter","","An owning iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"Sender","","The sending-half of Rust&#39;s asynchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SyncSender","","The sending-half of Rust&#39;s synchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SendError","","An error returned from the `send` function on channels.",null,null],[12,"0","","",114,null],[3,"RecvError","","An error returned from the `recv` function on a `Receiver`.",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that `try_recv` could\nnot return data when called.",null,null],[13,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",115,null],[13,"Disconnected","","This channel&#39;s sending half has become disconnected, and there will\nnever be any more data received on this channel",115,null],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method.",null,null],[13,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",116,null],[13,"Disconnected","","This channel&#39;s receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",116,null],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves.",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel.",null,null],[3,"Select","","The &quot;receiver set&quot; of the select interface. This structure is used to manage\na set of receivers which are being selected over.",null,null],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver.",null,null],[3,"Once","bitflags::__core::sync","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue.",null,null],[11,"as_ref","alloc::arc","",117,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","","",117,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"from","","",117,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"hash","","",117,null],[11,"default","","",117,{"inputs":[],"output":{"name":"arc"}}],[11,"fmt","","",117,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",117,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",117,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",117,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",117,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",117,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",117,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",117,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",117,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"drop","","Drops the `Arc&lt;T&gt;`.",117,null],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",117,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",117,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"deref","","",117,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",117,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",117,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",117,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",117,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"new","","Constructs a new `Arc&lt;T&gt;`.",117,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",117,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[3,"Arc","bitflags::__core::sync","An atomically reference counted wrapper for shared state.",null,null],[6,"LockResult","","",null,null],[17,"MUTEX_INIT","","Static initialization of a mutex. This constant can be used to initialize\nother mutex constants.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when\ndropped.",null,null],[3,"MutexGuard","","An RAII implementation of a &quot;scoped lock&quot; of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[3,"StaticCondvar","","Statically allocated condition variables.",null,null],[17,"RW_LOCK_INIT","","Constant initialization for a statically-initialized rwlock.",null,null],[6,"TryLockResult","","",null,null],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the\n`try_lock` method.",null,null],[13,"Poisoned","","The lock could not be acquired because another thread failed while holding\nthe lock.",118,null],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would\notherwise block.",118,null],[3,"StaticMutex","","The static mutex type is provided to allow for static allocation of mutexes.",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired.",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when\ndropped.",null,null],[3,"StaticRwLock","","Structure representing a statically allocated RwLock.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"RwLock","","A reader-writer lock",null,null],[0,"atomic","","Atomic types",null,null],[11,"fmt","core::sync::atomic","",119,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicBool`.",119,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",119,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",119,null],[11,"swap","","Stores a value into the bool, returning the old value.",119,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",119,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",119,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",119,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",119,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",119,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",119,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",119,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"atomicbool"}}],[3,"AtomicBool","bitflags::__core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",120,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicIsize`.",120,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",120,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",120,null],[11,"swap","","Stores a value into the isize, returning the old value.",120,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",120,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",120,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `isize` if the current value is the same as the `current` value.",120,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",120,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",120,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",120,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",120,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",120,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"atomicisize"}}],[3,"AtomicIsize","bitflags::__core::sync::atomic","A signed integer type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",121,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicUsize`.",121,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",121,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",121,null],[11,"swap","","Stores a value into the usize, returning the old value.",121,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",121,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",121,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",121,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",121,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",121,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",121,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",121,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",121,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"default","","",121,{"inputs":[],"output":{"name":"atomicusize"}}],[3,"AtomicUsize","bitflags::__core::sync::atomic","An unsigned integer type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",122,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicPtr`.",122,null],[11,"load","","Loads a value from the pointer.",122,null],[11,"store","","Stores a value into the pointer.",122,null],[11,"swap","","Stores a value into the pointer, returning the old value.",122,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",122,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",122,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",122,null],[11,"default","","",122,{"inputs":[],"output":{"name":"atomicptr"}}],[3,"AtomicPtr","bitflags::__core::sync::atomic","A raw pointer type which can be safely shared between threads.",null,null],[11,"clone","core::sync::atomic","",123,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"fmt","","",123,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Ordering","bitflags::__core::sync::atomic","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",123,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",123,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",123,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",123,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",123,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[17,"CONDVAR_INIT","bitflags::__core::sync","Constant initializer for a statically allocated condition variable.",null,null],[3,"Barrier","","A barrier enables multiple threads to synchronize the beginning\nof some computation.",null,null],[11,"new","alloc::arc","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",124,{"inputs":[],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",124,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",124,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",124,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"fmt","","",124,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Weak","bitflags::__core::sync","A weak pointer to an `Arc`.",null,null],[3,"BarrierWaitResult","","A result returned from wait.",null,null],[0,"time","bitflags::__core","Temporal quantification.",null,null],[3,"Instant","bitflags::__core::time","A measurement of a monotonically increasing clock.\n Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to\nexternal entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` method on `SystemTime`,\nused to learn about why how far in the opposite direction a timestamp lies.",null,null],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or\nlearn about where in time a `SystemTime` lies.",null,null],[3,"Duration","","A duration type to represent a span of time, typically used for system\ntimeouts.",null,null],[11,"next_u64","bitflags::__core::__rand","Return the next random u64.",125,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",125,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",125,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",125,null],[11,"gen","","Return a random value of a `Rand` type.",125,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",125,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",125,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",125,{"inputs":[{"name":"rng"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",125,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",125,null],[11,"shuffle","","Shuffle a mutable slice in place.",125,null],[0,"clone","bitflags::__core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","bitflags::__core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",2,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",2,null],[0,"u64","bitflags::__core","The 64-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u64","",null,null],[17,"MAX","","",null,null],[0,"i16","bitflags::__core","The 16-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i16","",null,null],[17,"MAX","","",null,null],[0,"u32","bitflags::__core","The 32-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u32","",null,null],[17,"MAX","","",null,null],[0,"fmt","bitflags::__core","Utilities for formatting and printing strings",null,null],[5,"format","bitflags::__core::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[11,"entry","core::fmt::builders","Adds a new entry to the set output.",126,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",126,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",126,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[3,"DebugSet","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[6,"Result","","",null,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",127,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",128,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",128,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[3,"DebugStruct","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"write_str","core::fmt","",129,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",129,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",129,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",129,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",129,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",129,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",129,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",129,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",129,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",129,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",129,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",129,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",129,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",129,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",129,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",129,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",129,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",129,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",129,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",129,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",129,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[3,"Formatter","bitflags::__core::fmt","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",130,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",130,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",130,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",131,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",132,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",132,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","bitflags::__core::fmt","The error type which is returned from formatting a message into a stream.",null,null],[11,"fmt","core::fmt","",133,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[3,"Arguments","bitflags::__core::fmt","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[11,"entry","core::fmt::builders","Adds a new entry to the list output.",134,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",134,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",134,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[3,"DebugList","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",135,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated tuple struct output.",136,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",136,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[3,"DebugTuple","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",137,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",138,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",139,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",140,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",141,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"entry","core::fmt::builders","Adds a new entry to the map output.",142,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",142,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",142,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[3,"DebugMap","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",143,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"char","bitflags::__core","A character type.",null,null],[3,"ToLowercase","bitflags::__core::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`,\nreturning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a\ndecoding error.",null,null],[11,"next","core::char","",144,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",144,null],[11,"clone","","",144,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"fmt","","",144,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EscapeUnicode","bitflags::__core::char","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[11,"next","core::char","",145,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"count","","",145,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",145,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",145,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","","",145,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"fmt","","",145,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EscapeDefault","bitflags::__core::char","An iterator that yields the literal escape code of a `char`.",null,null],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[11,"next","core::char","",146,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",146,null],[11,"fmt","","",146,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EncodeUtf16","bitflags::__core::char","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[11,"next","core::char","",147,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",147,null],[11,"fmt","","",147,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EncodeUtf8","bitflags::__core::char","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[0,"mem","bitflags::__core","Basic functions for dealing with memory.",null,null],[5,"forget","bitflags::__core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"result","bitflags::__core","Error handling with the `Result` type.",null,null],[4,"Result","bitflags::__core::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",14,null],[13,"Err","","Contains the error value",14,null],[11,"clone","core::result","",148,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",148,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",148,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"fmt","","",148,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::result","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[11,"next_back","core::result","",149,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",149,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"fmt","","",149,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::result","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[11,"next_back","core::result","",150,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",150,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",150,null],[11,"fmt","","",150,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IntoIter","bitflags::__core::result","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"i64","bitflags::__core","The 64-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i64","",null,null],[17,"MAX","","",null,null],[0,"slice","bitflags::__core","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","bitflags::__core::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",18,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",18,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",18,null],[10,"connect","","",18,null],[11,"next_back","core::slice","",151,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",151,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",151,null],[11,"count","","",151,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",151,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",151,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"fmt","","",151,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chunks","bitflags::__core::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[11,"next_back","core::slice","",152,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",152,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",152,null],[11,"clone","","",152,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",152,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Split","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[11,"next","core::slice","",153,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitNMut","bitflags::__core::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[11,"next_back","core::slice","",154,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",154,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitMut","bitflags::__core::slice","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[11,"next","core::slice","",155,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"fmt","","",155,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitN","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[11,"next","core::slice","",156,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"fmt","","",156,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitNMut","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[11,"next_back","core::slice","",157,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next","","",157,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"count","","",157,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",157,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",157,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","","",157,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ChunksMut","bitflags::__core::slice","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[11,"next","core::slice","",158,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",158,null],[11,"fmt","","",158,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitN","bitflags::__core::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[11,"clone","core::slice","",159,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",159,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",159,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",159,null],[11,"count","","",159,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",159,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",159,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",159,null],[11,"fmt","","",159,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::slice","Immutable slice iterator",null,null],[11,"next_back","core::slice","",160,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next","","",160,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",160,null],[11,"count","","",160,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",160,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",160,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"fmt","","",160,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Windows","bitflags::__core::slice","An iterator over overlapping subslices of length `size`.",null,null],[11,"next_back","core::slice","",161,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",161,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",161,null],[11,"count","","",161,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",161,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",161,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",161,null],[11,"fmt","","",161,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::slice","Mutable slice iterator.",null,null],[0,"i8","bitflags::__core","The 8-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i8","",null,null],[17,"MAX","","",null,null],[0,"ptr","bitflags::__core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","bitflags::__core::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[11,"fmt","core::ptr","",162,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",162,null],[11,"new","","Creates a new `Unique`.",162,null],[11,"get","","Dereferences the content.",162,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",162,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[3,"Unique","bitflags::__core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[11,"fmt","core::ptr","",163,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",163,null],[11,"clone","","",163,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"new","","Creates a new `Shared`.",163,null],[3,"Shared","bitflags::__core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[0,"raw","bitflags::__core","Contains struct definitions for the layout of compiler built-in types.",null,null],[11,"clone","core::raw","",164,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[3,"Slice","bitflags::__core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",164,null],[12,"len","","",164,null],[11,"clone","core::raw","",165,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[3,"TraitObject","bitflags::__core::raw","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",165,null],[12,"vtable","","",165,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",166,{"inputs":[{"name":"repr"}],"output":{"name":"t"}}],[0,"str","bitflags::__core","Unicode string slices.",null,null],[6,"Utf16Units","bitflags::__core::str","",null,null],[11,"next","collections::str","",167,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",167,null],[11,"clone","","",167,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[3,"EncodeUtf16","bitflags::__core::str","External iterator for a string&#39;s UTF-16 code units.",null,null],[11,"clone","core::str","",168,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","","",168,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharRange","bitflags::__core::str","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",168,null],[12,"next","","Index of the first byte of the next `char`",168,null],[11,"next_back","core::str","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"next","","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",169,null],[11,"count","","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",169,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"len","","",169,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"fmt","","",169,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Bytes","bitflags::__core::str","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","bitflags::__core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",170,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",170,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",170,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",170,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",170,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",171,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",171,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",171,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",172,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",172,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",172,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",172,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",173,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",173,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",173,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"clone","core::str","",174,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next","","",174,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",174,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",174,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[3,"RSplitTerminator","bitflags::__core::str","Created with the method [`rsplit_terminator()`].",null,null],[11,"fmt","core::str","",175,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",175,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",175,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",175,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[3,"SplitTerminator","bitflags::__core::str","Created with the method [`split_terminator()`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[11,"clone","core::str","",176,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"next","","",176,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"fmt","","",176,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitN","bitflags::__core::str","Created with the method [`rsplitn()`].",null,null],[11,"eq","core::str","",177,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",177,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",177,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[3,"Utf8Error","bitflags::__core::str","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[11,"clone","core::str","",178,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",178,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",178,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",178,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[3,"Split","bitflags::__core::str","Created with the method [`split()`].",null,null],[11,"fmt","core::str","",179,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",179,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"next","","",179,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",179,null],[11,"clone","","",179,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[3,"Lines","bitflags::__core::str","Created with the method [`lines()`].",null,null],[11,"fmt","core::str","",180,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",180,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",180,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[3,"MatchIndices","bitflags::__core::str","Created with the method [`match_indices()`].",null,null],[11,"fmt","core::str","",181,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",181,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",181,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"next","","",181,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",181,null],[3,"LinesAny","bitflags::__core::str","Created with the method [`lines_any()`].",null,null],[11,"clone","core::str","",182,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",182,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",182,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",182,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Matches","bitflags::__core::str","Created with the method [`matches()`].",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[11,"next","core::str","",183,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",183,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",183,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",183,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[3,"RSplit","bitflags::__core::str","Created with the method [`rsplit()`].",null,null],[11,"next_back","core::str","",184,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",184,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next","","",184,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[3,"RMatches","bitflags::__core::str","Created with the method [`rmatches()`].",null,null],[11,"next","core::str","",185,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",185,null],[11,"clone","","",185,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"fmt","","",185,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",185,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"next_back","","",185,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[3,"Chars","bitflags::__core::str","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[11,"next","core::str","",186,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"fmt","","",186,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",186,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[3,"SplitN","bitflags::__core::str","Created with the method [`splitn()`].",null,null],[11,"next_back","core::str","",187,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"fmt","","",187,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",187,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",187,null],[11,"clone","","",187,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",187,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[3,"CharIndices","bitflags::__core::str","Iterator for a string&#39;s characters and their byte offsets.",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",188,null],[10,"from_str","","Parses a string `s` to return a value of this type.",188,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","core::str","",189,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",189,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",189,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"fmt","","",189,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ParseBoolError","bitflags::__core::str","An error returned when parsing a `bool` from a string fails.",null,null],[11,"next_back","core::str","",190,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",190,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next","","",190,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[3,"RMatchIndices","bitflags::__core::str","Created with the method [`rmatch_indices()`].",null,null],[11,"next","rustc_unicode::u_str","",191,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next_back","","",191,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[3,"SplitWhitespace","bitflags::__core::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[0,"iter","bitflags::__core","Composable external iteration.",null,null],[8,"Iterator","bitflags::__core::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",7,null],[10,"next","","Advances the iterator and returns the next value.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",7,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",7,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",7,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",7,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",7,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",7,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",7,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",7,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",192,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",15,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",15,null],[10,"into_iter","","Creates an iterator from a value.",15,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",24,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",16,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",21,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[11,"next_back","core::iter","",193,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"next","","",193,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",193,null],[11,"clone","","",193,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"fmt","","",193,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Rev","bitflags::__core::iter","An double-ended iterator with the direction inverted.",null,null],[11,"next_back","core::iter","",194,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"next","","",194,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",194,null],[11,"clone","","",194,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"fmt","","",194,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Cloned","bitflags::__core::iter","An iterator that clones the elements of an underlying iterator.",null,null],[11,"next","core::iter","",195,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",195,null],[11,"clone","","",195,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"fmt","","",195,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Cycle","bitflags::__core::iter","An iterator that repeats endlessly.",null,null],[11,"next_back","core::iter","",196,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"next","","",196,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",196,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",196,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",196,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",196,null],[11,"clone","","",196,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"fmt","","",196,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chain","bitflags::__core::iter","An iterator that strings two iterators together.",null,null],[11,"next_back","core::iter","",197,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"next","","",197,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",197,null],[11,"clone","","",197,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"fmt","","",197,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Zip","bitflags::__core::iter","An iterator that iterates two other iterators simultaneously.",null,null],[11,"next_back","core::iter","",198,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"next","","",198,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",198,null],[11,"fmt","","",198,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",198,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[3,"Map","bitflags::__core::iter","An iterator that maps the values of `iter` with `f`.",null,null],[11,"next_back","core::iter","",199,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"next","","",199,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",199,null],[11,"fmt","","",199,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",199,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[3,"Filter","bitflags::__core::iter","An iterator that filters the elements of `iter` with `predicate`.",null,null],[11,"next_back","core::iter","",200,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"next","","",200,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",200,null],[11,"fmt","","",200,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",200,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[3,"FilterMap","bitflags::__core::iter","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[11,"next_back","core::iter","",201,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"next","","# Overflow Behavior",201,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",201,null],[11,"nth","","",201,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",201,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"clone","","",201,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"fmt","","",201,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Enumerate","bitflags::__core::iter","An iterator that yields the current count and the element during iteration.",null,null],[11,"peek","core::iter","Returns a reference to the next() value without advancing the iterator.",202,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",202,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"next","","",202,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",202,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",202,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",202,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",202,null],[11,"clone","","",202,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"fmt","","",202,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Peekable","bitflags::__core::iter","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[11,"next","core::iter","",203,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",203,null],[11,"fmt","","",203,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",203,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[3,"SkipWhile","bitflags::__core::iter","An iterator that rejects elements while `predicate` is true.",null,null],[11,"next","core::iter","",204,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",204,null],[11,"fmt","","",204,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",204,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[3,"TakeWhile","bitflags::__core::iter","An iterator that only accepts elements while `predicate` is true.",null,null],[11,"next_back","core::iter","",205,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"next","","",205,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",205,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",205,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",205,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",205,null],[11,"clone","","",205,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"fmt","","",205,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Skip","bitflags::__core::iter","An iterator that skips over `n` elements of `iter`.",null,null],[11,"next","core::iter","",206,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",206,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",206,null],[11,"clone","","",206,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"fmt","","",206,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Take","bitflags::__core::iter","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[11,"next","core::iter","",207,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",207,null],[11,"fmt","","",207,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[3,"Scan","bitflags::__core::iter","An iterator to maintain state while iterating another iterator.",null,null],[11,"next_back","core::iter","",208,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"next","","",208,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",208,null],[11,"fmt","","",208,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",208,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[3,"FlatMap","bitflags::__core::iter","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[11,"next_back","core::iter","",209,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"next","","",209,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",209,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",209,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",209,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",209,null],[11,"clone","","",209,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"fmt","","",209,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Fuse","bitflags::__core::iter","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[11,"next_back","core::iter","",210,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"next","","",210,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",210,null],[11,"fmt","","",210,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",210,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[3,"Inspect","bitflags::__core::iter","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",211,{"inputs":[{"name":"step"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",211,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"next","core::iter","",212,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",212,null],[11,"next","","",212,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",212,null],[11,"next","","",212,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",212,null],[11,"clone","","",212,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"fmt","","",212,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"StepBy","bitflags::__core::iter","An adapter for stepping range iterators by a custom amount.",null,null],[11,"next_back","core::iter","",213,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",213,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",213,null],[11,"clone","","",213,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"fmt","","",213,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Repeat","bitflags::__core::iter","An iterator that repeats an element endlessly.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[11,"default","core::iter","",214,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",214,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"len","","",214,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"next_back","","",214,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"next","","",214,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",214,null],[11,"fmt","","",214,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Empty","bitflags::__core::iter","An iterator that yields nothing.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[11,"len","core::iter","",215,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"next_back","","",215,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"next","","",215,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",215,null],[11,"clone","","",215,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"fmt","","",215,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Once","bitflags::__core::iter","An iterator that yields an element exactly once.",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[0,"ops","bitflags::__core","Overloadable operators.",null,null],[8,"Drop","bitflags::__core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",23,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",216,null],[10,"add","","The method for the `+` operator",216,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",217,null],[10,"sub","","The method for the `-` operator",217,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",218,null],[10,"mul","","The method for the `*` operator",218,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",219,null],[10,"div","","The method for the `/` operator",219,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",220,null],[10,"rem","","The method for the `%` operator",220,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",221,null],[10,"neg","","The method for the unary `-` operator",221,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",222,null],[10,"not","","The method for the unary `!` operator",222,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",223,null],[10,"bitand","","The method for the `&amp;` operator",223,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",224,null],[10,"bitor","","The method for the `|` operator",224,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",225,null],[10,"bitxor","","The method for the `^` operator",225,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",226,null],[10,"shl","","The method for the `&lt;&lt;` operator",226,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",227,null],[10,"shr","","The method for the `&gt;&gt;` operator",227,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",228,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",229,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",230,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",231,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",232,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",233,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",234,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",235,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",236,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",237,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",238,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",238,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",239,null],[11,"fmt","core::ops","",240,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",240,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"eq","","",240,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[3,"RangeFull","bitflags::__core::ops","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[11,"next_back","core::ops","",241,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",241,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",241,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",241,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",241,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",241,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",241,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",241,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",241,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[3,"Range","bitflags::__core::ops","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",241,null],[12,"end","","The upper bound of the range (exclusive).",241,null],[11,"next","core::ops","",242,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"contains","","# Examples",242,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",242,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",242,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"eq","","",242,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",242,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",242,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[3,"RangeFrom","bitflags::__core::ops","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",242,null],[11,"contains","core::ops","# Examples",243,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",243,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",243,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"eq","","",243,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",243,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[3,"RangeTo","bitflags::__core::ops","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",243,null],[11,"next_back","core::ops","",244,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",244,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",244,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",244,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"from","","",244,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",244,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",244,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"eq","","",244,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",244,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[4,"RangeInclusive","bitflags::__core::ops","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",244,null],[12,"at","bitflags::__core::ops::RangeInclusive","",244,null],[13,"NonEmpty","bitflags::__core::ops","Non-empty range (iteration will yield value(s))",244,null],[12,"start","bitflags::__core::ops::RangeInclusive","",244,null],[12,"end","","",244,null],[11,"fmt","core::ops","",245,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",245,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"eq","","",245,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",245,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"contains","","# Examples",245,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[3,"RangeToInclusive","bitflags::__core::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",245,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",246,null],[10,"deref","","The method called to dereference a value",246,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",247,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",11,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",20,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",1,null],[10,"call_once","","This is called when the call operator is used.",1,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",248,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",249,null],[10,"make_place","","Creates a fresh place from `self`.",249,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",250,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",250,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",251,null],[16,"Place","","The place that will negotiate the storage of the data.",251,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",251,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",252,{"inputs":[],"output":{"name":"self"}}],[0,"u8","bitflags::__core","The 8-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u8","",null,null],[17,"MAX","","",null,null],[0,"u16","bitflags::__core","The 16-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u16","",null,null],[17,"MAX","","",null,null],[0,"cmp","bitflags::__core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","bitflags::__core::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",25,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",25,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[11,"partial_cmp","core::cmp","",253,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"cmp","","",253,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",253,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"clone","","",253,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"eq","","",253,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",253,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Ordering","bitflags::__core::cmp","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",253,null],[13,"Equal","","An ordering where a compared value is equal [to another].",253,null],[13,"Greater","","An ordering where a compared value is greater [than another].",253,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",10,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",8,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",8,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",8,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",8,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",8,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"default","bitflags::__core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","bitflags::__core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",5,{"inputs":[],"output":{"name":"self"}}],[0,"marker","bitflags::__core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","bitflags::__core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[11,"fmt","core::marker","",254,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",254,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"eq","","",254,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"hash","","",254,null],[11,"clone","","",254,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"cmp","","",254,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"default","","",254,{"inputs":[],"output":{"name":"phantomdata"}}],[3,"PhantomData","bitflags::__core::marker","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"rc","bitflags::__core","Thread-local reference-counted boxes (the `Rc&lt;T&gt;` type).",null,null],[11,"default","alloc::rc","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",255,{"inputs":[],"output":{"name":"rc"}}],[11,"as_ref","","",255,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","","",255,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",255,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"drop","","Drops the `Rc&lt;T&gt;`.",255,null],[11,"deref","","",255,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"from","","",255,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"fmt","","",255,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",255,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",255,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",255,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",255,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",255,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",255,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",255,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",255,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",255,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",255,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"new","","Constructs a new `Rc&lt;T&gt;`.",255,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",255,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",255,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",255,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",255,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",255,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",255,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",255,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",255,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",255,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[3,"Rc","bitflags::__core::rc","A reference-counted pointer type over an immutable value.",null,null],[11,"clone","alloc::rc","Makes a clone of the `Weak&lt;T&gt;`.",256,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",256,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",256,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",256,{"inputs":[],"output":{"name":"weak"}}],[11,"fmt","","",256,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Weak","bitflags::__core::rc","A weak version of `Rc&lt;T&gt;`.",null,null],[0,"boxed","bitflags::__core","A pointer type for heap allocation.",null,null],[17,"HEAP","bitflags::__core::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box&lt;FnOnce()&gt;` in a data structure, you should use\n`Box&lt;FnBox()&gt;`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box&lt;FnOnce()&gt;`\nclosures become directly usable.)",null,null],[16,"Output","","",257,null],[10,"call_box","","",257,null],[0,"cell","bitflags::__core","Shareable mutable containers.",null,null],[11,"fmt","core::cell","",258,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",258,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"default","","",258,{"inputs":[],"output":{"name":"cell"}}],[11,"clone","","",258,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"new","","Creates a new `Cell` containing the given value.",258,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",258,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",258,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",258,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[3,"Cell","bitflags::__core::cell","A mutable memory location that admits only `Copy` data.",null,null],[11,"fmt","core::cell","",259,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",259,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"default","","",259,{"inputs":[],"output":{"name":"refcell"}}],[11,"clone","","",259,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"borrow_state","","Query the current state of this `RefCell`",259,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",259,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",259,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",259,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"new","","Creates a new `RefCell` containing `value`.",259,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",259,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[3,"RefCell","bitflags::__core::cell","A mutable memory location with dynamically checked borrow rules",null,null],[11,"clone","core::cell","",260,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"eq","","",260,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"fmt","","",260,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"BorrowState","bitflags::__core::cell","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",260,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",260,null],[13,"Unused","","There are no outstanding borrows on this cell.",260,null],[11,"fmt","core::cell","",261,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","Copies a `Ref`.",261,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",261,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",261,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",261,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[3,"Ref","bitflags::__core::cell","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[11,"deref_mut","core::cell","",262,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref","","",262,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",262,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",262,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",262,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RefMut","bitflags::__core::cell","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[11,"get","core::cell","Gets a mutable pointer to the wrapped value.",263,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",263,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",263,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"fmt","","",263,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"UnsafeCell","bitflags::__core::cell","The core primitive for interior mutability in Rust.",null,null],[0,"hash","bitflags::__core","Generic hashing support.",null,null],[8,"Hash","bitflags::__core::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",264,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",264,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",265,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",265,null],[11,"write_u8","","Write a single `u8` into this hasher",265,null],[11,"write_u16","","Write a single `u16` into this hasher.",265,null],[11,"write_u32","","Write a single `u32` into this hasher.",265,null],[11,"write_u64","","Write a single `u64` into this hasher.",265,null],[11,"write_usize","","Write a single `usize` into this hasher.",265,null],[11,"write_i8","","Write a single `i8` into this hasher.",265,null],[11,"write_i16","","Write a single `i16` into this hasher.",265,null],[11,"write_i32","","Write a single `i32` into this hasher.",265,null],[11,"write_i64","","Write a single `i64` into this hasher.",265,null],[11,"write_isize","","Write a single `isize` into this hasher.",265,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",266,null],[10,"build_hasher","","Creates a new hasher.",266,null],[11,"default","core::hash","",267,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"clone","","",267,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"build_hasher","","",267,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"fmt","","",267,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"BuildHasherDefault","bitflags::__core::hash","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[11,"default","core::hash::sip","",268,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",268,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"write","","",268,null],[11,"finish","","",268,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",268,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",268,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"fmt","","",268,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SipHasher","bitflags::__core::hash","An implementation of SipHash 2-4.",null,null],[0,"isize","bitflags::__core","The pointer-sized signed integer type.",null,null],[17,"MIN","bitflags::__core::isize","",null,null],[17,"MAX","","",null,null],[0,"i32","bitflags::__core","The 32-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i32","",null,null],[17,"MAX","","",null,null],[0,"vec","bitflags::__core","A contiguous growable array type with heap-allocated contents, written\n`Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"Vec","bitflags::__core::vec","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[11,"drop","collections::vec","",269,null],[11,"clone","","",269,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next_back","","",269,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",269,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",269,null],[11,"count","","",269,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[3,"IntoIter","bitflags::__core::vec","An iterator that moves out of a vector.",null,null],[11,"drop","collections::vec","",270,null],[11,"next_back","","",270,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",270,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",270,null],[3,"Drain","bitflags::__core::vec","A draining iterator for `Vec&lt;T&gt;`.",null,null],[0,"any","bitflags::__core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[8,"Any","bitflags::__core::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",271,{"inputs":[{"name":"any"}],"output":{"name":"typeid"}}],[11,"fmt","core::any","",272,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",272,null],[11,"clone","","",272,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"eq","","",272,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",272,{"inputs":[],"output":{"name":"typeid"}}],[3,"TypeId","bitflags::__core::any","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"usize","bitflags::__core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","bitflags::__core::usize","",null,null],[17,"MAX","","",null,null],[0,"convert","bitflags::__core","Traits for conversions between types.",null,null],[8,"AsRef","bitflags::__core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",19,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",13,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",22,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",17,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"option","bitflags::__core","Optional values.",null,null],[4,"Option","bitflags::__core::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",9,null],[13,"Some","","Some value `T`",9,null],[11,"clone","core::option","",273,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",273,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",273,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",273,null],[11,"fmt","","",273,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::option","An iterator over a reference of the contained item in an Option.",null,null],[11,"next_back","core::option","",274,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",274,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",274,null],[11,"fmt","","",274,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::option","An iterator over a mutable reference of the contained item in an Option.",null,null],[11,"next_back","core::option","",275,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",275,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",275,null],[11,"clone","","",275,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"fmt","","",275,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IntoIter","bitflags::__core::option","An iterator over the item contained inside an Option.",null,null],[0,"intrinsics","bitflags::__core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","bitflags::__core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"string","bitflags::__core","A UTF-8 encoded, growable string.",null,null],[3,"String","bitflags::__core::string","A UTF-8 encoded, growable string.",null,null],[11,"fmt","collections::string","",276,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",276,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",276,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",276,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"FromUtf8Error","bitflags::__core::string","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[11,"fmt","collections::string","",277,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",277,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"FromUtf16Error","bitflags::__core::string","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[11,"eq","collections::string","",278,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",278,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",278,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",278,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[4,"ParseError","bitflags::__core::string","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",6,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[11,"next_back","collections::string","",279,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",279,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",279,null],[11,"drop","","",279,null],[3,"Drain","bitflags::__core::string","A draining iterator for `String`.",null,null],[0,"borrow","bitflags::__core","A module for working with borrowed data.",null,null],[8,"ToOwned","bitflags::__core::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",12,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",12,null],[11,"as_ref","collections::borrow","",280,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","","",280,null],[11,"fmt","","",280,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",280,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",280,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","","",280,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"cmp","","",280,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"deref","","",280,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",280,null],[11,"into_owned","","Extracts the owned data.",280,null],[11,"clone","","",280,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"borrow","","",280,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"eq","","",280,null],[11,"ne","","",280,null],[11,"eq","","",280,null],[11,"ne","","",280,null],[11,"eq","","",280,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",280,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",280,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",280,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",280,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",280,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"from","","",280,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"from","","",280,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"eq","","",280,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",280,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"from_iter","","",280,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from","","",280,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from","","",280,null],[4,"Cow","bitflags::__core::borrow","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",280,null],[13,"Owned","","Owned data.",280,null],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",281,{"inputs":[{"name":"borrowmut"}],"output":{"name":"borrowed"}}],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",282,{"inputs":[{"name":"borrow"}],"output":{"name":"borrowed"}}],[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[[8,"Error"],[8,"FnOnce"],[8,"Clone"],[3,"String"],[3,"Vec"],[8,"Default"],[8,"ToString"],[8,"Iterator"],[8,"PartialOrd"],[4,"Option"],[8,"Ord"],[8,"Fn"],[8,"ToOwned"],[8,"AsMut"],[4,"Result"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"From"],[8,"SliceConcatExt"],[8,"AsRef"],[8,"FnMut"],[8,"ExactSizeIterator"],[8,"Into"],[8,"Drop"],[8,"Extend"],[8,"PartialEq"],[8,"AsciiExt"],[3,"EscapeDefault"],[3,"Wrapping"],[8,"One"],[3,"ParseIntError"],[4,"FpCategory"],[8,"Zero"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"LocalKey"],[3,"KeyInner"],[3,"ScopedKey"],[3,"Key"],[4,"LocalKeyState"],[3,"Key"],[4,"Entry"],[3,"LinkedList"],[3,"BinaryHeap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"FrontPlace"],[3,"BackPlace"],[4,"Bound"],[3,"Keys"],[3,"IntoIter"],[3,"VacantEntry"],[3,"RangeMut"],[3,"Iter"],[3,"BTreeMap"],[3,"Range"],[3,"ValuesMut"],[3,"OccupiedEntry"],[3,"Values"],[3,"IterMut"],[4,"Entry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"SymmetricDifference"],[3,"Iter"],[3,"IntoIter"],[3,"Intersection"],[3,"Range"],[3,"Difference"],[3,"Union"],[4,"VarError"],[8,"BufRead"],[8,"Read"],[8,"Seek"],[8,"Write"],[4,"SeekFrom"],[4,"CharsError"],[4,"ErrorKind"],[4,"Shutdown"],[4,"SocketAddr"],[4,"Ipv6MulticastScope"],[4,"IpAddr"],[8,"ToSocketAddrs"],[3,"stat"],[8,"MetadataExt"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[3,"AssertUnwindSafe"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"Component"],[3,"Child"],[3,"Output"],[3,"SendError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Arc"],[4,"TryLockError"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Weak"],[8,"Rng"],[3,"DebugSet"],[8,"Display"],[3,"DebugStruct"],[3,"Formatter"],[8,"Write"],[8,"LowerExp"],[3,"Error"],[3,"Arguments"],[3,"DebugList"],[8,"Binary"],[3,"DebugTuple"],[8,"Octal"],[8,"Debug"],[8,"UpperExp"],[8,"LowerHex"],[8,"Pointer"],[3,"DebugMap"],[8,"UpperHex"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf16"],[3,"EncodeUtf8"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Chunks"],[3,"Split"],[3,"RSplitNMut"],[3,"SplitMut"],[3,"SplitN"],[3,"SplitNMut"],[3,"ChunksMut"],[3,"RSplitN"],[3,"Iter"],[3,"Windows"],[3,"IterMut"],[3,"Unique"],[3,"Shared"],[3,"Slice"],[3,"TraitObject"],[8,"Repr"],[3,"EncodeUtf16"],[3,"CharRange"],[3,"Bytes"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"RSplitTerminator"],[3,"SplitTerminator"],[3,"RSplitN"],[3,"Utf8Error"],[3,"Split"],[3,"Lines"],[3,"MatchIndices"],[3,"LinesAny"],[3,"Matches"],[3,"RSplit"],[3,"RMatches"],[3,"Chars"],[3,"SplitN"],[3,"CharIndices"],[8,"FromStr"],[3,"ParseBoolError"],[3,"RMatchIndices"],[3,"SplitWhitespace"],[8,"FromIterator"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[8,"Step"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Deref"],[8,"DerefMut"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[4,"Ordering"],[3,"PhantomData"],[3,"Rc"],[3,"Weak"],[8,"FnBox"],[3,"Cell"],[3,"RefCell"],[4,"BorrowState"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"IntoIter"],[3,"Drain"],[8,"Any"],[3,"TypeId"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[4,"Cow"],[8,"BorrowMut"],[8,"Borrow"]]};
searchIndex["vecmath"] = {"doc":"A simple and generic library for vector math.","items":[[5,"col_mat3x2_mul_col","vecmath","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"col_mat3_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat4_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat2x3_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3x4_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat4_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat3x2_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"col_mat3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"col_mat4x3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"col_mat4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"row_mat2x3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"row_mat3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"row_mat3x4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"row_mat4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"mat2x3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix2x3"}}],[5,"mat3x2_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3x2"}}],[5,"mat3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3"}}],[5,"mat3x4_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3x4"}}],[5,"mat4x3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix4x3"}}],[5,"mat4_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix4"}}],[5,"vec2_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_add","","Adds two vectors.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_add","","Adds two vectors.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_add","","Adds two vectors.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_cross","","Computes the cross product.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_cross","","Computes the cross product.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec2_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector2"},{"name":"t"}],"output":{"name":"vector2"}}],[5,"vec3_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector3"},{"name":"t"}],"output":{"name":"vector3"}}],[5,"vec4_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector4"},{"name":"t"}],"output":{"name":"vector4"}}],[5,"vec2_neg","","Negates the vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_neg","","Negates the vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_neg","","Negates the vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec3_dot_vec2","","Computes transformed vector component.",null,{"inputs":[{"name":"vector3"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec4_dot_vec3","","Computes transformed vector component.",null,{"inputs":[{"name":"vector4"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec3_dot_pos2","","Computes transformed position component.",null,{"inputs":[{"name":"vector3"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec4_dot_pos3","","Computes transformed position component.",null,{"inputs":[{"name":"vector4"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"row_mat2x3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"col_mat2x3_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"row_mat3x2_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3x2_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3x4_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3x4_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat4x3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat4x3_row","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat4_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat4_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"mat2x3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix3x2"}}],[5,"mat3x2_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix2x3"}}],[5,"mat3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix4x3"}}],[5,"mat4x3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix3x4"}}],[5,"mat4_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"col_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"row_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"row_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"row_mat2x3_transform_pos2","","Transforms a 2D position through matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3x2_transform_pos2","","Transforms a 2D position through matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3_transform_pos2","","Transforms a 2D position through row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3_transform_pos2","","Transforms a 2D position through column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3x4_transform_pos3","","Transforms a 3D position through matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_transform_pos3","","Transforms a 3D position through matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"row_mat2x3_transform_vec2","","Transforms a 2D vector through matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3x2_transform_vec2","","Transforms a 2D vector through matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3_transform_vec2","","Transforms a 2D vector through row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3_transform_vec2","","Transforms a 2D vector through column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3x4_transform_vec3","","Transforms a 3D vector through matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_transform_vec3","","Transforms a 3D vector through matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"mat2x3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"t"}}],[5,"mat3x2_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"t"}}],[5,"mat3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"t"}}],[5,"mat3x4_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"t"}}],[5,"mat4x3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"t"}}],[5,"mat4_det","","Computes the determinant of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"t"}}],[5,"mat2x3_inv_det","","Computes inverse determinant of a 2x3 matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"t"}}],[5,"mat3x2_inv_det","","Computes inverse determinant of a 3x2 matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"t"}}],[5,"mat3_inv_det","","Computes inverse determinant of a 3x3 matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"t"}}],[5,"mat3x4_inv_det","","Computes inverse determinant of a 3x4 matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"t"}}],[5,"mat4x3_inv_det","","Computes inverse determinant of a 4x3 matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"t"}}],[5,"mat4_inv_det","","Computes the inverse determinant of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"t"}}],[5,"mat2x3_inv","","Computes the inverse of a 2x3 matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_inv","","Computes the inverse of a 3x2 matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_inv","","Computes the inverse of a 3x3 matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_inv","","Computes the inverse of a 3x4 matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_inv","","Computes the inverse of a 4x3 matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_inv","","Computes the inverse of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[0,"traits","","Various useful traits",null,null],[6,"Vector2","","A 2D vector.",null,null],[6,"Vector3","","A 3D vector.",null,null],[6,"Vector4","","A 4D vector.",null,null],[6,"Matrix2x3","","A 2x3 matrix.",null,null],[6,"Matrix3x2","","A 3x2 matrix.",null,null],[6,"Matrix3","","A 3x3 matrix.",null,null],[6,"Matrix3x4","","A 3x4 matrix.",null,null],[6,"Matrix4x3","","A 4x3 matrix.",null,null],[6,"Matrix4","","A 4x4 matrix.",null,null]],"paths":[]};
searchIndex["interpolation"] = {"doc":"Interpolation algorithms.","items":[[4,"EaseFunction","interpolation","",null,null],[13,"QuadraticIn","","",0,null],[13,"QuadraticOut","","",0,null],[13,"QuadraticInOut","","",0,null],[13,"CubicIn","","",0,null],[13,"CubicOut","","",0,null],[13,"CubicInOut","","",0,null],[13,"QuarticIn","","",0,null],[13,"QuarticOut","","",0,null],[13,"QuarticInOut","","",0,null],[13,"QuinticIn","","",0,null],[13,"QuinticOut","","",0,null],[13,"QuinticInOut","","",0,null],[13,"SineIn","","",0,null],[13,"SineOut","","",0,null],[13,"SineInOut","","",0,null],[13,"CircularIn","","",0,null],[13,"CircularOut","","",0,null],[13,"CircularInOut","","",0,null],[13,"ExponentialIn","","",0,null],[13,"ExponentialOut","","",0,null],[13,"ExponentialInOut","","",0,null],[13,"ElasticIn","","",0,null],[13,"ElasticOut","","",0,null],[13,"ElasticInOut","","",0,null],[13,"BackIn","","",0,null],[13,"BackOut","","",0,null],[13,"BackInOut","","",0,null],[13,"BounceIn","","",0,null],[13,"BounceOut","","",0,null],[13,"BounceInOut","","",0,null],[5,"lerp","","Performs linear interpolation.\nA linear interpolation consists of two states &#39;a&#39; and &#39;b&#39;.\nThe &#39;t&#39; variable is a factor between 0 and 1 that\ngives weight to &#39;a&#39; or &#39;b&#39;.\nWhen &#39;t&#39; is zero then &#39;a&#39; has full weight.\nWhen &#39;t&#39; is one then &#39;b&#39; has full weight.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"scalar"}],"output":{"name":"t"}}],[5,"quad_bez","","Performs quadratic beziér interpolation.\nThis is done by nesting linear interpolations.\nFor more information, see:",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"scalar"}],"output":{"name":"t"}}],[5,"cub_bez","","Performs cubic beziér interpolation.\nThis is done by interpolation between two quadratic beziér.\nFor more information, see:",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"scalar"}],"output":{"name":"t"}}],[11,"eq","","",0,{"inputs":[{"name":"easefunction"},{"name":"easefunction"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"easefunction"}],"output":{"name":"easefunction"}}],[8,"Ease","","",null,null],[10,"calc","","Calculate the eased value, normalized",1,{"inputs":[{"name":"ease"},{"name":"easefunction"}],"output":{"name":"self"}}],[10,"quadratic_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quadratic_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quadratic_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"cubic_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"cubic_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"cubic_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quartic_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quartic_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quartic_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quintic_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quintic_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quintic_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"sine_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"sine_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"sine_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"circular_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"circular_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"circular_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"exponential_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"exponential_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"exponential_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"elastic_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"elastic_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"elastic_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"back_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"back_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"back_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"bounce_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"bounce_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"bounce_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[8,"Spatial","","Used for interpolation over spatial structures.",null,null],[16,"Scalar","","The scalar type.",2,null],[10,"add","","Add",2,{"inputs":[{"name":"spatial"},{"name":"self"}],"output":{"name":"self"}}],[10,"sub","","Subtract",2,{"inputs":[{"name":"spatial"},{"name":"self"}],"output":{"name":"self"}}],[10,"scale","","Scales with a scalar.",2,{"inputs":[{"name":"spatial"},{"name":"scalar"}],"output":{"name":"self"}}]],"paths":[[4,"EaseFunction"],[8,"Ease"],[8,"Spatial"]]};
searchIndex["float"] = {"doc":"Traits for generic floats in game programming","items":[[8,"Float","float","Convenience trait for floats.",null,null],[8,"Min","","Minimum value.",null,null],[10,"min","","Returns the minimum value of self or other.",0,{"inputs":[{"name":"min"},{"name":"self"}],"output":{"name":"self"}}],[8,"Max","","Maximum value.",null,null],[10,"max","","Returns the maximum value of self or other.",1,{"inputs":[{"name":"max"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signum","","The sign of the number.",null,null],[10,"signum","","Returns number representing the sign of self",2,{"inputs":[{"name":"signum"}],"output":{"name":"self"}}],[8,"Radians","","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",3,{"inputs":[],"output":{"name":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",3,{"inputs":[],"output":{"name":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",3,{"inputs":[],"output":{"name":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees.\nEquivalent to ```value * (π / 180)```.",3,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians.\nEquivalent to ```value * (180 / π)```.",3,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[8,"One","","Number 1.",null,null],[10,"one","","Returns 1.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Number 0.",null,null],[10,"zero","","Returns 0.",5,{"inputs":[],"output":{"name":"self"}}],[8,"Sqrt","","Square root.",null,null],[10,"sqrt","","Returns square root.",6,{"inputs":[{"name":"sqrt"}],"output":{"name":"self"}}],[8,"Trig","","Basic trigonometry functions",null,null],[10,"sin","","Returns sine of self",7,{"inputs":[{"name":"trig"}],"output":{"name":"self"}}],[10,"cos","","Returns cosine of self",7,{"inputs":[{"name":"trig"}],"output":{"name":"self"}}],[10,"tan","","Returns tangent of self",7,{"inputs":[{"name":"trig"}],"output":{"name":"self"}}],[8,"Cast","","Casts into another type.",null,null],[10,"cast","","Casts into other type.",8,{"inputs":[{"name":"cast"}],"output":{"name":"t"}}],[8,"FromPrimitive","","Trait for converting from different numeric types",null,null],[10,"from_f64","","from a f64",9,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[10,"from_f32","","from a f32",9,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[10,"from_isize","","from a isze",9,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[10,"from_u32","","from a u32",9,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"from_i32","","from a i32",9,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}]],"paths":[[8,"Min"],[8,"Max"],[8,"Signum"],[8,"Radians"],[8,"One"],[8,"Zero"],[8,"Sqrt"],[8,"Trig"],[8,"Cast"],[8,"FromPrimitive"]]};
initSearch(searchIndex);
