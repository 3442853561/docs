var searchIndex = {};
searchIndex["piston_window"] = {"doc":"The official Piston window wrapper for the Piston game engine","items":[[11,"get_major_minor","shader_version::opengl","Gets the minor version of OpenGL.",0,null],[11,"to_glsl","","Gets GLSL version associated with OpenGL.",0,{"inputs":[{"name":"opengl"}],"output":{"name":"glsl"}}],[11,"clone","","",0,{"inputs":[{"name":"opengl"}],"output":{"name":"opengl"}}],[11,"eq","","",0,{"inputs":[{"name":"opengl"},{"name":"opengl"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"opengl"},{"name":"opengl"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"opengl"},{"name":"opengl"}],"output":{"name":"ordering"}}],[4,"OpenGL","piston_window","",null,null],[13,"V2_0","","",0,null],[13,"V2_1","","",0,null],[13,"V3_0","","",0,null],[13,"V3_1","","",0,null],[13,"V3_2","","",0,null],[13,"V3_3","","",0,null],[13,"V4_0","","",0,null],[13,"V4_1","","",0,null],[13,"V4_2","","",0,null],[13,"V4_3","","",0,null],[13,"V4_4","","",0,null],[13,"V4_5","","",0,null],[11,"from","gfx_graphics::glyph","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"combinederror"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Error","piston_window","An enum to represent various possible run-time errors that may occur.",null,null],[13,"Texture","","An error happened when creating a gfx texture.",1,null],[13,"IoError","","An io error happened when reading font files.",1,null],[11,"empty","gfx_texture","Returns empty texture.",2,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"from_path","","Creates a texture from path.",2,{"inputs":[{"name":"f"},{"name":"p"},{"name":"flip"},{"name":"texturesettings"}],"output":{"name":"result"}}],[11,"from_image","","Creates a texture from image.",2,{"inputs":[{"name":"f"},{"name":"imagebuffer"},{"name":"texturesettings"}],"output":{"name":"result"}}],[11,"from_memory_alpha","","Creates texture from memory alpha.",2,null],[11,"update","","Updates the texture with an image.",2,{"inputs":[{"name":"texture"},{"name":"encoder"},{"name":"imagebuffer"}],"output":{"name":"result"}}],[11,"get_size","","",2,null],[11,"update","","",2,null],[11,"create","","",2,null],[3,"Texture","piston_window","Represents a texture.",null,null],[12,"surface","","Pixel storage for texture.",2,null],[12,"view","","View used by shader.",2,null],[11,"new","texture","Create default settings.",3,{"inputs":[],"output":{"name":"texturesettings"}}],[11,"get_convert_gamma","","Gets whether to convert gamma, treated as sRGB color space.",3,{"inputs":[{"name":"texturesettings"}],"output":{"name":"bool"}}],[11,"set_convert_gamma","","Sets convert gamma.",3,null],[11,"convert_gamma","","Sets convert gamma.",3,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":{"name":"texturesettings"}}],[11,"get_compress","","Gets wheter compress on the GPU.",3,{"inputs":[{"name":"texturesettings"}],"output":{"name":"bool"}}],[11,"set_compress","","Sets compress.",3,null],[11,"compress","","Sets compress.",3,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":{"name":"texturesettings"}}],[11,"get_generate_mipmap","","Gets generate mipmap.",3,{"inputs":[{"name":"texturesettings"}],"output":{"name":"bool"}}],[11,"set_generate_mipmap","","Sets generate mipmap.",3,null],[11,"generate_mipmap","","Sets generate mipmap.",3,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":{"name":"texturesettings"}}],[11,"get_min","","Gets minify filter.",3,{"inputs":[{"name":"texturesettings"}],"output":{"name":"filter"}}],[11,"set_min","","Sets minify filter.",3,null],[11,"min","","Sets minify filter.",3,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"texturesettings"}}],[11,"get_mag","","Gets magnify filter",3,{"inputs":[{"name":"texturesettings"}],"output":{"name":"filter"}}],[11,"set_mag","","Sets magnify filter",3,null],[11,"mag","","Sets magnify filter",3,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"texturesettings"}}],[11,"get_mipmap","","Gets minify mipmap filter",3,{"inputs":[{"name":"texturesettings"}],"output":{"name":"filter"}}],[11,"set_mipmap","","Sets magnify mipmap filter, and sets generate_mipmap to true.",3,null],[11,"mipmap","","Sets magnify mipmap filter, and sets generate_mipmap to true",3,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"texturesettings"}}],[11,"get_filter","","Returns the min and mag filter",3,null],[11,"set_filter","","Sets the min and mag filter",3,null],[11,"filter","","Sets the min and mag filter",3,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"texturesettings"}}],[3,"TextureSettings","piston_window","Texture creation parameters.",null,null],[11,"clone","gfx_texture","",4,{"inputs":[{"name":"flip"}],"output":{"name":"flip"}}],[11,"eq","","",4,{"inputs":[{"name":"flip"},{"name":"flip"}],"output":{"name":"bool"}}],[4,"Flip","piston_window","Flip settings.",null,null],[13,"None","","Does not flip.",4,null],[13,"Vertical","","Flips image vertically.",4,null],[3,"PistonWindow","","Contains everything required for controlling window, graphics, event loop.",null,null],[12,"window","","The window.",5,null],[12,"encoder","","GFX encoder.",5,null],[12,"device","","GFX device.",5,null],[12,"output_color","","Output frame buffer.",5,null],[12,"output_stencil","","Output stencil buffer.",5,null],[12,"g2d","","Gfx2d.",5,null],[12,"events","","Event loop state.",5,null],[12,"app","","Application structure.",5,null],[12,"factory","","The factory that was created along with the device.",5,null],[6,"GfxEncoder","","Actual gfx::Stream implementation carried by the window.",null,null],[6,"Glyphs","","Glyph cache.",null,null],[6,"G2d","","2D graphics.",null,null],[6,"G2dTexture","","Texture type compatible with `G2d`.",null,null],[11,"build_from_window_settings","","",5,{"inputs":[{"name":"windowsettings"}],"output":{"name":"result"}}],[11,"new","","Creates a new piston window.",5,{"inputs":[{"name":"opengl"},{"name":"u8"},{"name":"w"},{"name":"t"}],"output":{"name":"self"}}],[11,"app","","Changes application structure.",5,{"inputs":[{"name":"pistonwindow"},{"name":"u"}],"output":{"name":"pistonwindow"}}],[11,"draw_2d","","Renders 2D graphics.",5,{"inputs":[{"name":"pistonwindow"},{"name":"e"},{"name":"f"}],"output":null}],[11,"draw_3d","","Renders 3D graphics.",5,{"inputs":[{"name":"pistonwindow"},{"name":"e"},{"name":"f"}],"output":null}],[11,"next","","Returns next event.\nCleans up after rendering and resizes frame buffers.",5,{"inputs":[{"name":"pistonwindow"}],"output":{"name":"option"}}],[11,"should_close","","",5,{"inputs":[{"name":"pistonwindow"}],"output":{"name":"bool"}}],[11,"set_should_close","","",5,{"inputs":[{"name":"pistonwindow"},{"name":"bool"}],"output":null}],[11,"size","","",5,{"inputs":[{"name":"pistonwindow"}],"output":{"name":"size"}}],[11,"draw_size","","",5,{"inputs":[{"name":"pistonwindow"}],"output":{"name":"size"}}],[11,"swap_buffers","","",5,{"inputs":[{"name":"pistonwindow"}],"output":null}],[11,"poll_event","","",5,{"inputs":[{"name":"pistonwindow"}],"output":{"name":"option"}}],[11,"get_title","","",5,{"inputs":[{"name":"pistonwindow"}],"output":{"name":"string"}}],[11,"set_title","","",5,{"inputs":[{"name":"pistonwindow"},{"name":"string"}],"output":null}],[11,"get_exit_on_esc","","",5,{"inputs":[{"name":"pistonwindow"}],"output":{"name":"bool"}}],[11,"set_exit_on_esc","","",5,{"inputs":[{"name":"pistonwindow"},{"name":"bool"}],"output":null}],[11,"set_capture_cursor","","",5,{"inputs":[{"name":"pistonwindow"},{"name":"bool"}],"output":null}],[11,"set_ups","","",5,{"inputs":[{"name":"pistonwindow"},{"name":"u64"}],"output":null}],[11,"set_max_fps","","",5,{"inputs":[{"name":"pistonwindow"},{"name":"u64"}],"output":null}],[11,"set_swap_buffers","","",5,{"inputs":[{"name":"pistonwindow"},{"name":"bool"}],"output":null}],[11,"set_bench_mode","","",5,{"inputs":[{"name":"pistonwindow"},{"name":"bool"}],"output":null}]],"paths":[[4,"OpenGL"],[4,"Error"],[3,"Texture"],[3,"TextureSettings"],[4,"Flip"],[3,"PistonWindow"]]};
searchIndex["gfx_graphics"] = {"doc":"A [Piston 2D graphics](https://github.com/pistondevelopers/graphics) back-end using [gfx-rs](https://github.com/gfx-rs/gfx).","items":[[3,"Gfx2d","gfx_graphics","The data used for drawing 2D graphics.",null,null],[3,"GfxGraphics","","Used for rendering 2D graphics.",null,null],[3,"GlyphCache","","A struct used for caching a rendered font.",null,null],[12,"font","","The font.",0,null],[4,"GlyphError","","An enum to represent various possible run-time errors that may occur.",null,null],[13,"Texture","","An error happened when creating a gfx texture.",1,null],[13,"IoError","","An io error happened when reading font files.",1,null],[11,"new","","Creates a new Gfx2d object.",2,{"inputs":[{"name":"opengl"},{"name":"f"}],"output":{"name":"self"}}],[11,"draw","","Renders graphics to a Gfx renderer.",2,{"inputs":[{"name":"gfx2d"},{"name":"encoder"},{"name":"rendertargetview"},{"name":"depthstencilview"},{"name":"viewport"},{"name":"f"}],"output":null}],[11,"new","","Creates a new object for rendering 2D graphics.",3,{"inputs":[{"name":"encoder"},{"name":"rendertargetview"},{"name":"depthstencilview"},{"name":"gfx2d"}],"output":{"name":"self"}}],[11,"has_texture_alpha","","Returns true if texture has alpha channel.",3,{"inputs":[{"name":"gfxgraphics"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"clear_color","","",3,null],[11,"clear_stencil","","",3,{"inputs":[{"name":"gfxgraphics"},{"name":"u8"}],"output":null}],[11,"tri_list","","",3,null],[11,"tri_list_uv","","",3,null],[11,"fmt","","",1,{"inputs":[{"name":"glypherror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"combinederror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","Constructor for a GlyphCache.",0,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"result"}}],[11,"character","","",0,{"inputs":[{"name":"glyphcache"},{"name":"fontsize"},{"name":"char"}],"output":{"name":"character"}}]],"paths":[[3,"GlyphCache"],[4,"GlyphError"],[3,"Gfx2d"],[3,"GfxGraphics"]]};
searchIndex["gfx_texture"] = {"doc":"A Gfx texture representation that works nicely with Piston libraries.","items":[[3,"Texture","gfx_texture","Represents a texture.",null,null],[12,"surface","","Pixel storage for texture.",0,null],[12,"view","","View used by shader.",0,null],[4,"Flip","","Flip settings.",null,null],[13,"None","","Does not flip.",1,null],[13,"Vertical","","Flips image vertically.",1,null],[11,"eq","","",1,{"inputs":[{"name":"flip"},{"name":"flip"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"flip"}],"output":{"name":"flip"}}],[11,"empty","","Returns empty texture.",0,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"from_path","","Creates a texture from path.",0,{"inputs":[{"name":"f"},{"name":"p"},{"name":"flip"},{"name":"texturesettings"}],"output":{"name":"result"}}],[11,"from_image","","Creates a texture from image.",0,{"inputs":[{"name":"f"},{"name":"rgbaimage"},{"name":"texturesettings"}],"output":{"name":"result"}}],[11,"from_memory_alpha","","Creates texture from memory alpha.",0,null],[11,"update","","Updates the texture with an image.",0,{"inputs":[{"name":"texture"},{"name":"encoder"},{"name":"rgbaimage"}],"output":{"name":"result"}}],[11,"create","","",0,null],[11,"update","","",0,null],[11,"get_size","","",0,null]],"paths":[[3,"Texture"],[4,"Flip"]]};
searchIndex["gfx"] = {"doc":"An efficient, low-level, bindless graphics API for Rust. See [the\nblog](http://gfx-rs.github.io/) for explanations and annotated examples.","items":[[0,"preset","gfx","State presets",null,null],[0,"blend","gfx::preset","Blending preset modes.",null,null],[17,"ADD","gfx::preset::blend","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the\nvalue of the destination multiplied by the inverse of the source alpha channel. Has the\nusual transparency effect: mixes the two colors using a fraction of each one specified by\nthe alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color\nusing the source color as weight. Has an invert effect with the constant color\nas base and source color controlling displacement from the base color.\nA white source color and a white value results in plain invert.\nThe output alpha is same as destination alpha.",null,null],[0,"depth","gfx::preset","Depth preset modes.",null,null],[17,"LESS_EQUAL_TEST","gfx::preset::depth","&quot;&lt;=&quot; comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","&quot;&lt;=&quot; comparison with writable depth",null,null],[0,"state","gfx","Fixed-function hardware state.",null,null],[11,"cmp","draw_state::state","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"frontface"}],"output":{"name":"frontface"}}],[11,"fmt","","",0,{"inputs":[{"name":"frontface"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"FrontFace","gfx::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","",null,null],[6,"OffsetSlope","","",null,null],[6,"OffsetUnits","","",null,null],[11,"clone","draw_state::state","",1,{"inputs":[{"name":"offset"}],"output":{"name":"offset"}}],[11,"fmt","","",1,{"inputs":[{"name":"offset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[3,"Offset","gfx::state","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"clone","draw_state::state","",2,{"inputs":[{"name":"cullface"}],"output":{"name":"cullface"}}],[11,"eq","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"cullface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"ordering"}}],[4,"CullFace","gfx::state","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[11,"get_cull_face","draw_state::state","Get the cull face, if any, for this primitive state.",3,{"inputs":[{"name":"rastermethod"}],"output":{"name":"cullface"}}],[11,"clone","","",3,{"inputs":[{"name":"rastermethod"}],"output":{"name":"rastermethod"}}],[11,"fmt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[4,"RasterMethod","gfx::state","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face with a given cull face mode.",3,null],[11,"clone","draw_state::state","",4,{"inputs":[{"name":"multisample"}],"output":{"name":"multisample"}}],[11,"eq","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"multisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"partial_cmp","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"ordering"}}],[3,"MultiSample","gfx::state","Multi-sampling rasterization mode",null,null],[11,"new_fill","draw_state::state","Create a new filling rasterizer.",5,{"inputs":[{"name":"cullface"}],"output":{"name":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",5,{"inputs":[{"name":"rasterizer"},{"name":"f32"},{"name":"i32"}],"output":{"name":"rasterizer"}}],[11,"clone","","",5,{"inputs":[{"name":"rasterizer"}],"output":{"name":"rasterizer"}}],[11,"fmt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[3,"Rasterizer","gfx::state","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",5,null],[12,"method","","How to rasterize this primitive.",5,null],[12,"offset","","Any polygon offset to apply.",5,null],[12,"samples","","Multi-sampling mode.",5,null],[11,"clone","draw_state::state","",6,{"inputs":[{"name":"comparison"}],"output":{"name":"comparison"}}],[11,"eq","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"comparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"ordering"}}],[4,"Comparison","gfx::state","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",6,null],[13,"Less","","`x &lt; y`",6,null],[13,"LessEqual","","`x &lt;= y`",6,null],[13,"Equal","","`x == y`",6,null],[13,"GreaterEqual","","`x &gt;= y`",6,null],[13,"Greater","","`x &gt; y`",6,null],[13,"NotEqual","","`x != y`",6,null],[13,"Always","","`true`",6,null],[11,"clone","draw_state::state","",7,{"inputs":[{"name":"stencilop"}],"output":{"name":"stencilop"}}],[11,"eq","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"stencilop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[4,"StencilOp","gfx::state","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",7,null],[13,"Zero","","Set the value in the stencil buffer to zero.",7,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",7,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",7,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",7,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",7,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",7,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",7,null],[11,"default","draw_state::state","",8,{"inputs":[],"output":{"name":"stencilside"}}],[11,"clone","","",8,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"eq","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"stencilside"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"partial_cmp","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[3,"StencilSide","gfx::state","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",8,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",8,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",8,null],[12,"op_fail","","What operation to do if the stencil test fails.",8,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",8,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",8,null],[11,"new","draw_state::state","Create a new stencil state with a given function.",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"stencil"}}],[11,"clone","","",9,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"eq","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"ordering"}}],[3,"Stencil","gfx::state","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",9,null],[12,"back","","",9,null],[11,"default","draw_state::state","",10,{"inputs":[],"output":{"name":"depth"}}],[11,"clone","","",10,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"eq","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"depth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"partial_cmp","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"ordering"}}],[3,"Depth","gfx::state","Depth test state.",null,null],[12,"fun","","Comparison function to use.",10,null],[12,"write","","Specify whether to write to the depth buffer or not.",10,null],[11,"cmp","draw_state::state","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"clone","","",11,{"inputs":[{"name":"equation"}],"output":{"name":"equation"}}],[11,"eq","","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"equation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"partial_cmp","","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"option"}}],[4,"Equation","gfx::state","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",11,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",11,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",11,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",11,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",11,null],[11,"cmp","draw_state::state","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"blendvalue"}],"output":{"name":"blendvalue"}}],[11,"eq","","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"blendvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[4,"BlendValue","gfx::state","",null,null],[13,"SourceColor","","",12,null],[13,"SourceAlpha","","",12,null],[13,"DestColor","","",12,null],[13,"DestAlpha","","",12,null],[13,"ConstColor","","",12,null],[13,"ConstAlpha","","",12,null],[11,"partial_cmp","draw_state::state","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"factor"}],"output":{"name":"factor"}}],[11,"eq","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"factor"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Factor","gfx::state","",null,null],[13,"Zero","","",13,null],[13,"One","","",13,null],[13,"SourceAlphaSaturated","","",13,null],[13,"ZeroPlus","","",13,null],[13,"OneMinus","","",13,null],[11,"fmt","draw_state::state","",14,{"inputs":[{"name":"blendchannel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"cmp","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"eq","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[3,"BlendChannel","gfx::state","",null,null],[12,"equation","","",14,null],[12,"source","","",14,null],[12,"destination","","",14,null],[11,"hash","draw_state::state","",15,null],[11,"partial_cmp","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new blend state with a given equation.",15,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"blend"}}],[11,"clone","","",15,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[3,"Blend","gfx::state","",null,null],[12,"color","","",15,null],[12,"alpha","","",15,null],[11,"hash","draw_state::state","",16,null],[11,"partial_cmp","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitor","","Returns the union of the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",16,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",16,null],[11,"remove","","Removes the specified flags in-place.",16,null],[11,"toggle","","Toggles the specified flags in-place.",16,null],[11,"fmt","","",16,{"inputs":[{"name":"colormask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"not","","Returns the complement of this set of flags.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"sub","","Returns the set difference of the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[3,"ColorMask","gfx::state","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[11,"hash","draw_state::state","",17,null],[11,"eq","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"color"}}],[11,"clone","","",17,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"fmt","","",17,{"inputs":[{"name":"color"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Color","gfx::state","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",17,null],[12,"blend","","Optional blending.",17,null],[11,"clone","draw_state::state","",18,{"inputs":[{"name":"refvalues"}],"output":{"name":"refvalues"}}],[11,"fmt","","",18,{"inputs":[{"name":"refvalues"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"refvalues"}}],[3,"RefValues","gfx::state","The complete set of the rasterizer reference values.\nSwitching these doesn&#39;t roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",18,null],[12,"blend","","Constant blend color.",18,null],[0,"draw","gfx::core","Command Buffer device interface",null,null],[11,"from","gfx_core::draw","",19,{"inputs":[{"name":"u32"}],"output":{"name":"clearcolor"}}],[11,"from","","",19,{"inputs":[{"name":"i32"}],"output":{"name":"clearcolor"}}],[11,"from","","",19,{"inputs":[{"name":"f32"}],"output":{"name":"clearcolor"}}],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"clearcolor"}],"output":{"name":"clearcolor"}}],[11,"fmt","","",19,{"inputs":[{"name":"clearcolor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[4,"ClearColor","gfx::core::draw","A universal clear color supporting integet formats\nas well as the standard floating-point.",null,null],[13,"Float","","Standard floating-point vec4 color",19,null],[13,"Int","","Integer vector to clear ivec4 targets.",19,null],[13,"Uint","","Unsigned int vector to clear uvec4 targets.",19,null],[6,"InstanceOption","","",null,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an\nefficient API-specific manner, to be ready for execution on the device.",null,null],[10,"clone_empty","","Clone as an empty buffer",20,{"inputs":[{"name":"commandbuffer"}],"output":{"name":"self"}}],[10,"reset","","Reset the command buffer contents, retain the allocated storage",20,null],[10,"bind_pipeline_state","","Bind a pipeline state object",20,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",20,null],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",20,null],[10,"bind_global_constant","","Bind a global constant",20,null],[10,"bind_resource_views","","Bind a complete set of shader resource views",20,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",20,null],[10,"bind_samplers","","Bind a complete set of samplers",20,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple\ncolors views and an optional depth/stencil view.",20,null],[10,"bind_index","","Bind an index buffer",20,null],[10,"set_scissor","","Set scissor rectangle",20,null],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",20,null],[10,"update_buffer","","Update a vertex/index/uniform buffer",20,null],[10,"update_texture","","Update a texture",20,null],[10,"generate_mipmap","","",20,null],[10,"clear_color","","Clear color target",20,null],[10,"clear_depth_stencil","","",20,null],[10,"call_draw","","Draw a primitive",20,null],[10,"call_draw_indexed","","Draw a primitive with index buffer",20,null],[0,"dummy","gfx::core","Dummy backend implementation to test the code for compile errors\noutside of the graphics development environment.",null,null],[11,"get_capabilities","gfx_core::dummy","",21,{"inputs":[{"name":"dummydevice"}],"output":{"name":"capabilities"}}],[11,"pin_submitted_resources","","",21,null],[11,"submit","","",21,null],[11,"cleanup","","",21,null],[11,"new","","Create a new dummy device",21,{"inputs":[],"output":{"name":"dummydevice"}}],[3,"DummyDevice","gfx::core::dummy","Dummy device which does minimal work, just to allow testing\ngfx-rs apps for compilation.",null,null],[11,"clone","gfx_core::dummy","",22,{"inputs":[{"name":"dummyresources"}],"output":{"name":"dummyresources"}}],[11,"fmt","","",22,{"inputs":[{"name":"dummyresources"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"eq","","",22,{"inputs":[{"name":"dummyresources"},{"name":"dummyresources"}],"output":{"name":"bool"}}],[4,"DummyResources","gfx::core::dummy","Dummy resources phantom type",null,null],[11,"clone_empty","gfx_core::dummy","",23,{"inputs":[{"name":"dummycommandbuffer"}],"output":{"name":"dummycommandbuffer"}}],[11,"reset","","",23,null],[11,"bind_pipeline_state","","",23,null],[11,"bind_vertex_buffers","","",23,null],[11,"bind_constant_buffers","","",23,null],[11,"bind_global_constant","","",23,null],[11,"bind_resource_views","","",23,null],[11,"bind_unordered_views","","",23,null],[11,"bind_samplers","","",23,null],[11,"bind_pixel_targets","","",23,null],[11,"bind_index","","",23,null],[11,"set_scissor","","",23,null],[11,"set_ref_values","","",23,null],[11,"update_buffer","","",23,null],[11,"update_texture","","",23,null],[11,"generate_mipmap","","",23,null],[11,"clear_color","","",23,null],[11,"clear_depth_stencil","","",23,null],[11,"call_draw","","",23,null],[11,"call_draw_indexed","","",23,null],[3,"DummyCommandBuffer","gfx::core::dummy","Dummy command buffer, which ignores all the calls.",null,null],[0,"factory","gfx::core","Resource factory.",null,null],[8,"Typed","gfx::core::factory","A service trait used to get the raw data out of\nstrong types. Not meant for public use.",null,null],[16,"Raw","","The raw type behind the phantom.",24,null],[10,"new","","Crete a new phantom from the raw type.",24,null],[10,"raw","","Get an internal reference to the raw type.",24,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[11,"cmp","gfx_core::factory","",25,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"ordering"}}],[11,"eq","","",25,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"option"}}],[11,"hash","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"mapaccess"}],"output":{"name":"mapaccess"}}],[11,"fmt","","",25,{"inputs":[{"name":"mapaccess"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"MapAccess","gfx::core::factory","Specifies the access allowed to a buffer mapping.",null,null],[13,"Readable","","Only allow reads.",25,null],[13,"Writable","","Only allow writes.",25,null],[13,"RW","","Allow full access.",25,null],[11,"from_iter","gfx_core::factory","",26,{"inputs":[{"name":"t"}],"output":{"name":"bind"}}],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"bind"}],"output":{"name":"bind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[],"output":{"name":"bind"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[],"output":{"name":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"bind"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",26,{"inputs":[{"name":"u8"}],"output":{"name":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"bind"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"bind"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,null],[11,"remove","","Removes the specified flags in-place.",26,null],[11,"toggle","","Toggles the specified flags in-place.",26,null],[11,"fmt","","",26,{"inputs":[{"name":"bind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"bind"}],"output":{"name":"bind"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"cmp","","",26,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"ordering"}}],[11,"hash","","",26,null],[3,"Bind","gfx::core::factory","Bind flags",null,null],[17,"RENDER_TARGET","","The resource can be rendered into.",null,null],[17,"DEPTH_STENCIL","","The resource can serve as a depth/stencil target.",null,null],[17,"SHADER_RESOURCE","","The resource can be bound to the shader for reading.",null,null],[17,"UNORDERED_ACCESS","","The resource can be bound to the shader for writing.",null,null],[11,"clone","gfx_core::factory","",27,{"inputs":[{"name":"bufferrole"}],"output":{"name":"bufferrole"}}],[11,"fmt","","",27,{"inputs":[{"name":"bufferrole"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"bufferrole"},{"name":"bufferrole"}],"output":{"name":"bool"}}],[4,"BufferRole","gfx::core::factory","Role of the memory buffer. GLES doesn&#39;t allow chaning bind points for buffers.",null,null],[13,"Vertex","","Generic vertex buffer",27,null],[13,"Index","","Index buffer",27,null],[13,"Uniform","","Uniform block buffer",27,null],[11,"cmp","gfx_core::factory","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"eq","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"clone","","",28,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[11,"fmt","","",28,{"inputs":[{"name":"usage"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Usage","gfx::core::factory","A hint as to how this buffer/texture will be used.",null,null],[13,"GpuOnly","","GPU: read + write, CPU: copy. Optimal for render targets.",28,null],[13,"Const","","GPU: read, CPU: none. Optimal for resourced textures/buffers.",28,null],[13,"Dynamic","","GPU: read, CPU: write.",28,null],[13,"CpuOnly","","GPU: copy, CPU: as specified. Used as a staging buffer,\nto be copied back and forth with on-GPU targets.",28,null],[11,"clone","gfx_core::factory","",29,{"inputs":[{"name":"bufferinfo"}],"output":{"name":"bufferinfo"}}],[11,"fmt","","",29,{"inputs":[{"name":"bufferinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"eq","","",29,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[3,"BufferInfo","gfx::core::factory","An information block that is immutable and associated with each buffer.",null,null],[12,"role","","Role",29,null],[12,"usage","","Usage hint",29,null],[12,"bind","","Bind flags",29,null],[12,"size","","Size in bytes",29,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers\nthat you use via shader resource / unordered access views.",29,null],[11,"clone","gfx_core::factory","",30,{"inputs":[{"name":"buffererror"}],"output":{"name":"buffererror"}}],[11,"fmt","","",30,{"inputs":[{"name":"buffererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"eq","","",30,{"inputs":[{"name":"buffererror"},{"name":"buffererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"buffererror"},{"name":"buffererror"}],"output":{"name":"bool"}}],[4,"BufferError","gfx::core::factory","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",30,null],[13,"Other","","Unknown other error.",30,null],[11,"clone","gfx_core::factory","",31,{"inputs":[{"name":"bufferupdateerror"}],"output":{"name":"bufferupdateerror"}}],[11,"eq","","",31,{"inputs":[{"name":"bufferupdateerror"},{"name":"bufferupdateerror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"bufferupdateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"BufferUpdateError","gfx::core::factory","An error happening on buffer updates.",null,null],[13,"OutOfBounds","","Trying to change the contents outside of the allocation.",31,null],[11,"clone","gfx_core::factory","",32,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"resourceviewerror"}}],[11,"eq","","",32,{"inputs":[{"name":"resourceviewerror"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"resourceviewerror"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"resourceviewerror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"ResourceViewError","gfx::core::factory","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag does not present in the texture.",32,null],[13,"Channel","","Selected channel type is not supported for this texture.",32,null],[13,"Unsupported","","The backend refused for some reason.",32,null],[11,"clone","gfx_core::factory","",33,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"targetviewerror"}}],[11,"eq","","",33,{"inputs":[{"name":"targetviewerror"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"targetviewerror"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"targetviewerror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"TargetViewError","gfx::core::factory","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag does not present in the texture.",33,null],[13,"BadLevel","","Selected mip level doesn&#39;t exist.",33,null],[13,"BadLayer","","Selected array layer doesn&#39;t exist.",33,null],[13,"Channel","","Selected channel type is not supported for this texture.",33,null],[13,"Unsupported","","The backend refused for some reason.",33,null],[11,"from","gfx_core::factory","",34,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"combinederror"}}],[11,"from","","",34,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"combinederror"}}],[11,"from","","",34,{"inputs":[{"name":"error"}],"output":{"name":"combinederror"}}],[11,"clone","","",34,{"inputs":[{"name":"combinederror"}],"output":{"name":"combinederror"}}],[11,"eq","","",34,{"inputs":[{"name":"combinederror"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"combinederror"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"combinederror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"CombinedError","gfx::core::factory","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",34,null],[13,"Resource","","Failed to create SRV or UAV.",34,null],[13,"Target","","Failed to create RTV or DSV.",34,null],[8,"Factory","","",null,null],[16,"Mapper","","Associated mapper type",35,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation",35,{"inputs":[{"name":"factory"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",35,{"inputs":[{"name":"factory"},{"name":"bufferinfo"}],"output":{"name":"result"}}],[10,"create_buffer_const_raw","","",35,null],[11,"create_buffer_const","","",35,null],[11,"create_buffer_dynamic","","",35,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"}],"output":{"name":"result"}}],[11,"create_buffer_staging","","",35,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"},{"name":"mapaccess"}],"output":{"name":"result"}}],[10,"create_pipeline_state_raw","","",35,{"inputs":[{"name":"factory"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[10,"create_program","","",35,{"inputs":[{"name":"factory"},{"name":"shaderset"}],"output":{"name":"result"}}],[10,"create_shader","","",35,null],[11,"create_shader_vertex","","",35,null],[11,"create_shader_geometry","","",35,null],[11,"create_shader_pixel","","",35,null],[10,"create_sampler","","",35,{"inputs":[{"name":"factory"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"map_buffer_raw","","",35,null],[10,"unmap_buffer_raw","","",35,null],[10,"map_buffer_readable","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"readable"}}],[10,"map_buffer_writable","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"writable"}}],[10,"map_buffer_rw","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"rw"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint,\nrequired to assist backends that have no concept of typeless formats (OpenGL).\nThe initial data, if given, has to be provided for all mip levels and slices:\nSlice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",35,{"inputs":[{"name":"factory"},{"name":"descriptor"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"}],"output":{"name":"result"}}],[10,"view_texture_as_render_target_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_texture","","",35,{"inputs":[{"name":"factory"},{"name":"kind"},{"name":"u8"},{"name":"bind"},{"name":"usage"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource","","",35,null],[11,"view_texture_as_unordered_access","","",35,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target","","",35,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil","","",35,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"},{"name":"depthstencilflags"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",35,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_texture_const_u8","","",35,null],[11,"create_texture_const","","",35,null],[11,"create_render_target","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil_view_only","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[0,"format","gfx::core","Universal format specification.\nApplicable to textures, views, and vertex buffers.",null,null],[11,"cmp","gfx_core::format","",36,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"ordering"}}],[11,"eq","","",36,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"option"}}],[11,"hash","","",36,null],[11,"clone","","",36,{"inputs":[{"name":"channeltype"}],"output":{"name":"channeltype"}}],[11,"fmt","","",36,{"inputs":[{"name":"channeltype"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"ChannelType","gfx::core::format","Type of a surface channel. This is how we interpret the\nstorage allocated with `SurfaceType`.",null,null],[13,"Int","","",36,null],[13,"Uint","","",36,null],[13,"Inorm","","",36,null],[13,"Unorm","","",36,null],[13,"Float","","",36,null],[13,"Srgb","","",36,null],[11,"get_channel_type","gfx_core::format","",37,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",37,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"eq","","",37,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"option"}}],[11,"hash","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"fmt","","",37,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Int","gfx::core::format","",null,null],[11,"get_channel_type","gfx_core::format","",38,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",38,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"eq","","",38,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"option"}}],[11,"hash","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"uint"}],"output":{"name":"uint"}}],[11,"fmt","","",38,{"inputs":[{"name":"uint"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Uint","gfx::core::format","",null,null],[11,"get_channel_type","gfx_core::format","",39,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",39,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"ordering"}}],[11,"eq","","",39,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"option"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"inputs":[{"name":"inorm"}],"output":{"name":"inorm"}}],[11,"fmt","","",39,{"inputs":[{"name":"inorm"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Inorm","gfx::core::format","",null,null],[11,"get_channel_type","gfx_core::format","",40,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",40,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"ordering"}}],[11,"eq","","",40,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"option"}}],[11,"hash","","",40,null],[11,"clone","","",40,{"inputs":[{"name":"unorm"}],"output":{"name":"unorm"}}],[11,"fmt","","",40,{"inputs":[{"name":"unorm"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Unorm","gfx::core::format","",null,null],[11,"get_channel_type","gfx_core::format","",41,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",41,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"ordering"}}],[11,"eq","","",41,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"option"}}],[11,"hash","","",41,null],[11,"clone","","",41,{"inputs":[{"name":"float"}],"output":{"name":"float"}}],[11,"fmt","","",41,{"inputs":[{"name":"float"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Float","gfx::core::format","",null,null],[11,"get_channel_type","gfx_core::format","",42,{"inputs":[],"output":{"name":"channeltype"}}],[11,"cmp","","",42,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"ordering"}}],[11,"eq","","",42,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"option"}}],[11,"hash","","",42,null],[11,"clone","","",42,{"inputs":[{"name":"srgb"}],"output":{"name":"srgb"}}],[11,"fmt","","",42,{"inputs":[{"name":"srgb"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Srgb","gfx::core::format","",null,null],[11,"get_total_bits","gfx_core::format","Return the total number of bits for this format.",43,{"inputs":[{"name":"surfacetype"}],"output":{"name":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",43,{"inputs":[{"name":"surfacetype"}],"output":{"name":"u8"}}],[11,"cmp","","",43,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"ordering"}}],[11,"eq","","",43,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"option"}}],[11,"hash","","",43,null],[11,"clone","","",43,{"inputs":[{"name":"surfacetype"}],"output":{"name":"surfacetype"}}],[11,"fmt","","",43,{"inputs":[{"name":"surfacetype"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"SurfaceType","gfx::core::format","Type of the allocated texture surface. It is supposed to only\ncarry information about the number of bits per each channel.\nThe actual types are up to the views to decide and interpret.\nThe actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",43,null],[13,"R4_G4_B4_A4","","",43,null],[13,"R5_G5_B5_A1","","",43,null],[13,"R5_G6_B5","","",43,null],[13,"R8","","",43,null],[13,"R8_G8","","",43,null],[13,"R8_G8_B8_A8","","",43,null],[13,"R10_G10_B10_A2","","",43,null],[13,"R11_G11_B10","","",43,null],[13,"R16","","",43,null],[13,"R16_G16","","",43,null],[13,"R16_G16_B16","","",43,null],[13,"R16_G16_B16_A16","","",43,null],[13,"R32","","",43,null],[13,"R32_G32","","",43,null],[13,"R32_G32_B32","","",43,null],[13,"R32_G32_B32_A32","","",43,null],[13,"D16","","",43,null],[13,"D24","","",43,null],[13,"D24_S8","","",43,null],[13,"D32","","",43,null],[11,"get_surface_type","gfx_core::format","",44,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",44,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"ordering"}}],[11,"eq","","",44,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"option"}}],[11,"hash","","",44,null],[11,"clone","","",44,{"inputs":[{"name":"r4_g4"}],"output":{"name":"r4_g4"}}],[11,"fmt","","",44,{"inputs":[{"name":"r4_g4"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R4_G4","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",45,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",45,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"ordering"}}],[11,"eq","","",45,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"option"}}],[11,"hash","","",45,null],[11,"clone","","",45,{"inputs":[{"name":"r4_g4_b4_a4"}],"output":{"name":"r4_g4_b4_a4"}}],[11,"fmt","","",45,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R4_G4_B4_A4","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",46,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",46,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"ordering"}}],[11,"eq","","",46,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"option"}}],[11,"hash","","",46,null],[11,"clone","","",46,{"inputs":[{"name":"r5_g5_b5_a1"}],"output":{"name":"r5_g5_b5_a1"}}],[11,"fmt","","",46,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R5_G5_B5_A1","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",47,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",47,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"ordering"}}],[11,"eq","","",47,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"option"}}],[11,"hash","","",47,null],[11,"clone","","",47,{"inputs":[{"name":"r5_g6_b5"}],"output":{"name":"r5_g6_b5"}}],[11,"fmt","","",47,{"inputs":[{"name":"r5_g6_b5"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R5_G6_B5","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",48,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",48,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"ordering"}}],[11,"eq","","",48,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"option"}}],[11,"hash","","",48,null],[11,"clone","","",48,{"inputs":[{"name":"r8"}],"output":{"name":"r8"}}],[11,"fmt","","",48,{"inputs":[{"name":"r8"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R8","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",49,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",49,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"ordering"}}],[11,"eq","","",49,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"option"}}],[11,"hash","","",49,null],[11,"clone","","",49,{"inputs":[{"name":"r8_g8"}],"output":{"name":"r8_g8"}}],[11,"fmt","","",49,{"inputs":[{"name":"r8_g8"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R8_G8","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",50,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",50,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"ordering"}}],[11,"eq","","",50,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"option"}}],[11,"hash","","",50,null],[11,"clone","","",50,{"inputs":[{"name":"r8_g8_b8_a8"}],"output":{"name":"r8_g8_b8_a8"}}],[11,"fmt","","",50,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R8_G8_B8_A8","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",51,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",51,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"ordering"}}],[11,"eq","","",51,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"option"}}],[11,"hash","","",51,null],[11,"clone","","",51,{"inputs":[{"name":"r10_g10_b10_a2"}],"output":{"name":"r10_g10_b10_a2"}}],[11,"fmt","","",51,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R10_G10_B10_A2","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",52,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",52,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"ordering"}}],[11,"eq","","",52,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"option"}}],[11,"hash","","",52,null],[11,"clone","","",52,{"inputs":[{"name":"r11_g11_b10"}],"output":{"name":"r11_g11_b10"}}],[11,"fmt","","",52,{"inputs":[{"name":"r11_g11_b10"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R11_G11_B10","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",53,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",53,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"ordering"}}],[11,"eq","","",53,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"option"}}],[11,"hash","","",53,null],[11,"clone","","",53,{"inputs":[{"name":"r16"}],"output":{"name":"r16"}}],[11,"fmt","","",53,{"inputs":[{"name":"r16"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R16","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",54,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",54,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"ordering"}}],[11,"eq","","",54,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"option"}}],[11,"hash","","",54,null],[11,"clone","","",54,{"inputs":[{"name":"r16_g16"}],"output":{"name":"r16_g16"}}],[11,"fmt","","",54,{"inputs":[{"name":"r16_g16"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R16_G16","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",55,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",55,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"ordering"}}],[11,"eq","","",55,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"option"}}],[11,"hash","","",55,null],[11,"clone","","",55,{"inputs":[{"name":"r16_g16_b16"}],"output":{"name":"r16_g16_b16"}}],[11,"fmt","","",55,{"inputs":[{"name":"r16_g16_b16"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R16_G16_B16","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",56,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",56,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"ordering"}}],[11,"eq","","",56,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"option"}}],[11,"hash","","",56,null],[11,"clone","","",56,{"inputs":[{"name":"r16_g16_b16_a16"}],"output":{"name":"r16_g16_b16_a16"}}],[11,"fmt","","",56,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R16_G16_B16_A16","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",57,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",57,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"ordering"}}],[11,"eq","","",57,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"option"}}],[11,"hash","","",57,null],[11,"clone","","",57,{"inputs":[{"name":"r32"}],"output":{"name":"r32"}}],[11,"fmt","","",57,{"inputs":[{"name":"r32"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R32","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",58,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",58,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"ordering"}}],[11,"eq","","",58,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"option"}}],[11,"hash","","",58,null],[11,"clone","","",58,{"inputs":[{"name":"r32_g32"}],"output":{"name":"r32_g32"}}],[11,"fmt","","",58,{"inputs":[{"name":"r32_g32"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R32_G32","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",59,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",59,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"ordering"}}],[11,"eq","","",59,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"option"}}],[11,"hash","","",59,null],[11,"clone","","",59,{"inputs":[{"name":"r32_g32_b32"}],"output":{"name":"r32_g32_b32"}}],[11,"fmt","","",59,{"inputs":[{"name":"r32_g32_b32"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R32_G32_B32","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",60,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",60,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"ordering"}}],[11,"eq","","",60,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"option"}}],[11,"hash","","",60,null],[11,"clone","","",60,{"inputs":[{"name":"r32_g32_b32_a32"}],"output":{"name":"r32_g32_b32_a32"}}],[11,"fmt","","",60,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"R32_G32_B32_A32","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",61,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",61,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"ordering"}}],[11,"eq","","",61,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"option"}}],[11,"hash","","",61,null],[11,"clone","","",61,{"inputs":[{"name":"d16"}],"output":{"name":"d16"}}],[11,"fmt","","",61,{"inputs":[{"name":"d16"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"D16","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",62,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",62,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"ordering"}}],[11,"eq","","",62,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"option"}}],[11,"hash","","",62,null],[11,"clone","","",62,{"inputs":[{"name":"d24"}],"output":{"name":"d24"}}],[11,"fmt","","",62,{"inputs":[{"name":"d24"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"D24","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",63,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",63,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"ordering"}}],[11,"eq","","",63,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"option"}}],[11,"hash","","",63,null],[11,"clone","","",63,{"inputs":[{"name":"d24_s8"}],"output":{"name":"d24_s8"}}],[11,"fmt","","",63,{"inputs":[{"name":"d24_s8"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"D24_S8","gfx::core::format","",null,null],[11,"get_surface_type","gfx_core::format","",64,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"cmp","","",64,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"ordering"}}],[11,"eq","","",64,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"option"}}],[11,"hash","","",64,null],[11,"clone","","",64,{"inputs":[{"name":"d32"}],"output":{"name":"d32"}}],[11,"fmt","","",64,{"inputs":[{"name":"d32"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"D32","gfx::core::format","",null,null],[11,"fmt","gfx_core::format","",65,{"inputs":[{"name":"channelsource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",65,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"ordering"}}],[11,"eq","","",65,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"option"}}],[11,"hash","","",65,null],[11,"clone","","",65,{"inputs":[{"name":"channelsource"}],"output":{"name":"channelsource"}}],[4,"ChannelSource","gfx::core::format","Source channel in a swizzle configuration. Some may redirect onto\ndifferent physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",65,null],[13,"One","","",65,null],[13,"X","","",65,null],[13,"Y","","",65,null],[13,"Z","","",65,null],[13,"W","","",65,null],[11,"clone","gfx_core::format","",66,{"inputs":[{"name":"swizzle"}],"output":{"name":"swizzle"}}],[11,"fmt","","",66,{"inputs":[{"name":"swizzle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"new","","Create a new swizzle where each channel is unmapped.",66,{"inputs":[],"output":{"name":"swizzle"}}],[11,"cmp","","",66,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"ordering"}}],[11,"eq","","",66,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",66,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"option"}}],[11,"lt","","",66,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"le","","",66,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"gt","","",66,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ge","","",66,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[3,"Swizzle","gfx::core::format","Channel swizzle configuration for the resource views.\nNote: It&#39;s not currently mirrored at compile-time,\nthus providing less safety and convenience.",null,null],[12,"0","","",66,null],[12,"1","","",66,null],[12,"2","","",66,null],[12,"3","","",66,null],[11,"partial_cmp","gfx_core::format","",67,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"option"}}],[11,"lt","","",67,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",67,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",67,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",67,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"clone","","",67,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"fmt","","",67,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",67,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"eq","","",67,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[3,"Format","gfx::core::format","Complete run-time surface format.",null,null],[12,"0","","",67,null],[12,"1","","",67,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",68,null],[10,"get_surface_type","","Return the run-time value of the type.",68,{"inputs":[],"output":{"name":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel.\nFor example, normalized integers are visible as floats.",69,null],[10,"get_channel_type","","Return the run-time value of the type.",69,{"inputs":[],"output":{"name":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",70,null],[16,"Channel","","Associated channel type.",70,null],[16,"View","","Shader view type of this format.",70,null],[11,"get_format","","Return the run-time value of the type.",70,{"inputs":[],"output":{"name":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[11,"clone","gfx_core::format","",71,{"inputs":[{"name":"u8norm"}],"output":{"name":"u8norm"}}],[11,"fmt","","",71,{"inputs":[{"name":"u8norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cast2","","Convert a 2-element slice.",71,null],[11,"cast3","","Convert a 3-element slice.",71,null],[11,"cast4","","Convert a 4-element slice.",71,null],[11,"cast_slice","","Convert a generic slice by transmutation.",71,null],[11,"from","","",71,{"inputs":[{"name":"u8"}],"output":{"name":"u8norm"}}],[11,"cmp","","",71,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"ordering"}}],[11,"eq","","",71,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"hash","","",71,null],[3,"U8Norm","gfx::core::format","",null,null],[12,"0","","",71,null],[11,"hash","gfx_core::format","",72,null],[11,"clone","","",72,{"inputs":[{"name":"i8norm"}],"output":{"name":"i8norm"}}],[11,"fmt","","",72,{"inputs":[{"name":"i8norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cast2","","Convert a 2-element slice.",72,null],[11,"cast3","","Convert a 3-element slice.",72,null],[11,"cast4","","Convert a 4-element slice.",72,null],[11,"cast_slice","","Convert a generic slice by transmutation.",72,null],[11,"from","","",72,{"inputs":[{"name":"i8"}],"output":{"name":"i8norm"}}],[11,"cmp","","",72,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"ordering"}}],[11,"eq","","",72,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"option"}}],[11,"lt","","",72,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"le","","",72,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"gt","","",72,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ge","","",72,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[3,"I8Norm","gfx::core::format","",null,null],[12,"0","","",72,null],[11,"eq","gfx_core::format","",73,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",73,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"option"}}],[11,"lt","","",73,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"le","","",73,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"gt","","",73,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ge","","",73,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"clone","","",73,{"inputs":[{"name":"u16norm"}],"output":{"name":"u16norm"}}],[11,"fmt","","",73,{"inputs":[{"name":"u16norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cast2","","Convert a 2-element slice.",73,null],[11,"cast3","","Convert a 3-element slice.",73,null],[11,"cast4","","Convert a 4-element slice.",73,null],[11,"cast_slice","","Convert a generic slice by transmutation.",73,null],[11,"from","","",73,{"inputs":[{"name":"u16"}],"output":{"name":"u16norm"}}],[11,"cmp","","",73,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"ordering"}}],[3,"U16Norm","gfx::core::format","",null,null],[12,"0","","",73,null],[11,"cmp","gfx_core::format","",74,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"ordering"}}],[11,"eq","","",74,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"option"}}],[11,"lt","","",74,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"le","","",74,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"gt","","",74,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ge","","",74,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"clone","","",74,{"inputs":[{"name":"i16norm"}],"output":{"name":"i16norm"}}],[11,"fmt","","",74,{"inputs":[{"name":"i16norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cast2","","Convert a 2-element slice.",74,null],[11,"cast3","","Convert a 3-element slice.",74,null],[11,"cast4","","Convert a 4-element slice.",74,null],[11,"cast_slice","","Convert a generic slice by transmutation.",74,null],[11,"from","","",74,{"inputs":[{"name":"i16"}],"output":{"name":"i16norm"}}],[3,"I16Norm","gfx::core::format","",null,null],[12,"0","","",74,null],[11,"cast2","gfx_core::format","Convert a 2-element slice.",75,null],[11,"cast3","","Convert a 3-element slice.",75,null],[11,"cast4","","Convert a 4-element slice.",75,null],[11,"cast_slice","","Convert a generic slice by transmutation.",75,null],[11,"from","","",75,{"inputs":[{"name":"u16"}],"output":{"name":"f16"}}],[11,"cmp","","",75,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"ordering"}}],[11,"eq","","",75,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"option"}}],[11,"lt","","",75,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"le","","",75,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"gt","","",75,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ge","","",75,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"f16"}],"output":{"name":"f16"}}],[11,"fmt","","",75,{"inputs":[{"name":"f16"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"F16","gfx::core::format","",null,null],[12,"0","","",75,null],[6,"Vec1","","",null,null],[6,"Vec2","","",null,null],[6,"Vec3","","",null,null],[6,"Vec4","","",null,null],[6,"Rgba8","","",null,null],[6,"Srgba8","","",null,null],[6,"Rgb10a2F","","",null,null],[6,"Rgba16F","","",null,null],[6,"Rgba32F","","",null,null],[6,"Depth","","",null,null],[6,"DepthStencil","","",null,null],[6,"Depth32F","","",null,null],[0,"handle","gfx::core","Device resource handles",null,null],[11,"fmt","gfx_core::handle","",76,{"inputs":[{"name":"rawbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"eq","","",76,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"get_info","","Get raw buffer info",76,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"bufferinfo"}}],[11,"clone","","",76,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"rawbuffer"}}],[3,"RawBuffer","gfx::core::handle","Raw (untyped) Buffer Handle",null,null],[11,"get_info","gfx_core::handle","Get the associated information about the buffer",77,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferinfo"}}],[11,"len","","Get the number of elements in the buffer.",77,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"new","","",77,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"buffer"}}],[11,"raw","","",77,{"inputs":[{"name":"buffer"}],"output":{"name":"rawbuffer"}}],[11,"clone","","",77,{"inputs":[{"name":"buffer"}],"output":{"name":"buffer"}}],[11,"fmt","","",77,{"inputs":[{"name":"buffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"eq","","",77,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[3,"Buffer","gfx::core::handle","Type-safe buffer handle",null,null],[11,"clone","gfx_core::handle","",78,{"inputs":[{"name":"shader"}],"output":{"name":"shader"}}],[11,"fmt","","",78,{"inputs":[{"name":"shader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"eq","","",78,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[3,"Shader","gfx::core::handle","Shader Handle",null,null],[11,"get_info","gfx_core::handle","Get program info",79,{"inputs":[{"name":"program"}],"output":{"name":"programinfo"}}],[11,"clone","","",79,{"inputs":[{"name":"program"}],"output":{"name":"program"}}],[11,"fmt","","",79,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[3,"Program","gfx::core::handle","Program Handle",null,null],[11,"clone","gfx_core::handle","",80,{"inputs":[{"name":"rawpipelinestate"}],"output":{"name":"rawpipelinestate"}}],[11,"fmt","","",80,{"inputs":[{"name":"rawpipelinestate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"rawpipelinestate"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"rawpipelinestate"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[3,"RawPipelineState","gfx::core::handle","Raw Pipeline State Handle",null,null],[11,"clone","gfx_core::handle","",81,{"inputs":[{"name":"rawtexture"}],"output":{"name":"rawtexture"}}],[11,"fmt","","",81,{"inputs":[{"name":"rawtexture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"eq","","",81,{"inputs":[{"name":"rawtexture"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"rawtexture"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"get_info","","Get texture descriptor",81,{"inputs":[{"name":"rawtexture"}],"output":{"name":"descriptor"}}],[3,"RawTexture","gfx::core::handle","Raw texture object",null,null],[11,"eq","gfx_core::handle","",82,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"get_info","","Get texture descriptor",82,{"inputs":[{"name":"texture"}],"output":{"name":"descriptor"}}],[11,"new","","",82,{"inputs":[{"name":"rawtexture"}],"output":{"name":"texture"}}],[11,"raw","","",82,{"inputs":[{"name":"texture"}],"output":{"name":"rawtexture"}}],[11,"clone","","",82,{"inputs":[{"name":"texture"}],"output":{"name":"texture"}}],[11,"fmt","","",82,{"inputs":[{"name":"texture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[3,"Texture","gfx::core::handle","Typed texture object",null,null],[11,"clone","gfx_core::handle","",83,{"inputs":[{"name":"rawshaderresourceview"}],"output":{"name":"rawshaderresourceview"}}],[11,"fmt","","",83,{"inputs":[{"name":"rawshaderresourceview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"eq","","",83,{"inputs":[{"name":"rawshaderresourceview"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"rawshaderresourceview"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[3,"RawShaderResourceView","gfx::core::handle","Raw Shader Resource View Handle",null,null],[11,"hash","gfx_core::handle","",84,null],[11,"eq","","",84,{"inputs":[{"name":"shaderresourceview"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"shaderresourceview"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"new","","",84,{"inputs":[{"name":"rawshaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"raw","","",84,{"inputs":[{"name":"shaderresourceview"}],"output":{"name":"rawshaderresourceview"}}],[11,"clone","","",84,{"inputs":[{"name":"shaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"fmt","","",84,{"inputs":[{"name":"shaderresourceview"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ShaderResourceView","gfx::core::handle","Type-safe Shader Resource View Handle",null,null],[11,"clone","gfx_core::handle","",85,{"inputs":[{"name":"rawunorderedaccessview"}],"output":{"name":"rawunorderedaccessview"}}],[11,"fmt","","",85,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"eq","","",85,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[3,"RawUnorderedAccessView","gfx::core::handle","Raw Unordered Access View Handle",null,null],[11,"new","gfx_core::handle","",86,{"inputs":[{"name":"rawunorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"raw","","",86,{"inputs":[{"name":"unorderedaccessview"}],"output":{"name":"rawunorderedaccessview"}}],[11,"clone","","",86,{"inputs":[{"name":"unorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"fmt","","",86,{"inputs":[{"name":"unorderedaccessview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"unorderedaccessview"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"unorderedaccessview"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[3,"UnorderedAccessView","gfx::core::handle","Type-safe Unordered Access View Handle",null,null],[11,"get_dimensions","gfx_core::handle","Get target dimensions",87,null],[11,"clone","","",87,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"rawrendertargetview"}}],[11,"fmt","","",87,{"inputs":[{"name":"rawrendertargetview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"rawrendertargetview"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"rawrendertargetview"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[3,"RawRenderTargetView","gfx::core::handle","Raw RTV",null,null],[11,"get_dimensions","gfx_core::handle","Get target dimensions",88,null],[11,"clone","","",88,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"rawdepthstencilview"}}],[11,"fmt","","",88,{"inputs":[{"name":"rawdepthstencilview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"eq","","",88,{"inputs":[{"name":"rawdepthstencilview"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"rawdepthstencilview"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[3,"RawDepthStencilView","gfx::core::handle","Raw DSV",null,null],[11,"new","gfx_core::handle","",89,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"raw","","",89,{"inputs":[{"name":"rendertargetview"}],"output":{"name":"rawrendertargetview"}}],[11,"get_dimensions","","Get target dimensions",89,null],[11,"clone","","",89,{"inputs":[{"name":"rendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"fmt","","",89,{"inputs":[{"name":"rendertargetview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"rendertargetview"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"rendertargetview"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[3,"RenderTargetView","gfx::core::handle","Typed RTV",null,null],[11,"clone","gfx_core::handle","",90,{"inputs":[{"name":"depthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"fmt","","",90,{"inputs":[{"name":"depthstencilview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"depthstencilview"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"depthstencilview"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"new","","",90,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"raw","","",90,{"inputs":[{"name":"depthstencilview"}],"output":{"name":"rawdepthstencilview"}}],[11,"get_dimensions","","Get target dimensions",90,null],[3,"DepthStencilView","gfx::core::handle","Typed DSV",null,null],[11,"get_info","gfx_core::handle","Get sampler info",91,{"inputs":[{"name":"sampler"}],"output":{"name":"samplerinfo"}}],[11,"clone","","",91,{"inputs":[{"name":"sampler"}],"output":{"name":"sampler"}}],[11,"fmt","","",91,{"inputs":[{"name":"sampler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[3,"Sampler","gfx::core::handle","Sampler Handle",null,null],[11,"clone","gfx_core::handle","",92,{"inputs":[{"name":"fence"}],"output":{"name":"fence"}}],[11,"fmt","","",92,{"inputs":[{"name":"fence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"fence"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"fence"},{"name":"fence"}],"output":{"name":"bool"}}],[3,"Fence","gfx::core::handle","Fence Handle",null,null],[11,"new","gfx_core::handle","Create a new handle manager",93,{"inputs":[],"output":{"name":"manager"}}],[11,"clear","","Clear all references",93,null],[11,"extend","","Extend with all references of another handle manager",93,null],[11,"count","","Count the total number of referenced resources",93,{"inputs":[{"name":"manager"}],"output":{"name":"usize"}}],[11,"ref_buffer","","Reference a buffer",93,null],[11,"ref_shader","","Reference a shader",93,null],[11,"ref_program","","Reference a program",93,null],[11,"ref_pso","","Reference a pipeline state object",93,null],[11,"ref_texture","","Reference a texture",93,null],[11,"ref_srv","","Reference a shader resource view",93,null],[11,"ref_uav","","Reference an unordered access view",93,null],[11,"ref_rtv","","Reference an RTV",93,null],[11,"ref_dsv","","Reference a DSV",93,null],[11,"ref_sampler","","Reference a sampler",93,null],[11,"ref_fence","","Reference a fence",93,null],[11,"make_buffer","","",93,null],[11,"make_shader","","",93,null],[11,"make_program","","",93,null],[11,"make_pso","","",93,null],[11,"make_texture","","",93,null],[11,"make_buffer_srv","","",93,null],[11,"make_texture_srv","","",93,null],[11,"make_buffer_uav","","",93,null],[11,"make_texture_uav","","",93,null],[11,"make_rtv","","",93,null],[11,"make_dsv","","",93,null],[11,"make_sampler","","",93,null],[11,"make_fence","","",93,null],[11,"clean_with","","",93,null],[3,"Manager","gfx::core::handle","Stores reference-counted resources used in a command buffer.\nSeals actual resource names behind the interface, automatically\nreferencing them both by the Factory on resource creation\nand the Renderer during CommandBuffer population.",null,null],[8,"Producer","","A service trait to be used by the device implementation",null,null],[10,"make_buffer","","",94,null],[10,"make_shader","","",94,null],[10,"make_program","","",94,null],[10,"make_pso","","",94,null],[10,"make_texture","","",94,null],[10,"make_buffer_srv","","",94,null],[10,"make_texture_srv","","",94,null],[10,"make_buffer_uav","","",94,null],[10,"make_texture_uav","","",94,null],[10,"make_rtv","","",94,null],[10,"make_dsv","","",94,null],[10,"make_sampler","","",94,null],[10,"make_fence","","",94,null],[10,"clean_with","","Walk through all the handles, keep ones that are reference elsewhere\nand call the provided delete function (resource-specific) for others",94,null],[0,"mapping","gfx::core","Memory mapping",null,null],[8,"Raw","gfx::core::mapping","Unsafe operations for a buffer mapping",null,null],[10,"set","","Set the element at `index` to `val`. Not bounds-checked.",95,null],[10,"to_slice","","Returns a slice of the specified length.",95,null],[10,"to_mut_slice","","Returns a mutable slice of the specified length.",95,null],[11,"drop","gfx_core::mapping","",96,null],[11,"deref","","",96,null],[3,"Readable","gfx::core::mapping","A handle to a readable map, which can be sliced.",null,null],[11,"drop","gfx_core::mapping","",97,null],[11,"set","","Set a value in the buffer",97,null],[11,"to_mut_slice","","Returns a mutable slice of the specified length.",97,null],[3,"Writable","gfx::core::mapping","A handle to a writable map, which only allows setting elements.",null,null],[11,"drop","gfx_core::mapping","",98,null],[11,"deref_mut","","",98,null],[11,"deref","","",98,null],[3,"RW","gfx::core::mapping","A handle to a complete readable/writable map, which can be sliced both ways.",null,null],[8,"Builder","","A service trait with methods for mapping already implemented.\nTo be used by device back ends.",null,null],[16,"RawMapping","","",99,null],[10,"map_readable","","",99,null],[10,"map_writable","","",99,null],[10,"map_read_write","","",99,null],[0,"pso","gfx::core","Pipeline State Objects",null,null],[6,"BufferOffset","gfx::core::pso","",null,null],[11,"eq","gfx_core::pso","",100,{"inputs":[{"name":"creationerror"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",100,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[3,"CreationError","gfx::core::pso","Error types happening upon PSO creation on the device side.",null,null],[11,"from","gfx_core::pso","",101,{"inputs":[{"name":"blend"}],"output":{"name":"colorinfo"}}],[11,"from","","",101,{"inputs":[{"name":"colormask"}],"output":{"name":"colorinfo"}}],[11,"clone","","",101,{"inputs":[{"name":"colorinfo"}],"output":{"name":"colorinfo"}}],[11,"fmt","","",101,{"inputs":[{"name":"colorinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"eq","","",101,{"inputs":[{"name":"colorinfo"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"colorinfo"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[3,"ColorInfo","gfx::core::pso","Color output configuration of the PSO.",null,null],[12,"mask","","Color channel mask",101,null],[12,"color","","Optional color blending",101,null],[12,"alpha","","Optional alpha blending",101,null],[11,"hash","gfx_core::pso","",102,null],[11,"eq","","",102,{"inputs":[{"name":"depthstencilinfo"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"depthstencilinfo"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"from","","",102,null],[11,"from","","",102,{"inputs":[{"name":"stencil"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",102,{"inputs":[{"name":"depth"}],"output":{"name":"depthstencilinfo"}}],[11,"clone","","",102,{"inputs":[{"name":"depthstencilinfo"}],"output":{"name":"depthstencilinfo"}}],[11,"fmt","","",102,{"inputs":[{"name":"depthstencilinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"DepthStencilInfo","gfx::core::pso","Depth and stencil state of the PSO.",null,null],[12,"depth","","Optional depth test configuration",102,null],[12,"front","","Optional stencil test on the front faces",102,null],[12,"back","","Optional stencil test on the back faces",102,null],[6,"ElemOffset","","",null,null],[6,"ElemStride","","",null,null],[6,"InstanceRate","","",null,null],[11,"fmt","gfx_core::pso","",103,{"inputs":[{"name":"element"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"eq","","",103,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"element"}],"output":{"name":"element"}}],[3,"Element","gfx::core::pso","A struct element descriptor.",null,null],[12,"format","","Element format",103,null],[12,"offset","","Offset from the beginning of the container, in bytes",103,null],[12,"stride","","Total container size, in bytes",103,null],[6,"AttributeDesc","","",null,null],[6,"ColorTargetDesc","","",null,null],[6,"DepthStencilDesc","","",null,null],[11,"new","gfx_core::pso","Create a new empty PSO descriptor.",104,{"inputs":[{"name":"primitive"},{"name":"rasterizer"}],"output":{"name":"descriptor"}}],[11,"clone","","",104,{"inputs":[{"name":"descriptor"}],"output":{"name":"descriptor"}}],[11,"fmt","","",104,{"inputs":[{"name":"descriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"eq","","",104,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[3,"Descriptor","gfx::core::pso","All the information surrounding a shader program that is required\nfor PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",104,null],[12,"rasterizer","","Rasterizer setup",104,null],[12,"scissor","","Enable scissor test",104,null],[12,"attributes","","Vertex attributes",104,null],[12,"color_targets","","Render target views (RTV)",104,null],[12,"depth_stencil","","Depth stencil view (DSV)",104,null],[11,"new","gfx_core::pso","Create an empty set",105,{"inputs":[],"output":{"name":"vertexbufferset"}}],[11,"clone","","",105,{"inputs":[{"name":"vertexbufferset"}],"output":{"name":"vertexbufferset"}}],[11,"fmt","","",105,{"inputs":[{"name":"vertexbufferset"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"VertexBufferSet","gfx::core::pso","A complete set of vertex buffers to be used for vertex import in PSO.",null,null],[12,"0","","Array of buffer handles with offsets in them",105,null],[11,"clone","gfx_core::pso","",106,{"inputs":[{"name":"constantbufferparam"}],"output":{"name":"constantbufferparam"}}],[11,"fmt","","",106,{"inputs":[{"name":"constantbufferparam"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ConstantBufferParam","gfx::core::pso","A constant buffer run-time parameter for PSO.",null,null],[12,"0","","",106,null],[12,"1","","",106,null],[12,"2","","",106,null],[11,"clone","gfx_core::pso","",107,{"inputs":[{"name":"resourceviewparam"}],"output":{"name":"resourceviewparam"}}],[11,"fmt","","",107,{"inputs":[{"name":"resourceviewparam"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ResourceViewParam","gfx::core::pso","A shader resource view (SRV) run-time parameter for PSO.",null,null],[12,"0","","",107,null],[12,"1","","",107,null],[12,"2","","",107,null],[11,"clone","gfx_core::pso","",108,{"inputs":[{"name":"unorderedviewparam"}],"output":{"name":"unorderedviewparam"}}],[11,"fmt","","",108,{"inputs":[{"name":"unorderedviewparam"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"UnorderedViewParam","gfx::core::pso","An unordered access view (UAV) run-time parameter for PSO.",null,null],[12,"0","","",108,null],[12,"1","","",108,null],[12,"2","","",108,null],[11,"clone","gfx_core::pso","",109,{"inputs":[{"name":"samplerparam"}],"output":{"name":"samplerparam"}}],[11,"fmt","","",109,{"inputs":[{"name":"samplerparam"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SamplerParam","gfx::core::pso","A sampler run-time parameter for PSO.",null,null],[12,"0","","",109,null],[12,"1","","",109,null],[12,"2","","",109,null],[11,"new","gfx_core::pso","Create an empty set",110,{"inputs":[],"output":{"name":"pixeltargetset"}}],[11,"add_color","","Add a color view to the specified slot",110,null],[11,"add_depth_stencil","","Add a depth or stencil view to the specified slot",110,null],[11,"clone","","",110,{"inputs":[{"name":"pixeltargetset"}],"output":{"name":"pixeltargetset"}}],[11,"fmt","","",110,{"inputs":[{"name":"pixeltargetset"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"PixelTargetSet","gfx::core::pso","A complete set of render targets to be used for pixel export in PSO.",null,null],[12,"colors","","Array of color target views",110,null],[12,"depth","","Depth target view",110,null],[12,"stencil","","Stencil target view",110,null],[12,"size","","Rendering dimensions",110,null],[0,"shade","gfx::core","Shader handling.",null,null],[6,"Dimension","gfx::core::shade","",null,null],[11,"clone","gfx_core::shade","",111,{"inputs":[{"name":"isarray"}],"output":{"name":"isarray"}}],[11,"eq","","",111,{"inputs":[{"name":"isarray"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"fmt","","",111,{"inputs":[{"name":"isarray"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"IsArray","gfx::core::shade","Whether the sampler samples an array texture.",null,null],[13,"Array","","",111,null],[13,"NoArray","","",111,null],[11,"clone","gfx_core::shade","",112,{"inputs":[{"name":"iscomparison"}],"output":{"name":"iscomparison"}}],[11,"eq","","",112,{"inputs":[{"name":"iscomparison"},{"name":"iscomparison"}],"output":{"name":"bool"}}],[11,"fmt","","",112,{"inputs":[{"name":"iscomparison"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"IsComparison","gfx::core::shade","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",112,null],[13,"NoCompare","","",112,null],[11,"clone","gfx_core::shade","",113,{"inputs":[{"name":"ismultisample"}],"output":{"name":"ismultisample"}}],[11,"eq","","",113,{"inputs":[{"name":"ismultisample"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"fmt","","",113,{"inputs":[{"name":"ismultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"IsMultiSample","gfx::core::shade","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",113,null],[13,"NoMultiSample","","",113,null],[11,"clone","gfx_core::shade","",114,{"inputs":[{"name":"isrect"}],"output":{"name":"isrect"}}],[11,"eq","","",114,{"inputs":[{"name":"isrect"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"fmt","","",114,{"inputs":[{"name":"isrect"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"IsRect","gfx::core::shade","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",114,null],[13,"NoRect","","",114,null],[11,"clone","gfx_core::shade","",115,{"inputs":[{"name":"matrixformat"}],"output":{"name":"matrixformat"}}],[11,"eq","","",115,{"inputs":[{"name":"matrixformat"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"fmt","","",115,{"inputs":[{"name":"matrixformat"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"MatrixFormat","gfx::core::shade","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",115,null],[13,"RowMajor","","",115,null],[11,"can_sample","gfx_core::shade","Check if this texture can be used with a sampler.",116,{"inputs":[{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"texturetype"}],"output":{"name":"texturetype"}}],[11,"eq","","",116,{"inputs":[{"name":"texturetype"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"texturetype"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"fmt","","",116,{"inputs":[{"name":"texturetype"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"TextureType","gfx::core::shade","A type of the texture variable.\nThis has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",116,null],[13,"D1","","Sample from a 1D texture",116,null],[13,"D2","","Sample from a 2D texture",116,null],[13,"D3","","Sample from a 3D texture",116,null],[13,"Cube","","Sample from a cubemap.",116,null],[11,"clone","gfx_core::shade","",117,{"inputs":[{"name":"samplertype"}],"output":{"name":"samplertype"}}],[11,"eq","","",117,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"fmt","","",117,{"inputs":[{"name":"samplertype"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SamplerType","gfx::core::shade","A type of the sampler variable.",null,null],[12,"0","","",117,null],[12,"1","","",117,null],[11,"clone","gfx_core::shade","",118,{"inputs":[{"name":"basetype"}],"output":{"name":"basetype"}}],[11,"eq","","",118,{"inputs":[{"name":"basetype"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"fmt","","",118,{"inputs":[{"name":"basetype"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"BaseType","gfx::core::shade","Base type of this shader parameter.",null,null],[13,"I32","","",118,null],[13,"U32","","",118,null],[13,"F32","","",118,null],[13,"F64","","",118,null],[13,"Bool","","",118,null],[11,"clone","gfx_core::shade","",119,{"inputs":[{"name":"containertype"}],"output":{"name":"containertype"}}],[11,"eq","","",119,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"fmt","","",119,{"inputs":[{"name":"containertype"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"ContainerType","gfx::core::shade","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",119,null],[13,"Vector","","A vector with `Dimension` components.",119,null],[13,"Matrix","","A matrix.",119,null],[11,"hash","gfx_core::shade","",120,null],[11,"eq","","",120,{"inputs":[{"name":"stage"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"stage"}],"output":{"name":"stage"}}],[11,"fmt","","",120,{"inputs":[{"name":"stage"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Stage","gfx::core::shade","Which program stage this shader represents.",null,null],[13,"Vertex","","",120,null],[13,"Geometry","","",120,null],[13,"Pixel","","",120,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[6,"Location","","",null,null],[11,"fmt","gfx_core::shade","",121,{"inputs":[{"name":"uniformvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"uniformvalue"}],"output":{"name":"uniformvalue"}}],[4,"UniformValue","gfx::core::shade","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",121,null],[13,"F32","","",121,null],[13,"I32Vector2","","",121,null],[13,"I32Vector3","","",121,null],[13,"I32Vector4","","",121,null],[13,"F32Vector2","","",121,null],[13,"F32Vector3","","",121,null],[13,"F32Vector4","","",121,null],[13,"F32Matrix2","","",121,null],[13,"F32Matrix3","","",121,null],[13,"F32Matrix4","","",121,null],[6,"ConstFormat","","",null,null],[8,"BaseTyped","","A trait that statically links simple data types to\nbase types of the shader constants.",null,null],[10,"get_base_type","","",122,{"inputs":[],"output":{"name":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to\nconstant formats.",null,null],[10,"get_format","","Get the associated constant format.",123,null],[11,"hash","gfx_core::shade","",124,null],[11,"eq","","",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[11,"partial_cmp","","",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"option"}}],[11,"lt","","",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"cmp","","",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"bitor","","Returns the union of the two sets of flags.",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"empty","","Returns an empty set of flags.",124,{"inputs":[],"output":{"name":"usage"}}],[11,"all","","Returns the set containing all flags.",124,{"inputs":[],"output":{"name":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",124,{"inputs":[{"name":"usage"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",124,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",124,{"inputs":[{"name":"u8"}],"output":{"name":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",124,{"inputs":[{"name":"usage"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",124,{"inputs":[{"name":"usage"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",124,null],[11,"remove","","Removes the specified flags in-place.",124,null],[11,"toggle","","Toggles the specified flags in-place.",124,null],[11,"fmt","","",124,{"inputs":[{"name":"usage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","Returns the set difference of the two sets of flags.",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",124,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"from","","",124,{"inputs":[{"name":"stage"}],"output":{"name":"usage"}}],[11,"from_iter","","",124,{"inputs":[{"name":"t"}],"output":{"name":"usage"}}],[11,"not","","Returns the complement of this set of flags.",124,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[3,"Usage","gfx::core::shade","Parameter usage flags.",null,null],[17,"VERTEX","","Used by the vertex shader",null,null],[17,"GEOMETRY","","Used by the geometry shader",null,null],[17,"PIXEL","","Used by the pixel shader",null,null],[11,"clone","gfx_core::shade","",125,{"inputs":[{"name":"attributevar"}],"output":{"name":"attributevar"}}],[11,"eq","","",125,{"inputs":[{"name":"attributevar"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"attributevar"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"fmt","","",125,{"inputs":[{"name":"attributevar"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"AttributeVar","gfx::core::shade","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",125,null],[12,"slot","","Slot of the vertex attribute.",125,null],[12,"base_type","","Type that this attribute is composed of.",125,null],[12,"container","","&quot;Scalarness&quot; of this attribute.",125,null],[11,"clone","gfx_core::shade","",126,{"inputs":[{"name":"constvar"}],"output":{"name":"constvar"}}],[11,"eq","","",126,{"inputs":[{"name":"constvar"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"constvar"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"fmt","","",126,{"inputs":[{"name":"constvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored\nin this variable.",126,{"inputs":[{"name":"constvar"},{"name":"uniformvalue"}],"output":{"name":"result"}}],[3,"ConstVar","gfx::core::shade","A constant in the shader - a bit of data that doesn&#39;t vary",null,null],[12,"name","","Name of this constant.",126,null],[12,"location","","Location of this constant in the program.",126,null],[12,"count","","Number of elements this constant represents.",126,null],[12,"base_type","","Type that this constant is composed of",126,null],[12,"container","","&quot;Scalarness&quot; of this constant.",126,null],[11,"clone","gfx_core::shade","",127,{"inputs":[{"name":"constantbuffervar"}],"output":{"name":"constantbuffervar"}}],[11,"eq","","",127,{"inputs":[{"name":"constantbuffervar"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"constantbuffervar"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"fmt","","",127,{"inputs":[{"name":"constantbuffervar"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ConstantBufferVar","gfx::core::shade","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",127,null],[12,"slot","","Slot of the constant buffer.",127,null],[12,"size","","Size (in bytes) of this buffer&#39;s data.",127,null],[12,"usage","","What program stage this buffer is used in.",127,null],[11,"clone","gfx_core::shade","",128,{"inputs":[{"name":"texturevar"}],"output":{"name":"texturevar"}}],[11,"eq","","",128,{"inputs":[{"name":"texturevar"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"texturevar"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"fmt","","",128,{"inputs":[{"name":"texturevar"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"TextureVar","gfx::core::shade","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",128,null],[12,"slot","","Slot of this texture variable.",128,null],[12,"base_type","","Base type for the texture.",128,null],[12,"ty","","Type of this texture.",128,null],[12,"usage","","What program stage this texture is used in.",128,null],[11,"clone","gfx_core::shade","",129,{"inputs":[{"name":"unorderedvar"}],"output":{"name":"unorderedvar"}}],[11,"eq","","",129,{"inputs":[{"name":"unorderedvar"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"unorderedvar"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"fmt","","",129,{"inputs":[{"name":"unorderedvar"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"UnorderedVar","gfx::core::shade","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",129,null],[12,"slot","","Slot of this unordered variable.",129,null],[12,"usage","","What program stage this UAV is used in.",129,null],[11,"clone","gfx_core::shade","",130,{"inputs":[{"name":"samplervar"}],"output":{"name":"samplervar"}}],[11,"eq","","",130,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"fmt","","",130,{"inputs":[{"name":"samplervar"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SamplerVar","gfx::core::shade","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",130,null],[12,"slot","","Slot of this sampler variable.",130,null],[12,"ty","","Type of this sampler.",130,null],[12,"usage","","What program stage this texture is used in.",130,null],[11,"eq","gfx_core::shade","",131,{"inputs":[{"name":"outputvar"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"outputvar"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"fmt","","",131,{"inputs":[{"name":"outputvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"outputvar"}],"output":{"name":"outputvar"}}],[3,"OutputVar","gfx::core::shade","Target output variable.",null,null],[12,"name","","Name of this output variable.",131,null],[12,"slot","","Output color target index.",131,null],[12,"base_type","","Type of the output component.",131,null],[12,"container","","&quot;Scalarness&quot; of this output.",131,null],[11,"clone","gfx_core::shade","",132,{"inputs":[{"name":"programinfo"}],"output":{"name":"programinfo"}}],[11,"eq","","",132,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",132,{"inputs":[{"name":"programinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ProgramInfo","gfx::core::shade","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",132,null],[12,"globals","","Global constants in the program",132,null],[12,"constant_buffers","","Constant buffers in the program",132,null],[12,"textures","","Textures in the program",132,null],[12,"unordereds","","Unordered access resources in the program",132,null],[12,"samplers","","Samplers in the program",132,null],[12,"outputs","","Output targets in the program",132,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are\nunable to actually get the output variable info",132,null],[11,"fmt","gfx_core::shade","",133,{"inputs":[{"name":"compatibilityerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"compatibilityerror"}],"output":{"name":"compatibilityerror"}}],[4,"CompatibilityError","gfx::core::shade","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",133,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",133,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4,\netc)",133,null],[11,"clone","gfx_core::shade","",134,{"inputs":[{"name":"createshadererror"}],"output":{"name":"createshadererror"}}],[11,"eq","","",134,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"fmt","","",134,{"inputs":[{"name":"createshadererror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"CreateShaderError","gfx::core::shade","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",134,null],[13,"StageNotSupported","","The device does not support the shader stage.",134,null],[13,"CompilationFailed","","The shader failed to compile.",134,null],[6,"CreateProgramError","","",null,null],[0,"tex","gfx::core","Texture creation and modification.",null,null],[11,"clone","gfx_core::tex","",135,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",135,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",135,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[4,"Error","gfx::core::tex","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",135,null],[13,"Kind","","The kind doesn&#39;t support a particular operation.",135,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",135,null],[13,"Size","","Unsupported size in one of the dimensions.",135,null],[13,"Data","","The given data has a different size than the target texture slice.",135,null],[6,"Size","","",null,null],[6,"Bits","","",null,null],[6,"NumSamples","","",null,null],[6,"NumFragments","","",null,null],[6,"Dimensions","","",null,null],[11,"eq","gfx_core::tex","",136,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",136,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"option"}}],[11,"lt","","",136,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"le","","",136,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"gt","","",136,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ge","","",136,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"hash","","",136,null],[11,"clone","","",136,{"inputs":[{"name":"aamode"}],"output":{"name":"aamode"}}],[11,"fmt","","",136,{"inputs":[{"name":"aamode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_num_fragments","","Return the number of actual data fragments stored per texel.",136,{"inputs":[{"name":"aamode"}],"output":{"name":"u8"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",136,{"inputs":[{"name":"aamode"}],"output":{"name":"bool"}}],[11,"from","","",136,{"inputs":[{"name":"u8"}],"output":{"name":"aamode"}}],[11,"cmp","","",136,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"ordering"}}],[4,"AaMode","gfx::core::tex","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",136,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",136,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",136,null],[11,"hash","gfx_core::tex","",137,null],[11,"clone","","",137,{"inputs":[{"name":"filtermethod"}],"output":{"name":"filtermethod"}}],[11,"fmt","","",137,{"inputs":[{"name":"filtermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",137,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"option"}}],[11,"lt","","",137,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"le","","",137,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"gt","","",137,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ge","","",137,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"cmp","","",137,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"ordering"}}],[11,"eq","","",137,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[4,"FilterMethod","gfx::core::tex","How to [filter](https://en.wikipedia.org/wiki/Texture_filtering) the\ntexture when sampling. They correspond to increasing levels of quality,\nbut also cost. They &quot;layer&quot; on top of each other: it is not possible to\nhave bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",137,null],[13,"Mipmap","","Add simple mipmapping.",137,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase\nquality.",137,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",137,null],[13,"Anisotropic","","Anisotropic filtering with a given &quot;max&quot;, must be between 1 and 16,\ninclusive.",137,null],[11,"eq","gfx_core::tex","",138,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"option"}}],[11,"hash","","",138,null],[11,"clone","","",138,{"inputs":[{"name":"cubeface"}],"output":{"name":"cubeface"}}],[11,"fmt","","",138,{"inputs":[{"name":"cubeface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",138,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"ordering"}}],[4,"CubeFace","gfx::core::tex","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",138,null],[13,"NegX","","",138,null],[13,"PosY","","",138,null],[13,"NegY","","",138,null],[13,"PosZ","","",138,null],[13,"NegZ","","",138,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[11,"get_dimensions","gfx_core::tex","Get texture dimensions, with 0 values where not applicable.",139,null],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",139,null],[11,"get_num_levels","","Count the number of mipmap levels.",139,{"inputs":[{"name":"kind"}],"output":{"name":"u8"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",139,{"inputs":[{"name":"kind"}],"output":{"name":"option"}}],[11,"is_cube","","Check if it&#39;s one of the cube kinds.",139,{"inputs":[{"name":"kind"}],"output":{"name":"bool"}}],[11,"cmp","","",139,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"ordering"}}],[11,"eq","","",139,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"option"}}],[11,"lt","","",139,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"le","","",139,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"gt","","",139,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ge","","",139,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"hash","","",139,null],[11,"clone","","",139,{"inputs":[{"name":"kind"}],"output":{"name":"kind"}}],[11,"fmt","","",139,{"inputs":[{"name":"kind"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Kind","gfx::core::tex","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",139,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels\nin a different row are not sampled.",139,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",139,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in\na different depth level are not sampled.",139,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",139,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",139,null],[13,"CubeArray","","An array of Cube textures.",139,null],[11,"get_texel_count","gfx_core::tex","Get the total number of texels.",140,{"inputs":[{"name":"imageinfocommon"}],"output":{"name":"usize"}}],[11,"convert","","Convert into a differently typed format.",140,{"inputs":[{"name":"imageinfocommon"},{"name":"t"}],"output":{"name":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",140,null],[11,"cmp","","",140,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"ordering"}}],[11,"eq","","",140,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"option"}}],[11,"lt","","",140,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"le","","",140,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"gt","","",140,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ge","","",140,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"hash","","",140,null],[11,"clone","","",140,{"inputs":[{"name":"imageinfocommon"}],"output":{"name":"imageinfocommon"}}],[11,"fmt","","",140,{"inputs":[{"name":"imageinfocommon"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ImageInfoCommon","gfx::core::tex","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",140,null],[12,"yoffset","","",140,null],[12,"zoffset","","",140,null],[12,"width","","",140,null],[12,"height","","",140,null],[12,"depth","","",140,null],[12,"format","","Format of each texel.",140,null],[12,"mipmap","","Which mipmap to select.",140,null],[6,"RawImageInfo","","",null,null],[6,"NewImageInfo","","",null,null],[11,"fmt","gfx_core::tex","",141,{"inputs":[{"name":"wrapmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"cmp","","",141,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",141,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"option"}}],[11,"hash","","",141,null],[11,"clone","","",141,{"inputs":[{"name":"wrapmode"}],"output":{"name":"wrapmode"}}],[4,"WrapMode","gfx::core::tex","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is\nthe default.",141,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",141,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",141,null],[13,"Border","","Use border color.",141,null],[11,"into","gfx_core::tex","",142,{"inputs":[{"name":"lod"}],"output":{"name":"f32"}}],[11,"clone","","",142,{"inputs":[{"name":"lod"}],"output":{"name":"lod"}}],[11,"from","","",142,{"inputs":[{"name":"f32"}],"output":{"name":"lod"}}],[11,"hash","","",142,null],[11,"fmt","","",142,{"inputs":[{"name":"lod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"option"}}],[11,"lt","","",142,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"le","","",142,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"gt","","",142,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ge","","",142,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[3,"Lod","gfx::core::tex","A wrapper for the LOD level of a texture.",null,null],[11,"partial_cmp","gfx_core::tex","",143,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"option"}}],[11,"lt","","",143,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"le","","",143,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"gt","","",143,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ge","","",143,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"hash","","",143,null],[11,"eq","","",143,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"fmt","","",143,{"inputs":[{"name":"packedcolor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",143,null],[11,"from","","",143,null],[11,"clone","","",143,{"inputs":[{"name":"packedcolor"}],"output":{"name":"packedcolor"}}],[3,"PackedColor","gfx::core::tex","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",143,null],[11,"new","gfx_core::tex","Create a new sampler description with a given filter method and wrapping mode, using no LOD\nmodifications.",144,{"inputs":[{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[11,"clone","","",144,{"inputs":[{"name":"samplerinfo"}],"output":{"name":"samplerinfo"}}],[11,"fmt","","",144,{"inputs":[{"name":"samplerinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",144,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",144,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"option"}}],[11,"lt","","",144,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"le","","",144,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"gt","","",144,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ge","","",144,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"hash","","",144,null],[3,"SamplerInfo","gfx::core::tex","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",144,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL\nspeak).",144,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For\nexample, if it would select mipmap level 2 and lod_bias is 1, it will\nuse mipmap level 3.",144,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",144,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",144,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",144,null],[11,"cmp","gfx_core::tex","",145,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"ordering"}}],[11,"eq","","",145,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"fmt","","",145,{"inputs":[{"name":"descriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",145,null],[11,"partial_cmp","","",145,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"option"}}],[11,"lt","","",145,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"le","","",145,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"gt","","",145,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ge","","",145,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"descriptor"}],"output":{"name":"descriptor"}}],[11,"to_image_info","","Get image info for a given mip.",145,{"inputs":[{"name":"descriptor"},{"name":"u8"}],"output":{"name":"imageinfocommon"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",145,{"inputs":[{"name":"descriptor"},{"name":"channeltype"},{"name":"u8"}],"output":{"name":"imageinfocommon"}}],[3,"Descriptor","gfx::core::tex","Texture storage descriptor.",null,null],[12,"kind","","",145,null],[12,"levels","","",145,null],[12,"format","","",145,null],[12,"bind","","",145,null],[12,"usage","","",145,null],[11,"eq","gfx_core::tex","",146,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"cmp","","",146,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"ordering"}}],[11,"hash","","",146,null],[11,"partial_cmp","","",146,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"option"}}],[11,"lt","","",146,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"le","","",146,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"gt","","",146,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ge","","",146,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"fmt","","",146,{"inputs":[{"name":"resourcedesc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"resourcedesc"}],"output":{"name":"resourcedesc"}}],[3,"ResourceDesc","gfx::core::tex","Texture resource view descriptor.",null,null],[12,"channel","","",146,null],[12,"min","","",146,null],[12,"max","","",146,null],[12,"swizzle","","",146,null],[11,"cmp","gfx_core::tex","",147,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"ordering"}}],[11,"eq","","",147,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",147,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"option"}}],[11,"lt","","",147,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"le","","",147,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"gt","","",147,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ge","","",147,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"hash","","",147,null],[11,"clone","","",147,{"inputs":[{"name":"renderdesc"}],"output":{"name":"renderdesc"}}],[11,"fmt","","",147,{"inputs":[{"name":"renderdesc"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RenderDesc","gfx::core::tex","Texture render view descriptor.",null,null],[12,"channel","","",147,null],[12,"level","","",147,null],[12,"layer","","",147,null],[11,"bitxor","gfx_core::tex","Returns the left flags, but with all the right flags toggled.",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitor","","Returns the union of the two sets of flags.",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"clone","","",148,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"from_iter","","",148,{"inputs":[{"name":"t"}],"output":{"name":"depthstencilflags"}}],[11,"fmt","","",148,{"inputs":[{"name":"depthstencilflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"not","","Returns the complement of this set of flags.",148,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"empty","","Returns an empty set of flags.",148,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",148,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",148,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",148,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",148,{"inputs":[{"name":"u8"}],"output":{"name":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",148,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",148,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",148,null],[11,"remove","","Removes the specified flags in-place.",148,null],[11,"toggle","","Toggles the specified flags in-place.",148,null],[11,"bitand","","Returns the intersection between the two sets of flags.",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"eq","","",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"cmp","","",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"option"}}],[11,"lt","","",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"le","","",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"gt","","",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ge","","",148,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"hash","","",148,null],[3,"DepthStencilFlags","gfx::core::tex","Depth-stencil read-only flags",null,null],[17,"RO_DEPTH","","Depth is read-only in the view.",null,null],[17,"RO_STENCIL","","Stencil is read-only in the view.",null,null],[17,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",null,null],[11,"clone","gfx_core::tex","",149,{"inputs":[{"name":"depthstencildesc"}],"output":{"name":"depthstencildesc"}}],[11,"fmt","","",149,{"inputs":[{"name":"depthstencildesc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",149,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"ordering"}}],[11,"from","","",149,{"inputs":[{"name":"renderdesc"}],"output":{"name":"depthstencildesc"}}],[11,"partial_cmp","","",149,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"option"}}],[11,"lt","","",149,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"le","","",149,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"gt","","",149,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ge","","",149,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"hash","","",149,null],[11,"eq","","",149,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[3,"DepthStencilDesc","gfx::core::tex","Texture depth-stencil view descriptor.",null,null],[12,"level","","",149,null],[12,"layer","","",149,null],[12,"flags","","",149,null],[6,"Layer","","",null,null],[6,"Level","","",null,null],[17,"MAX_VERTEX_ATTRIBUTES","gfx::core","Compile-time maximum number of vertex attributes.",null,null],[17,"MAX_COLOR_TARGETS","","Compile-time maximum number of color targets.",null,null],[17,"MAX_CONSTANT_BUFFERS","","Compile-time maximum number of constant buffers.",null,null],[17,"MAX_RESOURCE_VIEWS","","Compile-time maximum number of shader resource views (SRV).",null,null],[17,"MAX_UNORDERED_VIEWS","","Compile-time maximum number of unordered access views (UAV).",null,null],[17,"MAX_SAMPLERS","","Compile-time maximum number of samplers.",null,null],[6,"VertexCount","","",null,null],[6,"InstanceCount","","",null,null],[6,"AttributeSlot","","",null,null],[6,"ConstantBufferSlot","","",null,null],[6,"ResourceViewSlot","","",null,null],[6,"UnorderedViewSlot","","",null,null],[6,"ColorSlot","","",null,null],[6,"SamplerSlot","","",null,null],[11,"reference","gfx_core","",150,null],[3,"VertexShader","gfx::core","",null,null],[11,"reference","gfx_core","",151,null],[3,"HullShader","gfx::core","",null,null],[11,"reference","gfx_core","",152,null],[3,"DomainShader","gfx::core","",null,null],[11,"reference","gfx_core","",153,null],[3,"GeometryShader","gfx::core","",null,null],[11,"reference","gfx_core","",154,null],[3,"PixelShader","gfx::core","",null,null],[11,"get_usage","gfx_core","Return the aggregated stage usage for the set.",155,{"inputs":[{"name":"shaderset"}],"output":{"name":"usage"}}],[4,"ShaderSet","gfx::core","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",155,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",155,null],[11,"clone","gfx_core","",156,{"inputs":[{"name":"capabilities"}],"output":{"name":"capabilities"}}],[11,"fmt","","",156,{"inputs":[{"name":"capabilities"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Capabilities","gfx::core","Features that the device supports.",null,null],[12,"max_vertex_count","","",156,null],[12,"max_index_count","","",156,null],[12,"max_texture_size","","",156,null],[12,"instance_base_supported","","",156,null],[12,"instance_call_supported","","",156,null],[12,"instance_rate_supported","","",156,null],[12,"vertex_base_supported","","",156,null],[12,"srgb_color_supported","","",156,null],[12,"constant_buffer_supported","","",156,null],[12,"unordered_access_view_supported","","",156,null],[12,"separate_blending_slots_supported","","",156,null],[11,"clone","gfx_core","",157,{"inputs":[{"name":"primitive"}],"output":{"name":"primitive"}}],[11,"hash","","",157,null],[11,"fmt","","",157,{"inputs":[{"name":"primitive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"primitive"},{"name":"primitive"}],"output":{"name":"bool"}}],[4,"Primitive","gfx::core","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",157,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d,\ne]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",157,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a &quot;path&quot; of\nlines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line\nline, and `b` and `c` form a line.",157,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`,\n`a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",157,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c,\nd]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",157,null],[11,"partial_cmp","gfx_core","",158,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"option"}}],[11,"eq","","",158,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"hash","","",158,null],[11,"clone","","",158,{"inputs":[{"name":"indextype"}],"output":{"name":"indextype"}}],[11,"fmt","","",158,{"inputs":[{"name":"indextype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",158,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"ordering"}}],[4,"IndexType","gfx::core","A type of each index value in the mesh&#39;s index buffer",null,null],[13,"U8","","",158,null],[13,"U16","","",158,null],[13,"U32","","",158,null],[8,"Resources","","Resources pertaining to a specific API.",null,null],[16,"Buffer","","",159,null],[16,"Shader","","",159,null],[16,"Program","","",159,null],[16,"PipelineStateObject","","",159,null],[16,"Texture","","",159,null],[16,"ShaderResourceView","","",159,null],[16,"UnorderedAccessView","","",159,null],[16,"RenderTargetView","","",159,null],[16,"DepthStencilView","","",159,null],[16,"Sampler","","",159,null],[16,"Fence","","",159,null],[8,"Device","","An interface for performing draw calls using a specific graphics API",null,null],[16,"Resources","","Associated resources type.",160,null],[16,"CommandBuffer","","Associated command buffer type.",160,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation.",160,{"inputs":[{"name":"device"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",160,null],[10,"submit","","Submit a command buffer for execution.",160,null],[10,"cleanup","","Cleanup unused resources, to be called between frames.",160,null],[8,"DeviceFence","","Extension to the Device that allows for submitting of commands\naround a fence",null,null],[10,"fenced_submit","","Submit a command buffer to the stream creating a fence\nthe fence is signaled after the GPU has executed all commands\nin the buffer",161,null],[10,"fence_wait","","Wait on the supplied fence stalling the current thread until\nthe fence is satisfied",161,null],[0,"state","","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx::core::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","",null,null],[6,"OffsetSlope","","",null,null],[6,"OffsetUnits","","",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face with a given cull face mode.",3,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",5,null],[12,"method","","How to rasterize this primitive.",5,null],[12,"offset","","Any polygon offset to apply.",5,null],[12,"samples","","Multi-sampling mode.",5,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",6,null],[13,"Less","","`x &lt; y`",6,null],[13,"LessEqual","","`x &lt;= y`",6,null],[13,"Equal","","`x == y`",6,null],[13,"GreaterEqual","","`x &gt;= y`",6,null],[13,"Greater","","`x &gt; y`",6,null],[13,"NotEqual","","`x != y`",6,null],[13,"Always","","`true`",6,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",7,null],[13,"Zero","","Set the value in the stencil buffer to zero.",7,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",7,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",7,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",7,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",7,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",7,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",7,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",8,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",8,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",8,null],[12,"op_fail","","What operation to do if the stencil test fails.",8,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",8,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",8,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",9,null],[12,"back","","",9,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",10,null],[12,"write","","Specify whether to write to the depth buffer or not.",10,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",11,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",11,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",11,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",11,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",11,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",12,null],[13,"SourceAlpha","","",12,null],[13,"DestColor","","",12,null],[13,"DestAlpha","","",12,null],[13,"ConstColor","","",12,null],[13,"ConstAlpha","","",12,null],[4,"Factor","","",null,null],[13,"Zero","","",13,null],[13,"One","","",13,null],[13,"SourceAlphaSaturated","","",13,null],[13,"ZeroPlus","","",13,null],[13,"OneMinus","","",13,null],[3,"BlendChannel","","",null,null],[12,"equation","","",14,null],[12,"source","","",14,null],[12,"destination","","",14,null],[3,"Blend","","",null,null],[12,"color","","",15,null],[12,"alpha","","",15,null],[3,"ColorMask","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",17,null],[12,"blend","","Optional blending.",17,null],[3,"RefValues","","The complete set of the rasterizer reference values.\nSwitching these doesn&#39;t roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",18,null],[12,"blend","","Constant blend color.",18,null],[0,"target","gfx::core","Render target specification.",null,null],[6,"Layer","gfx::core::target","",null,null],[6,"Level","","",null,null],[6,"Depth","","",null,null],[6,"Stencil","","",null,null],[11,"fmt","draw_state::target","",162,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",162,null],[11,"eq","","",162,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",162,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",162,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",162,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",162,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",162,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[3,"Rect","gfx::core::target","A screen space rectangle",null,null],[12,"x","","",162,null],[12,"y","","",162,null],[12,"w","","",162,null],[12,"h","","",162,null],[6,"ColorValue","","",null,null],[11,"eq","draw_state::target","",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"partial_cmp","","",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"option"}}],[11,"lt","","",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"cmp","","",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"hash","","",163,null],[11,"from_iter","","",163,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}],[11,"not","","Returns the complement of this set of flags.",163,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"sub","","Returns the set difference of the two sets of flags.",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitor","","Returns the union of the two sets of flags.",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"empty","","Returns an empty set of flags.",163,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",163,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",163,{"inputs":[{"name":"mirror"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",163,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",163,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",163,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",163,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",163,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",163,null],[11,"remove","","Removes the specified flags in-place.",163,null],[11,"toggle","","Toggles the specified flags in-place.",163,null],[11,"fmt","","",163,{"inputs":[{"name":"mirror"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Mirror","gfx::core::target","Mirroring flags, used for blitting",null,null],[17,"MIRROR_X","","",null,null],[17,"MIRROR_Y","","",null,null],[8,"Factory","gfx::core","",null,null],[16,"Mapper","","Associated mapper type",35,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation",35,{"inputs":[{"name":"factory"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",35,{"inputs":[{"name":"factory"},{"name":"bufferinfo"}],"output":{"name":"result"}}],[10,"create_buffer_const_raw","","",35,null],[11,"create_buffer_const","","",35,null],[11,"create_buffer_dynamic","","",35,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"}],"output":{"name":"result"}}],[11,"create_buffer_staging","","",35,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"},{"name":"mapaccess"}],"output":{"name":"result"}}],[10,"create_pipeline_state_raw","","",35,{"inputs":[{"name":"factory"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[10,"create_program","","",35,{"inputs":[{"name":"factory"},{"name":"shaderset"}],"output":{"name":"result"}}],[10,"create_shader","","",35,null],[11,"create_shader_vertex","","",35,null],[11,"create_shader_geometry","","",35,null],[11,"create_shader_pixel","","",35,null],[10,"create_sampler","","",35,{"inputs":[{"name":"factory"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"map_buffer_raw","","",35,null],[10,"unmap_buffer_raw","","",35,null],[10,"map_buffer_readable","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"readable"}}],[10,"map_buffer_writable","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"writable"}}],[10,"map_buffer_rw","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"rw"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint,\nrequired to assist backends that have no concept of typeless formats (OpenGL).\nThe initial data, if given, has to be provided for all mip levels and slices:\nSlice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",35,{"inputs":[{"name":"factory"},{"name":"descriptor"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"}],"output":{"name":"result"}}],[10,"view_texture_as_render_target_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_texture","","",35,{"inputs":[{"name":"factory"},{"name":"kind"},{"name":"u8"},{"name":"bind"},{"name":"usage"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource","","",35,null],[11,"view_texture_as_unordered_access","","",35,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target","","",35,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil","","",35,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"},{"name":"depthstencilflags"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",35,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_texture_const_u8","","",35,null],[11,"create_texture_const","","",35,null],[11,"create_render_target","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil_view_only","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[8,"Device","gfx","An interface for performing draw calls using a specific graphics API",null,null],[16,"Resources","","Associated resources type.",160,null],[16,"CommandBuffer","","Associated command buffer type.",160,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation.",160,{"inputs":[{"name":"device"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",160,null],[10,"submit","","Submit a command buffer for execution.",160,null],[10,"cleanup","","Cleanup unused resources, to be called between frames.",160,null],[8,"Resources","","Resources pertaining to a specific API.",null,null],[16,"Buffer","","",159,null],[16,"Shader","","",159,null],[16,"Program","","",159,null],[16,"PipelineStateObject","","",159,null],[16,"Texture","","",159,null],[16,"ShaderResourceView","","",159,null],[16,"UnorderedAccessView","","",159,null],[16,"RenderTargetView","","",159,null],[16,"DepthStencilView","","",159,null],[16,"Sampler","","",159,null],[16,"Fence","","",159,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",157,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d,\ne]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",157,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a &quot;path&quot; of\nlines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line\nline, and `b` and `c` form a line.",157,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`,\n`a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",157,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c,\nd]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",157,null],[6,"VertexCount","","",null,null],[6,"InstanceCount","","",null,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",155,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",155,null],[3,"VertexShader","","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[0,"format","","Universal format specification.\nApplicable to textures, views, and vertex buffers.",null,null],[4,"ChannelType","gfx::format","Type of a surface channel. This is how we interpret the\nstorage allocated with `SurfaceType`.",null,null],[13,"Int","","",36,null],[13,"Uint","","",36,null],[13,"Inorm","","",36,null],[13,"Unorm","","",36,null],[13,"Float","","",36,null],[13,"Srgb","","",36,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only\ncarry information about the number of bits per each channel.\nThe actual types are up to the views to decide and interpret.\nThe actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",43,null],[13,"R4_G4_B4_A4","","",43,null],[13,"R5_G5_B5_A1","","",43,null],[13,"R5_G6_B5","","",43,null],[13,"R8","","",43,null],[13,"R8_G8","","",43,null],[13,"R8_G8_B8_A8","","",43,null],[13,"R10_G10_B10_A2","","",43,null],[13,"R11_G11_B10","","",43,null],[13,"R16","","",43,null],[13,"R16_G16","","",43,null],[13,"R16_G16_B16","","",43,null],[13,"R16_G16_B16_A16","","",43,null],[13,"R32","","",43,null],[13,"R32_G32","","",43,null],[13,"R32_G32_B32","","",43,null],[13,"R32_G32_B32_A32","","",43,null],[13,"D16","","",43,null],[13,"D24","","",43,null],[13,"D24_S8","","",43,null],[13,"D32","","",43,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto\ndifferent physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",65,null],[13,"One","","",65,null],[13,"X","","",65,null],[13,"Y","","",65,null],[13,"Z","","",65,null],[13,"W","","",65,null],[3,"Swizzle","","Channel swizzle configuration for the resource views.\nNote: It&#39;s not currently mirrored at compile-time,\nthus providing less safety and convenience.",null,null],[12,"0","","",66,null],[12,"1","","",66,null],[12,"2","","",66,null],[12,"3","","",66,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",67,null],[12,"1","","",67,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",68,null],[10,"get_surface_type","","Return the run-time value of the type.",68,{"inputs":[],"output":{"name":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel.\nFor example, normalized integers are visible as floats.",69,null],[10,"get_channel_type","","Return the run-time value of the type.",69,{"inputs":[],"output":{"name":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",70,null],[16,"Channel","","Associated channel type.",70,null],[16,"View","","Shader view type of this format.",70,null],[11,"get_format","","Return the run-time value of the type.",70,{"inputs":[],"output":{"name":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[3,"U8Norm","","",null,null],[12,"0","","",71,null],[3,"I8Norm","","",null,null],[12,"0","","",72,null],[3,"U16Norm","","",null,null],[12,"0","","",73,null],[3,"I16Norm","","",null,null],[12,"0","","",74,null],[3,"F16","","",null,null],[12,"0","","",75,null],[6,"Vec1","","",null,null],[6,"Vec2","","",null,null],[6,"Vec3","","",null,null],[6,"Vec4","","",null,null],[6,"Rgba8","","",null,null],[6,"Srgba8","","",null,null],[6,"Rgb10a2F","","",null,null],[6,"Rgba16F","","",null,null],[6,"Rgba32F","","",null,null],[6,"Depth","","",null,null],[6,"DepthStencil","","",null,null],[6,"Depth32F","","",null,null],[0,"handle","gfx","Device resource handles",null,null],[3,"RawBuffer","gfx::handle","Raw (untyped) Buffer Handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture object",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer.\nSeals actual resource names behind the interface, automatically\nreferencing them both by the Factory on resource creation\nand the Renderer during CommandBuffer population.",null,null],[8,"Producer","","A service trait to be used by the device implementation",null,null],[10,"make_buffer","","",94,null],[10,"make_shader","","",94,null],[10,"make_program","","",94,null],[10,"make_pso","","",94,null],[10,"make_texture","","",94,null],[10,"make_buffer_srv","","",94,null],[10,"make_texture_srv","","",94,null],[10,"make_buffer_uav","","",94,null],[10,"make_texture_uav","","",94,null],[10,"make_rtv","","",94,null],[10,"make_dsv","","",94,null],[10,"make_sampler","","",94,null],[10,"make_fence","","",94,null],[10,"clean_with","","Walk through all the handles, keep ones that are reference elsewhere\nand call the provided delete function (resource-specific) for others",94,null],[0,"tex","gfx","Texture creation and modification.",null,null],[4,"Error","gfx::tex","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",135,null],[13,"Kind","","The kind doesn&#39;t support a particular operation.",135,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",135,null],[13,"Size","","Unsupported size in one of the dimensions.",135,null],[13,"Data","","The given data has a different size than the target texture slice.",135,null],[6,"Size","","",null,null],[6,"Bits","","",null,null],[6,"NumSamples","","",null,null],[6,"NumFragments","","",null,null],[6,"Dimensions","","",null,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",136,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",136,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",136,null],[4,"FilterMethod","","How to [filter](https://en.wikipedia.org/wiki/Texture_filtering) the\ntexture when sampling. They correspond to increasing levels of quality,\nbut also cost. They &quot;layer&quot; on top of each other: it is not possible to\nhave bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",137,null],[13,"Mipmap","","Add simple mipmapping.",137,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase\nquality.",137,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",137,null],[13,"Anisotropic","","Anisotropic filtering with a given &quot;max&quot;, must be between 1 and 16,\ninclusive.",137,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",138,null],[13,"NegX","","",138,null],[13,"PosY","","",138,null],[13,"NegY","","",138,null],[13,"PosZ","","",138,null],[13,"NegZ","","",138,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",139,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels\nin a different row are not sampled.",139,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",139,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in\na different depth level are not sampled.",139,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",139,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",139,null],[13,"CubeArray","","An array of Cube textures.",139,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",140,null],[12,"yoffset","","",140,null],[12,"zoffset","","",140,null],[12,"width","","",140,null],[12,"height","","",140,null],[12,"depth","","",140,null],[12,"format","","Format of each texel.",140,null],[12,"mipmap","","Which mipmap to select.",140,null],[6,"RawImageInfo","","",null,null],[6,"NewImageInfo","","",null,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is\nthe default.",141,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",141,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",141,null],[13,"Border","","Use border color.",141,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",143,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",144,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL\nspeak).",144,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For\nexample, if it would select mipmap level 2 and lod_bias is 1, it will\nuse mipmap level 3.",144,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",144,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",144,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",144,null],[3,"Descriptor","","Texture storage descriptor.",null,null],[12,"kind","","",145,null],[12,"levels","","",145,null],[12,"format","","",145,null],[12,"bind","","",145,null],[12,"usage","","",145,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",146,null],[12,"min","","",146,null],[12,"max","","",146,null],[12,"swizzle","","",146,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",147,null],[12,"level","","",147,null],[12,"layer","","",147,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[17,"RO_DEPTH","","Depth is read-only in the view.",null,null],[17,"RO_STENCIL","","Stencil is read-only in the view.",null,null],[17,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",149,null],[12,"layer","","",149,null],[12,"flags","","",149,null],[6,"Layer","","",null,null],[6,"Level","","",null,null],[8,"Factory","gfx","",null,null],[16,"Mapper","","Associated mapper type",35,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation",35,{"inputs":[{"name":"factory"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",35,{"inputs":[{"name":"factory"},{"name":"bufferinfo"}],"output":{"name":"result"}}],[10,"create_buffer_const_raw","","",35,null],[11,"create_buffer_const","","",35,null],[11,"create_buffer_dynamic","","",35,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"}],"output":{"name":"result"}}],[11,"create_buffer_staging","","",35,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"},{"name":"mapaccess"}],"output":{"name":"result"}}],[10,"create_pipeline_state_raw","","",35,{"inputs":[{"name":"factory"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[10,"create_program","","",35,{"inputs":[{"name":"factory"},{"name":"shaderset"}],"output":{"name":"result"}}],[10,"create_shader","","",35,null],[11,"create_shader_vertex","","",35,null],[11,"create_shader_geometry","","",35,null],[11,"create_shader_pixel","","",35,null],[10,"create_sampler","","",35,{"inputs":[{"name":"factory"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"map_buffer_raw","","",35,null],[10,"unmap_buffer_raw","","",35,null],[10,"map_buffer_readable","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"readable"}}],[10,"map_buffer_writable","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"writable"}}],[10,"map_buffer_rw","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"rw"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint,\nrequired to assist backends that have no concept of typeless formats (OpenGL).\nThe initial data, if given, has to be provided for all mip levels and slices:\nSlice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",35,{"inputs":[{"name":"factory"},{"name":"descriptor"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"}],"output":{"name":"result"}}],[10,"view_texture_as_render_target_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_texture","","",35,{"inputs":[{"name":"factory"},{"name":"kind"},{"name":"u8"},{"name":"bind"},{"name":"usage"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource","","",35,null],[11,"view_texture_as_unordered_access","","",35,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target","","",35,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil","","",35,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"},{"name":"depthstencilflags"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",35,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_texture_const_u8","","",35,null],[11,"create_texture_const","","",35,null],[11,"create_render_target","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil_view_only","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[4,"Usage","","A hint as to how this buffer/texture will be used.",null,null],[13,"GpuOnly","","GPU: read + write, CPU: copy. Optimal for render targets.",28,null],[13,"Const","","GPU: read, CPU: none. Optimal for resourced textures/buffers.",28,null],[13,"Dynamic","","GPU: read, CPU: write.",28,null],[13,"CpuOnly","","GPU: copy, CPU: as specified. Used as a staging buffer,\nto be copied back and forth with on-GPU targets.",28,null],[3,"Bind","","Bind flags",null,null],[4,"MapAccess","","Specifies the access allowed to a buffer mapping.",null,null],[13,"Readable","","Only allow reads.",25,null],[13,"Writable","","Only allow writes.",25,null],[13,"RW","","Allow full access.",25,null],[4,"ResourceViewError","","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag does not present in the texture.",32,null],[13,"Channel","","Selected channel type is not supported for this texture.",32,null],[13,"Unsupported","","The backend refused for some reason.",32,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag does not present in the texture.",33,null],[13,"BadLevel","","Selected mip level doesn&#39;t exist.",33,null],[13,"BadLayer","","Selected array layer doesn&#39;t exist.",33,null],[13,"Channel","","Selected channel type is not supported for this texture.",33,null],[13,"Unsupported","","The backend refused for some reason.",33,null],[4,"BufferRole","","Role of the memory buffer. GLES doesn&#39;t allow chaning bind points for buffers.",null,null],[13,"Vertex","","Generic vertex buffer",27,null],[13,"Index","","Index buffer",27,null],[13,"Uniform","","Uniform block buffer",27,null],[3,"BufferInfo","","An information block that is immutable and associated with each buffer.",null,null],[12,"role","","Role",29,null],[12,"usage","","Usage hint",29,null],[12,"bind","","Bind flags",29,null],[12,"size","","Size in bytes",29,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers\nthat you use via shader resource / unordered access views.",29,null],[4,"BufferError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",30,null],[13,"Other","","Unknown other error.",30,null],[4,"BufferUpdateError","","An error happening on buffer updates.",null,null],[13,"OutOfBounds","","Trying to change the contents outside of the allocation.",31,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",34,null],[13,"Resource","","Failed to create SRV or UAV.",34,null],[13,"Target","","Failed to create RTV or DSV.",34,null],[17,"RENDER_TARGET","","The resource can be rendered into.",null,null],[17,"DEPTH_STENCIL","","The resource can serve as a depth/stencil target.",null,null],[17,"SHADER_RESOURCE","","The resource can be bound to the shader for reading.",null,null],[17,"UNORDERED_ACCESS","","The resource can be bound to the shader for writing.",null,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an\nefficient API-specific manner, to be ready for execution on the device.",null,null],[10,"clone_empty","","Clone as an empty buffer",20,{"inputs":[{"name":"commandbuffer"}],"output":{"name":"self"}}],[10,"reset","","Reset the command buffer contents, retain the allocated storage",20,null],[10,"bind_pipeline_state","","Bind a pipeline state object",20,null],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",20,null],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",20,null],[10,"bind_global_constant","","Bind a global constant",20,null],[10,"bind_resource_views","","Bind a complete set of shader resource views",20,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",20,null],[10,"bind_samplers","","Bind a complete set of samplers",20,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple\ncolors views and an optional depth/stencil view.",20,null],[10,"bind_index","","Bind an index buffer",20,null],[10,"set_scissor","","Set scissor rectangle",20,null],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",20,null],[10,"update_buffer","","Update a vertex/index/uniform buffer",20,null],[10,"update_texture","","Update a texture",20,null],[10,"generate_mipmap","","",20,null],[10,"clear_color","","Clear color target",20,null],[10,"clear_depth_stencil","","",20,null],[10,"call_draw","","Draw a primitive",20,null],[10,"call_draw_indexed","","Draw a primitive with index buffer",20,null],[6,"InstanceOption","","",null,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",132,null],[12,"globals","","Global constants in the program",132,null],[12,"constant_buffers","","Constant buffers in the program",132,null],[12,"textures","","Textures in the program",132,null],[12,"unordereds","","Unordered access resources in the program",132,null],[12,"samplers","","Samplers in the program",132,null],[12,"outputs","","Output targets in the program",132,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are\nunable to actually get the output variable info",132,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",121,null],[13,"F32","","",121,null],[13,"I32Vector2","","",121,null],[13,"I32Vector3","","",121,null],[13,"I32Vector4","","",121,null],[13,"F32Vector2","","",121,null],[13,"F32Vector3","","",121,null],[13,"F32Vector4","","",121,null],[13,"F32Matrix2","","",121,null],[13,"F32Matrix3","","",121,null],[13,"F32Matrix4","","",121,null],[3,"Encoder","","Graphics commands encoder.",null,null],[3,"Slice","","Description of a subset of `Mesh` data to render.",null,null],[12,"start","","Start index of vertices to draw.",164,null],[12,"end","","End index of vertices to draw.",164,null],[12,"instances","","Instancing configuration.",164,null],[12,"kind","","Source of the vertex ordering when drawing.",164,null],[4,"UpdateError","","An error occuring in buffer/texture updates.",null,null],[13,"OutOfBounds","","",165,null],[12,"target","gfx::UpdateError","",165,null],[12,"source","","",165,null],[13,"UnitCountMismatch","gfx","",165,null],[12,"target","gfx::UpdateError","",165,null],[12,"slice","","",165,null],[4,"PipelineStateError","gfx","Error creating a PipelineState",null,null],[13,"Program","","Shader program failed to link.",166,null],[13,"DescriptorInit","","Unable to create PSO descriptor due to mismatched formats.",166,null],[13,"DeviceCreate","","Device failed to create the handle give the descriptor.",166,null],[4,"SliceKind","","Source of vertex ordering for a slice",null,null],[13,"Vertex","","Render vertex data directly from the `Mesh`&#39;s buffer.",167,null],[13,"Index8","","The `Index*` buffer contains a list of indices into the `Mesh`\ndata, so every vertex attribute does not need to be duplicated, only\nits position in the `Mesh`. The base index is added to this index\nbefore fetching the vertex from the buffer.  For example, when drawing\na square, two triangles are needed.  Using only `Vertex`, one\nwould need 6 separate vertices, 3 for each triangle. However, two of\nthe vertices will be identical, wasting space for the duplicated\nattributes.  Instead, the `Mesh` can store 4 vertices and an\n`Index8` can be used instead.",167,null],[13,"Index16","","As `Index8` but with `u16` indices",167,null],[13,"Index32","","As `Index8` but with `u32` indices",167,null],[0,"traits","","public re-exported traits",null,null],[8,"Device","gfx::traits","An interface for performing draw calls using a specific graphics API",null,null],[16,"Resources","","Associated resources type.",160,null],[16,"CommandBuffer","","Associated command buffer type.",160,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation.",160,{"inputs":[{"name":"device"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",160,null],[10,"submit","","Submit a command buffer for execution.",160,null],[10,"cleanup","","Cleanup unused resources, to be called between frames.",160,null],[8,"Factory","","",null,null],[16,"Mapper","","Associated mapper type",35,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation",35,{"inputs":[{"name":"factory"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",35,{"inputs":[{"name":"factory"},{"name":"bufferinfo"}],"output":{"name":"result"}}],[10,"create_buffer_const_raw","","",35,null],[11,"create_buffer_const","","",35,null],[11,"create_buffer_dynamic","","",35,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"}],"output":{"name":"result"}}],[11,"create_buffer_staging","","",35,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"},{"name":"mapaccess"}],"output":{"name":"result"}}],[10,"create_pipeline_state_raw","","",35,{"inputs":[{"name":"factory"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[10,"create_program","","",35,{"inputs":[{"name":"factory"},{"name":"shaderset"}],"output":{"name":"result"}}],[10,"create_shader","","",35,null],[11,"create_shader_vertex","","",35,null],[11,"create_shader_geometry","","",35,null],[11,"create_shader_pixel","","",35,null],[10,"create_sampler","","",35,{"inputs":[{"name":"factory"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"map_buffer_raw","","",35,null],[10,"unmap_buffer_raw","","",35,null],[10,"map_buffer_readable","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"readable"}}],[10,"map_buffer_writable","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"writable"}}],[10,"map_buffer_rw","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"rw"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint,\nrequired to assist backends that have no concept of typeless formats (OpenGL).\nThe initial data, if given, has to be provided for all mip levels and slices:\nSlice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",35,{"inputs":[{"name":"factory"},{"name":"descriptor"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"}],"output":{"name":"result"}}],[10,"view_texture_as_render_target_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",35,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_texture","","",35,{"inputs":[{"name":"factory"},{"name":"kind"},{"name":"u8"},{"name":"bind"},{"name":"usage"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access","","",35,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource","","",35,null],[11,"view_texture_as_unordered_access","","",35,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target","","",35,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil","","",35,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"u8"},{"name":"option"},{"name":"depthstencilflags"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",35,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_texture_const_u8","","",35,null],[11,"create_texture_const","","",35,null],[11,"create_render_target","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"create_depth_stencil_view_only","","",35,{"inputs":[{"name":"factory"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[8,"DeviceFence","","Extension to the Device that allows for submitting of commands\naround a fence",null,null],[10,"fenced_submit","","Submit a command buffer to the stream creating a fence\nthe fence is signaled after the GPU has executed all commands\nin the buffer",161,null],[10,"fence_wait","","Wait on the supplied fence stalling the current thread until\nthe fence is satisfied",161,null],[8,"FactoryExt","","Factory extension trait",null,null],[11,"create_vertex_buffer","","Create a vertex buffer with an associated slice.",168,null],[11,"create_vertex_buffer_indexed","","Create a vertex buffer with an index, returned by a slice.",168,null],[11,"create_constant_buffer","","Create a constant buffer for `num` identical elements of type `T`.",168,{"inputs":[{"name":"factoryext"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"create_shader_set","","Create a shader set from a given vs/ps code for multiple shader models.",168,null],[11,"link_program","","Create a simple program given a vertex shader with a pixel one.",168,null],[11,"create_pipeline_state","","Create a strongly-typed Pipeline State.",168,{"inputs":[{"name":"factoryext"},{"name":"shaderset"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_from_program","","Create PSO with a given program.",168,{"inputs":[{"name":"factoryext"},{"name":"program"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_simple","","Create a simplified version of the Pipeline State,\nwhich works on triangles, and only has VS and PS shaders in it.",168,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",168,{"inputs":[{"name":"factoryext"}],"output":{"name":"sampler"}}],[11,"eq","gfx","",165,{"inputs":[{"name":"updateerror"},{"name":"updateerror"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"updateerror"},{"name":"updateerror"}],"output":{"name":"bool"}}],[11,"fmt","","",165,{"inputs":[{"name":"updateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"updateerror"}],"output":{"name":"updateerror"}}],[11,"from","","",169,{"inputs":[{"name":"c"}],"output":{"name":"encoder"}}],[11,"flush","","Flush the encoded commands onto the device, and clean.",169,{"inputs":[{"name":"encoder"},{"name":"d"}],"output":null}],[11,"clone_empty","","Clone the renderer shared data but ignore the commands.",169,{"inputs":[{"name":"encoder"}],"output":{"name":"encoder"}}],[11,"update_buffer","","Update a buffer with a slice of data.",169,null],[11,"update_constant_buffer","","Update a buffer with a single structure.",169,{"inputs":[{"name":"encoder"},{"name":"buffer"},{"name":"t"}],"output":null}],[11,"update_texture","","Update the contents of a texture.",169,null],[11,"clear","","Clear a target view with a specified value.",169,{"inputs":[{"name":"encoder"},{"name":"rendertargetview"},{"name":"view"}],"output":null}],[11,"clear_depth","","Clear a depth view with a specified value.",169,{"inputs":[{"name":"encoder"},{"name":"depthstencilview"},{"name":"depth"}],"output":null}],[11,"clear_stencil","","Clear a stencil view with a specified value.",169,{"inputs":[{"name":"encoder"},{"name":"depthstencilview"},{"name":"stencil"}],"output":null}],[11,"draw","","Draw a mesh slice using a typed pipeline state object (PSO).",169,{"inputs":[{"name":"encoder"},{"name":"slice"},{"name":"pipelinestate"},{"name":"d"}],"output":null}],[11,"create_vertex_buffer","gfx::factory","Create a vertex buffer with an associated slice.",168,null],[11,"create_vertex_buffer_indexed","","Create a vertex buffer with an index, returned by a slice.",168,null],[11,"create_constant_buffer","","Create a constant buffer for `num` identical elements of type `T`.",168,{"inputs":[{"name":"factoryext"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"create_shader_set","","Create a shader set from a given vs/ps code for multiple shader models.",168,null],[11,"link_program","","Create a simple program given a vertex shader with a pixel one.",168,null],[11,"create_pipeline_state","","Create a strongly-typed Pipeline State.",168,{"inputs":[{"name":"factoryext"},{"name":"shaderset"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_from_program","","Create PSO with a given program.",168,{"inputs":[{"name":"factoryext"},{"name":"program"},{"name":"primitive"},{"name":"rasterizer"},{"name":"i"}],"output":{"name":"result"}}],[11,"create_pipeline_simple","","Create a simplified version of the Pipeline State,\nwhich works on triangles, and only has VS and PS shaders in it.",168,null],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",168,{"inputs":[{"name":"factoryext"}],"output":{"name":"sampler"}}],[11,"fmt","gfx","",166,{"inputs":[{"name":"pipelinestateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",166,{"inputs":[{"name":"pipelinestateerror"},{"name":"pipelinestateerror"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"pipelinestateerror"},{"name":"pipelinestateerror"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"pipelinestateerror"}],"output":{"name":"pipelinestateerror"}}],[11,"eq","","",164,{"inputs":[{"name":"slice"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"slice"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"fmt","","",164,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"get_prim_count","","Get the number of primitives in this slice.",164,{"inputs":[{"name":"slice"},{"name":"primitive"}],"output":{"name":"u32"}}],[11,"eq","","",167,{"inputs":[{"name":"slicekind"},{"name":"slicekind"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"slicekind"},{"name":"slicekind"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"slicekind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"slicekind"}],"output":{"name":"slicekind"}}],[11,"from","","",164,{"inputs":[{"name":"buffer"}],"output":{"name":"slice"}}],[11,"from","","",164,{"inputs":[{"name":"buffer"}],"output":{"name":"slice"}}],[11,"from","","",164,{"inputs":[{"name":"buffer"}],"output":{"name":"slice"}}],[0,"pso","","Pipeline states\nPipeline State Objects - typed higher-level version.",null,null],[3,"Descriptor","gfx::pso","All the information surrounding a shader program that is required\nfor PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",104,null],[12,"rasterizer","","Rasterizer setup",104,null],[12,"scissor","","Enable scissor test",104,null],[12,"attributes","","Vertex attributes",104,null],[12,"color_targets","","Render target views (RTV)",104,null],[12,"depth_stencil","","Depth stencil view (DSV)",104,null],[3,"RawDataSet","","A complete set of raw data that needs to be specified at run-time\nwhenever we draw something with a PSO. This is what &quot;data&quot; struct\ngets transformed into when we call `encoder.draw(...)` with it.\nIt doesn&#39;t have any typing information, since PSO knows what\nformat and layout to expect from each resource.",null,null],[12,"vertex_buffers","","",170,null],[12,"constant_buffers","","",170,null],[12,"global_constants","","",170,null],[12,"resource_views","","",170,null],[12,"unordered_views","","",170,null],[12,"samplers","","",170,null],[12,"pixel_targets","","",170,null],[12,"ref_values","","",170,null],[12,"scissor","","",170,null],[3,"PipelineState","","Strongly-typed compiled pipeline state.",null,null],[4,"InitError","","Failure to initilize the link between the shader and the data.",null,null],[13,"VertexImport","","Vertex attribute mismatch.",171,null],[13,"ConstantBuffer","","Constant buffer mismatch.",171,null],[13,"GlobalConstant","","Global constant mismatch.",171,null],[13,"ResourceView","","Shader resource view mismatch.",171,null],[13,"UnorderedView","","Unordered access view mismatch.",171,null],[13,"Sampler","","Sampler mismatch.",171,null],[13,"PixelExport","","Pixel target mismatch.",171,null],[0,"buffer","","Buffer components for PSO macro.",null,null],[3,"Element","gfx::pso::buffer","A struct element descriptor.",null,null],[12,"format","","Element format",103,null],[12,"offset","","Offset from the beginning of the container, in bytes",103,null],[12,"stride","","Total container size, in bytes",103,null],[6,"ElemOffset","","",null,null],[6,"ElemStride","","",null,null],[3,"VertexBufferCommon","","Service struct to simplify the implementations of `VertexBuffer` and `InstanceBuffer`.",null,null],[3,"ConstantBuffer","","Constant buffer component.\n- init: `&amp;str` = name of the buffer\n- data: `BufferHandle&lt;T&gt;`",null,null],[3,"Global","","Global (uniform) constant component. Describes a free-standing value passed into\nthe shader, which is not enclosed into any constant buffer. Deprecated in DX10 and higher.\n- init: `&amp;str` = name of the constant\n- data: `T` = value",null,null],[6,"VertexBuffer","","Vertex buffer component. Advanced per vertex.\n- init: `()`\n- data: `BufferHandle&lt;T&gt;`",null,null],[6,"InstanceBuffer","","Instance buffer component. Same as the vertex buffer but advances per instance.",null,null],[8,"Structure","","A trait to be implemented by any struct having the layout described\nin the graphics API, like a vertex buffer.",null,null],[10,"query","","Get the layout of an element by name.",172,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",173,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",173,{"inputs":[{"name":"vertexbuffercommon"}],"output":{"name":"bool"}}],[11,"link_input","","",173,{"inputs":[{"name":"vertexbuffercommon"},{"name":"attributevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",173,{"inputs":[{"name":"vertexbuffercommon"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",174,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",174,{"inputs":[{"name":"constantbuffer"}],"output":{"name":"bool"}}],[11,"link_constant_buffer","","",174,{"inputs":[{"name":"constantbuffer"},{"name":"constantbuffervar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",174,{"inputs":[{"name":"constantbuffer"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",175,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",175,{"inputs":[{"name":"global"}],"output":{"name":"bool"}}],[11,"link_global_constant","","",175,{"inputs":[{"name":"global"},{"name":"constvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",175,{"inputs":[{"name":"global"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[0,"resource","gfx::pso","Resource components for PSO macro.",null,null],[3,"ShaderResource","gfx::pso::resource","Shader resource component (SRV). Typically is a view into some texture,\nbut can also be a buffer.\n- init: `&amp;str` = name of the resource\n- data: `ShaderResourceView&lt;T&gt;`",null,null],[3,"UnorderedAccess","","Unordered access component (UAV). A writable resource (texture/buffer)\nwith no defined access order across simultaneously executing shaders.\nSupported on DX10 and higher.\n- init: `&amp;str` = name of the resource\n- data: `UnorderedAccessView&lt;T&gt;`",null,null],[3,"Sampler","","Sampler component.\n- init: `&amp;str` = name of the sampler\n- data: `Sampler`",null,null],[3,"TextureSampler","","A convenience type for a texture paired with a sampler.\nIt only makes sense for DX9 class hardware, where every texture by default\nis bundled with a sampler, hence they are represented by the same name.\nIn DX10 and higher samplers are totally separated from the textures.\n- init: `&amp;str` = name of the sampler/texture (assuming they match)\n- data: (`ShaderResourceView&lt;T&gt;`, `Sampler`)",null,null],[11,"new","","",176,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",176,{"inputs":[{"name":"shaderresource"}],"output":{"name":"bool"}}],[11,"link_resource_view","","",176,{"inputs":[{"name":"shaderresource"},{"name":"texturevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",176,{"inputs":[{"name":"shaderresource"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",177,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",177,{"inputs":[{"name":"unorderedaccess"}],"output":{"name":"bool"}}],[11,"link_unordered_view","","",177,{"inputs":[{"name":"unorderedaccess"},{"name":"unorderedvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",177,{"inputs":[{"name":"unorderedaccess"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",178,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",178,{"inputs":[{"name":"sampler"}],"output":{"name":"bool"}}],[11,"link_sampler","","",178,{"inputs":[{"name":"sampler"},{"name":"samplervar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",178,{"inputs":[{"name":"sampler"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",179,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",179,{"inputs":[{"name":"texturesampler"}],"output":{"name":"bool"}}],[11,"link_resource_view","","",179,{"inputs":[{"name":"texturesampler"},{"name":"texturevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_sampler","","",179,{"inputs":[{"name":"texturesampler"},{"name":"samplervar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",179,{"inputs":[{"name":"texturesampler"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[0,"target","gfx::pso","Render target components for the PSO macro.",null,null],[3,"RenderTarget","gfx::pso::target","Render target component. Typically points to a color-formatted texture.\n- init: `&amp;str` = name of the target\n- data: `RenderTargetView&lt;T&gt;`",null,null],[3,"BlendTarget","","Render target component with active blending mode.\n- init: (`&amp;str`, `ColorMask`, `Blend` = blending state)\n- data: `RenderTargetView&lt;T&gt;`",null,null],[3,"DepthTarget","","Depth target component.\n- init: `Depth` = depth state\n- data: `DepthStencilView&lt;T&gt;`",null,null],[3,"StencilTarget","","Stencil target component.\n- init: `Stencil` = stencil state\n- data: (`DepthStencilView&lt;T&gt;`, `(front, back)` = stencil reference values)",null,null],[3,"DepthStencilTarget","","Depth + stencil target component.\n- init: (`Depth` = depth state, `Stencil` = stencil state)\n- data: (`DepthStencilView&lt;T&gt;`, `(front, back)` = stencil reference values)",null,null],[3,"Scissor","","Scissor component. Sets up the scissor test for rendering.\n- init: `()`\n- data: `Rect` = target area",null,null],[3,"BlendRef","","Blend reference component. Sets up the reference color for blending.\n- init: `()`\n- data: `ColorValue`",null,null],[11,"new","","",180,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",180,{"inputs":[{"name":"rendertarget"}],"output":{"name":"bool"}}],[11,"link_output","","",180,{"inputs":[{"name":"rendertarget"},{"name":"outputvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",180,{"inputs":[{"name":"rendertarget"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",181,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",181,{"inputs":[{"name":"blendtarget"}],"output":{"name":"bool"}}],[11,"link_output","","",181,{"inputs":[{"name":"blendtarget"},{"name":"outputvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",181,{"inputs":[{"name":"blendtarget"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",182,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",182,{"inputs":[{"name":"depthtarget"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",182,{"inputs":[{"name":"depthtarget"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",182,{"inputs":[{"name":"depthtarget"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",183,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",183,{"inputs":[{"name":"stenciltarget"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",183,{"inputs":[{"name":"stenciltarget"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",183,{"inputs":[{"name":"stenciltarget"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",184,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",184,{"inputs":[{"name":"depthstenciltarget"}],"output":{"name":"bool"}}],[11,"link_depth_stencil","","",184,{"inputs":[{"name":"depthstenciltarget"},{"name":"init"}],"output":{"name":"option"}}],[11,"bind_to","","",184,{"inputs":[{"name":"depthstenciltarget"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",185,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",185,{"inputs":[{"name":"scissor"}],"output":{"name":"bool"}}],[11,"link_scissor","","",185,{"inputs":[{"name":"scissor"}],"output":{"name":"bool"}}],[11,"bind_to","","",185,{"inputs":[{"name":"scissor"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"new","","",186,{"inputs":[],"output":{"name":"self"}}],[11,"is_active","","",186,{"inputs":[{"name":"blendref"}],"output":{"name":"bool"}}],[11,"bind_to","","",186,{"inputs":[{"name":"blendref"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[8,"PipelineInit","gfx::pso","A service trait implemented by the &quot;init&quot; structure of PSO.",null,null],[16,"Meta","","The associated &quot;meta&quot; struct.",187,null],[10,"link_to","","Attempt to map a PSO descriptor to a give shader program,\nrepresented by `ProgramInfo`. Returns an instance of the\n&quot;meta&quot; struct upon successful mapping.",187,{"inputs":[{"name":"pipelineinit"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"name":"result"}}],[8,"PipelineData","","a service trait implemented the &quot;data&quot; structure of PSO.",null,null],[16,"Meta","","The associated &quot;meta&quot; struct.",188,null],[10,"bake_to","","Dump all the contained data into the raw data set,\ngiven the mapping (&quot;meta&quot;), and a handle manager.",188,{"inputs":[{"name":"pipelinedata"},{"name":"rawdataset"},{"name":"meta"},{"name":"manager"}],"output":null}],[8,"DataLink","","The &quot;link&quot; logic portion of a PSO component.\nDefines the input data for the component.",null,null],[16,"Init","","The assotiated &quot;init&quot; type - a member of the PSO &quot;init&quot; struct.",189,null],[10,"new","","Create a new empty data link.",189,{"inputs":[],"output":{"name":"self"}}],[10,"is_active","","Check if this link is actually used by the shader.",189,{"inputs":[{"name":"datalink"}],"output":{"name":"bool"}}],[11,"link_input","","Attempt to link with a vertex attribute.",189,{"inputs":[{"name":"datalink"},{"name":"attributevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_constant_buffer","","Attempt to link with a constant buffer.",189,{"inputs":[{"name":"datalink"},{"name":"constantbuffervar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_global_constant","","Attempt to link with a global constant.",189,{"inputs":[{"name":"datalink"},{"name":"constvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_output","","Attempt to link with an output render target (RTV).",189,{"inputs":[{"name":"datalink"},{"name":"outputvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_depth_stencil","","Attempt to link with a depth-stencil target (DSV).",189,{"inputs":[{"name":"datalink"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_resource_view","","Attempt to link with a shader resource (SRV).",189,{"inputs":[{"name":"datalink"},{"name":"texturevar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_unordered_view","","Attempt to link with an unordered access (UAV).",189,{"inputs":[{"name":"datalink"},{"name":"unorderedvar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_sampler","","Attempt to link with a sampler.",189,{"inputs":[{"name":"datalink"},{"name":"samplervar"},{"name":"init"}],"output":{"name":"option"}}],[11,"link_scissor","","Attempt to enable scissor test.",189,{"inputs":[{"name":"datalink"}],"output":{"name":"bool"}}],[8,"DataBind","","The &quot;bind&quot; logic portion of the PSO component.\nDefines how the user data translates into the raw data set.",null,null],[16,"Data","","The associated &quot;data&quot; type - a member of the PSO &quot;data&quot; struct.",190,null],[10,"bind_to","","Dump the given data into the raw data set.",190,{"inputs":[{"name":"databind"},{"name":"rawdataset"},{"name":"data"},{"name":"manager"}],"output":null}],[11,"fmt","","",170,{"inputs":[{"name":"rawdataset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create an empty data set.",170,{"inputs":[],"output":{"name":"rawdataset"}}],[11,"clear","","Clear all contained data.",170,{"inputs":[{"name":"rawdataset"}],"output":null}],[11,"fmt","","",171,{"inputs":[{"name":"initerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",171,{"inputs":[{"name":"initerror"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"initerror"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"initerror"}],"output":{"name":"initerror"}}],[11,"new","","Create a new PSO from a raw handle and the &quot;meta&quot; instance.",191,{"inputs":[{"name":"rawpipelinestate"},{"name":"primitive"},{"name":"m"}],"output":{"name":"pipelinestate"}}],[11,"get_handle","","Get a raw handle reference.",191,{"inputs":[{"name":"pipelinestate"}],"output":{"name":"rawpipelinestate"}}],[11,"get_meta","","Get a &quot;meta&quot; struct reference. Can be used by the user to check\nwhat resources are actually used and what not.",191,{"inputs":[{"name":"pipelinestate"}],"output":{"name":"m"}}],[0,"shade","gfx","Shaders\nShader parameter handling.",null,null],[6,"ConstFormat","gfx::shade","",null,null],[8,"Formatted","","A trait that statically links simple data types to\nconstant formats.",null,null],[10,"get_format","","Get the associated constant format.",123,null],[3,"Usage","","Parameter usage flags.",null,null],[4,"ProgramError","","Program linking error",null,null],[13,"Vertex","","Unable to compile the vertex shader",192,null],[13,"Pixel","","Unable to compile the pixel shader",192,null],[13,"Link","","Unable to link",192,null],[8,"ToUniform","","",null,null],[10,"convert","","",193,{"inputs":[{"name":"touniform"}],"output":{"name":"uniformvalue"}}],[11,"fmt","","",192,{"inputs":[{"name":"programerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",192,{"inputs":[{"name":"programerror"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"programerror"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"clone","","",192,{"inputs":[{"name":"programerror"}],"output":{"name":"programerror"}}],[0,"macros","gfx","Convenience macros\nVarious helper macros.",null,null],[8,"ToIndexSlice","","A helper trait to build index slices from data.",null,null],[10,"to_slice","","Make an index slice.",194,{"inputs":[{"name":"toindexslice"},{"name":"f"}],"output":{"name":"slice"}}],[14,"gfx_pipeline_inner!","","",null,null],[14,"gfx_pipeline_base!","","",null,null],[14,"gfx_pipeline!","","",null,null],[14,"gfx_impl_struct!","","",null,null],[14,"gfx_vertex_struct!","","",null,null],[14,"gfx_constant_struct!","","",null,null],[14,"gfx_format!","","",null,null]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"MultiSample"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"ColorMask"],[3,"Color"],[3,"RefValues"],[4,"ClearColor"],[8,"CommandBuffer"],[3,"DummyDevice"],[4,"DummyResources"],[3,"DummyCommandBuffer"],[8,"Typed"],[4,"MapAccess"],[3,"Bind"],[4,"BufferRole"],[4,"Usage"],[3,"BufferInfo"],[4,"BufferError"],[4,"BufferUpdateError"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"Factory"],[4,"ChannelType"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"SurfaceType"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[4,"ChannelSource"],[3,"Swizzle"],[3,"Format"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[3,"RawBuffer"],[3,"Buffer"],[3,"Shader"],[3,"Program"],[3,"RawPipelineState"],[3,"RawTexture"],[3,"Texture"],[3,"RawShaderResourceView"],[3,"ShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[3,"Sampler"],[3,"Fence"],[3,"Manager"],[8,"Producer"],[8,"Raw"],[3,"Readable"],[3,"Writable"],[3,"RW"],[8,"Builder"],[3,"CreationError"],[3,"ColorInfo"],[3,"DepthStencilInfo"],[3,"Element"],[3,"Descriptor"],[3,"VertexBufferSet"],[3,"ConstantBufferParam"],[3,"ResourceViewParam"],[3,"UnorderedViewParam"],[3,"SamplerParam"],[3,"PixelTargetSet"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[3,"SamplerType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[8,"BaseTyped"],[8,"Formatted"],[3,"Usage"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[3,"ProgramInfo"],[4,"CompatibilityError"],[4,"CreateShaderError"],[4,"Error"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[3,"ImageInfoCommon"],[4,"WrapMode"],[3,"Lod"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Descriptor"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilFlags"],[3,"DepthStencilDesc"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"],[4,"ShaderSet"],[3,"Capabilities"],[4,"Primitive"],[4,"IndexType"],[8,"Resources"],[8,"Device"],[8,"DeviceFence"],[3,"Rect"],[3,"Mirror"],[3,"Slice"],[4,"UpdateError"],[4,"PipelineStateError"],[4,"SliceKind"],[8,"FactoryExt"],[3,"Encoder"],[3,"RawDataSet"],[4,"InitError"],[8,"Structure"],[3,"VertexBufferCommon"],[3,"ConstantBuffer"],[3,"Global"],[3,"ShaderResource"],[3,"UnorderedAccess"],[3,"Sampler"],[3,"TextureSampler"],[3,"RenderTarget"],[3,"BlendTarget"],[3,"DepthTarget"],[3,"StencilTarget"],[3,"DepthStencilTarget"],[3,"Scissor"],[3,"BlendRef"],[8,"PipelineInit"],[8,"PipelineData"],[8,"DataLink"],[8,"DataBind"],[3,"PipelineState"],[4,"ProgramError"],[8,"ToUniform"],[8,"ToIndexSlice"]]};
searchIndex["gfx_device_gl"] = {"doc":"OpenGL implementation of a device, striving to support OpenGL 2.0 with at\nleast VAOs, but using newer extensions when available.","items":[[3,"CommandBuffer","gfx_device_gl","",null,null],[12,"buf","","",0,null],[12,"data","","",0,null],[3,"Factory","","GL resource factory.",null,null],[3,"Info","","OpenGL implementation information",null,null],[12,"platform_name","","The platform identifier",1,null],[12,"version","","The OpenGL API vesion number",1,null],[12,"shading_language","","The GLSL vesion number",1,null],[12,"extensions","","The extensions supported by the implementation",1,null],[3,"PlatformName","","A unique platform identifier that does not change between releases",null,null],[12,"vendor","","The company responsible for the OpenGL implementation",2,null],[12,"renderer","","The name of the renderer",2,null],[3,"Version","","A version number for a specific component of an OpenGL implementation",null,null],[12,"major","","",3,null],[12,"minor","","",3,null],[12,"revision","","",3,null],[12,"vendor_info","","",3,null],[3,"Fence","","",null,null],[3,"OutputMerger","","",null,null],[12,"draw_mask","","",4,null],[12,"stencil","","",4,null],[12,"depth","","",4,null],[12,"colors","","",4,null],[3,"PipelineState","","",null,null],[3,"ResourceView","","",null,null],[3,"FatSampler","","",null,null],[3,"Device","","An OpenGL device with GLSL shaders.",null,null],[4,"Resources","","",null,null],[4,"NewTexture","","",null,null],[13,"Surface","","",5,null],[13,"Texture","","",5,null],[4,"TargetView","","",null,null],[13,"Surface","","",6,null],[13,"Texture","","",6,null],[13,"TextureLayer","","",6,null],[4,"Error","","",null,null],[13,"NoError","","",7,null],[13,"InvalidEnum","","",7,null],[13,"InvalidValue","","",7,null],[13,"InvalidOperation","","",7,null],[13,"InvalidFramebufferOperation","","",7,null],[13,"OutOfMemory","","",7,null],[13,"UnknownError","","",7,null],[5,"create","","Create a new device with a factory.",null,null],[5,"create_main_targets_raw","","Create the proxy target views (RTV and DSV) for the attachments of the\nmain framebuffer. These have GL names equal to 0.\nNot supposed to be used by the users directly.",null,null],[11,"new","","",0,{"inputs":[{"name":"framebuffer"}],"output":{"name":"commandbuffer"}}],[11,"clone_empty","","",0,{"inputs":[{"name":"commandbuffer"}],"output":{"name":"commandbuffer"}}],[11,"reset","","",0,{"inputs":[{"name":"commandbuffer"}],"output":null}],[11,"bind_pipeline_state","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"pipelinestate"}],"output":null}],[11,"bind_vertex_buffers","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"vertexbufferset"}],"output":null}],[11,"bind_constant_buffers","","",0,null],[11,"bind_global_constant","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"location"},{"name":"uniformvalue"}],"output":null}],[11,"bind_resource_views","","",0,null],[11,"bind_unordered_views","","",0,null],[11,"bind_samplers","","",0,null],[11,"bind_pixel_targets","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"pixeltargetset"}],"output":null}],[11,"bind_index","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"buffer"},{"name":"indextype"}],"output":null}],[11,"set_scissor","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"rect"}],"output":null}],[11,"set_ref_values","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"refvalues"}],"output":null}],[11,"update_buffer","","",0,null],[11,"update_texture","","",0,null],[11,"generate_mipmap","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"resourceview"}],"output":null}],[11,"clear_color","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"targetview"},{"name":"clearcolor"}],"output":null}],[11,"clear_depth_stencil","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"targetview"},{"name":"option"},{"name":"option"}],"output":null}],[11,"call_draw","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[11,"call_draw_indexed","","",0,{"inputs":[{"name":"commandbuffer"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"factory"}],"output":{"name":"factory"}}],[11,"new","","Create a new `Factory`.",8,{"inputs":[{"name":"rc"}],"output":{"name":"factory"}}],[11,"create_command_buffer","","",8,{"inputs":[{"name":"factory"}],"output":{"name":"commandbuffer"}}],[11,"get_capabilities","","",8,{"inputs":[{"name":"factory"}],"output":{"name":"capabilities"}}],[11,"create_buffer_raw","","",8,{"inputs":[{"name":"factory"},{"name":"bufferinfo"}],"output":{"name":"result"}}],[11,"create_buffer_const_raw","","",8,null],[11,"create_shader","","",8,null],[11,"create_program","","",8,{"inputs":[{"name":"factory"},{"name":"shaderset"}],"output":{"name":"result"}}],[11,"create_pipeline_state_raw","","",8,{"inputs":[{"name":"factory"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[11,"create_texture_raw","","",8,{"inputs":[{"name":"factory"},{"name":"descriptor"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource_raw","","",8,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access_raw","","",8,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource_raw","","",8,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[11,"view_texture_as_unordered_access_raw","","",8,{"inputs":[{"name":"factory"},{"name":"rawtexture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target_raw","","",8,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_raw","","",8,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_sampler","","",8,{"inputs":[{"name":"factory"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[11,"map_buffer_raw","","",8,{"inputs":[{"name":"factory"},{"name":"rawbuffer"},{"name":"mapaccess"}],"output":{"name":"rawmapping"}}],[11,"unmap_buffer_raw","","",8,{"inputs":[{"name":"factory"},{"name":"rawmapping"}],"output":null}],[11,"map_buffer_readable","","",8,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"readable"}}],[11,"map_buffer_writable","","",8,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"writable"}}],[11,"map_buffer_rw","","",8,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"rw"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"ordering"}}],[11,"clone","","",3,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"new","","Create a new OpenGL version number",3,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"option"},{"name":"str"}],"output":{"name":"version"}}],[11,"parse","","According to the OpenGL specification, the version information is\nexpected to follow the following syntax:",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"platformname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"platformname"},{"name":"platformname"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"platformname"},{"name":"platformname"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"platformname"}],"output":{"name":"platformname"}}],[11,"fmt","","",1,{"inputs":[{"name":"info"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_version_supported","","",1,{"inputs":[{"name":"info"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"is_extension_supported","","Returns `true` if the implementation supports the extension",1,{"inputs":[{"name":"info"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_version_or_extension_supported","","",1,{"inputs":[{"name":"info"},{"name":"u32"},{"name":"u32"},{"name":"str"}],"output":{"name":"bool"}}],[6,"Buffer","","",null,null],[6,"ArrayBuffer","","",null,null],[6,"Shader","","",null,null],[6,"Program","","",null,null],[6,"FrameBuffer","","",null,null],[6,"Surface","","",null,null],[6,"Texture","","",null,null],[6,"Sampler","","",null,null],[11,"fmt","","",9,{"inputs":[{"name":"fence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"fence"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"fence"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"fence"}],"output":{"name":"fence"}}],[11,"eq","","",10,{"inputs":[{"name":"resources"},{"name":"resources"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"resources"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"resources"}],"output":{"name":"resources"}}],[11,"fmt","","",4,{"inputs":[{"name":"outputmerger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"outputmerger"},{"name":"outputmerger"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"outputmerger"},{"name":"outputmerger"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"outputmerger"}],"output":{"name":"outputmerger"}}],[11,"fmt","","",11,{"inputs":[{"name":"pipelinestate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"pipelinestate"},{"name":"pipelinestate"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"pipelinestate"},{"name":"pipelinestate"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"pipelinestate"}],"output":{"name":"pipelinestate"}}],[11,"fmt","","",5,{"inputs":[{"name":"newtexture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"newtexture"},{"name":"newtexture"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"newtexture"},{"name":"newtexture"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"newtexture"}],"output":{"name":"newtexture"}}],[11,"fmt","","",12,{"inputs":[{"name":"resourceview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"resourceview"},{"name":"resourceview"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"resourceview"},{"name":"resourceview"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"resourceview"}],"output":{"name":"resourceview"}}],[11,"new_texture","","",12,{"inputs":[{"name":"texture"},{"name":"kind"}],"output":{"name":"resourceview"}}],[11,"new_buffer","","",12,{"inputs":[{"name":"texture"}],"output":{"name":"resourceview"}}],[11,"fmt","","",13,{"inputs":[{"name":"fatsampler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"fatsampler"},{"name":"fatsampler"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"fatsampler"},{"name":"fatsampler"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"fatsampler"}],"output":{"name":"fatsampler"}}],[11,"fmt","","",6,{"inputs":[{"name":"targetview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"targetview"},{"name":"targetview"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"targetview"},{"name":"targetview"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"targetview"}],"output":{"name":"targetview"}}],[11,"fmt","","",7,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_error_code","","",7,{"inputs":[{"name":"glenum"}],"output":{"name":"error"}}],[11,"with_gl","","Access the OpenGL directly via a closure. OpenGL types and enumerations\ncan be found in the `gl` crate.",14,{"inputs":[{"name":"device"},{"name":"f"}],"output":null}],[11,"get_info","","Get the OpenGL-specific driver information",14,{"inputs":[{"name":"device"}],"output":{"name":"info"}}],[11,"get_capabilities","","",14,{"inputs":[{"name":"device"}],"output":{"name":"capabilities"}}],[11,"pin_submitted_resources","","",14,{"inputs":[{"name":"device"},{"name":"manager"}],"output":null}],[11,"submit","","",14,{"inputs":[{"name":"device"},{"name":"commandbuffer"}],"output":null}],[11,"cleanup","","",14,{"inputs":[{"name":"device"}],"output":null}],[11,"fenced_submit","","",14,{"inputs":[{"name":"device"},{"name":"commandbuffer"},{"name":"option"}],"output":{"name":"fence"}}],[11,"fence_wait","","",14,{"inputs":[{"name":"device"},{"name":"fence"}],"output":null}]],"paths":[[3,"CommandBuffer"],[3,"Info"],[3,"PlatformName"],[3,"Version"],[3,"OutputMerger"],[4,"NewTexture"],[4,"TargetView"],[4,"Error"],[3,"Factory"],[3,"Fence"],[4,"Resources"],[3,"PipelineState"],[3,"ResourceView"],[3,"FatSampler"],[3,"Device"]]};
searchIndex["glutin_window"] = {"doc":"A Glutin window back-end for the Piston game engine.","items":[[11,"get_major_minor","shader_version::opengl","Gets the minor version of OpenGL.",0,null],[11,"to_glsl","","Gets GLSL version associated with OpenGL.",0,{"inputs":[{"name":"opengl"}],"output":{"name":"glsl"}}],[11,"clone","","",0,{"inputs":[{"name":"opengl"}],"output":{"name":"opengl"}}],[11,"eq","","",0,{"inputs":[{"name":"opengl"},{"name":"opengl"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"opengl"},{"name":"opengl"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"opengl"},{"name":"opengl"}],"output":{"name":"ordering"}}],[4,"OpenGL","glutin_window","",null,null],[13,"V2_0","","",0,null],[13,"V2_1","","",0,null],[13,"V3_0","","",0,null],[13,"V3_1","","",0,null],[13,"V3_2","","",0,null],[13,"V3_3","","",0,null],[13,"V4_0","","",0,null],[13,"V4_1","","",0,null],[13,"V4_2","","",0,null],[13,"V4_3","","",0,null],[13,"V4_4","","",0,null],[13,"V4_5","","",0,null],[3,"GlutinWindow","","Contains stuff for game window.",null,null],[12,"window","","The window.",1,null],[5,"map_key","","Maps Glutin&#39;s key to Piston&#39;s key.",null,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"key"}}],[5,"map_mouse","","Maps Glutin&#39;s mouse button to Piston&#39;s mouse button.",null,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"new","","Creates a new game window for Glutin.",1,{"inputs":[{"name":"windowsettings"}],"output":{"name":"result"}}],[11,"size","","",1,{"inputs":[{"name":"glutinwindow"}],"output":{"name":"size"}}],[11,"draw_size","","",1,{"inputs":[{"name":"glutinwindow"}],"output":{"name":"size"}}],[11,"should_close","","",1,{"inputs":[{"name":"glutinwindow"}],"output":{"name":"bool"}}],[11,"set_should_close","","",1,{"inputs":[{"name":"glutinwindow"},{"name":"bool"}],"output":null}],[11,"swap_buffers","","",1,{"inputs":[{"name":"glutinwindow"}],"output":null}],[11,"poll_event","","",1,{"inputs":[{"name":"glutinwindow"}],"output":{"name":"option"}}],[11,"build_from_window_settings","","",1,{"inputs":[{"name":"windowsettings"}],"output":{"name":"result"}}],[11,"get_title","","",1,{"inputs":[{"name":"glutinwindow"}],"output":{"name":"string"}}],[11,"set_title","","",1,{"inputs":[{"name":"glutinwindow"},{"name":"string"}],"output":null}],[11,"get_exit_on_esc","","",1,{"inputs":[{"name":"glutinwindow"}],"output":{"name":"bool"}}],[11,"set_exit_on_esc","","",1,{"inputs":[{"name":"glutinwindow"},{"name":"bool"}],"output":null}],[11,"set_capture_cursor","","",1,{"inputs":[{"name":"glutinwindow"},{"name":"bool"}],"output":null}],[11,"get_proc_address","","",1,{"inputs":[{"name":"glutinwindow"},{"name":"str"}],"output":{"name":"procaddress"}}],[11,"is_current","","",1,{"inputs":[{"name":"glutinwindow"}],"output":{"name":"bool"}}],[11,"make_current","","",1,{"inputs":[{"name":"glutinwindow"}],"output":null}]],"paths":[[4,"OpenGL"],[3,"GlutinWindow"]]};
searchIndex["glutin"] = {"doc":"The purpose of this library is to provide an OpenGL context on as many\n platforms as possible.","items":[[3,"Touch","glutin","Represents touch event",null,null],[12,"phase","","",0,null],[12,"location","","",0,null],[12,"id","","unique identifier of a finger.",0,null],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",null,null],[12,"dimensions","","The dimensions to use.",1,null],[12,"opengl","","The OpenGL attributes to build the context with.",1,null],[3,"HeadlessContext","","Represents a headless OpenGL context.",null,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",2,null],[12,"opengl","","The attributes to use to create the context.",2,null],[3,"WindowProxy","","Represents a thread safe subset of operations that can be called\non a window. This structure can be safely cloned and sent between\nthreads.",null,null],[3,"PollEventsIterator","","An iterator for the `poll_events` function.",null,null],[3,"WaitEventsIterator","","An iterator for the `wait_events` function.",null,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[3,"Window","","Represents an OpenGL context and the Window or environment around it.",null,null],[3,"PixelFormat","","Describes a possible format. Unused.",null,null],[12,"hardware_accelerated","","",3,null],[12,"color_bits","","",3,null],[12,"alpha_bits","","",3,null],[12,"depth_bits","","",3,null],[12,"stencil_bits","","",3,null],[12,"stereoscopy","","",3,null],[12,"double_buffer","","",3,null],[12,"multisampling","","",3,null],[12,"srgb","","",3,null],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",null,null],[12,"hardware_accelerated","","If true, only hardware-accelerated formats will be conisdered. If false, only software\nrenderers. `None` means &quot;don&#39;t care&quot;. Default is `Some(true)`.",4,null],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. `None` means &quot;don&#39;t care&quot;.\nThe default is `Some(24)`.",4,null],[12,"float_color_buffer","","If true, the color buffer must be in a floating point format. Default is `false`.",4,null],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means &quot;don&#39;t care&quot;.\nThe default is `Some(8)`.",4,null],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means &quot;don&#39;t care&quot;.\nThe default value is `Some(24)`.",4,null],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means &quot;don&#39;t care&quot;.\nThe default value is `Some(8)`.",4,null],[12,"double_buffer","","If true, only double-buffered formats will be considered. If false, only single-buffer\nformats. `None` means &quot;don&#39;t care&quot;. The default is `Some(true)`.",4,null],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers.\n`None` means &quot;don&#39;t care&quot;. Default is `None`.\nA value of `Some(0)` indicates that multisampling must not be enabled.",4,null],[12,"stereoscopy","","If true, only stereoscopic formats will be considered. If false, only non-stereoscopic\nformats. The default is `false`.",4,null],[12,"srgb","","If true, only sRGB-capable formats will be considered. If false, don&#39;t care.\nThe default is `false`.",4,null],[12,"release_behavior","","The behavior when changing the current context. Default is `Flush`.",4,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be\nused.",5,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",5,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor&#39;s dimensions by the platform.",5,null],[12,"monitor","","If `Some`, the window will be in fullscreen mode with the given monitor.",5,null],[12,"title","","The title of the window in the title bar.",5,null],[12,"visible","","Whether the window should be immediately visible upon creation.",5,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors\nwith alpha values different than `1.0` will produce a transparent window.",5,null],[12,"decorations","","Whether the window should have borders and bars.",5,null],[12,"multitouch","","[iOS only] Enable multitouch, see [UIView#multipleTouchEnabled]\n(https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/occ/instp/UIView/multipleTouchEnabled)",5,null],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",null,null],[12,"sharing","","An existing context to share the new the context with.",6,null],[12,"version","","Version to try create. See `GlRequest` for more infos.",6,null],[12,"profile","","OpenGL profile to use.",6,null],[12,"debug","","Whether to enable the `debug` flag of the context.",6,null],[12,"robustness","","How the OpenGL context should detect errors.",6,null],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling `swap_buffers` will block until the\nscreen refreshes. This is typically used to prevent screen tearing.",6,null],[4,"Event","","",null,null],[13,"Resized","","The size of the window has changed.",7,null],[13,"Moved","","The position of the window has changed.",7,null],[13,"Closed","","The window has been closed.",7,null],[13,"DroppedFile","","A file has been dropped into the window.",7,null],[13,"ReceivedCharacter","","The window received a unicode character.",7,null],[13,"Focused","","The window gained or lost focus.",7,null],[13,"KeyboardInput","","An event from the keyboard has been received.",7,null],[13,"MouseMoved","","The cursor has moved on the window.",7,null],[13,"MouseWheel","","A mouse wheel movement or touchpad scroll occurred.",7,null],[13,"MouseInput","","An event from the mouse has been received.",7,null],[13,"TouchpadPressure","","Touchpad pressure event.",7,null],[13,"Awakened","","The event loop was woken up by another thread.",7,null],[13,"Refresh","","The window needs to be redrawn.",7,null],[13,"Suspended","","App has been suspended or resumed.",7,null],[13,"Touch","","Touch event has been received",7,null],[4,"TouchPhase","","",null,null],[13,"Started","","",8,null],[13,"Moved","","",8,null],[13,"Ended","","",8,null],[13,"Cancelled","","",8,null],[4,"ElementState","","",null,null],[13,"Pressed","","",9,null],[13,"Released","","",9,null],[4,"MouseButton","","",null,null],[13,"Left","","",10,null],[13,"Right","","",10,null],[13,"Middle","","",10,null],[13,"Other","","",10,null],[4,"MouseScrollDelta","","",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal\nand vertical directions.",11,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and\nvertical direction.",11,null],[4,"VirtualKeyCode","","",null,null],[13,"Key1","","The &#39;1&#39; key over the letters.",12,null],[13,"Key2","","The &#39;2&#39; key over the letters.",12,null],[13,"Key3","","The &#39;3&#39; key over the letters.",12,null],[13,"Key4","","The &#39;4&#39; key over the letters.",12,null],[13,"Key5","","The &#39;5&#39; key over the letters.",12,null],[13,"Key6","","The &#39;6&#39; key over the letters.",12,null],[13,"Key7","","The &#39;7&#39; key over the letters.",12,null],[13,"Key8","","The &#39;8&#39; key over the letters.",12,null],[13,"Key9","","The &#39;9&#39; key over the letters.",12,null],[13,"Key0","","The &#39;0&#39; key over the &#39;O&#39; and &#39;P&#39; keys.",12,null],[13,"A","","",12,null],[13,"B","","",12,null],[13,"C","","",12,null],[13,"D","","",12,null],[13,"E","","",12,null],[13,"F","","",12,null],[13,"G","","",12,null],[13,"H","","",12,null],[13,"I","","",12,null],[13,"J","","",12,null],[13,"K","","",12,null],[13,"L","","",12,null],[13,"M","","",12,null],[13,"N","","",12,null],[13,"O","","",12,null],[13,"P","","",12,null],[13,"Q","","",12,null],[13,"R","","",12,null],[13,"S","","",12,null],[13,"T","","",12,null],[13,"U","","",12,null],[13,"V","","",12,null],[13,"W","","",12,null],[13,"X","","",12,null],[13,"Y","","",12,null],[13,"Z","","",12,null],[13,"Escape","","The Escape key, next to F1.",12,null],[13,"F1","","",12,null],[13,"F2","","",12,null],[13,"F3","","",12,null],[13,"F4","","",12,null],[13,"F5","","",12,null],[13,"F6","","",12,null],[13,"F7","","",12,null],[13,"F8","","",12,null],[13,"F9","","",12,null],[13,"F10","","",12,null],[13,"F11","","",12,null],[13,"F12","","",12,null],[13,"F13","","",12,null],[13,"F14","","",12,null],[13,"F15","","",12,null],[13,"Snapshot","","Print Screen/SysRq.",12,null],[13,"Scroll","","Scroll Lock.",12,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",12,null],[13,"Insert","","`Insert`, next to Backspace.",12,null],[13,"Home","","",12,null],[13,"Delete","","",12,null],[13,"End","","",12,null],[13,"PageDown","","",12,null],[13,"PageUp","","",12,null],[13,"Left","","",12,null],[13,"Up","","",12,null],[13,"Right","","",12,null],[13,"Down","","",12,null],[13,"Back","","The Backspace key, right over Enter.",12,null],[13,"Return","","The Enter key.",12,null],[13,"Space","","The space bar.",12,null],[13,"Numlock","","",12,null],[13,"Numpad0","","",12,null],[13,"Numpad1","","",12,null],[13,"Numpad2","","",12,null],[13,"Numpad3","","",12,null],[13,"Numpad4","","",12,null],[13,"Numpad5","","",12,null],[13,"Numpad6","","",12,null],[13,"Numpad7","","",12,null],[13,"Numpad8","","",12,null],[13,"Numpad9","","",12,null],[13,"AbntC1","","",12,null],[13,"AbntC2","","",12,null],[13,"Add","","",12,null],[13,"Apostrophe","","",12,null],[13,"Apps","","",12,null],[13,"At","","",12,null],[13,"Ax","","",12,null],[13,"Backslash","","",12,null],[13,"Calculator","","",12,null],[13,"Capital","","",12,null],[13,"Colon","","",12,null],[13,"Comma","","",12,null],[13,"Convert","","",12,null],[13,"Decimal","","",12,null],[13,"Divide","","",12,null],[13,"Equals","","",12,null],[13,"Grave","","",12,null],[13,"Kana","","",12,null],[13,"Kanji","","",12,null],[13,"LAlt","","",12,null],[13,"LBracket","","",12,null],[13,"LControl","","",12,null],[13,"LMenu","","",12,null],[13,"LShift","","",12,null],[13,"LWin","","",12,null],[13,"Mail","","",12,null],[13,"MediaSelect","","",12,null],[13,"MediaStop","","",12,null],[13,"Minus","","",12,null],[13,"Multiply","","",12,null],[13,"Mute","","",12,null],[13,"MyComputer","","",12,null],[13,"NavigateForward","","",12,null],[13,"NavigateBackward","","",12,null],[13,"NextTrack","","",12,null],[13,"NoConvert","","",12,null],[13,"NumpadComma","","",12,null],[13,"NumpadEnter","","",12,null],[13,"NumpadEquals","","",12,null],[13,"OEM102","","",12,null],[13,"Period","","",12,null],[13,"PlayPause","","",12,null],[13,"Power","","",12,null],[13,"PrevTrack","","",12,null],[13,"RAlt","","",12,null],[13,"RBracket","","",12,null],[13,"RControl","","",12,null],[13,"RMenu","","",12,null],[13,"RShift","","",12,null],[13,"RWin","","",12,null],[13,"Semicolon","","",12,null],[13,"Slash","","",12,null],[13,"Sleep","","",12,null],[13,"Stop","","",12,null],[13,"Subtract","","",12,null],[13,"Sysrq","","",12,null],[13,"Tab","","",12,null],[13,"Underline","","",12,null],[13,"Unlabeled","","",12,null],[13,"VolumeDown","","",12,null],[13,"VolumeUp","","",12,null],[13,"Wake","","",12,null],[13,"WebBack","","",12,null],[13,"WebFavorites","","",12,null],[13,"WebForward","","",12,null],[13,"WebHome","","",12,null],[13,"WebRefresh","","",12,null],[13,"WebSearch","","",12,null],[13,"WebStop","","",12,null],[13,"Yen","","",12,null],[4,"NativeMonitorId","","Native platform identifier for a monitor. Different platforms use fundamentally different types\nto represent a monitor ID.",null,null],[13,"Numeric","","Cocoa and X11 use a numeric identifier to represent a monitor.",13,null],[13,"Name","","Win32 uses a Unicode string to represent a monitor.",13,null],[13,"Unavailable","","Other platforms (Android) don&#39;t support monitor identification.",13,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",14,null],[13,"NotSupported","","TODO: remove this error",14,null],[13,"NoBackendAvailable","","",14,null],[13,"RobustnessNotSupported","","",14,null],[13,"OpenGlVersionNotSupported","","",14,null],[13,"NoAvailablePixelFormat","","",14,null],[4,"ContextError","","Error that can happen when manipulating an OpenGL context.",null,null],[13,"IoError","","",15,null],[13,"ContextLost","","",15,null],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",null,null],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",16,null],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",16,null],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",16,null],[4,"GlProfile","","Describes the requested OpenGL context profiles.",null,null],[13,"Compatibility","","Include all the immediate more functions and definitions.",17,null],[13,"Core","","Include all the future-compatible functions and definitions.",17,null],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",null,null],[13,"Latest","","Request the latest version of the &quot;best&quot; API of this platform.",18,null],[13,"Specific","","Request a specific version of a specific API.",18,null],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`.\nElse if OpenGL ES or WebGL is available, create a context with the\nspecified `opengles_version`.",18,null],[12,"opengl_version","glutin::GlRequest","The version to use for OpenGL.",18,null],[12,"opengles_version","","The version to use for OpenGL ES.",18,null],[4,"Robustness","glutin","Specifies the tolerance of the OpenGL context to faults. If you accept raw OpenGL commands\nand/or raw shader code from an untrusted source, you should definitely care about this.",null,null],[13,"NotRobust","","Not everything is checked. Your application can crash if you do something wrong with your\nshaders.",19,null],[13,"NoError","","The driver doesn&#39;t check anything. This option is very dangerous. Please know what you&#39;re\ndoing before using it. See the `GL_KHR_no_error` extension.",19,null],[13,"RobustNoResetNotification","","Everything is checked to avoid any crash. The driver will attempt to avoid any problem,\nbut if a problem occurs the behavior is implementation-defined. You are just guaranteed not\nto get a crash.",19,null],[13,"TryRobustNoResetNotification","","Same as `RobustNoResetNotification` but the context creation doesn&#39;t fail if it&#39;s not\nsupported.",19,null],[13,"RobustLoseContextOnReset","","Everything is checked to avoid any crash. If a problem occurs, the context will enter a\n&quot;context lost&quot; state. It must then be recreated. For the moment, glutin doesn&#39;t provide a\nway to recreate a context with the same window :-/",19,null],[13,"TryRobustLoseContextOnReset","","Same as `RobustLoseContextOnReset` but the context creation doesn&#39;t fail if it&#39;s not\nsupported.",19,null],[4,"ReleaseBehavior","","The behavior of the driver when you change the current context.",null,null],[13,"None","","Doesn&#39;t do anything. Most notably doesn&#39;t flush.",20,null],[13,"Flush","","Flushes the context that was previously current as if `glFlush` was called.",20,null],[4,"MouseCursor","","",null,null],[13,"Default","","The platform-dependent default cursor.",21,null],[13,"Crosshair","","A simple crosshair.",21,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",21,null],[13,"Arrow","","Self explanatory.",21,null],[13,"Move","","Indicates something is to be moved.",21,null],[13,"Text","","Indicates text that may be selected or edited.",21,null],[13,"Wait","","Program busy indicator.",21,null],[13,"Help","","Help indicator (often rendered as a &quot;?&quot;)",21,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast\nwith &quot;Wait&quot; the user may still interact with the program. Often rendered\nas a spinning beach ball, or an arrow with a watch or hourglass.",21,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",21,null],[13,"ContextMenu","","",21,null],[13,"NoneCursor","","",21,null],[13,"Cell","","",21,null],[13,"VerticalText","","",21,null],[13,"Alias","","",21,null],[13,"Copy","","",21,null],[13,"NoDrop","","",21,null],[13,"Grab","","",21,null],[13,"Grabbing","","",21,null],[13,"AllScroll","","",21,null],[13,"ZoomIn","","",21,null],[13,"ZoomOut","","",21,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the &#39;SeResize&#39; cursor\nis used when the movement starts from the south-east corner of the box.",21,null],[13,"NResize","","",21,null],[13,"NeResize","","",21,null],[13,"NwResize","","",21,null],[13,"SResize","","",21,null],[13,"SeResize","","",21,null],[13,"SwResize","","",21,null],[13,"WResize","","",21,null],[13,"EwResize","","",21,null],[13,"NsResize","","",21,null],[13,"NeswResize","","",21,null],[13,"NwseResize","","",21,null],[13,"ColResize","","",21,null],[13,"RowResize","","",21,null],[4,"CursorState","","Describes how glutin handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",22,null],[13,"Hide","","The cursor will be invisible when over the window.",22,null],[13,"Grab","","Grabs the mouse cursor. The cursor&#39;s motion will be confined to this\nwindow and the window has exclusive access to further events regarding\nthe cursor.",22,null],[5,"get_available_monitors","","Returns the list of all available monitors.",null,{"inputs":[],"output":{"name":"availablemonitorsiter"}}],[5,"get_primary_monitor","","Returns the primary monitor of the system.",null,{"inputs":[],"output":{"name":"monitorid"}}],[11,"detail","x11_dl::error","",23,{"inputs":[{"name":"openerror"}],"output":{"name":"str"}}],[11,"new","","",23,{"inputs":[{"name":"openerrorkind"},{"name":"string"}],"output":{"name":"openerror"}}],[11,"description","","",23,{"inputs":[{"name":"openerror"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"openerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"openerror"}],"output":{"name":"openerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"openerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","glutin","",7,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"clone","","",8,{"inputs":[{"name":"touchphase"}],"output":{"name":"touchphase"}}],[11,"eq","","",8,{"inputs":[{"name":"touchphase"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"touchphase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"touch"}],"output":{"name":"touch"}}],[11,"fmt","","",0,{"inputs":[{"name":"touch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"elementstate"}],"output":{"name":"elementstate"}}],[11,"eq","","",9,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"elementstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"eq","","",10,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"mousescrolldelta"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"mousescrolldelta"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"mousescrolldelta"}],"output":{"name":"mousescrolldelta"}}],[11,"fmt","","",11,{"inputs":[{"name":"mousescrolldelta"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"virtualkeycode"}}],[11,"eq","","",12,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"virtualkeycode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",1,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",1,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"glrequest"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",1,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"bool"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",1,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"robustness"}],"output":{"name":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",1,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the headless context.",1,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"make_current","","Creates a new OpenGL context\nSets the context as the current context.",24,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",24,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",24,null],[11,"get_api","","Returns the API that is currently provided by this window.",24,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"set_window_resize_callback","","",24,{"inputs":[{"name":"headlesscontext"},{"name":"option"}],"output":null}],[11,"make_current","","",24,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","",24,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",24,null],[11,"swap_buffers","","",24,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"get_api","","",24,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",24,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"pixelformat"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",2,{"inputs":[],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",2,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",2,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",2,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",2,{"inputs":[{"name":"windowbuilder"},{"name":"string"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Requests fullscreen mode.",2,{"inputs":[{"name":"windowbuilder"},{"name":"monitorid"}],"output":{"name":"windowbuilder"}}],[11,"with_shared_lists","","The created window will share all its OpenGL objects with the window in the parameter.",2,{"inputs":[{"name":"windowbuilder"},{"name":"window"}],"output":{"name":"windowbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",2,{"inputs":[{"name":"windowbuilder"},{"name":"glrequest"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",2,{"inputs":[{"name":"windowbuilder"},{"name":"glprofile"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",2,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",2,{"inputs":[{"name":"windowbuilder"},{"name":"robustness"}],"output":{"name":"windowbuilder"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",2,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multisampling","","Sets the multisampling level to request.",2,{"inputs":[{"name":"windowbuilder"},{"name":"u16"}],"output":{"name":"windowbuilder"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",2,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",2,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",2,{"inputs":[{"name":"windowbuilder"},{"name":"u8"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window. `None` means &quot;I don&#39;t care&quot;.",2,{"inputs":[{"name":"windowbuilder"},{"name":"option"}],"output":{"name":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",2,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",2,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the window.",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"window"}}],[11,"new","","Creates a new OpenGL context, and a Window for platforms where this is appropriate.",25,{"inputs":[],"output":{"name":"result"}}],[11,"set_title","","Modifies the title of the window.",25,{"inputs":[{"name":"window"},{"name":"str"}],"output":null}],[11,"show","","Shows the window if it was hidden.",25,{"inputs":[{"name":"window"}],"output":null}],[11,"hide","","Hides the window if it was visible.",25,{"inputs":[{"name":"window"}],"output":null}],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the\n top-left hand corner of the desktop.",25,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",25,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"get_inner_size","","Returns the size in points of the client area of the window.",25,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",25,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",25,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",25,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",25,{"inputs":[{"name":"window"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"poll_events","","Returns an iterator that poll for the next event in the window&#39;s events queue.\nReturns `None` if there is no event in the queue.",25,{"inputs":[{"name":"window"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","Returns an iterator that returns events one by one, blocking if necessary until one is\navailable.",25,{"inputs":[{"name":"window"}],"output":{"name":"waiteventsiterator"}}],[11,"make_current","","Sets the context as the current context.",25,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",25,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",25,null],[11,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",25,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window.\nThis is typically only required when integrating with\nother libraries that need this information.",25,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is\ntypically only required when integrating with other libraries\nthat need this information.",25,null],[11,"get_api","","Returns the API that is currently provided by this window.",25,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","Returns the pixel format of this window.",25,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"create_window_proxy","","Create a window proxy for this window, that can be freely\npassed to different threads.",25,{"inputs":[{"name":"window"}],"output":{"name":"windowproxy"}}],[11,"set_window_resize_callback","","Sets a resize callback that is called by Mac (and potentially other\noperating systems) during resize operations. This can be used to repaint\nduring window resizing.",25,{"inputs":[{"name":"window"},{"name":"option"}],"output":null}],[11,"set_cursor","","Modifies the mouse cursor of the window.\nHas no effect on Android.",25,{"inputs":[{"name":"window"},{"name":"mousecursor"}],"output":null}],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the\nwindow size in screen pixels. This is typically one for a normal display\nand two for a retina display.",25,{"inputs":[{"name":"window"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",25,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how glutin handles the cursor. See the documentation of `CursorState` for details.",25,{"inputs":[{"name":"window"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"make_current","","",25,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","",25,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",25,null],[11,"swap_buffers","","",25,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"get_api","","",25,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",25,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"clone","","",26,{"inputs":[{"name":"windowproxy"}],"output":{"name":"windowproxy"}}],[11,"wakeup_event_loop","","Triggers a blocked event loop to wake up. This is\ntypically called when another thread wants to wake\nup the blocked rendering thread to cause a refresh.",26,{"inputs":[{"name":"windowproxy"}],"output":null}],[11,"next","","",27,{"inputs":[{"name":"polleventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"waiteventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next","","",29,{"inputs":[{"name":"availablemonitorsiter"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"get_name","","Returns a human-readable name of the monitor.",30,{"inputs":[{"name":"monitorid"}],"output":{"name":"option"}}],[11,"get_native_identifier","","Returns the native platform identifier for this monitor.",30,{"inputs":[{"name":"monitorid"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",30,null],[0,"os","","Contains traits with platform-specific methods in them.",null,null],[0,"unix","glutin::os","",null,null],[8,"WindowExt","glutin::os::unix","Additional methods on `Window` that are specific to Unix.",null,null],[10,"get_xlib_window","","Returns a pointer to the `Window` object of xlib that is used by this window.",31,{"inputs":[{"name":"windowext"}],"output":{"name":"option"}}],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",31,{"inputs":[{"name":"windowext"}],"output":{"name":"option"}}],[8,"WindowBuilderExt","","Additional methods on `WindowBuilder` that are specific to Unix.",null,null],[11,"get_xlib_window","glutin","",25,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_xlib_display","","",25,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"eq","","",13,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"nativemonitorid"}],"output":{"name":"nativemonitorid"}}],[6,"ScanCode","","",null,null],[7,"GL_CORE","","The minimum core profile GL context. Useful for getting the minimum\nrequired GL version while still running on OSX, which often forbids\nthe compatibility profile features.",null,null],[8,"GlContext","","Trait that describes objects that have access to an OpenGL context.",null,null],[10,"make_current","","Sets the context as the current context.",32,{"inputs":[{"name":"glcontext"}],"output":{"name":"result"}}],[10,"is_current","","Returns true if this context is the current one in this thread.",32,{"inputs":[{"name":"glcontext"}],"output":{"name":"bool"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",32,null],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",32,{"inputs":[{"name":"glcontext"}],"output":{"name":"result"}}],[10,"get_api","","Returns the OpenGL API being used.",32,{"inputs":[{"name":"glcontext"}],"output":{"name":"api"}}],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",32,{"inputs":[{"name":"glcontext"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",14,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"creationerror"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"creationerror"}],"output":{"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"contexterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"contexterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",15,{"inputs":[{"name":"contexterror"}],"output":{"name":"str"}}],[11,"eq","","",16,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"api"}],"output":{"name":"api"}}],[11,"fmt","","",16,{"inputs":[{"name":"api"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"glprofile"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"glprofile"}],"output":{"name":"glprofile"}}],[11,"fmt","","",17,{"inputs":[{"name":"glprofile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"glrequest"}],"output":{"name":"glrequest"}}],[11,"fmt","","",18,{"inputs":[{"name":"glrequest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",18,{"inputs":[{"name":"glrequest"}],"output":{"name":"option"}}],[11,"eq","","",19,{"inputs":[{"name":"robustness"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"robustness"}],"output":{"name":"robustness"}}],[11,"fmt","","",19,{"inputs":[{"name":"robustness"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"releasebehavior"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"releasebehavior"}],"output":{"name":"releasebehavior"}}],[11,"fmt","","",20,{"inputs":[{"name":"releasebehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"mousecursor"}],"output":{"name":"mousecursor"}}],[11,"fmt","","",21,{"inputs":[{"name":"mousecursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"cursorstate"}],"output":{"name":"cursorstate"}}],[11,"fmt","","",22,{"inputs":[{"name":"cursorstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"pixelformat"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",3,{"inputs":[{"name":"pixelformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"pixelformatrequirements"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"pixelformatrequirements"}],"output":{"name":"pixelformatrequirements"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"pixelformatrequirements"}}],[11,"clone","","",5,{"inputs":[{"name":"windowattributes"}],"output":{"name":"windowattributes"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"windowattributes"}}],[11,"clone","","",6,{"inputs":[{"name":"glattributes"}],"output":{"name":"glattributes"}}],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",6,{"inputs":[{"name":"glattributes"},{"name":"f"}],"output":{"name":"glattributes"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"glattributes"}}]],"paths":[[3,"Touch"],[3,"HeadlessRendererBuilder"],[3,"WindowBuilder"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"WindowAttributes"],[3,"GlAttributes"],[4,"Event"],[4,"TouchPhase"],[4,"ElementState"],[4,"MouseButton"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[4,"NativeMonitorId"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[4,"MouseCursor"],[4,"CursorState"],[3,"OpenError"],[3,"HeadlessContext"],[3,"Window"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"AvailableMonitorsIter"],[3,"MonitorId"],[8,"WindowExt"],[8,"GlContext"]]};
searchIndex["gfx_core"] = {"doc":"Low-level graphics abstraction for Rust. Mostly operates on data, not types.\nDesigned for use by libraries and higher-level abstractions only.","items":[[0,"state","gfx_core","Fixed-function hardware state.",null,null],[11,"cmp","draw_state::state","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"frontface"}],"output":{"name":"frontface"}}],[11,"fmt","","",0,{"inputs":[{"name":"frontface"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"FrontFace","gfx_core::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",0,null],[13,"CounterClockwise","","Counter-clockwise winding order.",0,null],[6,"LineWidth","","",null,null],[6,"OffsetSlope","","",null,null],[6,"OffsetUnits","","",null,null],[11,"clone","draw_state::state","",1,{"inputs":[{"name":"offset"}],"output":{"name":"offset"}}],[11,"fmt","","",1,{"inputs":[{"name":"offset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[3,"Offset","gfx_core::state","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"clone","draw_state::state","",2,{"inputs":[{"name":"cullface"}],"output":{"name":"cullface"}}],[11,"eq","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"cullface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"ordering"}}],[4,"CullFace","gfx_core::state","Which face, if any, to cull.",null,null],[13,"Nothing","","",2,null],[13,"Front","","",2,null],[13,"Back","","",2,null],[11,"get_cull_face","draw_state::state","Get the cull face, if any, for this primitive state.",3,{"inputs":[{"name":"rastermethod"}],"output":{"name":"cullface"}}],[11,"clone","","",3,{"inputs":[{"name":"rastermethod"}],"output":{"name":"rastermethod"}}],[11,"fmt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[4,"RasterMethod","gfx_core::state","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",3,null],[13,"Line","","Rasterize as a line with the given width.",3,null],[13,"Fill","","Rasterize as a face with a given cull face mode.",3,null],[11,"clone","draw_state::state","",4,{"inputs":[{"name":"multisample"}],"output":{"name":"multisample"}}],[11,"eq","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"multisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"partial_cmp","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"ordering"}}],[3,"MultiSample","gfx_core::state","Multi-sampling rasterization mode",null,null],[11,"new_fill","draw_state::state","Create a new filling rasterizer.",5,{"inputs":[{"name":"cullface"}],"output":{"name":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",5,{"inputs":[{"name":"rasterizer"},{"name":"f32"},{"name":"i32"}],"output":{"name":"rasterizer"}}],[11,"clone","","",5,{"inputs":[{"name":"rasterizer"}],"output":{"name":"rasterizer"}}],[11,"fmt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[3,"Rasterizer","gfx_core::state","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",5,null],[12,"method","","How to rasterize this primitive.",5,null],[12,"offset","","Any polygon offset to apply.",5,null],[12,"samples","","Multi-sampling mode.",5,null],[11,"clone","draw_state::state","",6,{"inputs":[{"name":"comparison"}],"output":{"name":"comparison"}}],[11,"eq","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"comparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"ordering"}}],[4,"Comparison","gfx_core::state","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",6,null],[13,"Less","","`x &lt; y`",6,null],[13,"LessEqual","","`x &lt;= y`",6,null],[13,"Equal","","`x == y`",6,null],[13,"GreaterEqual","","`x &gt;= y`",6,null],[13,"Greater","","`x &gt; y`",6,null],[13,"NotEqual","","`x != y`",6,null],[13,"Always","","`true`",6,null],[11,"clone","draw_state::state","",7,{"inputs":[{"name":"stencilop"}],"output":{"name":"stencilop"}}],[11,"eq","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"stencilop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[4,"StencilOp","gfx_core::state","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",7,null],[13,"Zero","","Set the value in the stencil buffer to zero.",7,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",7,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",7,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",7,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",7,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",7,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",7,null],[11,"default","draw_state::state","",8,{"inputs":[],"output":{"name":"stencilside"}}],[11,"clone","","",8,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"eq","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"stencilside"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"partial_cmp","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[3,"StencilSide","gfx_core::state","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",8,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",8,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",8,null],[12,"op_fail","","What operation to do if the stencil test fails.",8,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",8,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",8,null],[11,"new","draw_state::state","Create a new stencil state with a given function.",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"stencil"}}],[11,"clone","","",9,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"eq","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"ordering"}}],[3,"Stencil","gfx_core::state","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",9,null],[12,"back","","",9,null],[11,"default","draw_state::state","",10,{"inputs":[],"output":{"name":"depth"}}],[11,"clone","","",10,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"eq","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"depth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"partial_cmp","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"ordering"}}],[3,"Depth","gfx_core::state","Depth test state.",null,null],[12,"fun","","Comparison function to use.",10,null],[12,"write","","Specify whether to write to the depth buffer or not.",10,null],[11,"cmp","draw_state::state","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"clone","","",11,{"inputs":[{"name":"equation"}],"output":{"name":"equation"}}],[11,"eq","","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"equation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"partial_cmp","","",11,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"option"}}],[4,"Equation","gfx_core::state","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",11,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",11,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",11,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",11,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",11,null],[11,"cmp","draw_state::state","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"blendvalue"}],"output":{"name":"blendvalue"}}],[11,"eq","","",12,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"blendvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[4,"BlendValue","gfx_core::state","",null,null],[13,"SourceColor","","",12,null],[13,"SourceAlpha","","",12,null],[13,"DestColor","","",12,null],[13,"DestAlpha","","",12,null],[13,"ConstColor","","",12,null],[13,"ConstAlpha","","",12,null],[11,"partial_cmp","draw_state::state","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"factor"}],"output":{"name":"factor"}}],[11,"eq","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"factor"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Factor","gfx_core::state","",null,null],[13,"Zero","","",13,null],[13,"One","","",13,null],[13,"SourceAlphaSaturated","","",13,null],[13,"ZeroPlus","","",13,null],[13,"OneMinus","","",13,null],[11,"fmt","draw_state::state","",14,{"inputs":[{"name":"blendchannel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"cmp","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"eq","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[3,"BlendChannel","gfx_core::state","",null,null],[12,"equation","","",14,null],[12,"source","","",14,null],[12,"destination","","",14,null],[11,"hash","draw_state::state","",15,null],[11,"partial_cmp","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new blend state with a given equation.",15,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"blend"}}],[11,"clone","","",15,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[3,"Blend","gfx_core::state","",null,null],[12,"color","","",15,null],[12,"alpha","","",15,null],[11,"hash","draw_state::state","",16,null],[11,"partial_cmp","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitor","","Returns the union of the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",16,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",16,null],[11,"remove","","Removes the specified flags in-place.",16,null],[11,"toggle","","Toggles the specified flags in-place.",16,null],[11,"fmt","","",16,{"inputs":[{"name":"colormask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"not","","Returns the complement of this set of flags.",16,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"sub","","Returns the set difference of the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",16,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[3,"ColorMask","gfx_core::state","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[11,"hash","draw_state::state","",17,null],[11,"eq","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"color"}}],[11,"clone","","",17,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"fmt","","",17,{"inputs":[{"name":"color"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Color","gfx_core::state","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",17,null],[12,"blend","","Optional blending.",17,null],[11,"clone","draw_state::state","",18,{"inputs":[{"name":"refvalues"}],"output":{"name":"refvalues"}}],[11,"fmt","","",18,{"inputs":[{"name":"refvalues"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"refvalues"}}],[3,"RefValues","gfx_core::state","The complete set of the rasterizer reference values.\nSwitching these doesn&#39;t roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",18,null],[12,"blend","","Constant blend color.",18,null],[0,"target","gfx_core","Render target specification.",null,null],[6,"Layer","gfx_core::target","",null,null],[6,"Level","","",null,null],[6,"Depth","","",null,null],[6,"Stencil","","",null,null],[11,"fmt","draw_state::target","",19,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[3,"Rect","gfx_core::target","A screen space rectangle",null,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"w","","",19,null],[12,"h","","",19,null],[6,"ColorValue","","",null,null],[11,"eq","draw_state::target","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"hash","","",20,null],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,null],[11,"remove","","Removes the specified flags in-place.",20,null],[11,"toggle","","Toggles the specified flags in-place.",20,null],[11,"fmt","","",20,{"inputs":[{"name":"mirror"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Mirror","gfx_core::target","Mirroring flags, used for blitting",null,null],[17,"MIRROR_X","","",null,null],[17,"MIRROR_Y","","",null,null],[3,"VertexShader","gfx_core","",null,null],[3,"HullShader","","",null,null],[3,"DomainShader","","",null,null],[3,"GeometryShader","","",null,null],[3,"PixelShader","","",null,null],[3,"Capabilities","","Features that the device supports.",null,null],[12,"max_vertex_count","","",21,null],[12,"max_index_count","","",21,null],[12,"max_texture_size","","",21,null],[12,"instance_base_supported","","",21,null],[12,"instance_call_supported","","",21,null],[12,"instance_rate_supported","","",21,null],[12,"vertex_base_supported","","",21,null],[12,"srgb_color_supported","","",21,null],[12,"constant_buffer_supported","","",21,null],[12,"unordered_access_view_supported","","",21,null],[12,"separate_blending_slots_supported","","",21,null],[4,"ShaderSet","","A complete set of shaders to link a program.",null,null],[13,"Simple","","Simple program: Vs-Ps",22,null],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",22,null],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",null,null],[13,"PointList","","Each vertex represents a single point.",23,null],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d,\ne]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",23,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a &quot;path&quot; of\nlines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line\nline, and `b` and `c` form a line.",23,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`,\n`a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",23,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c,\nd]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",23,null],[4,"IndexType","","A type of each index value in the mesh&#39;s index buffer",null,null],[13,"U8","","",24,null],[13,"U16","","",24,null],[13,"U32","","",24,null],[0,"draw","","Command Buffer device interface",null,null],[4,"ClearColor","gfx_core::draw","A universal clear color supporting integet formats\nas well as the standard floating-point.",null,null],[13,"Float","","Standard floating-point vec4 color",25,null],[13,"Int","","Integer vector to clear ivec4 targets.",25,null],[13,"Uint","","Unsigned int vector to clear uvec4 targets.",25,null],[6,"InstanceOption","","Optional instance parameters",null,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an\nefficient API-specific manner, to be ready for execution on the device.",null,null],[10,"clone_empty","","Clone as an empty buffer",26,{"inputs":[{"name":"commandbuffer"}],"output":{"name":"self"}}],[10,"reset","","Reset the command buffer contents, retain the allocated storage",26,{"inputs":[{"name":"commandbuffer"}],"output":null}],[10,"bind_pipeline_state","","Bind a pipeline state object",26,{"inputs":[{"name":"commandbuffer"},{"name":"pipelinestateobject"}],"output":null}],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",26,{"inputs":[{"name":"commandbuffer"},{"name":"vertexbufferset"}],"output":null}],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",26,null],[10,"bind_global_constant","","Bind a global constant",26,{"inputs":[{"name":"commandbuffer"},{"name":"location"},{"name":"uniformvalue"}],"output":null}],[10,"bind_resource_views","","Bind a complete set of shader resource views",26,null],[10,"bind_unordered_views","","Bind a complete set of unordered access views",26,null],[10,"bind_samplers","","Bind a complete set of samplers",26,null],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple\ncolors views and an optional depth/stencil view.",26,{"inputs":[{"name":"commandbuffer"},{"name":"pixeltargetset"}],"output":null}],[10,"bind_index","","Bind an index buffer",26,{"inputs":[{"name":"commandbuffer"},{"name":"buffer"},{"name":"indextype"}],"output":null}],[10,"set_scissor","","Set scissor rectangle",26,{"inputs":[{"name":"commandbuffer"},{"name":"rect"}],"output":null}],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",26,{"inputs":[{"name":"commandbuffer"},{"name":"refvalues"}],"output":null}],[10,"update_buffer","","Update a vertex/index/uniform buffer",26,null],[10,"update_texture","","Update a texture",26,null],[10,"generate_mipmap","","",26,{"inputs":[{"name":"commandbuffer"},{"name":"shaderresourceview"}],"output":null}],[10,"clear_color","","Clear color target",26,{"inputs":[{"name":"commandbuffer"},{"name":"rendertargetview"},{"name":"clearcolor"}],"output":null}],[10,"clear_depth_stencil","","",26,{"inputs":[{"name":"commandbuffer"},{"name":"depthstencilview"},{"name":"option"},{"name":"option"}],"output":null}],[10,"call_draw","","Draw a primitive",26,{"inputs":[{"name":"commandbuffer"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[10,"call_draw_indexed","","Draw a primitive with index buffer",26,{"inputs":[{"name":"commandbuffer"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[11,"partial_cmp","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"clearcolor"},{"name":"clearcolor"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"clearcolor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"clearcolor"}],"output":{"name":"clearcolor"}}],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,null],[11,"from","","",25,{"inputs":[{"name":"f32"}],"output":{"name":"clearcolor"}}],[11,"from","","",25,{"inputs":[{"name":"i32"}],"output":{"name":"clearcolor"}}],[11,"from","","",25,{"inputs":[{"name":"u32"}],"output":{"name":"clearcolor"}}],[0,"dummy","gfx_core","Dummy backend implementation to test the code for compile errors\noutside of the graphics development environment.",null,null],[3,"DummyDevice","gfx_core::dummy","Dummy device which does minimal work, just to allow testing\ngfx-rs apps for compilation.",null,null],[3,"DummyCommandBuffer","","Dummy command buffer, which ignores all the calls.",null,null],[4,"DummyResources","","Dummy resources phantom type",null,null],[11,"eq","","",27,{"inputs":[{"name":"dummyresources"},{"name":"dummyresources"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"dummyresources"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"dummyresources"}],"output":{"name":"dummyresources"}}],[11,"new","","Create a new dummy device",28,{"inputs":[],"output":{"name":"dummydevice"}}],[11,"clone_empty","","",29,{"inputs":[{"name":"dummycommandbuffer"}],"output":{"name":"dummycommandbuffer"}}],[11,"reset","","",29,{"inputs":[{"name":"dummycommandbuffer"}],"output":null}],[11,"bind_pipeline_state","","",29,null],[11,"bind_vertex_buffers","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"vertexbufferset"}],"output":null}],[11,"bind_constant_buffers","","",29,null],[11,"bind_global_constant","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"location"},{"name":"uniformvalue"}],"output":null}],[11,"bind_resource_views","","",29,null],[11,"bind_unordered_views","","",29,null],[11,"bind_samplers","","",29,null],[11,"bind_pixel_targets","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"pixeltargetset"}],"output":null}],[11,"bind_index","","",29,null],[11,"set_scissor","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"rect"}],"output":null}],[11,"set_ref_values","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"refvalues"}],"output":null}],[11,"update_buffer","","",29,null],[11,"update_texture","","",29,null],[11,"generate_mipmap","","",29,null],[11,"clear_color","","",29,null],[11,"clear_depth_stencil","","",29,null],[11,"call_draw","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[11,"call_draw_indexed","","",29,{"inputs":[{"name":"dummycommandbuffer"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[11,"get_capabilities","","",28,{"inputs":[{"name":"dummydevice"}],"output":{"name":"capabilities"}}],[11,"pin_submitted_resources","","",28,{"inputs":[{"name":"dummydevice"},{"name":"manager"}],"output":null}],[11,"submit","","",28,{"inputs":[{"name":"dummydevice"},{"name":"dummycommandbuffer"}],"output":null}],[11,"cleanup","","",28,{"inputs":[{"name":"dummydevice"}],"output":null}],[0,"factory","gfx_core","Resource factory.",null,null],[3,"Bind","gfx_core::factory","Bind flags",null,null],[3,"BufferInfo","","An information block that is immutable and associated with each buffer.",null,null],[12,"role","","Role",30,null],[12,"usage","","Usage hint",30,null],[12,"bind","","Bind flags",30,null],[12,"size","","Size in bytes",30,null],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers\nthat you use via shader resource / unordered access views.",30,null],[4,"MapAccess","","Specifies the access allowed to a buffer mapping.",null,null],[13,"Readable","","Only allow reads.",31,null],[13,"Writable","","Only allow writes.",31,null],[13,"RW","","Allow full access.",31,null],[4,"BufferRole","","Role of the memory buffer. GLES doesn&#39;t allow chaning bind points for buffers.",null,null],[13,"Vertex","","Generic vertex buffer",32,null],[13,"Index","","Index buffer",32,null],[13,"Uniform","","Uniform block buffer",32,null],[4,"Usage","","A hint as to how this buffer/texture will be used.",null,null],[13,"GpuOnly","","GPU: read + write, CPU: copy. Optimal for render targets.",33,null],[13,"Const","","GPU: read, CPU: none. Optimal for resourced textures/buffers.",33,null],[13,"Dynamic","","GPU: read, CPU: write.",33,null],[13,"CpuOnly","","GPU: copy, CPU: as specified. Used as a staging buffer,\nto be copied back and forth with on-GPU targets.",33,null],[4,"BufferError","","Error creating a buffer.",null,null],[13,"UnsupportedBind","","Some of the bind flags are not supported.",34,null],[13,"Other","","Unknown other error.",34,null],[4,"BufferUpdateError","","An error happening on buffer updates.",null,null],[13,"OutOfBounds","","Trying to change the contents outside of the allocation.",35,null],[4,"ResourceViewError","","Error creating either a ShaderResourceView, or UnorderedAccessView.",null,null],[13,"NoBindFlag","","The corresponding bind flag does not present in the texture.",36,null],[13,"Channel","","Selected channel type is not supported for this texture.",36,null],[13,"Unsupported","","The backend refused for some reason.",36,null],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",null,null],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag does not present in the texture.",37,null],[13,"BadLevel","","Selected mip level doesn&#39;t exist.",37,null],[13,"BadLayer","","Selected array layer doesn&#39;t exist.",37,null],[13,"Channel","","Selected channel type is not supported for this texture.",37,null],[13,"Unsupported","","The backend refused for some reason.",37,null],[4,"CombinedError","","An error from creating textures with views at the same time.",null,null],[13,"Texture","","Failed to create the raw texture.",38,null],[13,"Resource","","Failed to create SRV or UAV.",38,null],[13,"Target","","Failed to create RTV or DSV.",38,null],[5,"cast_slice","","Cast a slice from one POD type to another.",null,null],[17,"RENDER_TARGET","","The resource can be rendered into.",null,null],[17,"DEPTH_STENCIL","","The resource can serve as a depth/stencil target.",null,null],[17,"SHADER_RESOURCE","","The resource can be bound to the shader for reading.",null,null],[17,"UNORDERED_ACCESS","","The resource can be bound to the shader for writing.",null,null],[8,"Typed","","A service trait used to get the raw data out of\nstrong types. Not meant for public use.",null,null],[16,"Raw","","The raw type behind the phantom.",39,null],[10,"new","","Crete a new phantom from the raw type.",39,{"inputs":[{"name":"raw"}],"output":{"name":"self"}}],[10,"raw","","Get an internal reference to the raw type.",39,{"inputs":[{"name":"typed"}],"output":{"name":"raw"}}],[8,"Factory","","",null,null],[16,"Mapper","","Associated mapper type",40,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation",40,{"inputs":[{"name":"factory"}],"output":{"name":"capabilities"}}],[10,"create_buffer_raw","","",40,{"inputs":[{"name":"factory"},{"name":"bufferinfo"}],"output":{"name":"result"}}],[10,"create_buffer_const_raw","","",40,null],[11,"create_buffer_const","","",40,null],[11,"create_buffer_dynamic","","",40,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"}],"output":{"name":"result"}}],[11,"create_buffer_staging","","",40,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferrole"},{"name":"bind"},{"name":"mapaccess"}],"output":{"name":"result"}}],[10,"create_pipeline_state_raw","","",40,{"inputs":[{"name":"factory"},{"name":"program"},{"name":"descriptor"}],"output":{"name":"result"}}],[10,"create_program","","",40,{"inputs":[{"name":"factory"},{"name":"shaderset"}],"output":{"name":"result"}}],[10,"create_shader","","",40,null],[11,"create_shader_vertex","","",40,null],[11,"create_shader_geometry","","",40,null],[11,"create_shader_pixel","","",40,null],[10,"create_sampler","","",40,{"inputs":[{"name":"factory"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"map_buffer_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawbuffer"},{"name":"mapaccess"}],"output":{"name":"mapper"}}],[10,"unmap_buffer_raw","","",40,{"inputs":[{"name":"factory"},{"name":"mapper"}],"output":null}],[10,"map_buffer_readable","","",40,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"readable"}}],[10,"map_buffer_writable","","",40,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"writable"}}],[10,"map_buffer_rw","","",40,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"rw"}}],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint,\nrequired to assist backends that have no concept of typeless formats (OpenGL).\nThe initial data, if given, has to be provided for all mip levels and slices:\nSlice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",40,{"inputs":[{"name":"factory"},{"name":"descriptor"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[10,"view_buffer_as_shader_resource_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_buffer_as_unordered_access_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawbuffer"}],"output":{"name":"result"}}],[10,"view_texture_as_shader_resource_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"resourcedesc"}],"output":{"name":"result"}}],[10,"view_texture_as_unordered_access_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawtexture"}],"output":{"name":"result"}}],[10,"view_texture_as_render_target_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"renderdesc"}],"output":{"name":"result"}}],[10,"view_texture_as_depth_stencil_raw","","",40,{"inputs":[{"name":"factory"},{"name":"rawtexture"},{"name":"depthstencildesc"}],"output":{"name":"result"}}],[11,"create_texture","","",40,{"inputs":[{"name":"factory"},{"name":"kind"},{"name":"level"},{"name":"bind"},{"name":"usage"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_buffer_as_shader_resource","","",40,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_buffer_as_unordered_access","","",40,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"view_texture_as_shader_resource","","",40,null],[11,"view_texture_as_unordered_access","","",40,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"view_texture_as_render_target","","",40,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"level"},{"name":"option"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil","","",40,{"inputs":[{"name":"factory"},{"name":"texture"},{"name":"level"},{"name":"option"},{"name":"depthstencilflags"}],"output":{"name":"result"}}],[11,"view_texture_as_depth_stencil_trivial","","",40,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_texture_const_u8","","",40,null],[11,"create_texture_const","","",40,null],[11,"create_render_target","","",40,{"inputs":[{"name":"factory"},{"name":"size"},{"name":"size"}],"output":{"name":"result"}}],[11,"create_depth_stencil","","",40,{"inputs":[{"name":"factory"},{"name":"size"},{"name":"size"}],"output":{"name":"result"}}],[11,"create_depth_stencil_view_only","","",40,{"inputs":[{"name":"factory"},{"name":"size"},{"name":"size"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"mapaccess"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"mapaccess"}],"output":{"name":"mapaccess"}}],[11,"hash","","",31,null],[11,"partial_cmp","","",31,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"option"}}],[11,"eq","","",31,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"bool"}}],[11,"cmp","","",31,{"inputs":[{"name":"mapaccess"},{"name":"mapaccess"}],"output":{"name":"ordering"}}],[11,"hash","","",41,null],[11,"cmp","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"bind"}],"output":{"name":"bind"}}],[11,"eq","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"bind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",41,{"inputs":[],"output":{"name":"bind"}}],[11,"all","","Returns the set containing all flags.",41,{"inputs":[],"output":{"name":"bind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",41,{"inputs":[{"name":"bind"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",41,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",41,{"inputs":[{"name":"u8"}],"output":{"name":"bind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",41,{"inputs":[{"name":"bind"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",41,{"inputs":[{"name":"bind"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",41,{"inputs":[{"name":"bind"},{"name":"bind"}],"output":{"name":"bind"}}],[11,"not","","Returns the complement of this set of flags.",41,{"inputs":[{"name":"bind"}],"output":{"name":"bind"}}],[11,"from_iter","","",41,{"inputs":[{"name":"t"}],"output":{"name":"bind"}}],[11,"eq","","",32,{"inputs":[{"name":"bufferrole"},{"name":"bufferrole"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"bufferrole"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"bufferrole"}],"output":{"name":"bufferrole"}}],[11,"fmt","","",33,{"inputs":[{"name":"usage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[11,"hash","","",33,null],[11,"partial_cmp","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"cmp","","",33,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"eq","","",30,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"bufferinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"bufferinfo"}],"output":{"name":"bufferinfo"}}],[11,"eq","","",34,{"inputs":[{"name":"buffererror"},{"name":"buffererror"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"buffererror"},{"name":"buffererror"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"buffererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"buffererror"}],"output":{"name":"buffererror"}}],[11,"fmt","","",35,{"inputs":[{"name":"bufferupdateerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"bufferupdateerror"},{"name":"bufferupdateerror"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"bufferupdateerror"}],"output":{"name":"bufferupdateerror"}}],[11,"fmt","","",36,{"inputs":[{"name":"resourceviewerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"resourceviewerror"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"resourceviewerror"},{"name":"resourceviewerror"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"resourceviewerror"}}],[11,"fmt","","",37,{"inputs":[{"name":"targetviewerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"targetviewerror"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"targetviewerror"},{"name":"targetviewerror"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"targetviewerror"}}],[11,"fmt","","",38,{"inputs":[{"name":"combinederror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"combinederror"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"combinederror"},{"name":"combinederror"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"combinederror"}],"output":{"name":"combinederror"}}],[11,"from","","",38,{"inputs":[{"name":"error"}],"output":{"name":"combinederror"}}],[11,"from","","",38,{"inputs":[{"name":"resourceviewerror"}],"output":{"name":"combinederror"}}],[11,"from","","",38,{"inputs":[{"name":"targetviewerror"}],"output":{"name":"combinederror"}}],[0,"format","gfx_core","Universal format specification.\nApplicable to textures, views, and vertex buffers.",null,null],[3,"Swizzle","gfx_core::format","Channel swizzle configuration for the resource views.\nNote: It&#39;s not currently mirrored at compile-time,\nthus providing less safety and convenience.",null,null],[12,"0","","",42,null],[12,"1","","",42,null],[12,"2","","",42,null],[12,"3","","",42,null],[3,"Format","","Complete run-time surface format.",null,null],[12,"0","","",43,null],[12,"1","","",43,null],[3,"U8Norm","","",null,null],[12,"0","","",44,null],[3,"I8Norm","","",null,null],[12,"0","","",45,null],[3,"U16Norm","","",null,null],[12,"0","","",46,null],[3,"I16Norm","","",null,null],[12,"0","","",47,null],[3,"F16","","",null,null],[12,"0","","",48,null],[4,"ChannelType","","Type of a surface channel. This is how we interpret the\nstorage allocated with `SurfaceType`.",null,null],[13,"Int","","",49,null],[13,"Uint","","",49,null],[13,"Inorm","","",49,null],[13,"Unorm","","",49,null],[13,"Float","","",49,null],[13,"Srgb","","",49,null],[4,"Int","","",null,null],[4,"Uint","","",null,null],[4,"Inorm","","",null,null],[4,"Unorm","","",null,null],[4,"Float","","",null,null],[4,"Srgb","","",null,null],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only\ncarry information about the number of bits per each channel.\nThe actual types are up to the views to decide and interpret.\nThe actual components are up to the swizzle to define.",null,null],[13,"R4_G4","","",50,null],[13,"R4_G4_B4_A4","","",50,null],[13,"R5_G5_B5_A1","","",50,null],[13,"R5_G6_B5","","",50,null],[13,"R8","","",50,null],[13,"R8_G8","","",50,null],[13,"R8_G8_B8_A8","","",50,null],[13,"R10_G10_B10_A2","","",50,null],[13,"R11_G11_B10","","",50,null],[13,"R16","","",50,null],[13,"R16_G16","","",50,null],[13,"R16_G16_B16","","",50,null],[13,"R16_G16_B16_A16","","",50,null],[13,"R32","","",50,null],[13,"R32_G32","","",50,null],[13,"R32_G32_B32","","",50,null],[13,"R32_G32_B32_A32","","",50,null],[13,"D16","","",50,null],[13,"D24","","",50,null],[13,"D24_S8","","",50,null],[13,"D32","","",50,null],[4,"R4_G4","","",null,null],[4,"R4_G4_B4_A4","","",null,null],[4,"R5_G5_B5_A1","","",null,null],[4,"R5_G6_B5","","",null,null],[4,"R8","","",null,null],[4,"R8_G8","","",null,null],[4,"R8_G8_B8_A8","","",null,null],[4,"R10_G10_B10_A2","","",null,null],[4,"R11_G11_B10","","",null,null],[4,"R16","","",null,null],[4,"R16_G16","","",null,null],[4,"R16_G16_B16","","",null,null],[4,"R16_G16_B16_A16","","",null,null],[4,"R32","","",null,null],[4,"R32_G32","","",null,null],[4,"R32_G32_B32","","",null,null],[4,"R32_G32_B32_A32","","",null,null],[4,"D16","","",null,null],[4,"D24","","",null,null],[4,"D24_S8","","",null,null],[4,"D32","","",null,null],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto\ndifferent physical channels, some may be hardcoded to 0 or 1.",null,null],[13,"Zero","","",51,null],[13,"One","","",51,null],[13,"X","","",51,null],[13,"Y","","",51,null],[13,"Z","","",51,null],[13,"W","","",51,null],[6,"Vec1","","Abstracted 1-element container for macro internal use",null,null],[6,"Vec2","","Abstracted 2-element container for macro internal use",null,null],[6,"Vec3","","Abstracted 3-element container for macro internal use",null,null],[6,"Vec4","","Abstracted 4-element container for macro internal use",null,null],[6,"Rgba8","","Standard 8bits RGBA format.",null,null],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",null,null],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components\nand 2 bits for the alpha.",null,null],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",null,null],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",null,null],[6,"Depth","","Standard 24-bit depth format.",null,null],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",null,null],[6,"Depth32F","","Standard 32-bit floating-point depth format.",null,null],[8,"SurfaceTyped","","Compile-time surface type trait.",null,null],[16,"DataType","","The corresponding data type to be passed from CPU.",52,null],[10,"get_surface_type","","Return the run-time value of the type.",52,{"inputs":[],"output":{"name":"surfacetype"}}],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",null,null],[8,"TextureSurface","","An ability of a surface type to be used for textures.",null,null],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",null,null],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",null,null],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",null,null],[8,"ChannelTyped","","Compile-time channel type trait.",null,null],[16,"ShaderType","","Shader-visible type that corresponds to this channel.\nFor example, normalized integers are visible as floats.",53,null],[10,"get_channel_type","","Return the run-time value of the type.",53,{"inputs":[],"output":{"name":"channeltype"}}],[8,"TextureChannel","","An ability of a channel type to be used for textures.",null,null],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",null,null],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",null,null],[8,"Formatted","","Compile-time full format trait.",null,null],[16,"Surface","","Associated surface type.",54,null],[16,"Channel","","Associated channel type.",54,null],[16,"View","","Shader view type of this format.",54,null],[11,"get_format","","Return the run-time value of the type.",54,{"inputs":[],"output":{"name":"format"}}],[8,"BufferFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthFormat","","Ability to be used for depth targets.",null,null],[8,"StencilFormat","","Ability to be used for vertex buffers.",null,null],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",null,null],[8,"TextureFormat","","Ability to be used for textures.",null,null],[8,"RenderFormat","","Ability to be used for render targets.",null,null],[8,"BlendFormat","","Ability to be used for blended render targets.",null,null],[11,"fmt","","",49,{"inputs":[{"name":"channeltype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"channeltype"}],"output":{"name":"channeltype"}}],[11,"hash","","",49,null],[11,"partial_cmp","","",49,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"option"}}],[11,"eq","","",49,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"bool"}}],[11,"cmp","","",49,{"inputs":[{"name":"channeltype"},{"name":"channeltype"}],"output":{"name":"ordering"}}],[11,"fmt","","",55,{"inputs":[{"name":"int"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"int"}],"output":{"name":"int"}}],[11,"hash","","",55,null],[11,"partial_cmp","","",55,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"option"}}],[11,"eq","","",55,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"bool"}}],[11,"cmp","","",55,{"inputs":[{"name":"int"},{"name":"int"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",55,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",56,{"inputs":[{"name":"uint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"uint"}],"output":{"name":"uint"}}],[11,"hash","","",56,null],[11,"partial_cmp","","",56,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"option"}}],[11,"eq","","",56,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"uint"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",56,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",57,{"inputs":[{"name":"inorm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"inorm"}],"output":{"name":"inorm"}}],[11,"hash","","",57,null],[11,"partial_cmp","","",57,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"option"}}],[11,"eq","","",57,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"inorm"},{"name":"inorm"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",57,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",58,{"inputs":[{"name":"unorm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"unorm"}],"output":{"name":"unorm"}}],[11,"hash","","",58,null],[11,"partial_cmp","","",58,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"option"}}],[11,"eq","","",58,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"unorm"},{"name":"unorm"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",58,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",59,{"inputs":[{"name":"float"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"float"}],"output":{"name":"float"}}],[11,"hash","","",59,null],[11,"partial_cmp","","",59,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"option"}}],[11,"eq","","",59,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"bool"}}],[11,"cmp","","",59,{"inputs":[{"name":"float"},{"name":"float"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",59,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",60,{"inputs":[{"name":"srgb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"srgb"}],"output":{"name":"srgb"}}],[11,"hash","","",60,null],[11,"partial_cmp","","",60,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"option"}}],[11,"eq","","",60,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"srgb"},{"name":"srgb"}],"output":{"name":"ordering"}}],[11,"get_channel_type","","",60,{"inputs":[],"output":{"name":"channeltype"}}],[11,"fmt","","",50,{"inputs":[{"name":"surfacetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"surfacetype"}],"output":{"name":"surfacetype"}}],[11,"hash","","",50,null],[11,"partial_cmp","","",50,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"option"}}],[11,"eq","","",50,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"bool"}}],[11,"cmp","","",50,{"inputs":[{"name":"surfacetype"},{"name":"surfacetype"}],"output":{"name":"ordering"}}],[11,"get_total_bits","","Return the total number of bits for this format.",50,{"inputs":[{"name":"surfacetype"}],"output":{"name":"u8"}}],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",50,{"inputs":[{"name":"surfacetype"}],"output":{"name":"u8"}}],[11,"fmt","","",61,{"inputs":[{"name":"r4_g4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"r4_g4"}],"output":{"name":"r4_g4"}}],[11,"hash","","",61,null],[11,"partial_cmp","","",61,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"option"}}],[11,"eq","","",61,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"r4_g4"},{"name":"r4_g4"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",61,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",62,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"r4_g4_b4_a4"}],"output":{"name":"r4_g4_b4_a4"}}],[11,"hash","","",62,null],[11,"partial_cmp","","",62,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"option"}}],[11,"eq","","",62,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"bool"}}],[11,"cmp","","",62,{"inputs":[{"name":"r4_g4_b4_a4"},{"name":"r4_g4_b4_a4"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",62,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",63,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"r5_g5_b5_a1"}],"output":{"name":"r5_g5_b5_a1"}}],[11,"hash","","",63,null],[11,"partial_cmp","","",63,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"option"}}],[11,"eq","","",63,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"bool"}}],[11,"cmp","","",63,{"inputs":[{"name":"r5_g5_b5_a1"},{"name":"r5_g5_b5_a1"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",63,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",64,{"inputs":[{"name":"r5_g6_b5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"r5_g6_b5"}],"output":{"name":"r5_g6_b5"}}],[11,"hash","","",64,null],[11,"partial_cmp","","",64,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"option"}}],[11,"eq","","",64,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"bool"}}],[11,"cmp","","",64,{"inputs":[{"name":"r5_g6_b5"},{"name":"r5_g6_b5"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",64,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",65,{"inputs":[{"name":"r8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"r8"}],"output":{"name":"r8"}}],[11,"hash","","",65,null],[11,"partial_cmp","","",65,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"option"}}],[11,"eq","","",65,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"bool"}}],[11,"cmp","","",65,{"inputs":[{"name":"r8"},{"name":"r8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",65,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",66,{"inputs":[{"name":"r8_g8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"r8_g8"}],"output":{"name":"r8_g8"}}],[11,"hash","","",66,null],[11,"partial_cmp","","",66,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"option"}}],[11,"eq","","",66,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"bool"}}],[11,"cmp","","",66,{"inputs":[{"name":"r8_g8"},{"name":"r8_g8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",66,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",67,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"r8_g8_b8_a8"}],"output":{"name":"r8_g8_b8_a8"}}],[11,"hash","","",67,null],[11,"partial_cmp","","",67,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"option"}}],[11,"eq","","",67,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"bool"}}],[11,"cmp","","",67,{"inputs":[{"name":"r8_g8_b8_a8"},{"name":"r8_g8_b8_a8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",67,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",68,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"r10_g10_b10_a2"}],"output":{"name":"r10_g10_b10_a2"}}],[11,"hash","","",68,null],[11,"partial_cmp","","",68,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"option"}}],[11,"eq","","",68,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"r10_g10_b10_a2"},{"name":"r10_g10_b10_a2"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",68,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",69,{"inputs":[{"name":"r11_g11_b10"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"r11_g11_b10"}],"output":{"name":"r11_g11_b10"}}],[11,"hash","","",69,null],[11,"partial_cmp","","",69,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"option"}}],[11,"eq","","",69,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"bool"}}],[11,"cmp","","",69,{"inputs":[{"name":"r11_g11_b10"},{"name":"r11_g11_b10"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",69,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",70,{"inputs":[{"name":"r16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"r16"}],"output":{"name":"r16"}}],[11,"hash","","",70,null],[11,"partial_cmp","","",70,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"option"}}],[11,"eq","","",70,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"bool"}}],[11,"cmp","","",70,{"inputs":[{"name":"r16"},{"name":"r16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",70,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",71,{"inputs":[{"name":"r16_g16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"r16_g16"}],"output":{"name":"r16_g16"}}],[11,"hash","","",71,null],[11,"partial_cmp","","",71,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"option"}}],[11,"eq","","",71,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"r16_g16"},{"name":"r16_g16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",71,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",72,{"inputs":[{"name":"r16_g16_b16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"r16_g16_b16"}],"output":{"name":"r16_g16_b16"}}],[11,"hash","","",72,null],[11,"partial_cmp","","",72,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"bool"}}],[11,"cmp","","",72,{"inputs":[{"name":"r16_g16_b16"},{"name":"r16_g16_b16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",72,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",73,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"r16_g16_b16_a16"}],"output":{"name":"r16_g16_b16_a16"}}],[11,"hash","","",73,null],[11,"partial_cmp","","",73,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"option"}}],[11,"eq","","",73,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"bool"}}],[11,"cmp","","",73,{"inputs":[{"name":"r16_g16_b16_a16"},{"name":"r16_g16_b16_a16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",73,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",74,{"inputs":[{"name":"r32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"r32"}],"output":{"name":"r32"}}],[11,"hash","","",74,null],[11,"partial_cmp","","",74,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"bool"}}],[11,"cmp","","",74,{"inputs":[{"name":"r32"},{"name":"r32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",74,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",75,{"inputs":[{"name":"r32_g32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"r32_g32"}],"output":{"name":"r32_g32"}}],[11,"hash","","",75,null],[11,"partial_cmp","","",75,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"option"}}],[11,"eq","","",75,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"bool"}}],[11,"cmp","","",75,{"inputs":[{"name":"r32_g32"},{"name":"r32_g32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",75,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",76,{"inputs":[{"name":"r32_g32_b32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"r32_g32_b32"}],"output":{"name":"r32_g32_b32"}}],[11,"hash","","",76,null],[11,"partial_cmp","","",76,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"option"}}],[11,"eq","","",76,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"bool"}}],[11,"cmp","","",76,{"inputs":[{"name":"r32_g32_b32"},{"name":"r32_g32_b32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",76,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",77,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"r32_g32_b32_a32"}],"output":{"name":"r32_g32_b32_a32"}}],[11,"hash","","",77,null],[11,"partial_cmp","","",77,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"option"}}],[11,"eq","","",77,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"bool"}}],[11,"cmp","","",77,{"inputs":[{"name":"r32_g32_b32_a32"},{"name":"r32_g32_b32_a32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",77,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",78,{"inputs":[{"name":"d16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"d16"}],"output":{"name":"d16"}}],[11,"hash","","",78,null],[11,"partial_cmp","","",78,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"option"}}],[11,"eq","","",78,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"bool"}}],[11,"cmp","","",78,{"inputs":[{"name":"d16"},{"name":"d16"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",78,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",79,{"inputs":[{"name":"d24"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"d24"}],"output":{"name":"d24"}}],[11,"hash","","",79,null],[11,"partial_cmp","","",79,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"option"}}],[11,"eq","","",79,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"bool"}}],[11,"cmp","","",79,{"inputs":[{"name":"d24"},{"name":"d24"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",79,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",80,{"inputs":[{"name":"d24_s8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"d24_s8"}],"output":{"name":"d24_s8"}}],[11,"hash","","",80,null],[11,"partial_cmp","","",80,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"option"}}],[11,"eq","","",80,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"bool"}}],[11,"cmp","","",80,{"inputs":[{"name":"d24_s8"},{"name":"d24_s8"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",80,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",81,{"inputs":[{"name":"d32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"d32"}],"output":{"name":"d32"}}],[11,"hash","","",81,null],[11,"partial_cmp","","",81,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"option"}}],[11,"eq","","",81,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"bool"}}],[11,"cmp","","",81,{"inputs":[{"name":"d32"},{"name":"d32"}],"output":{"name":"ordering"}}],[11,"get_surface_type","","",81,{"inputs":[],"output":{"name":"surfacetype"}}],[11,"fmt","","",51,{"inputs":[{"name":"channelsource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"channelsource"}],"output":{"name":"channelsource"}}],[11,"hash","","",51,null],[11,"partial_cmp","","",51,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"option"}}],[11,"eq","","",51,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"channelsource"},{"name":"channelsource"}],"output":{"name":"ordering"}}],[11,"fmt","","",42,{"inputs":[{"name":"swizzle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"swizzle"}],"output":{"name":"swizzle"}}],[11,"hash","","",42,null],[11,"partial_cmp","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"bool"}}],[11,"cmp","","",42,{"inputs":[{"name":"swizzle"},{"name":"swizzle"}],"output":{"name":"ordering"}}],[11,"new","","Create a new swizzle where each channel is unmapped.",42,{"inputs":[],"output":{"name":"swizzle"}}],[11,"fmt","","",43,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"hash","","",43,null],[11,"partial_cmp","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"fmt","","",44,{"inputs":[{"name":"u8norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"u8norm"}],"output":{"name":"u8norm"}}],[11,"hash","","",44,null],[11,"partial_cmp","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"u8norm"},{"name":"u8norm"}],"output":{"name":"ordering"}}],[11,"from","","",44,{"inputs":[{"name":"u8"}],"output":{"name":"u8norm"}}],[11,"cast2","","Convert a 2-element slice.",44,null],[11,"cast3","","Convert a 3-element slice.",44,null],[11,"cast4","","Convert a 4-element slice.",44,null],[11,"cast_slice","","Convert a generic slice by transmutation.",44,null],[11,"fmt","","",45,{"inputs":[{"name":"i8norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"i8norm"}],"output":{"name":"i8norm"}}],[11,"hash","","",45,null],[11,"partial_cmp","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"bool"}}],[11,"cmp","","",45,{"inputs":[{"name":"i8norm"},{"name":"i8norm"}],"output":{"name":"ordering"}}],[11,"from","","",45,{"inputs":[{"name":"i8"}],"output":{"name":"i8norm"}}],[11,"cast2","","Convert a 2-element slice.",45,null],[11,"cast3","","Convert a 3-element slice.",45,null],[11,"cast4","","Convert a 4-element slice.",45,null],[11,"cast_slice","","Convert a generic slice by transmutation.",45,null],[11,"fmt","","",46,{"inputs":[{"name":"u16norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"u16norm"}],"output":{"name":"u16norm"}}],[11,"hash","","",46,null],[11,"partial_cmp","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"bool"}}],[11,"cmp","","",46,{"inputs":[{"name":"u16norm"},{"name":"u16norm"}],"output":{"name":"ordering"}}],[11,"from","","",46,{"inputs":[{"name":"u16"}],"output":{"name":"u16norm"}}],[11,"cast2","","Convert a 2-element slice.",46,null],[11,"cast3","","Convert a 3-element slice.",46,null],[11,"cast4","","Convert a 4-element slice.",46,null],[11,"cast_slice","","Convert a generic slice by transmutation.",46,null],[11,"fmt","","",47,{"inputs":[{"name":"i16norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"i16norm"}],"output":{"name":"i16norm"}}],[11,"hash","","",47,null],[11,"partial_cmp","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"option"}}],[11,"lt","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"le","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"gt","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ge","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"bool"}}],[11,"cmp","","",47,{"inputs":[{"name":"i16norm"},{"name":"i16norm"}],"output":{"name":"ordering"}}],[11,"from","","",47,{"inputs":[{"name":"i16"}],"output":{"name":"i16norm"}}],[11,"cast2","","Convert a 2-element slice.",47,null],[11,"cast3","","Convert a 3-element slice.",47,null],[11,"cast4","","Convert a 4-element slice.",47,null],[11,"cast_slice","","Convert a generic slice by transmutation.",47,null],[11,"fmt","","",48,{"inputs":[{"name":"f16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"f16"}],"output":{"name":"f16"}}],[11,"hash","","",48,null],[11,"partial_cmp","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"bool"}}],[11,"cmp","","",48,{"inputs":[{"name":"f16"},{"name":"f16"}],"output":{"name":"ordering"}}],[11,"from","","",48,{"inputs":[{"name":"u16"}],"output":{"name":"f16"}}],[11,"cast2","","Convert a 2-element slice.",48,null],[11,"cast3","","Convert a 3-element slice.",48,null],[11,"cast4","","Convert a 4-element slice.",48,null],[11,"cast_slice","","Convert a generic slice by transmutation.",48,null],[0,"handle","gfx_core","Device resource handles",null,null],[3,"RawBuffer","gfx_core::handle","Raw (untyped) Buffer Handle",null,null],[3,"Buffer","","Type-safe buffer handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"RawPipelineState","","Raw Pipeline State Handle",null,null],[3,"RawTexture","","Raw texture object",null,null],[3,"Texture","","Typed texture object",null,null],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",null,null],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",null,null],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",null,null],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",null,null],[3,"RawRenderTargetView","","Raw RTV",null,null],[3,"RawDepthStencilView","","Raw DSV",null,null],[3,"RenderTargetView","","Typed RTV",null,null],[3,"DepthStencilView","","Typed DSV",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Fence","","Fence Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer.\nSeals actual resource names behind the interface, automatically\nreferencing them both by the Factory on resource creation\nand the Renderer during CommandBuffer population.",null,null],[8,"Producer","","A service trait to be used by the device implementation",null,null],[10,"make_buffer","","",82,{"inputs":[{"name":"producer"},{"name":"buffer"},{"name":"bufferinfo"}],"output":{"name":"rawbuffer"}}],[10,"make_shader","","",82,{"inputs":[{"name":"producer"},{"name":"shader"}],"output":{"name":"shader"}}],[10,"make_program","","",82,{"inputs":[{"name":"producer"},{"name":"program"},{"name":"programinfo"}],"output":{"name":"program"}}],[10,"make_pso","","",82,{"inputs":[{"name":"producer"},{"name":"pipelinestateobject"},{"name":"program"}],"output":{"name":"rawpipelinestate"}}],[10,"make_texture","","",82,{"inputs":[{"name":"producer"},{"name":"texture"},{"name":"descriptor"}],"output":{"name":"rawtexture"}}],[10,"make_buffer_srv","","",82,{"inputs":[{"name":"producer"},{"name":"shaderresourceview"},{"name":"rawbuffer"}],"output":{"name":"rawshaderresourceview"}}],[10,"make_texture_srv","","",82,{"inputs":[{"name":"producer"},{"name":"shaderresourceview"},{"name":"rawtexture"}],"output":{"name":"rawshaderresourceview"}}],[10,"make_buffer_uav","","",82,{"inputs":[{"name":"producer"},{"name":"unorderedaccessview"},{"name":"rawbuffer"}],"output":{"name":"rawunorderedaccessview"}}],[10,"make_texture_uav","","",82,{"inputs":[{"name":"producer"},{"name":"unorderedaccessview"},{"name":"rawtexture"}],"output":{"name":"rawunorderedaccessview"}}],[10,"make_rtv","","",82,{"inputs":[{"name":"producer"},{"name":"rendertargetview"},{"name":"rawtexture"},{"name":"dimensions"}],"output":{"name":"rawrendertargetview"}}],[10,"make_dsv","","",82,{"inputs":[{"name":"producer"},{"name":"depthstencilview"},{"name":"rawtexture"},{"name":"dimensions"}],"output":{"name":"rawdepthstencilview"}}],[10,"make_sampler","","",82,{"inputs":[{"name":"producer"},{"name":"sampler"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"make_fence","","",82,{"inputs":[{"name":"producer"},{"name":"fence"}],"output":{"name":"fence"}}],[10,"clean_with","","Walk through all the handles, keep ones that are reference elsewhere\nand call the provided delete function (resource-specific) for others",82,{"inputs":[{"name":"producer"},{"name":"t"},{"name":"a"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"},{"name":"f"},{"name":"g"},{"name":"h"},{"name":"i"},{"name":"j"},{"name":"k"}],"output":null}],[11,"eq","","",83,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"rawbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get raw buffer info",83,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"bufferinfo"}}],[11,"eq","","",84,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"buffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"buffer"}],"output":{"name":"buffer"}}],[11,"new","","",84,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"buffer"}}],[11,"raw","","",84,{"inputs":[{"name":"buffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get the associated information about the buffer",84,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferinfo"}}],[11,"len","","Get the number of elements in the buffer.",84,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"eq","","",85,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"shader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"shader"}],"output":{"name":"shader"}}],[11,"eq","","",86,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"program"}],"output":{"name":"program"}}],[11,"get_info","","Get program info",86,{"inputs":[{"name":"program"}],"output":{"name":"programinfo"}}],[11,"eq","","",87,{"inputs":[{"name":"rawpipelinestate"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"rawpipelinestate"},{"name":"rawpipelinestate"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"rawpipelinestate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"rawpipelinestate"}],"output":{"name":"rawpipelinestate"}}],[11,"eq","","",88,{"inputs":[{"name":"rawtexture"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"rawtexture"},{"name":"rawtexture"}],"output":{"name":"bool"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"rawtexture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"rawtexture"}],"output":{"name":"rawtexture"}}],[11,"eq","","",89,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"texture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"texture"}],"output":{"name":"texture"}}],[11,"get_info","","Get texture descriptor",88,{"inputs":[{"name":"rawtexture"}],"output":{"name":"descriptor"}}],[11,"new","","",89,{"inputs":[{"name":"rawtexture"}],"output":{"name":"texture"}}],[11,"raw","","",89,{"inputs":[{"name":"texture"}],"output":{"name":"rawtexture"}}],[11,"get_info","","Get texture descriptor",89,{"inputs":[{"name":"texture"}],"output":{"name":"descriptor"}}],[11,"eq","","",90,{"inputs":[{"name":"rawshaderresourceview"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"rawshaderresourceview"},{"name":"rawshaderresourceview"}],"output":{"name":"bool"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"rawshaderresourceview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"rawshaderresourceview"}],"output":{"name":"rawshaderresourceview"}}],[11,"eq","","",91,{"inputs":[{"name":"shaderresourceview"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"shaderresourceview"},{"name":"shaderresourceview"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"shaderresourceview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"shaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"new","","",91,{"inputs":[{"name":"rawshaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"raw","","",91,{"inputs":[{"name":"shaderresourceview"}],"output":{"name":"rawshaderresourceview"}}],[11,"eq","","",92,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"rawunorderedaccessview"}],"output":{"name":"bool"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"rawunorderedaccessview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"rawunorderedaccessview"}],"output":{"name":"rawunorderedaccessview"}}],[11,"eq","","",93,{"inputs":[{"name":"unorderedaccessview"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"unorderedaccessview"},{"name":"unorderedaccessview"}],"output":{"name":"bool"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"unorderedaccessview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"unorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"new","","",93,{"inputs":[{"name":"rawunorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"raw","","",93,{"inputs":[{"name":"unorderedaccessview"}],"output":{"name":"rawunorderedaccessview"}}],[11,"eq","","",94,{"inputs":[{"name":"rawrendertargetview"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"rawrendertargetview"},{"name":"rawrendertargetview"}],"output":{"name":"bool"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"rawrendertargetview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"rawrendertargetview"}}],[11,"get_dimensions","","Get target dimensions",94,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"dimensions"}}],[11,"eq","","",95,{"inputs":[{"name":"rawdepthstencilview"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"rawdepthstencilview"},{"name":"rawdepthstencilview"}],"output":{"name":"bool"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"rawdepthstencilview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"rawdepthstencilview"}}],[11,"get_dimensions","","Get target dimensions",95,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"dimensions"}}],[11,"eq","","",96,{"inputs":[{"name":"rendertargetview"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"rendertargetview"},{"name":"rendertargetview"}],"output":{"name":"bool"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"rendertargetview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"rendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"get_dimensions","","Get target dimensions",96,{"inputs":[{"name":"rendertargetview"}],"output":{"name":"dimensions"}}],[11,"new","","",96,{"inputs":[{"name":"rawrendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"raw","","",96,{"inputs":[{"name":"rendertargetview"}],"output":{"name":"rawrendertargetview"}}],[11,"eq","","",97,{"inputs":[{"name":"depthstencilview"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"depthstencilview"},{"name":"depthstencilview"}],"output":{"name":"bool"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"depthstencilview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"depthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"get_dimensions","","Get target dimensions",97,{"inputs":[{"name":"depthstencilview"}],"output":{"name":"dimensions"}}],[11,"new","","",97,{"inputs":[{"name":"rawdepthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"raw","","",97,{"inputs":[{"name":"depthstencilview"}],"output":{"name":"rawdepthstencilview"}}],[11,"eq","","",98,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"fmt","","",98,{"inputs":[{"name":"sampler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"sampler"}],"output":{"name":"sampler"}}],[11,"get_info","","Get sampler info",98,{"inputs":[{"name":"sampler"}],"output":{"name":"samplerinfo"}}],[11,"eq","","",99,{"inputs":[{"name":"fence"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"fence"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"fmt","","",99,{"inputs":[{"name":"fence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"fence"}],"output":{"name":"fence"}}],[11,"make_buffer","","",100,{"inputs":[{"name":"manager"},{"name":"buffer"},{"name":"bufferinfo"}],"output":{"name":"rawbuffer"}}],[11,"make_shader","","",100,{"inputs":[{"name":"manager"},{"name":"shader"}],"output":{"name":"shader"}}],[11,"make_program","","",100,{"inputs":[{"name":"manager"},{"name":"program"},{"name":"programinfo"}],"output":{"name":"program"}}],[11,"make_pso","","",100,{"inputs":[{"name":"manager"},{"name":"pipelinestateobject"},{"name":"program"}],"output":{"name":"rawpipelinestate"}}],[11,"make_texture","","",100,{"inputs":[{"name":"manager"},{"name":"texture"},{"name":"descriptor"}],"output":{"name":"rawtexture"}}],[11,"make_buffer_srv","","",100,{"inputs":[{"name":"manager"},{"name":"shaderresourceview"},{"name":"rawbuffer"}],"output":{"name":"rawshaderresourceview"}}],[11,"make_texture_srv","","",100,{"inputs":[{"name":"manager"},{"name":"shaderresourceview"},{"name":"rawtexture"}],"output":{"name":"rawshaderresourceview"}}],[11,"make_buffer_uav","","",100,{"inputs":[{"name":"manager"},{"name":"unorderedaccessview"},{"name":"rawbuffer"}],"output":{"name":"rawunorderedaccessview"}}],[11,"make_texture_uav","","",100,{"inputs":[{"name":"manager"},{"name":"unorderedaccessview"},{"name":"rawtexture"}],"output":{"name":"rawunorderedaccessview"}}],[11,"make_rtv","","",100,{"inputs":[{"name":"manager"},{"name":"rendertargetview"},{"name":"rawtexture"},{"name":"dimensions"}],"output":{"name":"rawrendertargetview"}}],[11,"make_dsv","","",100,{"inputs":[{"name":"manager"},{"name":"depthstencilview"},{"name":"rawtexture"},{"name":"dimensions"}],"output":{"name":"rawdepthstencilview"}}],[11,"make_sampler","","",100,{"inputs":[{"name":"manager"},{"name":"sampler"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[11,"make_fence","","",100,{"inputs":[{"name":"manager"},{"name":"fence"}],"output":{"name":"fence"}}],[11,"clean_with","","",100,{"inputs":[{"name":"manager"},{"name":"t"},{"name":"a"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"},{"name":"f"},{"name":"g"},{"name":"h"},{"name":"i"},{"name":"j"},{"name":"k"}],"output":null}],[11,"new","","Create a new handle manager",100,{"inputs":[],"output":{"name":"manager"}}],[11,"clear","","Clear all references",100,{"inputs":[{"name":"manager"}],"output":null}],[11,"extend","","Extend with all references of another handle manager",100,{"inputs":[{"name":"manager"},{"name":"manager"}],"output":null}],[11,"count","","Count the total number of referenced resources",100,{"inputs":[{"name":"manager"}],"output":{"name":"usize"}}],[11,"ref_buffer","","Reference a buffer",100,{"inputs":[{"name":"manager"},{"name":"rawbuffer"}],"output":{"name":"buffer"}}],[11,"ref_shader","","Reference a shader",100,{"inputs":[{"name":"manager"},{"name":"shader"}],"output":{"name":"shader"}}],[11,"ref_program","","Reference a program",100,{"inputs":[{"name":"manager"},{"name":"program"}],"output":{"name":"program"}}],[11,"ref_pso","","Reference a pipeline state object",100,null],[11,"ref_texture","","Reference a texture",100,{"inputs":[{"name":"manager"},{"name":"rawtexture"}],"output":{"name":"texture"}}],[11,"ref_srv","","Reference a shader resource view",100,{"inputs":[{"name":"manager"},{"name":"rawshaderresourceview"}],"output":{"name":"shaderresourceview"}}],[11,"ref_uav","","Reference an unordered access view",100,{"inputs":[{"name":"manager"},{"name":"rawunorderedaccessview"}],"output":{"name":"unorderedaccessview"}}],[11,"ref_rtv","","Reference an RTV",100,{"inputs":[{"name":"manager"},{"name":"rawrendertargetview"}],"output":{"name":"rendertargetview"}}],[11,"ref_dsv","","Reference a DSV",100,{"inputs":[{"name":"manager"},{"name":"rawdepthstencilview"}],"output":{"name":"depthstencilview"}}],[11,"ref_sampler","","Reference a sampler",100,{"inputs":[{"name":"manager"},{"name":"sampler"}],"output":{"name":"sampler"}}],[11,"ref_fence","","Reference a fence",100,{"inputs":[{"name":"manager"},{"name":"fence"}],"output":{"name":"fence"}}],[0,"mapping","gfx_core","Memory mapping",null,null],[3,"Readable","gfx_core::mapping","A handle to a readable map, which can be sliced.",null,null],[3,"Writable","","A handle to a writable map, which only allows setting elements.",null,null],[3,"RW","","A handle to a complete readable/writable map, which can be sliced both ways.",null,null],[8,"Raw","","Unsafe operations for a buffer mapping",null,null],[10,"set","","Set the element at `index` to `val`. Not bounds-checked.",101,{"inputs":[{"name":"raw"},{"name":"usize"},{"name":"t"}],"output":null}],[10,"to_slice","","Returns a slice of the specified length.",101,null],[10,"to_mut_slice","","Returns a mutable slice of the specified length.",101,null],[8,"Builder","","A service trait with methods for mapping already implemented.\nTo be used by device back ends.",null,null],[16,"RawMapping","","",102,null],[10,"map_readable","","",102,{"inputs":[{"name":"builder"},{"name":"rawmapping"},{"name":"usize"}],"output":{"name":"readable"}}],[10,"map_writable","","",102,{"inputs":[{"name":"builder"},{"name":"rawmapping"},{"name":"usize"}],"output":{"name":"writable"}}],[10,"map_read_write","","",102,{"inputs":[{"name":"builder"},{"name":"rawmapping"},{"name":"usize"}],"output":{"name":"rw"}}],[11,"deref","","",103,null],[11,"drop","","",103,{"inputs":[{"name":"readable"}],"output":null}],[11,"set","","Set a value in the buffer",104,{"inputs":[{"name":"writable"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"to_mut_slice","","Returns a mutable slice of the specified length.",104,null],[11,"drop","","",104,{"inputs":[{"name":"writable"}],"output":null}],[11,"deref","","",105,null],[11,"deref_mut","","",105,null],[11,"drop","","",105,{"inputs":[{"name":"rw"}],"output":null}],[0,"pso","gfx_core","Pipeline State Objects",null,null],[3,"CreationError","gfx_core::pso","Error types happening upon PSO creation on the device side.",null,null],[3,"ColorInfo","","Color output configuration of the PSO.",null,null],[12,"mask","","Color channel mask",106,null],[12,"color","","Optional color blending",106,null],[12,"alpha","","Optional alpha blending",106,null],[3,"DepthStencilInfo","","Depth and stencil state of the PSO.",null,null],[12,"depth","","Optional depth test configuration",107,null],[12,"front","","Optional stencil test on the front faces",107,null],[12,"back","","Optional stencil test on the back faces",107,null],[3,"Element","","A struct element descriptor.",null,null],[12,"format","","Element format",108,null],[12,"offset","","Offset from the beginning of the container, in bytes",108,null],[12,"stride","","Total container size, in bytes",108,null],[3,"Descriptor","","All the information surrounding a shader program that is required\nfor PSO creation, including the formats of vertex buffers and pixel targets;",null,null],[12,"primitive","","Type of the primitive",109,null],[12,"rasterizer","","Rasterizer setup",109,null],[12,"scissor","","Enable scissor test",109,null],[12,"attributes","","Vertex attributes",109,null],[12,"color_targets","","Render target views (RTV)",109,null],[12,"depth_stencil","","Depth stencil view (DSV)",109,null],[3,"VertexBufferSet","","A complete set of vertex buffers to be used for vertex import in PSO.",null,null],[12,"0","","Array of buffer handles with offsets in them",110,null],[3,"ConstantBufferParam","","A constant buffer run-time parameter for PSO.",null,null],[12,"0","","",111,null],[12,"1","","",111,null],[12,"2","","",111,null],[3,"ResourceViewParam","","A shader resource view (SRV) run-time parameter for PSO.",null,null],[12,"0","","",112,null],[12,"1","","",112,null],[12,"2","","",112,null],[3,"UnorderedViewParam","","An unordered access view (UAV) run-time parameter for PSO.",null,null],[12,"0","","",113,null],[12,"1","","",113,null],[12,"2","","",113,null],[3,"SamplerParam","","A sampler run-time parameter for PSO.",null,null],[12,"0","","",114,null],[12,"1","","",114,null],[12,"2","","",114,null],[3,"PixelTargetSet","","A complete set of render targets to be used for pixel export in PSO.",null,null],[12,"colors","","Array of color target views",115,null],[12,"depth","","Depth target view",115,null],[12,"stencil","","Stencil target view",115,null],[12,"size","","Rendering dimensions",115,null],[6,"BufferOffset","","An offset inside a vertex buffer, in bytes.",null,null],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"ElemStride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[6,"AttributeDesc","","PSO vertex attribute descriptor",null,null],[6,"ColorTargetDesc","","PSO color target descriptor",null,null],[6,"DepthStencilDesc","","PSO depth-stencil target descriptor",null,null],[11,"fmt","","",116,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"creationerror"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"eq","","",106,{"inputs":[{"name":"colorinfo"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"colorinfo"},{"name":"colorinfo"}],"output":{"name":"bool"}}],[11,"hash","","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"colorinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"colorinfo"}],"output":{"name":"colorinfo"}}],[11,"from","","",106,{"inputs":[{"name":"colormask"}],"output":{"name":"colorinfo"}}],[11,"from","","",106,{"inputs":[{"name":"blend"}],"output":{"name":"colorinfo"}}],[11,"eq","","",107,{"inputs":[{"name":"depthstencilinfo"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"depthstencilinfo"},{"name":"depthstencilinfo"}],"output":{"name":"bool"}}],[11,"hash","","",107,null],[11,"fmt","","",107,{"inputs":[{"name":"depthstencilinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"depthstencilinfo"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",107,{"inputs":[{"name":"depth"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",107,{"inputs":[{"name":"stencil"}],"output":{"name":"depthstencilinfo"}}],[11,"from","","",107,null],[11,"eq","","",108,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"bool"}}],[11,"hash","","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"element"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"element"}],"output":{"name":"element"}}],[11,"eq","","",109,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"hash","","",109,null],[11,"fmt","","",109,{"inputs":[{"name":"descriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"descriptor"}],"output":{"name":"descriptor"}}],[11,"new","","Create a new empty PSO descriptor.",109,{"inputs":[{"name":"primitive"},{"name":"rasterizer"}],"output":{"name":"descriptor"}}],[11,"fmt","","",110,{"inputs":[{"name":"vertexbufferset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"vertexbufferset"}],"output":{"name":"vertexbufferset"}}],[11,"new","","Create an empty set",110,{"inputs":[],"output":{"name":"vertexbufferset"}}],[11,"fmt","","",111,{"inputs":[{"name":"constantbufferparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"constantbufferparam"}],"output":{"name":"constantbufferparam"}}],[11,"fmt","","",112,{"inputs":[{"name":"resourceviewparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"resourceviewparam"}],"output":{"name":"resourceviewparam"}}],[11,"fmt","","",113,{"inputs":[{"name":"unorderedviewparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"unorderedviewparam"}],"output":{"name":"unorderedviewparam"}}],[11,"fmt","","",114,{"inputs":[{"name":"samplerparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"samplerparam"}],"output":{"name":"samplerparam"}}],[11,"fmt","","",115,{"inputs":[{"name":"pixeltargetset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"pixeltargetset"}],"output":{"name":"pixeltargetset"}}],[11,"new","","Create an empty set",115,{"inputs":[],"output":{"name":"pixeltargetset"}}],[11,"add_color","","Add a color view to the specified slot",115,{"inputs":[{"name":"pixeltargetset"},{"name":"colorslot"},{"name":"rendertargetview"},{"name":"dimensions"}],"output":null}],[11,"add_depth_stencil","","Add a depth or stencil view to the specified slot",115,{"inputs":[{"name":"pixeltargetset"},{"name":"depthstencilview"},{"name":"bool"},{"name":"bool"},{"name":"dimensions"}],"output":null}],[0,"shade","gfx_core","Shader handling.",null,null],[3,"SamplerType","gfx_core::shade","A type of the sampler variable.",null,null],[12,"0","","",117,null],[12,"1","","",117,null],[3,"Usage","","Parameter usage flags.",null,null],[3,"AttributeVar","","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",118,null],[12,"slot","","Slot of the vertex attribute.",118,null],[12,"base_type","","Type that this attribute is composed of.",118,null],[12,"container","","&quot;Scalarness&quot; of this attribute.",118,null],[3,"ConstVar","","A constant in the shader - a bit of data that doesn&#39;t vary",null,null],[12,"name","","Name of this constant.",119,null],[12,"location","","Location of this constant in the program.",119,null],[12,"count","","Number of elements this constant represents.",119,null],[12,"base_type","","Type that this constant is composed of",119,null],[12,"container","","&quot;Scalarness&quot; of this constant.",119,null],[3,"ConstantBufferVar","","A constant buffer.",null,null],[12,"name","","Name of this constant buffer.",120,null],[12,"slot","","Slot of the constant buffer.",120,null],[12,"size","","Size (in bytes) of this buffer&#39;s data.",120,null],[12,"usage","","What program stage this buffer is used in.",120,null],[3,"TextureVar","","Texture shader parameter.",null,null],[12,"name","","Name of this texture variable.",121,null],[12,"slot","","Slot of this texture variable.",121,null],[12,"base_type","","Base type for the texture.",121,null],[12,"ty","","Type of this texture.",121,null],[12,"usage","","What program stage this texture is used in.",121,null],[3,"UnorderedVar","","Unordered access shader parameter.",null,null],[12,"name","","Name of this unordered variable.",122,null],[12,"slot","","Slot of this unordered variable.",122,null],[12,"usage","","What program stage this UAV is used in.",122,null],[3,"SamplerVar","","Sampler shader parameter.",null,null],[12,"name","","Name of this sampler variable.",123,null],[12,"slot","","Slot of this sampler variable.",123,null],[12,"ty","","Type of this sampler.",123,null],[12,"usage","","What program stage this texture is used in.",123,null],[3,"OutputVar","","Target output variable.",null,null],[12,"name","","Name of this output variable.",124,null],[12,"slot","","Output color target index.",124,null],[12,"base_type","","Type of the output component.",124,null],[12,"container","","&quot;Scalarness&quot; of this output.",124,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"vertex_attributes","","Attributes in the program",125,null],[12,"globals","","Global constants in the program",125,null],[12,"constant_buffers","","Constant buffers in the program",125,null],[12,"textures","","Textures in the program",125,null],[12,"unordereds","","Unordered access resources in the program",125,null],[12,"samplers","","Samplers in the program",125,null],[12,"outputs","","Output targets in the program",125,null],[12,"knows_outputs","","A hacky flag to make sure the clients know we are\nunable to actually get the output variable info",125,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",126,null],[13,"NoArray","","",126,null],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",null,null],[13,"Compare","","",127,null],[13,"NoCompare","","",127,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",128,null],[13,"NoMultiSample","","",128,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",129,null],[13,"NoRect","","",129,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",130,null],[13,"RowMajor","","",130,null],[4,"TextureType","","A type of the texture variable.\nThis has to match the actual data we bind to the shader.",null,null],[13,"Buffer","","Sample from a buffer.",131,null],[13,"D1","","Sample from a 1D texture",131,null],[13,"D2","","Sample from a 2D texture",131,null],[13,"D3","","Sample from a 3D texture",131,null],[13,"Cube","","Sample from a cubemap.",131,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"I32","","",132,null],[13,"U32","","",132,null],[13,"F32","","",132,null],[13,"F64","","",132,null],[13,"Bool","","",132,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",133,null],[13,"Vector","","A vector with `Dimension` components.",133,null],[13,"Matrix","","A matrix.",133,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",134,null],[13,"Geometry","","",134,null],[13,"Pixel","","",134,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",135,null],[13,"F32","","",135,null],[13,"I32Vector2","","",135,null],[13,"I32Vector3","","",135,null],[13,"I32Vector4","","",135,null],[13,"F32Vector2","","",135,null],[13,"F32Vector3","","",135,null],[13,"F32Vector4","","",135,null],[13,"F32Matrix2","","",135,null],[13,"F32Matrix3","","",135,null],[13,"F32Matrix4","","",135,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",136,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",136,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4,\netc)",136,null],[4,"CreateShaderError","","An error type for creating shaders.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",137,null],[13,"StageNotSupported","","The device does not support the shader stage.",137,null],[13,"CompilationFailed","","The shader failed to compile.",137,null],[6,"Dimension","","Number of components in a container type (vectors/matrices)",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[6,"ConstFormat","","Format of a shader constant.",null,null],[6,"CreateProgramError","","An error type for creating programs.",null,null],[17,"STAGES","","A constant static array of all shader stages.",null,null],[17,"VERTEX","","Used by the vertex shader",null,null],[17,"GEOMETRY","","Used by the geometry shader",null,null],[17,"PIXEL","","Used by the pixel shader",null,null],[8,"BaseTyped","","A trait that statically links simple data types to\nbase types of the shader constants.",null,null],[10,"get_base_type","","",138,{"inputs":[],"output":{"name":"basetype"}}],[8,"Formatted","","A trait that statically links simple data types to\nconstant formats.",null,null],[10,"get_format","","Get the associated constant format.",139,{"inputs":[],"output":{"name":"constformat"}}],[11,"fmt","","",126,{"inputs":[{"name":"isarray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"isarray"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"isarray"}],"output":{"name":"isarray"}}],[11,"fmt","","",127,{"inputs":[{"name":"iscomparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"iscomparison"},{"name":"iscomparison"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"iscomparison"}],"output":{"name":"iscomparison"}}],[11,"fmt","","",128,{"inputs":[{"name":"ismultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"ismultisample"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"ismultisample"}],"output":{"name":"ismultisample"}}],[11,"fmt","","",129,{"inputs":[{"name":"isrect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"isrect"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"isrect"}],"output":{"name":"isrect"}}],[11,"fmt","","",130,{"inputs":[{"name":"matrixformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",130,{"inputs":[{"name":"matrixformat"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"matrixformat"}],"output":{"name":"matrixformat"}}],[11,"fmt","","",131,{"inputs":[{"name":"texturetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"texturetype"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"texturetype"},{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"texturetype"}],"output":{"name":"texturetype"}}],[11,"can_sample","","Check if this texture can be used with a sampler.",131,{"inputs":[{"name":"texturetype"}],"output":{"name":"bool"}}],[11,"fmt","","",117,{"inputs":[{"name":"samplertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",117,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"samplertype"}],"output":{"name":"samplertype"}}],[11,"fmt","","",132,{"inputs":[{"name":"basetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"basetype"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"basetype"}],"output":{"name":"basetype"}}],[11,"fmt","","",133,{"inputs":[{"name":"containertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",133,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"containertype"}],"output":{"name":"containertype"}}],[11,"eq","","",134,{"inputs":[{"name":"stage"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"fmt","","",134,{"inputs":[{"name":"stage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"stage"}],"output":{"name":"stage"}}],[11,"clone","","",135,{"inputs":[{"name":"uniformvalue"}],"output":{"name":"uniformvalue"}}],[11,"fmt","","",135,{"inputs":[{"name":"uniformvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",140,null],[11,"cmp","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"option"}}],[11,"lt","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"le","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"gt","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ge","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[11,"eq","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"fmt","","",140,{"inputs":[{"name":"usage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",140,{"inputs":[],"output":{"name":"usage"}}],[11,"all","","Returns the set containing all flags.",140,{"inputs":[],"output":{"name":"usage"}}],[11,"bits","","Returns the raw value of the flags currently stored.",140,{"inputs":[{"name":"usage"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",140,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",140,{"inputs":[{"name":"u8"}],"output":{"name":"usage"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",140,{"inputs":[{"name":"usage"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",140,{"inputs":[{"name":"usage"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"sub","","Returns the set difference of the two sets of flags.",140,{"inputs":[{"name":"usage"},{"name":"usage"}],"output":{"name":"usage"}}],[11,"not","","Returns the complement of this set of flags.",140,{"inputs":[{"name":"usage"}],"output":{"name":"usage"}}],[11,"from_iter","","",140,{"inputs":[{"name":"t"}],"output":{"name":"usage"}}],[11,"from","","",140,{"inputs":[{"name":"stage"}],"output":{"name":"usage"}}],[11,"fmt","","",118,{"inputs":[{"name":"attributevar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"attributevar"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"attributevar"},{"name":"attributevar"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"attributevar"}],"output":{"name":"attributevar"}}],[11,"fmt","","",119,{"inputs":[{"name":"constvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"constvar"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"constvar"},{"name":"constvar"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"constvar"}],"output":{"name":"constvar"}}],[11,"fmt","","",120,{"inputs":[{"name":"constantbuffervar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"constantbuffervar"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"constantbuffervar"},{"name":"constantbuffervar"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"constantbuffervar"}],"output":{"name":"constantbuffervar"}}],[11,"fmt","","",121,{"inputs":[{"name":"texturevar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"texturevar"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"texturevar"},{"name":"texturevar"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"texturevar"}],"output":{"name":"texturevar"}}],[11,"fmt","","",122,{"inputs":[{"name":"unorderedvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"unorderedvar"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"unorderedvar"},{"name":"unorderedvar"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"unorderedvar"}],"output":{"name":"unorderedvar"}}],[11,"fmt","","",123,{"inputs":[{"name":"samplervar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",123,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"samplervar"}],"output":{"name":"samplervar"}}],[11,"fmt","","",124,{"inputs":[{"name":"outputvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"outputvar"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"outputvar"},{"name":"outputvar"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"outputvar"}],"output":{"name":"outputvar"}}],[11,"fmt","","",125,{"inputs":[{"name":"programinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",125,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"programinfo"}],"output":{"name":"programinfo"}}],[11,"fmt","","",136,{"inputs":[{"name":"compatibilityerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"compatibilityerror"}],"output":{"name":"compatibilityerror"}}],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored\nin this variable.",119,{"inputs":[{"name":"constvar"},{"name":"uniformvalue"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"createshadererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",137,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"createshadererror"}],"output":{"name":"createshadererror"}}],[0,"tex","gfx_core","Texture creation and modification.",null,null],[6,"Layer","gfx_core::tex","",null,null],[6,"Level","","",null,null],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",141,null],[12,"yoffset","","",141,null],[12,"zoffset","","",141,null],[12,"width","","",141,null],[12,"height","","",141,null],[12,"depth","","",141,null],[12,"format","","Format of each texel.",141,null],[12,"mipmap","","Which mipmap to select.",141,null],[3,"Lod","","A wrapper for the LOD level of a texture.",null,null],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",null,null],[12,"0","","",142,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filter","","Filter method to use.",143,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL\nspeak).",143,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For\nexample, if it would select mipmap level 2 and lod_bias is 1, it will\nuse mipmap level 3.",143,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",143,null],[12,"comparison","","Comparison mode, used primary for a shadow map.",143,null],[12,"border","","Border color is used when one of the wrap modes is set to border.",143,null],[3,"Descriptor","","Texture storage descriptor.",null,null],[12,"kind","","",144,null],[12,"levels","","",144,null],[12,"format","","",144,null],[12,"bind","","",144,null],[12,"usage","","",144,null],[3,"ResourceDesc","","Texture resource view descriptor.",null,null],[12,"channel","","",145,null],[12,"min","","",145,null],[12,"max","","",145,null],[12,"swizzle","","",145,null],[3,"RenderDesc","","Texture render view descriptor.",null,null],[12,"channel","","",146,null],[12,"level","","",146,null],[12,"layer","","",146,null],[3,"DepthStencilFlags","","Depth-stencil read-only flags",null,null],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",null,null],[12,"level","","",147,null],[12,"layer","","",147,null],[12,"flags","","",147,null],[4,"Error","","Pure texture object creation error.",null,null],[13,"Format","","Failed to map a given format to the device.",148,null],[13,"Kind","","The kind doesn&#39;t support a particular operation.",148,null],[13,"Samples","","Failed to map a given multisampled kind to the device.",148,null],[13,"Size","","Unsupported size in one of the dimensions.",148,null],[13,"Data","","The given data has a different size than the target texture slice.",148,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Single","","No additional sample information",149,null],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",149,null],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",149,null],[4,"FilterMethod","","How to [filter](https://en.wikipedia.org/wiki/Texture_filtering) the\ntexture when sampling. They correspond to increasing levels of quality,\nbut also cost. They &quot;layer&quot; on top of each other: it is not possible to\nhave bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",150,null],[13,"Mipmap","","Add simple mipmapping.",150,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase\nquality.",150,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",150,null],[13,"Anisotropic","","Anisotropic filtering with a given &quot;max&quot;, must be between 1 and 16,\ninclusive.",150,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosX","","",151,null],[13,"NegX","","",151,null],[13,"PosY","","",151,null],[13,"NegY","","",151,null],[13,"PosZ","","",151,null],[13,"NegZ","","",151,null],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",null,null],[13,"D1","","A single row of texels.",152,null],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels\nin a different row are not sampled.",152,null],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",152,null],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in\na different depth level are not sampled.",152,null],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",152,null],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",152,null],[13,"CubeArray","","An array of Cube textures.",152,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is\nthe default.",153,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",153,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",153,null],[13,"Border","","Use border color.",153,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",null,null],[6,"RawImageInfo","","New raw image info based on the universal format spec.",null,null],[6,"NewImageInfo","","New image info based on the universal format spec.\nThe format is suppsed to come from compile-time information\nas opposed to run-time enum values.",null,null],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",null,null],[17,"RO_DEPTH","","Depth is read-only in the view.",null,null],[17,"RO_STENCIL","","Stencil is read-only in the view.",null,null],[17,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",null,null],[11,"eq","","",148,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",148,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",149,{"inputs":[{"name":"aamode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"aamode"}],"output":{"name":"aamode"}}],[11,"hash","","",149,null],[11,"partial_cmp","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"option"}}],[11,"lt","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"le","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"gt","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ge","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"eq","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"cmp","","",149,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"ordering"}}],[11,"from","","",149,{"inputs":[{"name":"numsamples"}],"output":{"name":"aamode"}}],[11,"get_num_fragments","","Return the number of actual data fragments stored per texel.",149,{"inputs":[{"name":"aamode"}],"output":{"name":"numfragments"}}],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",149,{"inputs":[{"name":"aamode"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"filtermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"filtermethod"}],"output":{"name":"filtermethod"}}],[11,"hash","","",150,null],[11,"partial_cmp","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"option"}}],[11,"lt","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"le","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"gt","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ge","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"eq","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"cmp","","",150,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"ordering"}}],[11,"fmt","","",151,{"inputs":[{"name":"cubeface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"cubeface"}],"output":{"name":"cubeface"}}],[11,"hash","","",151,null],[11,"partial_cmp","","",151,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"option"}}],[11,"eq","","",151,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"cmp","","",151,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"ordering"}}],[11,"fmt","","",152,{"inputs":[{"name":"kind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"kind"}],"output":{"name":"kind"}}],[11,"hash","","",152,null],[11,"partial_cmp","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"option"}}],[11,"lt","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"le","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"gt","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ge","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"eq","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"cmp","","",152,{"inputs":[{"name":"kind"},{"name":"kind"}],"output":{"name":"ordering"}}],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",152,{"inputs":[{"name":"kind"}],"output":{"name":"dimensions"}}],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",152,{"inputs":[{"name":"kind"},{"name":"level"}],"output":{"name":"dimensions"}}],[11,"get_num_levels","","Count the number of mipmap levels.",152,{"inputs":[{"name":"kind"}],"output":{"name":"level"}}],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",152,{"inputs":[{"name":"kind"}],"output":{"name":"option"}}],[11,"is_cube","","Check if it&#39;s one of the cube kinds.",152,{"inputs":[{"name":"kind"}],"output":{"name":"bool"}}],[11,"fmt","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"imageinfocommon"}],"output":{"name":"imageinfocommon"}}],[11,"hash","","",141,null],[11,"partial_cmp","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"option"}}],[11,"lt","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"le","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"gt","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ge","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"eq","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"bool"}}],[11,"cmp","","",141,{"inputs":[{"name":"imageinfocommon"},{"name":"imageinfocommon"}],"output":{"name":"ordering"}}],[11,"get_texel_count","","Get the total number of texels.",141,{"inputs":[{"name":"imageinfocommon"}],"output":{"name":"usize"}}],[11,"convert","","Convert into a differently typed format.",141,{"inputs":[{"name":"imageinfocommon"},{"name":"t"}],"output":{"name":"imageinfocommon"}}],[11,"is_inside","","Check if it fits inside given dimensions.",141,{"inputs":[{"name":"imageinfocommon"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"fmt","","",153,{"inputs":[{"name":"wrapmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"wrapmode"}],"output":{"name":"wrapmode"}}],[11,"hash","","",153,null],[11,"partial_cmp","","",153,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"option"}}],[11,"eq","","",153,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"cmp","","",153,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"option"}}],[11,"lt","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"le","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"gt","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ge","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"eq","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"lod"},{"name":"lod"}],"output":{"name":"bool"}}],[11,"hash","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"lod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"lod"}],"output":{"name":"lod"}}],[11,"from","","",154,{"inputs":[{"name":"f32"}],"output":{"name":"lod"}}],[11,"into","","",154,{"inputs":[{"name":"lod"}],"output":{"name":"f32"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"option"}}],[11,"lt","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"le","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"gt","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ge","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"eq","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"packedcolor"},{"name":"packedcolor"}],"output":{"name":"bool"}}],[11,"hash","","",142,null],[11,"fmt","","",142,{"inputs":[{"name":"packedcolor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"packedcolor"}],"output":{"name":"packedcolor"}}],[11,"from","","",142,null],[11,"into","","",142,null],[11,"partial_cmp","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"option"}}],[11,"lt","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"le","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"gt","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ge","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"eq","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"hash","","",143,null],[11,"fmt","","",143,{"inputs":[{"name":"samplerinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"samplerinfo"}],"output":{"name":"samplerinfo"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD\nmodifications.",143,{"inputs":[{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[11,"fmt","","",144,{"inputs":[{"name":"descriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"descriptor"}],"output":{"name":"descriptor"}}],[11,"hash","","",144,null],[11,"partial_cmp","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"option"}}],[11,"lt","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"le","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"gt","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ge","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"eq","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"cmp","","",144,{"inputs":[{"name":"descriptor"},{"name":"descriptor"}],"output":{"name":"ordering"}}],[11,"to_image_info","","Get image info for a given mip.",144,{"inputs":[{"name":"descriptor"},{"name":"level"}],"output":{"name":"newimageinfo"}}],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",144,{"inputs":[{"name":"descriptor"},{"name":"channeltype"},{"name":"level"}],"output":{"name":"rawimageinfo"}}],[11,"fmt","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"resourcedesc"}],"output":{"name":"resourcedesc"}}],[11,"hash","","",145,null],[11,"partial_cmp","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"option"}}],[11,"lt","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"le","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"gt","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ge","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"eq","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"bool"}}],[11,"cmp","","",145,{"inputs":[{"name":"resourcedesc"},{"name":"resourcedesc"}],"output":{"name":"ordering"}}],[11,"fmt","","",146,{"inputs":[{"name":"renderdesc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"renderdesc"}],"output":{"name":"renderdesc"}}],[11,"hash","","",146,null],[11,"partial_cmp","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"option"}}],[11,"lt","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"le","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"gt","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ge","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"eq","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"bool"}}],[11,"cmp","","",146,{"inputs":[{"name":"renderdesc"},{"name":"renderdesc"}],"output":{"name":"ordering"}}],[11,"hash","","",155,null],[11,"cmp","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"option"}}],[11,"lt","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"le","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"gt","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ge","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"eq","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"depthstencilflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",155,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"all","","Returns the set containing all flags.",155,{"inputs":[],"output":{"name":"depthstencilflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",155,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",155,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",155,{"inputs":[{"name":"u8"}],"output":{"name":"depthstencilflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",155,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",155,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",155,{"inputs":[{"name":"depthstencilflags"},{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"not","","Returns the complement of this set of flags.",155,{"inputs":[{"name":"depthstencilflags"}],"output":{"name":"depthstencilflags"}}],[11,"from_iter","","",155,{"inputs":[{"name":"t"}],"output":{"name":"depthstencilflags"}}],[11,"fmt","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"depthstencildesc"}],"output":{"name":"depthstencildesc"}}],[11,"hash","","",147,null],[11,"partial_cmp","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"option"}}],[11,"lt","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"le","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"gt","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ge","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"eq","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"bool"}}],[11,"cmp","","",147,{"inputs":[{"name":"depthstencildesc"},{"name":"depthstencildesc"}],"output":{"name":"ordering"}}],[11,"from","","",147,{"inputs":[{"name":"renderdesc"}],"output":{"name":"depthstencildesc"}}],[6,"VertexCount","gfx_core","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[6,"AttributeSlot","","Slot for an attribute.",null,null],[6,"ConstantBufferSlot","","Slot for a constant buffer object.",null,null],[6,"ResourceViewSlot","","Slot for a shader resource view.",null,null],[6,"UnorderedViewSlot","","Slot for an unordered access object.",null,null],[6,"ColorSlot","","Slot for an active color buffer.",null,null],[6,"SamplerSlot","","Slot for a sampler.",null,null],[17,"MAX_VERTEX_ATTRIBUTES","","Compile-time maximum number of vertex attributes.",null,null],[17,"MAX_COLOR_TARGETS","","Compile-time maximum number of color targets.",null,null],[17,"MAX_CONSTANT_BUFFERS","","Compile-time maximum number of constant buffers.",null,null],[17,"MAX_RESOURCE_VIEWS","","Compile-time maximum number of shader resource views (SRV).",null,null],[17,"MAX_UNORDERED_VIEWS","","Compile-time maximum number of unordered access views (UAV).",null,null],[17,"MAX_SAMPLERS","","Compile-time maximum number of samplers.",null,null],[8,"Resources","","Resources pertaining to a specific API.",null,null],[16,"Buffer","","",156,null],[16,"Shader","","",156,null],[16,"Program","","",156,null],[16,"PipelineStateObject","","",156,null],[16,"Texture","","",156,null],[16,"ShaderResourceView","","",156,null],[16,"UnorderedAccessView","","",156,null],[16,"RenderTargetView","","",156,null],[16,"DepthStencilView","","",156,null],[16,"Sampler","","",156,null],[16,"Fence","","",156,null],[8,"Device","","An interface for performing draw calls using a specific graphics API",null,null],[16,"Resources","","Associated resources type.",157,null],[16,"CommandBuffer","","Associated command buffer type.",157,null],[10,"get_capabilities","","Returns the capabilities available to the specific API implementation.",157,{"inputs":[{"name":"device"}],"output":{"name":"capabilities"}}],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",157,{"inputs":[{"name":"device"},{"name":"manager"}],"output":null}],[10,"submit","","Submit a command buffer for execution.",157,{"inputs":[{"name":"device"},{"name":"commandbuffer"}],"output":null}],[10,"cleanup","","Cleanup unused resources, to be called between frames.",157,{"inputs":[{"name":"device"}],"output":null}],[8,"DeviceFence","","Extension to the Device that allows for submitting of commands\naround a fence",null,null],[10,"fenced_submit","","Submit a command buffer to the stream creating a fence\nthe fence is signaled after the GPU has executed all commands\nin the buffer",158,{"inputs":[{"name":"devicefence"},{"name":"commandbuffer"},{"name":"option"}],"output":{"name":"fence"}}],[10,"fence_wait","","Wait on the supplied fence stalling the current thread until\nthe fence is satisfied",158,{"inputs":[{"name":"devicefence"},{"name":"fence"}],"output":null}],[11,"reference","","",159,{"inputs":[{"name":"vertexshader"},{"name":"manager"}],"output":{"name":"shader"}}],[11,"reference","","",160,{"inputs":[{"name":"hullshader"},{"name":"manager"}],"output":{"name":"shader"}}],[11,"reference","","",161,{"inputs":[{"name":"domainshader"},{"name":"manager"}],"output":{"name":"shader"}}],[11,"reference","","",162,{"inputs":[{"name":"geometryshader"},{"name":"manager"}],"output":{"name":"shader"}}],[11,"reference","","",163,{"inputs":[{"name":"pixelshader"},{"name":"manager"}],"output":{"name":"shader"}}],[11,"get_usage","","Return the aggregated stage usage for the set.",22,{"inputs":[{"name":"shaderset"}],"output":{"name":"usage"}}],[11,"fmt","","",21,{"inputs":[{"name":"capabilities"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"capabilities"}],"output":{"name":"capabilities"}}],[11,"eq","","",23,{"inputs":[{"name":"primitive"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"primitive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"primitive"}],"output":{"name":"primitive"}}],[11,"fmt","","",24,{"inputs":[{"name":"indextype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"indextype"}],"output":{"name":"indextype"}}],[11,"hash","","",24,null],[11,"partial_cmp","","",24,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"option"}}],[11,"eq","","",24,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"ordering"}}]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"MultiSample"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"ColorMask"],[3,"Color"],[3,"RefValues"],[3,"Rect"],[3,"Mirror"],[3,"Capabilities"],[4,"ShaderSet"],[4,"Primitive"],[4,"IndexType"],[4,"ClearColor"],[8,"CommandBuffer"],[4,"DummyResources"],[3,"DummyDevice"],[3,"DummyCommandBuffer"],[3,"BufferInfo"],[4,"MapAccess"],[4,"BufferRole"],[4,"Usage"],[4,"BufferError"],[4,"BufferUpdateError"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"Typed"],[8,"Factory"],[3,"Bind"],[3,"Swizzle"],[3,"Format"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[8,"Producer"],[3,"RawBuffer"],[3,"Buffer"],[3,"Shader"],[3,"Program"],[3,"RawPipelineState"],[3,"RawTexture"],[3,"Texture"],[3,"RawShaderResourceView"],[3,"ShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[3,"Sampler"],[3,"Fence"],[3,"Manager"],[8,"Raw"],[8,"Builder"],[3,"Readable"],[3,"Writable"],[3,"RW"],[3,"ColorInfo"],[3,"DepthStencilInfo"],[3,"Element"],[3,"Descriptor"],[3,"VertexBufferSet"],[3,"ConstantBufferParam"],[3,"ResourceViewParam"],[3,"UnorderedViewParam"],[3,"SamplerParam"],[3,"PixelTargetSet"],[3,"CreationError"],[3,"SamplerType"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[3,"ProgramInfo"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[4,"CompatibilityError"],[4,"CreateShaderError"],[8,"BaseTyped"],[8,"Formatted"],[3,"Usage"],[3,"ImageInfoCommon"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Descriptor"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[4,"Error"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"WrapMode"],[3,"Lod"],[3,"DepthStencilFlags"],[8,"Resources"],[8,"Device"],[8,"DeviceFence"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"]]};
searchIndex["x11_dl"] = {"doc":"","items":[[0,"error","x11_dl","",null,null],[3,"OpenError","x11_dl::error","",null,null],[4,"OpenErrorKind","","",null,null],[13,"Library","","",0,null],[13,"Symbol","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"openerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"openerror"}],"output":{"name":"openerror"}}],[11,"detail","","",1,{"inputs":[{"name":"openerror"}],"output":{"name":"str"}}],[11,"new","","",1,{"inputs":[{"name":"openerrorkind"},{"name":"string"}],"output":{"name":"openerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"openerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"openerror"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"openerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"openerrorkind"}],"output":{"name":"openerrorkind"}}],[11,"as_str","","",0,{"inputs":[{"name":"openerrorkind"}],"output":{"name":"str"}}],[0,"glx","x11_dl","",null,null],[3,"Glx","x11_dl::glx","",null,null],[12,"glXChooseFBConfig","","",2,null],[12,"glXChooseVisual","","",2,null],[12,"glXCopyContext","","",2,null],[12,"glXCreateContext","","",2,null],[12,"glXCreateGLXPixmap","","",2,null],[12,"glXCreateNewContext","","",2,null],[12,"glXCreatePbuffer","","",2,null],[12,"glXCreatePixmap","","",2,null],[12,"glXCreateWindow","","",2,null],[12,"glXDestroyContext","","",2,null],[12,"glXDestroyGLXPixmap","","",2,null],[12,"glXDestroyPbuffer","","",2,null],[12,"glXDestroyPixmap","","",2,null],[12,"glXDestroyWindow","","",2,null],[12,"glXGetClientString","","",2,null],[12,"glXGetConfig","","",2,null],[12,"glXGetCurrentContext","","",2,null],[12,"glXGetCurrentDisplay","","",2,null],[12,"glXGetCurrentDrawable","","",2,null],[12,"glXGetCurrentReadDrawable","","",2,null],[12,"glXGetFBConfigAttrib","","",2,null],[12,"glXGetFBConfigs","","",2,null],[12,"glXGetProcAddress","","",2,null],[12,"glXGetSelectedEvent","","",2,null],[12,"glXGetVisualFromFBConfig","","",2,null],[12,"glXIsDirect","","",2,null],[12,"glXMakeContextCurrent","","",2,null],[12,"glXMakeCurrent","","",2,null],[12,"glXQueryContext","","",2,null],[12,"glXQueryDrawable","","",2,null],[12,"glXQueryExtension","","",2,null],[12,"glXQueryExtensionsString","","",2,null],[12,"glXQueryServerString","","",2,null],[12,"glXQueryVersion","","",2,null],[12,"glXSelectEvent","","",2,null],[12,"glXSwapBuffers","","",2,null],[12,"glXUseXFont","","",2,null],[12,"glXWaitGL","","",2,null],[12,"glXWaitX","","",2,null],[3,"__GLXcontextRec","","",null,null],[3,"__GLXFBConfigRec","","",null,null],[0,"arb","","",null,null],[17,"GLX_CONTEXT_MAJOR_VERSION_ARB","x11_dl::glx::arb","",null,null],[17,"GLX_CONTEXT_MINOR_VERSION_ARB","","",null,null],[17,"GLX_CONTEXT_FLAGS_ARB","","",null,null],[17,"GLX_CONTEXT_PROFILE_MASK_ARB","","",null,null],[17,"GLX_CONTEXT_DEBUG_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_CORE_PROFILE_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB","","",null,null],[0,"ext","x11_dl::glx","",null,null],[17,"GLX_SWAP_INTERVAL_EXT","x11_dl::glx::ext","",null,null],[17,"GLX_MAX_SWAP_INTERVAL_EXT","","",null,null],[6,"GLXContext","x11_dl::glx","",null,null],[6,"GLXContextID","","",null,null],[6,"GLXDrawable","","",null,null],[6,"GLXFBConfig","","",null,null],[6,"GLXFBConfigID","","",null,null],[6,"GLXPbuffer","","",null,null],[6,"GLXPixmap","","",null,null],[6,"GLXWindow","","",null,null],[17,"GLX_SLOW_CONFIG","","",null,null],[17,"GLX_NON_CONFORMANT_CONFIG","","",null,null],[17,"GLX_WINDOW_BIT","","",null,null],[17,"GLX_PIXMAP_BIT","","",null,null],[17,"GLX_PBUFFER_BIT","","",null,null],[17,"GLX_USE_GL","","",null,null],[17,"GLX_BUFFER_SIZE","","",null,null],[17,"GLX_LEVEL","","",null,null],[17,"GLX_RGBA","","",null,null],[17,"GLX_DOUBLEBUFFER","","",null,null],[17,"GLX_STEREO","","",null,null],[17,"GLX_AUX_BUFFERS","","",null,null],[17,"GLX_RED_SIZE","","",null,null],[17,"GLX_GREEN_SIZE","","",null,null],[17,"GLX_BLUE_SIZE","","",null,null],[17,"GLX_ALPHA_SIZE","","",null,null],[17,"GLX_DEPTH_SIZE","","",null,null],[17,"GLX_STENCIL_SIZE","","",null,null],[17,"GLX_ACCUM_RED_SIZE","","",null,null],[17,"GLX_ACCUM_GREEN_SIZE","","",null,null],[17,"GLX_ACCUM_BLUE_SIZE","","",null,null],[17,"GLX_ACCUM_ALPHA_SIZE","","",null,null],[17,"GLX_CONFIG_CAVEAT","","",null,null],[17,"GLX_X_VISUAL_TYPE","","",null,null],[17,"GLX_TRANSPARENT_TYPE","","",null,null],[17,"GLX_TRANSPARENT_INDEX_VALUE","","",null,null],[17,"GLX_TRANSPARENT_RED_VALUE","","",null,null],[17,"GLX_TRANSPARENT_GREEN_VALUE","","",null,null],[17,"GLX_TRANSPARENT_BLUE_VALUE","","",null,null],[17,"GLX_TRANSPARENT_ALPHA_VALUE","","",null,null],[17,"GLX_DRAWABLE_TYPE","","",null,null],[17,"GLX_RENDER_TYPE","","",null,null],[17,"GLX_X_RENDERABLE","","",null,null],[17,"GLX_FBCONFIG_ID","","",null,null],[17,"GLX_DONT_CARE","","",null,null],[17,"GLX_NONE","","",null,null],[17,"GLX_RGBA_BIT","","",null,null],[17,"GLX_COLOR_INDEX_BIT","","",null,null],[17,"GLX_TRANSPARENT_RGB","","",null,null],[17,"GLX_TRANSPARENT_INDEX","","",null,null],[17,"GLX_TRUE_COLOR","","",null,null],[17,"GLX_DIRECT_COLOR","","",null,null],[17,"GLX_PSEUDO_COLOR","","",null,null],[17,"GLX_STATIC_COLOR","","",null,null],[17,"GLX_GRAY_SCALE","","",null,null],[17,"GLX_STATIC_GRAY","","",null,null],[11,"open","","",2,{"inputs":[],"output":{"name":"result"}}],[0,"keysym","x11_dl","",null,null],[17,"XK_BackSpace","x11_dl::keysym","",null,null],[17,"XK_Tab","","",null,null],[17,"XK_Linefeed","","",null,null],[17,"XK_Clear","","",null,null],[17,"XK_Return","","",null,null],[17,"XK_Pause","","",null,null],[17,"XK_Scroll_Lock","","",null,null],[17,"XK_Sys_Req","","",null,null],[17,"XK_Escape","","",null,null],[17,"XK_Delete","","",null,null],[17,"XK_Multi_key","","",null,null],[17,"XK_Kanji","","",null,null],[17,"XK_Muhenkan","","",null,null],[17,"XK_Henkan_Mode","","",null,null],[17,"XK_Henkan","","",null,null],[17,"XK_Romaji","","",null,null],[17,"XK_Hiragana","","",null,null],[17,"XK_Katakana","","",null,null],[17,"XK_Hiragana_Katakana","","",null,null],[17,"XK_Zenkaku","","",null,null],[17,"XK_Hankaku","","",null,null],[17,"XK_Zenkaku_Hankaku","","",null,null],[17,"XK_Touroku","","",null,null],[17,"XK_Massyo","","",null,null],[17,"XK_Kana_Lock","","",null,null],[17,"XK_Kana_Shift","","",null,null],[17,"XK_Eisu_Shift","","",null,null],[17,"XK_Eisu_toggle","","",null,null],[17,"XK_Home","","",null,null],[17,"XK_Left","","",null,null],[17,"XK_Up","","",null,null],[17,"XK_Right","","",null,null],[17,"XK_Down","","",null,null],[17,"XK_Prior","","",null,null],[17,"XK_Page_Up","","",null,null],[17,"XK_Next","","",null,null],[17,"XK_Page_Down","","",null,null],[17,"XK_End","","",null,null],[17,"XK_Begin","","",null,null],[17,"XK_Win_L","","",null,null],[17,"XK_Win_R","","",null,null],[17,"XK_App","","",null,null],[17,"XK_Select","","",null,null],[17,"XK_Print","","",null,null],[17,"XK_Execute","","",null,null],[17,"XK_Insert","","",null,null],[17,"XK_Undo","","",null,null],[17,"XK_Redo","","",null,null],[17,"XK_Menu","","",null,null],[17,"XK_Find","","",null,null],[17,"XK_Cancel","","",null,null],[17,"XK_Help","","",null,null],[17,"XK_Break","","",null,null],[17,"XK_Mode_switch","","",null,null],[17,"XK_script_switch","","",null,null],[17,"XK_Num_Lock","","",null,null],[17,"XK_KP_Space","","",null,null],[17,"XK_KP_Tab","","",null,null],[17,"XK_KP_Enter","","",null,null],[17,"XK_KP_F1","","",null,null],[17,"XK_KP_F2","","",null,null],[17,"XK_KP_F3","","",null,null],[17,"XK_KP_F4","","",null,null],[17,"XK_KP_Home","","",null,null],[17,"XK_KP_Left","","",null,null],[17,"XK_KP_Up","","",null,null],[17,"XK_KP_Right","","",null,null],[17,"XK_KP_Down","","",null,null],[17,"XK_KP_Prior","","",null,null],[17,"XK_KP_Page_Up","","",null,null],[17,"XK_KP_Next","","",null,null],[17,"XK_KP_Page_Down","","",null,null],[17,"XK_KP_End","","",null,null],[17,"XK_KP_Begin","","",null,null],[17,"XK_KP_Insert","","",null,null],[17,"XK_KP_Delete","","",null,null],[17,"XK_KP_Equal","","",null,null],[17,"XK_KP_Multiply","","",null,null],[17,"XK_KP_Add","","",null,null],[17,"XK_KP_Separator","","",null,null],[17,"XK_KP_Subtract","","",null,null],[17,"XK_KP_Decimal","","",null,null],[17,"XK_KP_Divide","","",null,null],[17,"XK_KP_0","","",null,null],[17,"XK_KP_1","","",null,null],[17,"XK_KP_2","","",null,null],[17,"XK_KP_3","","",null,null],[17,"XK_KP_4","","",null,null],[17,"XK_KP_5","","",null,null],[17,"XK_KP_6","","",null,null],[17,"XK_KP_7","","",null,null],[17,"XK_KP_8","","",null,null],[17,"XK_KP_9","","",null,null],[17,"XK_F1","","",null,null],[17,"XK_F2","","",null,null],[17,"XK_F3","","",null,null],[17,"XK_F4","","",null,null],[17,"XK_F5","","",null,null],[17,"XK_F6","","",null,null],[17,"XK_F7","","",null,null],[17,"XK_F8","","",null,null],[17,"XK_F9","","",null,null],[17,"XK_F10","","",null,null],[17,"XK_F11","","",null,null],[17,"XK_L1","","",null,null],[17,"XK_F12","","",null,null],[17,"XK_L2","","",null,null],[17,"XK_F13","","",null,null],[17,"XK_L3","","",null,null],[17,"XK_F14","","",null,null],[17,"XK_L4","","",null,null],[17,"XK_F15","","",null,null],[17,"XK_L5","","",null,null],[17,"XK_F16","","",null,null],[17,"XK_L6","","",null,null],[17,"XK_F17","","",null,null],[17,"XK_L7","","",null,null],[17,"XK_F18","","",null,null],[17,"XK_L8","","",null,null],[17,"XK_F19","","",null,null],[17,"XK_L9","","",null,null],[17,"XK_F20","","",null,null],[17,"XK_L10","","",null,null],[17,"XK_F21","","",null,null],[17,"XK_R1","","",null,null],[17,"XK_F22","","",null,null],[17,"XK_R2","","",null,null],[17,"XK_F23","","",null,null],[17,"XK_R3","","",null,null],[17,"XK_F24","","",null,null],[17,"XK_R4","","",null,null],[17,"XK_F25","","",null,null],[17,"XK_R5","","",null,null],[17,"XK_F26","","",null,null],[17,"XK_R6","","",null,null],[17,"XK_F27","","",null,null],[17,"XK_R7","","",null,null],[17,"XK_F28","","",null,null],[17,"XK_R8","","",null,null],[17,"XK_F29","","",null,null],[17,"XK_R9","","",null,null],[17,"XK_F30","","",null,null],[17,"XK_R10","","",null,null],[17,"XK_F31","","",null,null],[17,"XK_R11","","",null,null],[17,"XK_F32","","",null,null],[17,"XK_R12","","",null,null],[17,"XK_F33","","",null,null],[17,"XK_R13","","",null,null],[17,"XK_F34","","",null,null],[17,"XK_R14","","",null,null],[17,"XK_F35","","",null,null],[17,"XK_R15","","",null,null],[17,"XK_Shift_L","","",null,null],[17,"XK_Shift_R","","",null,null],[17,"XK_Control_L","","",null,null],[17,"XK_Control_R","","",null,null],[17,"XK_Caps_Lock","","",null,null],[17,"XK_Shift_Lock","","",null,null],[17,"XK_Meta_L","","",null,null],[17,"XK_Meta_R","","",null,null],[17,"XK_Alt_L","","",null,null],[17,"XK_Alt_R","","",null,null],[17,"XK_Super_L","","",null,null],[17,"XK_Super_R","","",null,null],[17,"XK_Hyper_L","","",null,null],[17,"XK_Hyper_R","","",null,null],[17,"XK_space","","",null,null],[17,"XK_exclam","","",null,null],[17,"XK_quotedbl","","",null,null],[17,"XK_numbersign","","",null,null],[17,"XK_dollar","","",null,null],[17,"XK_percent","","",null,null],[17,"XK_ampersand","","",null,null],[17,"XK_apostrophe","","",null,null],[17,"XK_quoteright","","",null,null],[17,"XK_parenleft","","",null,null],[17,"XK_parenright","","",null,null],[17,"XK_asterisk","","",null,null],[17,"XK_plus","","",null,null],[17,"XK_comma","","",null,null],[17,"XK_minus","","",null,null],[17,"XK_period","","",null,null],[17,"XK_slash","","",null,null],[17,"XK_0","","",null,null],[17,"XK_1","","",null,null],[17,"XK_2","","",null,null],[17,"XK_3","","",null,null],[17,"XK_4","","",null,null],[17,"XK_5","","",null,null],[17,"XK_6","","",null,null],[17,"XK_7","","",null,null],[17,"XK_8","","",null,null],[17,"XK_9","","",null,null],[17,"XK_colon","","",null,null],[17,"XK_semicolon","","",null,null],[17,"XK_less","","",null,null],[17,"XK_equal","","",null,null],[17,"XK_greater","","",null,null],[17,"XK_question","","",null,null],[17,"XK_at","","",null,null],[17,"XK_A","","",null,null],[17,"XK_B","","",null,null],[17,"XK_C","","",null,null],[17,"XK_D","","",null,null],[17,"XK_E","","",null,null],[17,"XK_F","","",null,null],[17,"XK_G","","",null,null],[17,"XK_H","","",null,null],[17,"XK_I","","",null,null],[17,"XK_J","","",null,null],[17,"XK_K","","",null,null],[17,"XK_L","","",null,null],[17,"XK_M","","",null,null],[17,"XK_N","","",null,null],[17,"XK_O","","",null,null],[17,"XK_P","","",null,null],[17,"XK_Q","","",null,null],[17,"XK_R","","",null,null],[17,"XK_S","","",null,null],[17,"XK_T","","",null,null],[17,"XK_U","","",null,null],[17,"XK_V","","",null,null],[17,"XK_W","","",null,null],[17,"XK_X","","",null,null],[17,"XK_Y","","",null,null],[17,"XK_Z","","",null,null],[17,"XK_bracketleft","","",null,null],[17,"XK_backslash","","",null,null],[17,"XK_bracketright","","",null,null],[17,"XK_asciicircum","","",null,null],[17,"XK_underscore","","",null,null],[17,"XK_grave","","",null,null],[17,"XK_quoteleft","","",null,null],[17,"XK_a","","",null,null],[17,"XK_b","","",null,null],[17,"XK_c","","",null,null],[17,"XK_d","","",null,null],[17,"XK_e","","",null,null],[17,"XK_f","","",null,null],[17,"XK_g","","",null,null],[17,"XK_h","","",null,null],[17,"XK_i","","",null,null],[17,"XK_j","","",null,null],[17,"XK_k","","",null,null],[17,"XK_l","","",null,null],[17,"XK_m","","",null,null],[17,"XK_n","","",null,null],[17,"XK_o","","",null,null],[17,"XK_p","","",null,null],[17,"XK_q","","",null,null],[17,"XK_r","","",null,null],[17,"XK_s","","",null,null],[17,"XK_t","","",null,null],[17,"XK_u","","",null,null],[17,"XK_v","","",null,null],[17,"XK_w","","",null,null],[17,"XK_x","","",null,null],[17,"XK_y","","",null,null],[17,"XK_z","","",null,null],[17,"XK_braceleft","","",null,null],[17,"XK_bar","","",null,null],[17,"XK_braceright","","",null,null],[17,"XK_asciitilde","","",null,null],[17,"XK_nobreakspace","","",null,null],[17,"XK_exclamdown","","",null,null],[17,"XK_cent","","",null,null],[17,"XK_sterling","","",null,null],[17,"XK_currency","","",null,null],[17,"XK_yen","","",null,null],[17,"XK_brokenbar","","",null,null],[17,"XK_section","","",null,null],[17,"XK_diaeresis","","",null,null],[17,"XK_copyright","","",null,null],[17,"XK_ordfeminine","","",null,null],[17,"XK_guillemotleft","","",null,null],[17,"XK_notsign","","",null,null],[17,"XK_hyphen","","",null,null],[17,"XK_registered","","",null,null],[17,"XK_macron","","",null,null],[17,"XK_degree","","",null,null],[17,"XK_plusminus","","",null,null],[17,"XK_twosuperior","","",null,null],[17,"XK_threesuperior","","",null,null],[17,"XK_acute","","",null,null],[17,"XK_mu","","",null,null],[17,"XK_paragraph","","",null,null],[17,"XK_periodcentered","","",null,null],[17,"XK_cedilla","","",null,null],[17,"XK_onesuperior","","",null,null],[17,"XK_masculine","","",null,null],[17,"XK_guillemotright","","",null,null],[17,"XK_onequarter","","",null,null],[17,"XK_onehalf","","",null,null],[17,"XK_threequarters","","",null,null],[17,"XK_questiondown","","",null,null],[17,"XK_Agrave","","",null,null],[17,"XK_Aacute","","",null,null],[17,"XK_Acircumflex","","",null,null],[17,"XK_Atilde","","",null,null],[17,"XK_Adiaeresis","","",null,null],[17,"XK_Aring","","",null,null],[17,"XK_AE","","",null,null],[17,"XK_Ccedilla","","",null,null],[17,"XK_Egrave","","",null,null],[17,"XK_Eacute","","",null,null],[17,"XK_Ecircumflex","","",null,null],[17,"XK_Ediaeresis","","",null,null],[17,"XK_Igrave","","",null,null],[17,"XK_Iacute","","",null,null],[17,"XK_Icircumflex","","",null,null],[17,"XK_Idiaeresis","","",null,null],[17,"XK_ETH","","",null,null],[17,"XK_Eth","","",null,null],[17,"XK_Ntilde","","",null,null],[17,"XK_Ograve","","",null,null],[17,"XK_Oacute","","",null,null],[17,"XK_Ocircumflex","","",null,null],[17,"XK_Otilde","","",null,null],[17,"XK_Odiaeresis","","",null,null],[17,"XK_multiply","","",null,null],[17,"XK_Ooblique","","",null,null],[17,"XK_Ugrave","","",null,null],[17,"XK_Uacute","","",null,null],[17,"XK_Ucircumflex","","",null,null],[17,"XK_Udiaeresis","","",null,null],[17,"XK_Yacute","","",null,null],[17,"XK_THORN","","",null,null],[17,"XK_Thorn","","",null,null],[17,"XK_ssharp","","",null,null],[17,"XK_agrave","","",null,null],[17,"XK_aacute","","",null,null],[17,"XK_acircumflex","","",null,null],[17,"XK_atilde","","",null,null],[17,"XK_adiaeresis","","",null,null],[17,"XK_aring","","",null,null],[17,"XK_ae","","",null,null],[17,"XK_ccedilla","","",null,null],[17,"XK_egrave","","",null,null],[17,"XK_eacute","","",null,null],[17,"XK_ecircumflex","","",null,null],[17,"XK_ediaeresis","","",null,null],[17,"XK_igrave","","",null,null],[17,"XK_iacute","","",null,null],[17,"XK_icircumflex","","",null,null],[17,"XK_idiaeresis","","",null,null],[17,"XK_eth","","",null,null],[17,"XK_ntilde","","",null,null],[17,"XK_ograve","","",null,null],[17,"XK_oacute","","",null,null],[17,"XK_ocircumflex","","",null,null],[17,"XK_otilde","","",null,null],[17,"XK_odiaeresis","","",null,null],[17,"XK_division","","",null,null],[17,"XK_oslash","","",null,null],[17,"XK_ugrave","","",null,null],[17,"XK_uacute","","",null,null],[17,"XK_ucircumflex","","",null,null],[17,"XK_udiaeresis","","",null,null],[17,"XK_yacute","","",null,null],[17,"XK_thorn","","",null,null],[17,"XK_ydiaeresis","","",null,null],[17,"XK_Aogonek","","",null,null],[17,"XK_breve","","",null,null],[17,"XK_Lstroke","","",null,null],[17,"XK_Lcaron","","",null,null],[17,"XK_Sacute","","",null,null],[17,"XK_Scaron","","",null,null],[17,"XK_Scedilla","","",null,null],[17,"XK_Tcaron","","",null,null],[17,"XK_Zacute","","",null,null],[17,"XK_Zcaron","","",null,null],[17,"XK_Zabovedot","","",null,null],[17,"XK_aogonek","","",null,null],[17,"XK_ogonek","","",null,null],[17,"XK_lstroke","","",null,null],[17,"XK_lcaron","","",null,null],[17,"XK_sacute","","",null,null],[17,"XK_caron","","",null,null],[17,"XK_scaron","","",null,null],[17,"XK_scedilla","","",null,null],[17,"XK_tcaron","","",null,null],[17,"XK_zacute","","",null,null],[17,"XK_doubleacute","","",null,null],[17,"XK_zcaron","","",null,null],[17,"XK_zabovedot","","",null,null],[17,"XK_Racute","","",null,null],[17,"XK_Abreve","","",null,null],[17,"XK_Lacute","","",null,null],[17,"XK_Cacute","","",null,null],[17,"XK_Ccaron","","",null,null],[17,"XK_Eogonek","","",null,null],[17,"XK_Ecaron","","",null,null],[17,"XK_Dcaron","","",null,null],[17,"XK_Dstroke","","",null,null],[17,"XK_Nacute","","",null,null],[17,"XK_Ncaron","","",null,null],[17,"XK_Odoubleacute","","",null,null],[17,"XK_Rcaron","","",null,null],[17,"XK_Uring","","",null,null],[17,"XK_Udoubleacute","","",null,null],[17,"XK_Tcedilla","","",null,null],[17,"XK_racute","","",null,null],[17,"XK_abreve","","",null,null],[17,"XK_lacute","","",null,null],[17,"XK_cacute","","",null,null],[17,"XK_ccaron","","",null,null],[17,"XK_eogonek","","",null,null],[17,"XK_ecaron","","",null,null],[17,"XK_dcaron","","",null,null],[17,"XK_dstroke","","",null,null],[17,"XK_nacute","","",null,null],[17,"XK_ncaron","","",null,null],[17,"XK_odoubleacute","","",null,null],[17,"XK_udoubleacute","","",null,null],[17,"XK_rcaron","","",null,null],[17,"XK_uring","","",null,null],[17,"XK_tcedilla","","",null,null],[17,"XK_abovedot","","",null,null],[17,"XK_Hstroke","","",null,null],[17,"XK_Hcircumflex","","",null,null],[17,"XK_Iabovedot","","",null,null],[17,"XK_Gbreve","","",null,null],[17,"XK_Jcircumflex","","",null,null],[17,"XK_hstroke","","",null,null],[17,"XK_hcircumflex","","",null,null],[17,"XK_idotless","","",null,null],[17,"XK_gbreve","","",null,null],[17,"XK_jcircumflex","","",null,null],[17,"XK_Cabovedot","","",null,null],[17,"XK_Ccircumflex","","",null,null],[17,"XK_Gabovedot","","",null,null],[17,"XK_Gcircumflex","","",null,null],[17,"XK_Ubreve","","",null,null],[17,"XK_Scircumflex","","",null,null],[17,"XK_cabovedot","","",null,null],[17,"XK_ccircumflex","","",null,null],[17,"XK_gabovedot","","",null,null],[17,"XK_gcircumflex","","",null,null],[17,"XK_ubreve","","",null,null],[17,"XK_scircumflex","","",null,null],[17,"XK_kra","","",null,null],[17,"XK_kappa","","",null,null],[17,"XK_Rcedilla","","",null,null],[17,"XK_Itilde","","",null,null],[17,"XK_Lcedilla","","",null,null],[17,"XK_Emacron","","",null,null],[17,"XK_Gcedilla","","",null,null],[17,"XK_Tslash","","",null,null],[17,"XK_rcedilla","","",null,null],[17,"XK_itilde","","",null,null],[17,"XK_lcedilla","","",null,null],[17,"XK_emacron","","",null,null],[17,"XK_gcedilla","","",null,null],[17,"XK_tslash","","",null,null],[17,"XK_ENG","","",null,null],[17,"XK_eng","","",null,null],[17,"XK_Amacron","","",null,null],[17,"XK_Iogonek","","",null,null],[17,"XK_Eabovedot","","",null,null],[17,"XK_Imacron","","",null,null],[17,"XK_Ncedilla","","",null,null],[17,"XK_Omacron","","",null,null],[17,"XK_Kcedilla","","",null,null],[17,"XK_Uogonek","","",null,null],[17,"XK_Utilde","","",null,null],[17,"XK_Umacron","","",null,null],[17,"XK_amacron","","",null,null],[17,"XK_iogonek","","",null,null],[17,"XK_eabovedot","","",null,null],[17,"XK_imacron","","",null,null],[17,"XK_ncedilla","","",null,null],[17,"XK_omacron","","",null,null],[17,"XK_kcedilla","","",null,null],[17,"XK_uogonek","","",null,null],[17,"XK_utilde","","",null,null],[17,"XK_umacron","","",null,null],[17,"XK_overline","","",null,null],[17,"XK_kana_fullstop","","",null,null],[17,"XK_kana_openingbracket","","",null,null],[17,"XK_kana_closingbracket","","",null,null],[17,"XK_kana_comma","","",null,null],[17,"XK_kana_conjunctive","","",null,null],[17,"XK_kana_middledot","","",null,null],[17,"XK_kana_WO","","",null,null],[17,"XK_kana_a","","",null,null],[17,"XK_kana_i","","",null,null],[17,"XK_kana_u","","",null,null],[17,"XK_kana_e","","",null,null],[17,"XK_kana_o","","",null,null],[17,"XK_kana_ya","","",null,null],[17,"XK_kana_yu","","",null,null],[17,"XK_kana_yo","","",null,null],[17,"XK_kana_tsu","","",null,null],[17,"XK_kana_tu","","",null,null],[17,"XK_prolongedsound","","",null,null],[17,"XK_kana_A","","",null,null],[17,"XK_kana_I","","",null,null],[17,"XK_kana_U","","",null,null],[17,"XK_kana_E","","",null,null],[17,"XK_kana_O","","",null,null],[17,"XK_kana_KA","","",null,null],[17,"XK_kana_KI","","",null,null],[17,"XK_kana_KU","","",null,null],[17,"XK_kana_KE","","",null,null],[17,"XK_kana_KO","","",null,null],[17,"XK_kana_SA","","",null,null],[17,"XK_kana_SHI","","",null,null],[17,"XK_kana_SU","","",null,null],[17,"XK_kana_SE","","",null,null],[17,"XK_kana_SO","","",null,null],[17,"XK_kana_TA","","",null,null],[17,"XK_kana_CHI","","",null,null],[17,"XK_kana_TI","","",null,null],[17,"XK_kana_TSU","","",null,null],[17,"XK_kana_TU","","",null,null],[17,"XK_kana_TE","","",null,null],[17,"XK_kana_TO","","",null,null],[17,"XK_kana_NA","","",null,null],[17,"XK_kana_NI","","",null,null],[17,"XK_kana_NU","","",null,null],[17,"XK_kana_NE","","",null,null],[17,"XK_kana_NO","","",null,null],[17,"XK_kana_HA","","",null,null],[17,"XK_kana_HI","","",null,null],[17,"XK_kana_FU","","",null,null],[17,"XK_kana_HU","","",null,null],[17,"XK_kana_HE","","",null,null],[17,"XK_kana_HO","","",null,null],[17,"XK_kana_MA","","",null,null],[17,"XK_kana_MI","","",null,null],[17,"XK_kana_MU","","",null,null],[17,"XK_kana_ME","","",null,null],[17,"XK_kana_MO","","",null,null],[17,"XK_kana_YA","","",null,null],[17,"XK_kana_YU","","",null,null],[17,"XK_kana_YO","","",null,null],[17,"XK_kana_RA","","",null,null],[17,"XK_kana_RI","","",null,null],[17,"XK_kana_RU","","",null,null],[17,"XK_kana_RE","","",null,null],[17,"XK_kana_RO","","",null,null],[17,"XK_kana_WA","","",null,null],[17,"XK_kana_N","","",null,null],[17,"XK_voicedsound","","",null,null],[17,"XK_semivoicedsound","","",null,null],[17,"XK_kana_switch","","",null,null],[17,"XK_Arabic_comma","","",null,null],[17,"XK_Arabic_semicolon","","",null,null],[17,"XK_Arabic_question_mark","","",null,null],[17,"XK_Arabic_hamza","","",null,null],[17,"XK_Arabic_maddaonalef","","",null,null],[17,"XK_Arabic_hamzaonalef","","",null,null],[17,"XK_Arabic_hamzaonwaw","","",null,null],[17,"XK_Arabic_hamzaunderalef","","",null,null],[17,"XK_Arabic_hamzaonyeh","","",null,null],[17,"XK_Arabic_alef","","",null,null],[17,"XK_Arabic_beh","","",null,null],[17,"XK_Arabic_tehmarbuta","","",null,null],[17,"XK_Arabic_teh","","",null,null],[17,"XK_Arabic_theh","","",null,null],[17,"XK_Arabic_jeem","","",null,null],[17,"XK_Arabic_hah","","",null,null],[17,"XK_Arabic_khah","","",null,null],[17,"XK_Arabic_dal","","",null,null],[17,"XK_Arabic_thal","","",null,null],[17,"XK_Arabic_ra","","",null,null],[17,"XK_Arabic_zain","","",null,null],[17,"XK_Arabic_seen","","",null,null],[17,"XK_Arabic_sheen","","",null,null],[17,"XK_Arabic_sad","","",null,null],[17,"XK_Arabic_dad","","",null,null],[17,"XK_Arabic_tah","","",null,null],[17,"XK_Arabic_zah","","",null,null],[17,"XK_Arabic_ain","","",null,null],[17,"XK_Arabic_ghain","","",null,null],[17,"XK_Arabic_tatweel","","",null,null],[17,"XK_Arabic_feh","","",null,null],[17,"XK_Arabic_qaf","","",null,null],[17,"XK_Arabic_kaf","","",null,null],[17,"XK_Arabic_lam","","",null,null],[17,"XK_Arabic_meem","","",null,null],[17,"XK_Arabic_noon","","",null,null],[17,"XK_Arabic_ha","","",null,null],[17,"XK_Arabic_heh","","",null,null],[17,"XK_Arabic_waw","","",null,null],[17,"XK_Arabic_alefmaksura","","",null,null],[17,"XK_Arabic_yeh","","",null,null],[17,"XK_Arabic_fathatan","","",null,null],[17,"XK_Arabic_dammatan","","",null,null],[17,"XK_Arabic_kasratan","","",null,null],[17,"XK_Arabic_fatha","","",null,null],[17,"XK_Arabic_damma","","",null,null],[17,"XK_Arabic_kasra","","",null,null],[17,"XK_Arabic_shadda","","",null,null],[17,"XK_Arabic_sukun","","",null,null],[17,"XK_Arabic_switch","","",null,null],[17,"XK_Serbian_dje","","",null,null],[17,"XK_Macedonia_gje","","",null,null],[17,"XK_Cyrillic_io","","",null,null],[17,"XK_Ukrainian_ie","","",null,null],[17,"XK_Ukranian_je","","",null,null],[17,"XK_Macedonia_dse","","",null,null],[17,"XK_Ukrainian_i","","",null,null],[17,"XK_Ukranian_i","","",null,null],[17,"XK_Ukrainian_yi","","",null,null],[17,"XK_Ukranian_yi","","",null,null],[17,"XK_Cyrillic_je","","",null,null],[17,"XK_Serbian_je","","",null,null],[17,"XK_Cyrillic_lje","","",null,null],[17,"XK_Serbian_lje","","",null,null],[17,"XK_Cyrillic_nje","","",null,null],[17,"XK_Serbian_nje","","",null,null],[17,"XK_Serbian_tshe","","",null,null],[17,"XK_Macedonia_kje","","",null,null],[17,"XK_Byelorussian_shortu","","",null,null],[17,"XK_Cyrillic_dzhe","","",null,null],[17,"XK_Serbian_dze","","",null,null],[17,"XK_numerosign","","",null,null],[17,"XK_Serbian_DJE","","",null,null],[17,"XK_Macedonia_GJE","","",null,null],[17,"XK_Cyrillic_IO","","",null,null],[17,"XK_Ukrainian_IE","","",null,null],[17,"XK_Ukranian_JE","","",null,null],[17,"XK_Macedonia_DSE","","",null,null],[17,"XK_Ukrainian_I","","",null,null],[17,"XK_Ukranian_I","","",null,null],[17,"XK_Ukrainian_YI","","",null,null],[17,"XK_Ukranian_YI","","",null,null],[17,"XK_Cyrillic_JE","","",null,null],[17,"XK_Serbian_JE","","",null,null],[17,"XK_Cyrillic_LJE","","",null,null],[17,"XK_Serbian_LJE","","",null,null],[17,"XK_Cyrillic_NJE","","",null,null],[17,"XK_Serbian_NJE","","",null,null],[17,"XK_Serbian_TSHE","","",null,null],[17,"XK_Macedonia_KJE","","",null,null],[17,"XK_Byelorussian_SHORTU","","",null,null],[17,"XK_Cyrillic_DZHE","","",null,null],[17,"XK_Serbian_DZE","","",null,null],[17,"XK_Cyrillic_yu","","",null,null],[17,"XK_Cyrillic_a","","",null,null],[17,"XK_Cyrillic_be","","",null,null],[17,"XK_Cyrillic_tse","","",null,null],[17,"XK_Cyrillic_de","","",null,null],[17,"XK_Cyrillic_ie","","",null,null],[17,"XK_Cyrillic_ef","","",null,null],[17,"XK_Cyrillic_ghe","","",null,null],[17,"XK_Cyrillic_ha","","",null,null],[17,"XK_Cyrillic_i","","",null,null],[17,"XK_Cyrillic_shorti","","",null,null],[17,"XK_Cyrillic_ka","","",null,null],[17,"XK_Cyrillic_el","","",null,null],[17,"XK_Cyrillic_em","","",null,null],[17,"XK_Cyrillic_en","","",null,null],[17,"XK_Cyrillic_o","","",null,null],[17,"XK_Cyrillic_pe","","",null,null],[17,"XK_Cyrillic_ya","","",null,null],[17,"XK_Cyrillic_er","","",null,null],[17,"XK_Cyrillic_es","","",null,null],[17,"XK_Cyrillic_te","","",null,null],[17,"XK_Cyrillic_u","","",null,null],[17,"XK_Cyrillic_zhe","","",null,null],[17,"XK_Cyrillic_ve","","",null,null],[17,"XK_Cyrillic_softsign","","",null,null],[17,"XK_Cyrillic_yeru","","",null,null],[17,"XK_Cyrillic_ze","","",null,null],[17,"XK_Cyrillic_sha","","",null,null],[17,"XK_Cyrillic_e","","",null,null],[17,"XK_Cyrillic_shcha","","",null,null],[17,"XK_Cyrillic_che","","",null,null],[17,"XK_Cyrillic_hardsign","","",null,null],[17,"XK_Cyrillic_YU","","",null,null],[17,"XK_Cyrillic_A","","",null,null],[17,"XK_Cyrillic_BE","","",null,null],[17,"XK_Cyrillic_TSE","","",null,null],[17,"XK_Cyrillic_DE","","",null,null],[17,"XK_Cyrillic_IE","","",null,null],[17,"XK_Cyrillic_EF","","",null,null],[17,"XK_Cyrillic_GHE","","",null,null],[17,"XK_Cyrillic_HA","","",null,null],[17,"XK_Cyrillic_I","","",null,null],[17,"XK_Cyrillic_SHORTI","","",null,null],[17,"XK_Cyrillic_KA","","",null,null],[17,"XK_Cyrillic_EL","","",null,null],[17,"XK_Cyrillic_EM","","",null,null],[17,"XK_Cyrillic_EN","","",null,null],[17,"XK_Cyrillic_O","","",null,null],[17,"XK_Cyrillic_PE","","",null,null],[17,"XK_Cyrillic_YA","","",null,null],[17,"XK_Cyrillic_ER","","",null,null],[17,"XK_Cyrillic_ES","","",null,null],[17,"XK_Cyrillic_TE","","",null,null],[17,"XK_Cyrillic_U","","",null,null],[17,"XK_Cyrillic_ZHE","","",null,null],[17,"XK_Cyrillic_VE","","",null,null],[17,"XK_Cyrillic_SOFTSIGN","","",null,null],[17,"XK_Cyrillic_YERU","","",null,null],[17,"XK_Cyrillic_ZE","","",null,null],[17,"XK_Cyrillic_SHA","","",null,null],[17,"XK_Cyrillic_E","","",null,null],[17,"XK_Cyrillic_SHCHA","","",null,null],[17,"XK_Cyrillic_CHE","","",null,null],[17,"XK_Cyrillic_HARDSIGN","","",null,null],[17,"XK_Greek_ALPHAaccent","","",null,null],[17,"XK_Greek_EPSILONaccent","","",null,null],[17,"XK_Greek_ETAaccent","","",null,null],[17,"XK_Greek_IOTAaccent","","",null,null],[17,"XK_Greek_IOTAdiaeresis","","",null,null],[17,"XK_Greek_OMICRONaccent","","",null,null],[17,"XK_Greek_UPSILONaccent","","",null,null],[17,"XK_Greek_UPSILONdieresis","","",null,null],[17,"XK_Greek_OMEGAaccent","","",null,null],[17,"XK_Greek_accentdieresis","","",null,null],[17,"XK_Greek_horizbar","","",null,null],[17,"XK_Greek_alphaaccent","","",null,null],[17,"XK_Greek_epsilonaccent","","",null,null],[17,"XK_Greek_etaaccent","","",null,null],[17,"XK_Greek_iotaaccent","","",null,null],[17,"XK_Greek_iotadieresis","","",null,null],[17,"XK_Greek_iotaaccentdieresis","","",null,null],[17,"XK_Greek_omicronaccent","","",null,null],[17,"XK_Greek_upsilonaccent","","",null,null],[17,"XK_Greek_upsilondieresis","","",null,null],[17,"XK_Greek_upsilonaccentdieresis","","",null,null],[17,"XK_Greek_omegaaccent","","",null,null],[17,"XK_Greek_ALPHA","","",null,null],[17,"XK_Greek_BETA","","",null,null],[17,"XK_Greek_GAMMA","","",null,null],[17,"XK_Greek_DELTA","","",null,null],[17,"XK_Greek_EPSILON","","",null,null],[17,"XK_Greek_ZETA","","",null,null],[17,"XK_Greek_ETA","","",null,null],[17,"XK_Greek_THETA","","",null,null],[17,"XK_Greek_IOTA","","",null,null],[17,"XK_Greek_KAPPA","","",null,null],[17,"XK_Greek_LAMDA","","",null,null],[17,"XK_Greek_LAMBDA","","",null,null],[17,"XK_Greek_MU","","",null,null],[17,"XK_Greek_NU","","",null,null],[17,"XK_Greek_XI","","",null,null],[17,"XK_Greek_OMICRON","","",null,null],[17,"XK_Greek_PI","","",null,null],[17,"XK_Greek_RHO","","",null,null],[17,"XK_Greek_SIGMA","","",null,null],[17,"XK_Greek_TAU","","",null,null],[17,"XK_Greek_UPSILON","","",null,null],[17,"XK_Greek_PHI","","",null,null],[17,"XK_Greek_CHI","","",null,null],[17,"XK_Greek_PSI","","",null,null],[17,"XK_Greek_OMEGA","","",null,null],[17,"XK_Greek_alpha","","",null,null],[17,"XK_Greek_beta","","",null,null],[17,"XK_Greek_gamma","","",null,null],[17,"XK_Greek_delta","","",null,null],[17,"XK_Greek_epsilon","","",null,null],[17,"XK_Greek_zeta","","",null,null],[17,"XK_Greek_eta","","",null,null],[17,"XK_Greek_theta","","",null,null],[17,"XK_Greek_iota","","",null,null],[17,"XK_Greek_kappa","","",null,null],[17,"XK_Greek_lamda","","",null,null],[17,"XK_Greek_lambda","","",null,null],[17,"XK_Greek_mu","","",null,null],[17,"XK_Greek_nu","","",null,null],[17,"XK_Greek_xi","","",null,null],[17,"XK_Greek_omicron","","",null,null],[17,"XK_Greek_pi","","",null,null],[17,"XK_Greek_rho","","",null,null],[17,"XK_Greek_sigma","","",null,null],[17,"XK_Greek_finalsmallsigma","","",null,null],[17,"XK_Greek_tau","","",null,null],[17,"XK_Greek_upsilon","","",null,null],[17,"XK_Greek_phi","","",null,null],[17,"XK_Greek_chi","","",null,null],[17,"XK_Greek_psi","","",null,null],[17,"XK_Greek_omega","","",null,null],[17,"XK_Greek_switch","","",null,null],[17,"XK_leftradical","","",null,null],[17,"XK_topleftradical","","",null,null],[17,"XK_horizconnector","","",null,null],[17,"XK_topintegral","","",null,null],[17,"XK_botintegral","","",null,null],[17,"XK_vertconnector","","",null,null],[17,"XK_topleftsqbracket","","",null,null],[17,"XK_botleftsqbracket","","",null,null],[17,"XK_toprightsqbracket","","",null,null],[17,"XK_botrightsqbracket","","",null,null],[17,"XK_topleftparens","","",null,null],[17,"XK_botleftparens","","",null,null],[17,"XK_toprightparens","","",null,null],[17,"XK_botrightparens","","",null,null],[17,"XK_leftmiddlecurlybrace","","",null,null],[17,"XK_rightmiddlecurlybrace","","",null,null],[17,"XK_topleftsummation","","",null,null],[17,"XK_botleftsummation","","",null,null],[17,"XK_topvertsummationconnector","","",null,null],[17,"XK_botvertsummationconnector","","",null,null],[17,"XK_toprightsummation","","",null,null],[17,"XK_botrightsummation","","",null,null],[17,"XK_rightmiddlesummation","","",null,null],[17,"XK_lessthanequal","","",null,null],[17,"XK_notequal","","",null,null],[17,"XK_greaterthanequal","","",null,null],[17,"XK_integral","","",null,null],[17,"XK_therefore","","",null,null],[17,"XK_variation","","",null,null],[17,"XK_infinity","","",null,null],[17,"XK_nabla","","",null,null],[17,"XK_approximate","","",null,null],[17,"XK_similarequal","","",null,null],[17,"XK_ifonlyif","","",null,null],[17,"XK_implies","","",null,null],[17,"XK_identical","","",null,null],[17,"XK_radical","","",null,null],[17,"XK_includedin","","",null,null],[17,"XK_includes","","",null,null],[17,"XK_intersection","","",null,null],[17,"XK_union","","",null,null],[17,"XK_logicaland","","",null,null],[17,"XK_logicalor","","",null,null],[17,"XK_partialderivative","","",null,null],[17,"XK_function","","",null,null],[17,"XK_leftarrow","","",null,null],[17,"XK_uparrow","","",null,null],[17,"XK_rightarrow","","",null,null],[17,"XK_downarrow","","",null,null],[17,"XK_blank","","",null,null],[17,"XK_soliddiamond","","",null,null],[17,"XK_checkerboard","","",null,null],[17,"XK_ht","","",null,null],[17,"XK_ff","","",null,null],[17,"XK_cr","","",null,null],[17,"XK_lf","","",null,null],[17,"XK_nl","","",null,null],[17,"XK_vt","","",null,null],[17,"XK_lowrightcorner","","",null,null],[17,"XK_uprightcorner","","",null,null],[17,"XK_upleftcorner","","",null,null],[17,"XK_lowleftcorner","","",null,null],[17,"XK_crossinglines","","",null,null],[17,"XK_horizlinescan1","","",null,null],[17,"XK_horizlinescan3","","",null,null],[17,"XK_horizlinescan5","","",null,null],[17,"XK_horizlinescan7","","",null,null],[17,"XK_horizlinescan9","","",null,null],[17,"XK_leftt","","",null,null],[17,"XK_rightt","","",null,null],[17,"XK_bott","","",null,null],[17,"XK_topt","","",null,null],[17,"XK_vertbar","","",null,null],[17,"XK_emspace","","",null,null],[17,"XK_enspace","","",null,null],[17,"XK_em3space","","",null,null],[17,"XK_em4space","","",null,null],[17,"XK_digitspace","","",null,null],[17,"XK_punctspace","","",null,null],[17,"XK_thinspace","","",null,null],[17,"XK_hairspace","","",null,null],[17,"XK_emdash","","",null,null],[17,"XK_endash","","",null,null],[17,"XK_signifblank","","",null,null],[17,"XK_ellipsis","","",null,null],[17,"XK_doubbaselinedot","","",null,null],[17,"XK_onethird","","",null,null],[17,"XK_twothirds","","",null,null],[17,"XK_onefifth","","",null,null],[17,"XK_twofifths","","",null,null],[17,"XK_threefifths","","",null,null],[17,"XK_fourfifths","","",null,null],[17,"XK_onesixth","","",null,null],[17,"XK_fivesixths","","",null,null],[17,"XK_careof","","",null,null],[17,"XK_figdash","","",null,null],[17,"XK_leftanglebracket","","",null,null],[17,"XK_decimalpoint","","",null,null],[17,"XK_rightanglebracket","","",null,null],[17,"XK_marker","","",null,null],[17,"XK_oneeighth","","",null,null],[17,"XK_threeeighths","","",null,null],[17,"XK_fiveeighths","","",null,null],[17,"XK_seveneighths","","",null,null],[17,"XK_trademark","","",null,null],[17,"XK_signaturemark","","",null,null],[17,"XK_trademarkincircle","","",null,null],[17,"XK_leftopentriangle","","",null,null],[17,"XK_rightopentriangle","","",null,null],[17,"XK_emopencircle","","",null,null],[17,"XK_emopenrectangle","","",null,null],[17,"XK_leftsinglequotemark","","",null,null],[17,"XK_rightsinglequotemark","","",null,null],[17,"XK_leftdoublequotemark","","",null,null],[17,"XK_rightdoublequotemark","","",null,null],[17,"XK_prescription","","",null,null],[17,"XK_minutes","","",null,null],[17,"XK_seconds","","",null,null],[17,"XK_latincross","","",null,null],[17,"XK_hexagram","","",null,null],[17,"XK_filledrectbullet","","",null,null],[17,"XK_filledlefttribullet","","",null,null],[17,"XK_filledrighttribullet","","",null,null],[17,"XK_emfilledcircle","","",null,null],[17,"XK_emfilledrect","","",null,null],[17,"XK_enopencircbullet","","",null,null],[17,"XK_enopensquarebullet","","",null,null],[17,"XK_openrectbullet","","",null,null],[17,"XK_opentribulletup","","",null,null],[17,"XK_opentribulletdown","","",null,null],[17,"XK_openstar","","",null,null],[17,"XK_enfilledcircbullet","","",null,null],[17,"XK_enfilledsqbullet","","",null,null],[17,"XK_filledtribulletup","","",null,null],[17,"XK_filledtribulletdown","","",null,null],[17,"XK_leftpointer","","",null,null],[17,"XK_rightpointer","","",null,null],[17,"XK_club","","",null,null],[17,"XK_diamond","","",null,null],[17,"XK_heart","","",null,null],[17,"XK_maltesecross","","",null,null],[17,"XK_dagger","","",null,null],[17,"XK_doubledagger","","",null,null],[17,"XK_checkmark","","",null,null],[17,"XK_ballotcross","","",null,null],[17,"XK_musicalsharp","","",null,null],[17,"XK_musicalflat","","",null,null],[17,"XK_malesymbol","","",null,null],[17,"XK_femalesymbol","","",null,null],[17,"XK_telephone","","",null,null],[17,"XK_telephonerecorder","","",null,null],[17,"XK_phonographcopyright","","",null,null],[17,"XK_caret","","",null,null],[17,"XK_singlelowquotemark","","",null,null],[17,"XK_doublelowquotemark","","",null,null],[17,"XK_cursor","","",null,null],[17,"XK_leftcaret","","",null,null],[17,"XK_rightcaret","","",null,null],[17,"XK_downcaret","","",null,null],[17,"XK_upcaret","","",null,null],[17,"XK_overbar","","",null,null],[17,"XK_downtack","","",null,null],[17,"XK_upshoe","","",null,null],[17,"XK_downstile","","",null,null],[17,"XK_underbar","","",null,null],[17,"XK_jot","","",null,null],[17,"XK_quad","","",null,null],[17,"XK_uptack","","",null,null],[17,"XK_circle","","",null,null],[17,"XK_upstile","","",null,null],[17,"XK_downshoe","","",null,null],[17,"XK_rightshoe","","",null,null],[17,"XK_leftshoe","","",null,null],[17,"XK_lefttack","","",null,null],[17,"XK_righttack","","",null,null],[17,"XK_hebrew_doublelowline","","",null,null],[17,"XK_hebrew_aleph","","",null,null],[17,"XK_hebrew_bet","","",null,null],[17,"XK_hebrew_beth","","",null,null],[17,"XK_hebrew_gimel","","",null,null],[17,"XK_hebrew_gimmel","","",null,null],[17,"XK_hebrew_dalet","","",null,null],[17,"XK_hebrew_daleth","","",null,null],[17,"XK_hebrew_he","","",null,null],[17,"XK_hebrew_waw","","",null,null],[17,"XK_hebrew_zain","","",null,null],[17,"XK_hebrew_zayin","","",null,null],[17,"XK_hebrew_chet","","",null,null],[17,"XK_hebrew_het","","",null,null],[17,"XK_hebrew_tet","","",null,null],[17,"XK_hebrew_teth","","",null,null],[17,"XK_hebrew_yod","","",null,null],[17,"XK_hebrew_finalkaph","","",null,null],[17,"XK_hebrew_kaph","","",null,null],[17,"XK_hebrew_lamed","","",null,null],[17,"XK_hebrew_finalmem","","",null,null],[17,"XK_hebrew_mem","","",null,null],[17,"XK_hebrew_finalnun","","",null,null],[17,"XK_hebrew_nun","","",null,null],[17,"XK_hebrew_samech","","",null,null],[17,"XK_hebrew_samekh","","",null,null],[17,"XK_hebrew_ayin","","",null,null],[17,"XK_hebrew_finalpe","","",null,null],[17,"XK_hebrew_pe","","",null,null],[17,"XK_hebrew_finalzade","","",null,null],[17,"XK_hebrew_finalzadi","","",null,null],[17,"XK_hebrew_zade","","",null,null],[17,"XK_hebrew_zadi","","",null,null],[17,"XK_hebrew_qoph","","",null,null],[17,"XK_hebrew_kuf","","",null,null],[17,"XK_hebrew_resh","","",null,null],[17,"XK_hebrew_shin","","",null,null],[17,"XK_hebrew_taw","","",null,null],[17,"XK_hebrew_taf","","",null,null],[17,"XK_Hebrew_switch","","",null,null],[17,"XF86XK_ModeLock","","",null,null],[17,"XF86XK_MonBrightnessUp","","",null,null],[17,"XF86XK_MonBrightnessDown","","",null,null],[17,"XF86XK_KbdLightOnOff","","",null,null],[17,"XF86XK_KbdBrightnessUp","","",null,null],[17,"XF86XK_KbdBrightnessDown","","",null,null],[17,"XF86XK_Standby","","",null,null],[17,"XF86XK_AudioLowerVolume","","",null,null],[17,"XF86XK_AudioMute","","",null,null],[17,"XF86XK_AudioRaiseVolume","","",null,null],[17,"XF86XK_AudioPlay","","",null,null],[17,"XF86XK_AudioStop","","",null,null],[17,"XF86XK_AudioPrev","","",null,null],[17,"XF86XK_AudioNext","","",null,null],[17,"XF86XK_HomePage","","",null,null],[17,"XF86XK_Mail","","",null,null],[17,"XF86XK_Start","","",null,null],[17,"XF86XK_Search","","",null,null],[17,"XF86XK_AudioRecord","","",null,null],[17,"XF86XK_Calculator","","",null,null],[17,"XF86XK_Memo","","",null,null],[17,"XF86XK_ToDoList","","",null,null],[17,"XF86XK_Calendar","","",null,null],[17,"XF86XK_PowerDown","","",null,null],[17,"XF86XK_ContrastAdjust","","",null,null],[17,"XF86XK_RockerUp","","",null,null],[17,"XF86XK_RockerDown","","",null,null],[17,"XF86XK_RockerEnter","","",null,null],[17,"XF86XK_Back","","",null,null],[17,"XF86XK_Forward","","",null,null],[17,"XF86XK_Stop","","",null,null],[17,"XF86XK_Refresh","","",null,null],[17,"XF86XK_PowerOff","","",null,null],[17,"XF86XK_WakeUp","","",null,null],[17,"XF86XK_Eject","","",null,null],[17,"XF86XK_ScreenSaver","","",null,null],[17,"XF86XK_WWW","","",null,null],[17,"XF86XK_Sleep","","",null,null],[17,"XF86XK_Favorites","","",null,null],[17,"XF86XK_AudioPause","","",null,null],[17,"XF86XK_AudioMedia","","",null,null],[17,"XF86XK_MyComputer","","",null,null],[17,"XF86XK_VendorHome","","",null,null],[17,"XF86XK_LightBulb","","",null,null],[17,"XF86XK_Shop","","",null,null],[17,"XF86XK_History","","",null,null],[17,"XF86XK_OpenURL","","",null,null],[17,"XF86XK_AddFavorite","","",null,null],[17,"XF86XK_HotLinks","","",null,null],[17,"XF86XK_BrightnessAdjust","","",null,null],[17,"XF86XK_Finance","","",null,null],[17,"XF86XK_Community","","",null,null],[17,"XF86XK_AudioRewind","","",null,null],[17,"XF86XK_BackForward","","",null,null],[17,"XF86XK_Launch0","","",null,null],[17,"XF86XK_Launch1","","",null,null],[17,"XF86XK_Launch2","","",null,null],[17,"XF86XK_Launch3","","",null,null],[17,"XF86XK_Launch4","","",null,null],[17,"XF86XK_Launch5","","",null,null],[17,"XF86XK_Launch6","","",null,null],[17,"XF86XK_Launch7","","",null,null],[17,"XF86XK_Launch8","","",null,null],[17,"XF86XK_Launch9","","",null,null],[17,"XF86XK_LaunchA","","",null,null],[17,"XF86XK_LaunchB","","",null,null],[17,"XF86XK_LaunchC","","",null,null],[17,"XF86XK_LaunchD","","",null,null],[17,"XF86XK_LaunchE","","",null,null],[17,"XF86XK_LaunchF","","",null,null],[17,"XF86XK_ApplicationLeft","","",null,null],[17,"XF86XK_ApplicationRight","","",null,null],[17,"XF86XK_Book","","",null,null],[17,"XF86XK_CD","","",null,null],[17,"XF86XK_Calculater","","",null,null],[17,"XF86XK_Clear","","",null,null],[17,"XF86XK_Close","","",null,null],[17,"XF86XK_Copy","","",null,null],[17,"XF86XK_Cut","","",null,null],[17,"XF86XK_Display","","",null,null],[17,"XF86XK_DOS","","",null,null],[17,"XF86XK_Documents","","",null,null],[17,"XF86XK_Excel","","",null,null],[17,"XF86XK_Explorer","","",null,null],[17,"XF86XK_Game","","",null,null],[17,"XF86XK_Go","","",null,null],[17,"XF86XK_iTouch","","",null,null],[17,"XF86XK_LogOff","","",null,null],[17,"XF86XK_Market","","",null,null],[17,"XF86XK_Meeting","","",null,null],[17,"XF86XK_MenuKB","","",null,null],[17,"XF86XK_MenuPB","","",null,null],[17,"XF86XK_MySites","","",null,null],[17,"XF86XK_New","","",null,null],[17,"XF86XK_News","","",null,null],[17,"XF86XK_OfficeHome","","",null,null],[17,"XF86XK_Open","","",null,null],[17,"XF86XK_Option","","",null,null],[17,"XF86XK_Paste","","",null,null],[17,"XF86XK_Phone","","",null,null],[17,"XF86XK_Q","","",null,null],[17,"XF86XK_Reply","","",null,null],[17,"XF86XK_Reload","","",null,null],[17,"XF86XK_RotateWindows","","",null,null],[17,"XF86XK_RotationPB","","",null,null],[17,"XF86XK_RotationKB","","",null,null],[17,"XF86XK_Save","","",null,null],[17,"XF86XK_ScrollUp","","",null,null],[17,"XF86XK_ScrollDown","","",null,null],[17,"XF86XK_ScrollClick","","",null,null],[17,"XF86XK_Send","","",null,null],[17,"XF86XK_Spell","","",null,null],[17,"XF86XK_SplitScreen","","",null,null],[17,"XF86XK_Support","","",null,null],[17,"XF86XK_TaskPane","","",null,null],[17,"XF86XK_Terminal","","",null,null],[17,"XF86XK_Tools","","",null,null],[17,"XF86XK_Travel","","",null,null],[17,"XF86XK_UserPB","","",null,null],[17,"XF86XK_User1KB","","",null,null],[17,"XF86XK_User2KB","","",null,null],[17,"XF86XK_Video","","",null,null],[17,"XF86XK_WheelButton","","",null,null],[17,"XF86XK_Word","","",null,null],[17,"XF86XK_Xfer","","",null,null],[17,"XF86XK_ZoomIn","","",null,null],[17,"XF86XK_ZoomOut","","",null,null],[17,"XF86XK_Away","","",null,null],[17,"XF86XK_Messenger","","",null,null],[17,"XF86XK_WebCam","","",null,null],[17,"XF86XK_MailForward","","",null,null],[17,"XF86XK_Pictures","","",null,null],[17,"XF86XK_Music","","",null,null],[17,"XF86XK_Battery","","",null,null],[17,"XF86XK_Bluetooth","","",null,null],[17,"XF86XK_WLAN","","",null,null],[17,"XF86XK_UWB","","",null,null],[17,"XF86XK_AudioForward","","",null,null],[17,"XF86XK_AudioRepeat","","",null,null],[17,"XF86XK_AudioRandomPlay","","",null,null],[17,"XF86XK_Subtitle","","",null,null],[17,"XF86XK_AudioCycleTrack","","",null,null],[17,"XF86XK_CycleAngle","","",null,null],[17,"XF86XK_FrameBack","","",null,null],[17,"XF86XK_FrameForward","","",null,null],[17,"XF86XK_Time","","",null,null],[17,"XF86XK_Select","","",null,null],[17,"XF86XK_View","","",null,null],[17,"XF86XK_TopMenu","","",null,null],[17,"XF86XK_Red","","",null,null],[17,"XF86XK_Green","","",null,null],[17,"XF86XK_Yellow","","",null,null],[17,"XF86XK_Blue","","",null,null],[17,"XF86XK_Suspend","","",null,null],[17,"XF86XK_Hibernate","","",null,null],[17,"XF86XK_TouchpadToggle","","",null,null],[17,"XF86XK_TouchpadOn","","",null,null],[17,"XF86XK_TouchpadOff","","",null,null],[17,"XF86XK_AudioMicMute","","",null,null],[17,"XF86XK_Switch_VT_1","","",null,null],[17,"XF86XK_Switch_VT_2","","",null,null],[17,"XF86XK_Switch_VT_3","","",null,null],[17,"XF86XK_Switch_VT_4","","",null,null],[17,"XF86XK_Switch_VT_5","","",null,null],[17,"XF86XK_Switch_VT_6","","",null,null],[17,"XF86XK_Switch_VT_7","","",null,null],[17,"XF86XK_Switch_VT_8","","",null,null],[17,"XF86XK_Switch_VT_9","","",null,null],[17,"XF86XK_Switch_VT_10","","",null,null],[17,"XF86XK_Switch_VT_11","","",null,null],[17,"XF86XK_Switch_VT_12","","",null,null],[17,"XF86XK_Ungrab","","",null,null],[17,"XF86XK_ClearGrab","","",null,null],[17,"XF86XK_Next_VMode","","",null,null],[17,"XF86XK_Prev_VMode","","",null,null],[17,"XF86XK_LogWindowTree","","",null,null],[17,"XF86XK_LogGrabInfo","","",null,null],[0,"xcursor","x11_dl","",null,null],[3,"Xcursor","x11_dl::xcursor","",null,null],[12,"XcursorAnimateCreate","","",3,null],[12,"XcursorAnimateDestroy","","",3,null],[12,"XcursorAnimateNext","","",3,null],[12,"XcursorCommentCreate","","",3,null],[12,"XcursorCommentDestroy","","",3,null],[12,"XcursorCommentsCreate","","",3,null],[12,"XcursorCommentsDestroy","","",3,null],[12,"XcursorCursorsCreate","","",3,null],[12,"XcursorCursorsDestroy","","",3,null],[12,"XcursorFileLoad","","",3,null],[12,"XcursorFileLoadAllImages","","",3,null],[12,"XcursorFileLoadImage","","",3,null],[12,"XcursorFileLoadImages","","",3,null],[12,"XcursorFilenameLoad","","",3,null],[12,"XcursorFilenameLoadAllImages","","",3,null],[12,"XcursorFilenameLoadCursor","","",3,null],[12,"XcursorFilenameLoadCursors","","",3,null],[12,"XcursorFilenameLoadImage","","",3,null],[12,"XcursorFilenameLoadImages","","",3,null],[12,"XcursorFilenameSave","","",3,null],[12,"XcursorFilenameSaveImages","","",3,null],[12,"XcursorFileSave","","",3,null],[12,"XcursorFileSaveImages","","",3,null],[12,"XcursorGetDefaultSize","","",3,null],[12,"XcursorGetTheme","","",3,null],[12,"XcursorGetThemeCore","","",3,null],[12,"XcursorImageCreate","","",3,null],[12,"XcursorImageDestroy","","",3,null],[12,"XcursorImageHash","","",3,null],[12,"XcursorImageLoadCursor","","",3,null],[12,"XcursorImagesCreate","","",3,null],[12,"XcursorImagesDestroy","","",3,null],[12,"XcursorImagesLoadCursor","","",3,null],[12,"XcursorImagesLoadCursors","","",3,null],[12,"XcursorImagesSetName","","",3,null],[12,"XcursorLibraryLoadCursor","","",3,null],[12,"XcursorLibraryLoadCursors","","",3,null],[12,"XcursorLibraryLoadImage","","",3,null],[12,"XcursorLibraryLoadImages","","",3,null],[12,"XcursorLibraryPath","","",3,null],[12,"XcursorLibraryShape","","",3,null],[12,"XcursorNoticeCreateBitmap","","",3,null],[12,"XcursorNoticePutBitmap","","",3,null],[12,"XcursorSetDefaultSize","","",3,null],[12,"XcursorSetTheme","","",3,null],[12,"XcursorSetThemeCore","","",3,null],[12,"XcursorShapeLoadCursor","","",3,null],[12,"XcursorShapeLoadCursors","","",3,null],[12,"XcursorShapeLoadImage","","",3,null],[12,"XcursorShapeLoadImages","","",3,null],[12,"XcursorSupportsAnim","","",3,null],[12,"XcursorSupportsARGB","","",3,null],[12,"XcursorTryShapeBitmapCursor","","",3,null],[12,"XcursorTryShapeCursor","","",3,null],[12,"XcursorXcFileLoad","","",3,null],[12,"XcursorXcFileLoadAllImages","","",3,null],[12,"XcursorXcFileLoadImage","","",3,null],[12,"XcursorXcFileLoadImages","","",3,null],[12,"XcursorXcFileSave","","",3,null],[3,"_XcursorAnimate","","",null,null],[12,"cursors","","",4,null],[12,"sequence","","",4,null],[3,"_XcursorChunkHeader","","",null,null],[12,"header","","",5,null],[12,"type_","","",5,null],[12,"subtype","","",5,null],[12,"version","","",5,null],[3,"_XcursorComment","","",null,null],[12,"version","","",6,null],[12,"comment_type","","",6,null],[12,"comment","","",6,null],[3,"_XcursorComments","","",null,null],[12,"ncomment","","",7,null],[12,"comments","","",7,null],[3,"_XcursorCursors","","",null,null],[12,"dpy","","",8,null],[12,"ref_","","",8,null],[12,"ncursor","","",8,null],[12,"cursors","","",8,null],[3,"_XcursorFile","","",null,null],[12,"closure","","",9,null],[12,"read","","",9,null],[12,"write","","",9,null],[12,"seek","","",9,null],[3,"_XcursorFileHeader","","",null,null],[12,"magic","","",10,null],[12,"header","","",10,null],[12,"version","","",10,null],[12,"ntoc","","",10,null],[12,"tocs","","",10,null],[3,"_XcursorFileToc","","",null,null],[12,"type_","","",11,null],[12,"subtype","","",11,null],[12,"position","","",11,null],[3,"_XcursorImage","","",null,null],[12,"version","","",12,null],[12,"size","","",12,null],[12,"width","","",12,null],[12,"height","","",12,null],[12,"xhot","","",12,null],[12,"yhot","","",12,null],[12,"delay","","",12,null],[12,"pixels","","",12,null],[3,"_XcursorImages","","",null,null],[12,"nimage","","",13,null],[12,"images","","",13,null],[12,"name","","",13,null],[6,"XcursorBool","","",null,null],[6,"XcursorDim","","",null,null],[6,"XcursorPixel","","",null,null],[6,"XcursorUInt","","",null,null],[6,"XcursorAnimate","","",null,null],[6,"XcursorChunkHeader","","",null,null],[6,"XcursorComment","","",null,null],[6,"XcursorComments","","",null,null],[6,"XcursorCursors","","",null,null],[6,"XcursorFile","","",null,null],[6,"XcursorFileHeader","","",null,null],[6,"XcursorFileToc","","",null,null],[6,"XcursorImage","","",null,null],[6,"XcursorImages","","",null,null],[11,"open","","",3,{"inputs":[],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"_xcursoranimate"}],"output":{"name":"_xcursoranimate"}}],[11,"clone","","",5,{"inputs":[{"name":"_xcursorchunkheader"}],"output":{"name":"_xcursorchunkheader"}}],[11,"clone","","",6,{"inputs":[{"name":"_xcursorcomment"}],"output":{"name":"_xcursorcomment"}}],[11,"clone","","",7,{"inputs":[{"name":"_xcursorcomments"}],"output":{"name":"_xcursorcomments"}}],[11,"clone","","",8,{"inputs":[{"name":"_xcursorcursors"}],"output":{"name":"_xcursorcursors"}}],[11,"clone","","",9,{"inputs":[{"name":"_xcursorfile"}],"output":{"name":"_xcursorfile"}}],[11,"clone","","",10,{"inputs":[{"name":"_xcursorfileheader"}],"output":{"name":"_xcursorfileheader"}}],[11,"clone","","",11,{"inputs":[{"name":"_xcursorfiletoc"}],"output":{"name":"_xcursorfiletoc"}}],[11,"clone","","",12,{"inputs":[{"name":"_xcursorimage"}],"output":{"name":"_xcursorimage"}}],[11,"clone","","",13,{"inputs":[{"name":"_xcursorimages"}],"output":{"name":"_xcursorimages"}}],[0,"xf86vmode","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xf86vmode","",null,null],[12,"XF86VidModeAddModeLine","","",14,null],[12,"XF86VidModeDeleteModeLine","","",14,null],[12,"XF86VidModeGetAllModeLines","","",14,null],[12,"XF86VidModeGetDotClocks","","",14,null],[12,"XF86VidModeGetGamma","","",14,null],[12,"XF86VidModeGetGammaRamp","","",14,null],[12,"XF86VidModeGetGammaRampSize","","",14,null],[12,"XF86VidModeGetModeLine","","",14,null],[12,"XF86VidModeGetMonitor","","",14,null],[12,"XF86VidModeGetPermissions","","",14,null],[12,"XF86VidModeGetViewPort","","",14,null],[12,"XF86VidModeLockModeSwitch","","",14,null],[12,"XF86VidModeModModeLine","","",14,null],[12,"XF86VidModeQueryExtension","","",14,null],[12,"XF86VidModeQueryVersion","","",14,null],[12,"XF86VidModeSetClientVersion","","",14,null],[12,"XF86VidModeSetGamma","","",14,null],[12,"XF86VidModeSetGammaRamp","","",14,null],[12,"XF86VidModeSetViewPort","","",14,null],[12,"XF86VidModeSwitchMode","","",14,null],[12,"XF86VidModeSwitchToMode","","",14,null],[12,"XF86VidModeValidateModeLine","","",14,null],[3,"XF86VidModeGamma","","",null,null],[12,"red","","",15,null],[12,"green","","",15,null],[12,"blue","","",15,null],[3,"XF86VidModeModeInfo","","",null,null],[12,"dotclock","","",16,null],[12,"hdisplay","","",16,null],[12,"hsyncstart","","",16,null],[12,"hsyncend","","",16,null],[12,"htotal","","",16,null],[12,"hskew","","",16,null],[12,"vdisplay","","",16,null],[12,"vsyncstart","","",16,null],[12,"vsyncend","","",16,null],[12,"vtotal","","",16,null],[12,"flags","","",16,null],[12,"privsize","","",16,null],[12,"private","","",16,null],[3,"XF86VidModeModeLine","","",null,null],[12,"hdisplay","","",17,null],[12,"hsyncstart","","",17,null],[12,"hsyncend","","",17,null],[12,"htotal","","",17,null],[12,"hskew","","",17,null],[12,"vdisplay","","",17,null],[12,"vsyncstart","","",17,null],[12,"vsyncend","","",17,null],[12,"vtotal","","",17,null],[12,"flags","","",17,null],[12,"privsize","","",17,null],[12,"private","","",17,null],[3,"XF86VidModeMonitor","","",null,null],[12,"vendor","","",18,null],[12,"model","","",18,null],[12,"EMPTY","","",18,null],[12,"nhsync","","",18,null],[12,"hsync","","",18,null],[12,"nvsync","","",18,null],[12,"vsync","","",18,null],[3,"XF86VidModeNotifyEvent","","",null,null],[12,"type_","","",19,null],[12,"serial","","",19,null],[12,"send_event","","",19,null],[12,"display","","",19,null],[12,"root","","",19,null],[12,"state","","",19,null],[12,"kind","","",19,null],[12,"forced","","",19,null],[12,"time","","",19,null],[3,"XF86VidModeSyncRange","","",null,null],[12,"hi","","",20,null],[12,"lo","","",20,null],[11,"open","","",14,{"inputs":[],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"xf86vidmodegamma"}],"output":{"name":"xf86vidmodegamma"}}],[11,"eq","","",16,{"inputs":[{"name":"xf86vidmodemodeinfo"},{"name":"xf86vidmodemodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"xf86vidmodemodeinfo"},{"name":"xf86vidmodemodeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"xf86vidmodemodeinfo"}],"output":{"name":"xf86vidmodemodeinfo"}}],[11,"clone","","",17,{"inputs":[{"name":"xf86vidmodemodeline"}],"output":{"name":"xf86vidmodemodeline"}}],[11,"clone","","",18,{"inputs":[{"name":"xf86vidmodemonitor"}],"output":{"name":"xf86vidmodemonitor"}}],[11,"clone","","",19,{"inputs":[{"name":"xf86vidmodenotifyevent"}],"output":{"name":"xf86vidmodenotifyevent"}}],[11,"clone","","",20,{"inputs":[{"name":"xf86vidmodesyncrange"}],"output":{"name":"xf86vidmodesyncrange"}}],[0,"xfixes","x11_dl","",null,null],[6,"PointerBarrier","x11_dl::xfixes","",null,null],[0,"xinerama","x11_dl","",null,null],[3,"Xlib","x11_dl::xinerama","",null,null],[12,"XineramaIsActive","","",21,null],[12,"XineramaQueryExtension","","",21,null],[12,"XineramaQueryScreens","","",21,null],[12,"XineramaQueryVersion","","",21,null],[12,"XPanoramiXAllocInfo","","",21,null],[12,"XPanoramiXGetScreenCount","","",21,null],[12,"XPanoramiXGetScreenSize","","",21,null],[12,"XPanoramiXGetState","","",21,null],[12,"XPanoramiXQueryExtension","","",21,null],[12,"XPanoramiXQueryVersion","","",21,null],[3,"XineramaScreenInfo","","",null,null],[12,"screen_number","","",22,null],[12,"x_org","","",22,null],[12,"y_org","","",22,null],[12,"width","","",22,null],[12,"height","","",22,null],[3,"XPanoramiXInfo","","",null,null],[12,"window","","",23,null],[12,"screen","","",23,null],[12,"State","","",23,null],[12,"width","","",23,null],[12,"height","","",23,null],[12,"ScreenCount","","",23,null],[12,"eventMask","","",23,null],[11,"open","","",21,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"xineramascreeninfo"},{"name":"xineramascreeninfo"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"xineramascreeninfo"},{"name":"xineramascreeninfo"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"xineramascreeninfo"}],"output":{"name":"xineramascreeninfo"}}],[11,"eq","","",23,{"inputs":[{"name":"xpanoramixinfo"},{"name":"xpanoramixinfo"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"xpanoramixinfo"},{"name":"xpanoramixinfo"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"xpanoramixinfo"}],"output":{"name":"xpanoramixinfo"}}],[0,"xinput","x11_dl","",null,null],[3,"XInput","x11_dl::xinput","",null,null],[12,"XAllowDeviceEvents","","",24,null],[12,"XChangeDeviceControl","","",24,null],[12,"XChangeDeviceDontPropagateList","","",24,null],[12,"XChangeDeviceKeyMapping","","",24,null],[12,"XChangeDeviceProperty","","",24,null],[12,"XChangeFeedbackControl","","",24,null],[12,"XChangeKeyboardDevice","","",24,null],[12,"XChangePointerDevice","","",24,null],[12,"XCloseDevice","","",24,null],[12,"XDeleteDeviceProperty","","",24,null],[12,"XDeviceBell","","",24,null],[12,"XFreeDeviceControl","","",24,null],[12,"XFreeDeviceList","","",24,null],[12,"XFreeDeviceMotionEvents","","",24,null],[12,"XFreeDeviceState","","",24,null],[12,"XFreeFeedbackList","","",24,null],[12,"XGetDeviceButtonMapping","","",24,null],[12,"XGetDeviceControl","","",24,null],[12,"XGetDeviceDontPropagateList","","",24,null],[12,"XGetDeviceFocus","","",24,null],[12,"XGetDeviceKeyMapping","","",24,null],[12,"XGetDeviceModifierMapping","","",24,null],[12,"XGetDeviceMotionEvents","","",24,null],[12,"XGetDeviceProperty","","",24,null],[12,"XGetExtensionVersion","","",24,null],[12,"XGetFeedbackControl","","",24,null],[12,"XGetSelectedExtensionEvents","","",24,null],[12,"XGrabDevice","","",24,null],[12,"XGrabDeviceButton","","",24,null],[12,"XGrabDeviceKey","","",24,null],[12,"XListDeviceProperties","","",24,null],[12,"XListInputDevices","","",24,null],[12,"XOpenDevice","","",24,null],[12,"XQueryDeviceState","","",24,null],[12,"XSelectExtensionEvent","","",24,null],[12,"XSendExtensionEvent","","",24,null],[12,"XSetDeviceButtonMapping","","",24,null],[12,"XSetDeviceFocus","","",24,null],[12,"XSetDeviceMode","","",24,null],[12,"XSetDeviceModifierMapping","","",24,null],[12,"XSetDeviceValuators","","",24,null],[12,"XUngrabDevice","","",24,null],[12,"XUngrabDeviceButton","","",24,null],[12,"XUngrabDeviceKey","","",24,null],[3,"XDevice","","",null,null],[12,"device_id","","",25,null],[12,"num_classes","","",25,null],[12,"classes","","",25,null],[3,"XDeviceControl","","",null,null],[12,"control","","",26,null],[12,"length","","",26,null],[3,"XDeviceInfo","","",null,null],[12,"id","","",27,null],[12,"type_","","",27,null],[12,"name","","",27,null],[12,"num_classes","","",27,null],[12,"use_","","",27,null],[12,"inputclassinfo","","",27,null],[3,"XDeviceState","","",null,null],[12,"device_id","","",28,null],[12,"num_classes","","",28,null],[12,"data","","",28,null],[3,"XDeviceTimeCoord","","",null,null],[12,"time","","",29,null],[12,"data","","",29,null],[3,"XExtensionVersion","","",null,null],[12,"present","","",30,null],[12,"major_version","","",30,null],[12,"minor_version","","",30,null],[3,"XFeedbackControl","","",null,null],[12,"class","","",31,null],[12,"length","","",31,null],[12,"id","","",31,null],[3,"XFeedbackState","","",null,null],[12,"class","","",32,null],[12,"length","","",32,null],[12,"id","","",32,null],[3,"XInputClass","","",null,null],[12,"class","","",33,null],[12,"length","","",33,null],[3,"XInputClassInfo","","",null,null],[12,"input_class","","",34,null],[12,"event_type_base","","",34,null],[4,"_XAnyClassinfo","","",null,null],[6,"XAnyClassPtr","","",null,null],[11,"open","","",24,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"xdevice"},{"name":"xdevice"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"xdevice"},{"name":"xdevice"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"xdevice"}],"output":{"name":"xdevice"}}],[11,"eq","","",26,{"inputs":[{"name":"xdevicecontrol"},{"name":"xdevicecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"xdevicecontrol"},{"name":"xdevicecontrol"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"xdevicecontrol"}],"output":{"name":"xdevicecontrol"}}],[11,"eq","","",27,{"inputs":[{"name":"xdeviceinfo"},{"name":"xdeviceinfo"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"xdeviceinfo"},{"name":"xdeviceinfo"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"xdeviceinfo"}],"output":{"name":"xdeviceinfo"}}],[11,"eq","","",28,{"inputs":[{"name":"xdevicestate"},{"name":"xdevicestate"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"xdevicestate"},{"name":"xdevicestate"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"xdevicestate"}],"output":{"name":"xdevicestate"}}],[11,"eq","","",29,{"inputs":[{"name":"xdevicetimecoord"},{"name":"xdevicetimecoord"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"xdevicetimecoord"},{"name":"xdevicetimecoord"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"xdevicetimecoord"}],"output":{"name":"xdevicetimecoord"}}],[11,"eq","","",30,{"inputs":[{"name":"xextensionversion"},{"name":"xextensionversion"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"xextensionversion"},{"name":"xextensionversion"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"xextensionversion"}],"output":{"name":"xextensionversion"}}],[11,"eq","","",31,{"inputs":[{"name":"xfeedbackcontrol"},{"name":"xfeedbackcontrol"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"xfeedbackcontrol"},{"name":"xfeedbackcontrol"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"xfeedbackcontrol"}],"output":{"name":"xfeedbackcontrol"}}],[11,"eq","","",32,{"inputs":[{"name":"xfeedbackstate"},{"name":"xfeedbackstate"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"xfeedbackstate"},{"name":"xfeedbackstate"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"xfeedbackstate"}],"output":{"name":"xfeedbackstate"}}],[11,"eq","","",33,{"inputs":[{"name":"xinputclass"},{"name":"xinputclass"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"xinputclass"},{"name":"xinputclass"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"xinputclass"}],"output":{"name":"xinputclass"}}],[11,"eq","","",34,{"inputs":[{"name":"xinputclassinfo"},{"name":"xinputclassinfo"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"xinputclassinfo"},{"name":"xinputclassinfo"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"xinputclassinfo"}],"output":{"name":"xinputclassinfo"}}],[0,"xinput2","x11_dl","",null,null],[3,"XInput2","x11_dl::xinput2","",null,null],[12,"XIAllowEvents","","",35,null],[12,"XIAllowTouchEvents","","",35,null],[12,"XIBarrierReleasePointer","","",35,null],[12,"XIBarrierReleasePointers","","",35,null],[12,"XIChangeHierarchy","","",35,null],[12,"XIChangeProperty","","",35,null],[12,"XIDefineCursor","","",35,null],[12,"XIDeleteProperty","","",35,null],[12,"XIFreeDeviceInfo","","",35,null],[12,"XIGetClientPointer","","",35,null],[12,"XIGetFocus","","",35,null],[12,"XIGetProperty","","",35,null],[12,"XIGetSelectedEvents","","",35,null],[12,"XIGrabButton","","",35,null],[12,"XIGrabDevice","","",35,null],[12,"XIGrabEnter","","",35,null],[12,"XIGrabFocusIn","","",35,null],[12,"XIGrabKeycode","","",35,null],[12,"XIGrabTouchBegin","","",35,null],[12,"XIListProperties","","",35,null],[12,"XIQueryDevice","","",35,null],[12,"XIQueryPointer","","",35,null],[12,"XIQueryVersion","","",35,null],[12,"XISelectEvents","","",35,null],[12,"XISetClientPointer","","",35,null],[12,"XISetFocus","","",35,null],[12,"XIUndefineCursor","","",35,null],[12,"XIUngrabButton","","",35,null],[12,"XIUngrabDevice","","",35,null],[12,"XIUngrabEnter","","",35,null],[12,"XIUngrabFocusIn","","",35,null],[12,"XIUngrabKeycode","","",35,null],[12,"XIUngrabTouchBegin","","",35,null],[12,"XIWarpPointer","","",35,null],[3,"Struct_Unnamed1","","",null,null],[12,"_type","","",36,null],[12,"name","","",36,null],[12,"send_core","","",36,null],[12,"enable","","",36,null],[3,"Struct_Unnamed2","","",null,null],[12,"_type","","",37,null],[12,"deviceid","","",37,null],[12,"return_mode","","",37,null],[12,"return_pointer","","",37,null],[12,"return_keyboard","","",37,null],[3,"Struct_Unnamed3","","",null,null],[12,"_type","","",38,null],[12,"deviceid","","",38,null],[12,"new_master","","",38,null],[3,"Struct_Unnamed4","","",null,null],[12,"_type","","",39,null],[12,"deviceid","","",39,null],[3,"Union_Unnamed5","","",null,null],[12,"_bindgen_data_","","",40,null],[3,"Struct_Unnamed6","","",null,null],[12,"base","","",41,null],[12,"latched","","",41,null],[12,"locked","","",41,null],[12,"effective","","",41,null],[3,"Struct_Unnamed7","","",null,null],[12,"mask_len","","",42,null],[12,"mask","","",42,null],[3,"Struct_Unnamed8","","",null,null],[12,"mask_len","","",43,null],[12,"mask","","",43,null],[12,"values","","",43,null],[3,"Struct_Unnamed9","","",null,null],[12,"deviceid","","",44,null],[12,"mask_len","","",44,null],[12,"mask","","",44,null],[3,"Struct_Unnamed10","","",null,null],[12,"_type","","",45,null],[12,"sourceid","","",45,null],[3,"Struct_Unnamed11","","",null,null],[12,"_type","","",46,null],[12,"sourceid","","",46,null],[12,"num_buttons","","",46,null],[12,"labels","","",46,null],[12,"state","","",46,null],[3,"Struct_Unnamed12","","",null,null],[12,"_type","","",47,null],[12,"sourceid","","",47,null],[12,"num_keycodes","","",47,null],[12,"keycodes","","",47,null],[3,"Struct_Unnamed13","","",null,null],[12,"_type","","",48,null],[12,"sourceid","","",48,null],[12,"number","","",48,null],[12,"label","","",48,null],[12,"min","","",48,null],[12,"max","","",48,null],[12,"value","","",48,null],[12,"resolution","","",48,null],[12,"mode","","",48,null],[3,"Struct_Unnamed14","","",null,null],[12,"_type","","",49,null],[12,"sourceid","","",49,null],[12,"number","","",49,null],[12,"scroll_type","","",49,null],[12,"increment","","",49,null],[12,"flags","","",49,null],[3,"Struct_Unnamed15","","",null,null],[12,"_type","","",50,null],[12,"sourceid","","",50,null],[12,"mode","","",50,null],[12,"num_touches","","",50,null],[3,"Struct_Unnamed16","","",null,null],[12,"deviceid","","",51,null],[12,"name","","",51,null],[12,"_use","","",51,null],[12,"attachment","","",51,null],[12,"enabled","","",51,null],[12,"num_classes","","",51,null],[12,"classes","","",51,null],[3,"Struct_Unnamed17","","",null,null],[12,"modifiers","","",52,null],[12,"status","","",52,null],[3,"Struct_Unnamed18","","",null,null],[12,"deviceid","","",53,null],[12,"barrier","","",53,null],[12,"eventid","","",53,null],[3,"Struct_Unnamed19","","",null,null],[12,"_type","","",54,null],[12,"serial","","",54,null],[12,"send_event","","",54,null],[12,"display","","",54,null],[12,"extension","","",54,null],[12,"evtype","","",54,null],[12,"time","","",54,null],[3,"Struct_Unnamed20","","",null,null],[12,"deviceid","","",55,null],[12,"attachment","","",55,null],[12,"_use","","",55,null],[12,"enabled","","",55,null],[12,"flags","","",55,null],[3,"Struct_Unnamed21","","",null,null],[12,"_type","","",56,null],[12,"serial","","",56,null],[12,"send_event","","",56,null],[12,"display","","",56,null],[12,"extension","","",56,null],[12,"evtype","","",56,null],[12,"time","","",56,null],[12,"flags","","",56,null],[12,"num_info","","",56,null],[12,"info","","",56,null],[3,"Struct_Unnamed22","","",null,null],[12,"_type","","",57,null],[12,"serial","","",57,null],[12,"send_event","","",57,null],[12,"display","","",57,null],[12,"extension","","",57,null],[12,"evtype","","",57,null],[12,"time","","",57,null],[12,"deviceid","","",57,null],[12,"sourceid","","",57,null],[12,"reason","","",57,null],[12,"num_classes","","",57,null],[12,"classes","","",57,null],[3,"Struct_Unnamed23","","",null,null],[12,"_type","","",58,null],[12,"serial","","",58,null],[12,"send_event","","",58,null],[12,"display","","",58,null],[12,"extension","","",58,null],[12,"evtype","","",58,null],[12,"time","","",58,null],[12,"deviceid","","",58,null],[12,"sourceid","","",58,null],[12,"detail","","",58,null],[12,"root","","",58,null],[12,"event","","",58,null],[12,"child","","",58,null],[12,"root_x","","",58,null],[12,"root_y","","",58,null],[12,"event_x","","",58,null],[12,"event_y","","",58,null],[12,"flags","","",58,null],[12,"buttons","","",58,null],[12,"valuators","","",58,null],[12,"mods","","",58,null],[12,"group","","",58,null],[3,"Struct_Unnamed24","","",null,null],[12,"_type","","",59,null],[12,"serial","","",59,null],[12,"send_event","","",59,null],[12,"display","","",59,null],[12,"extension","","",59,null],[12,"evtype","","",59,null],[12,"time","","",59,null],[12,"deviceid","","",59,null],[12,"sourceid","","",59,null],[12,"detail","","",59,null],[12,"flags","","",59,null],[12,"valuators","","",59,null],[12,"raw_values","","",59,null],[3,"Struct_Unnamed25","","",null,null],[12,"_type","","",60,null],[12,"serial","","",60,null],[12,"send_event","","",60,null],[12,"display","","",60,null],[12,"extension","","",60,null],[12,"evtype","","",60,null],[12,"time","","",60,null],[12,"deviceid","","",60,null],[12,"sourceid","","",60,null],[12,"detail","","",60,null],[12,"root","","",60,null],[12,"event","","",60,null],[12,"child","","",60,null],[12,"root_x","","",60,null],[12,"root_y","","",60,null],[12,"event_x","","",60,null],[12,"event_y","","",60,null],[12,"mode","","",60,null],[12,"focus","","",60,null],[12,"same_screen","","",60,null],[12,"buttons","","",60,null],[12,"mods","","",60,null],[12,"group","","",60,null],[3,"Struct_Unnamed26","","",null,null],[12,"_type","","",61,null],[12,"serial","","",61,null],[12,"send_event","","",61,null],[12,"display","","",61,null],[12,"extension","","",61,null],[12,"evtype","","",61,null],[12,"time","","",61,null],[12,"deviceid","","",61,null],[12,"property","","",61,null],[12,"what","","",61,null],[3,"Struct_Unnamed27","","",null,null],[12,"_type","","",62,null],[12,"serial","","",62,null],[12,"send_event","","",62,null],[12,"display","","",62,null],[12,"extension","","",62,null],[12,"evtype","","",62,null],[12,"time","","",62,null],[12,"deviceid","","",62,null],[12,"sourceid","","",62,null],[12,"touchid","","",62,null],[12,"root","","",62,null],[12,"event","","",62,null],[12,"child","","",62,null],[12,"flags","","",62,null],[3,"Struct_Unnamed28","","",null,null],[12,"_type","","",63,null],[12,"serial","","",63,null],[12,"send_event","","",63,null],[12,"display","","",63,null],[12,"extension","","",63,null],[12,"evtype","","",63,null],[12,"time","","",63,null],[12,"deviceid","","",63,null],[12,"sourceid","","",63,null],[12,"event","","",63,null],[12,"root","","",63,null],[12,"root_x","","",63,null],[12,"root_y","","",63,null],[12,"dx","","",63,null],[12,"dy","","",63,null],[12,"dtime","","",63,null],[12,"flags","","",63,null],[12,"barrier","","",63,null],[12,"eventid","","",63,null],[5,"XISetMask","","",null,null],[5,"XIClearMask","","",null,null],[5,"XIMaskIsSet","","",null,null],[6,"XIAddMasterInfo","","",null,null],[6,"XIRemoveMasterInfo","","",null,null],[6,"XIAttachSlaveInfo","","",null,null],[6,"XIDetachSlaveInfo","","",null,null],[6,"XIAnyHierarchyChangeInfo","","",null,null],[6,"XIModifierState","","",null,null],[6,"XIGroupState","","",null,null],[6,"XIButtonState","","",null,null],[6,"XIValuatorState","","",null,null],[6,"XIEventMask","","",null,null],[6,"XIAnyClassInfo","","",null,null],[6,"XIButtonClassInfo","","",null,null],[6,"XIKeyClassInfo","","",null,null],[6,"XIValuatorClassInfo","","",null,null],[6,"XIScrollClassInfo","","",null,null],[6,"XITouchClassInfo","","",null,null],[6,"XIDeviceInfo","","",null,null],[6,"XIGrabModifiers","","",null,null],[6,"BarrierEventID","","",null,null],[6,"XIBarrierReleasePointerInfo","","",null,null],[6,"XIEvent","","",null,null],[6,"XIHierarchyInfo","","",null,null],[6,"XIHierarchyEvent","","",null,null],[6,"XIDeviceChangedEvent","","",null,null],[6,"XIDeviceEvent","","",null,null],[6,"XIRawEvent","","",null,null],[6,"XIEnterEvent","","",null,null],[6,"XILeaveEvent","","",null,null],[6,"XIFocusInEvent","","",null,null],[6,"XIFocusOutEvent","","",null,null],[6,"XIPropertyEvent","","",null,null],[6,"XITouchOwnershipEvent","","",null,null],[6,"XIBarrierEvent","","",null,null],[17,"XInput_2_0","","",null,null],[17,"XI_2_Major","","",null,null],[17,"XI_2_Minor","","",null,null],[17,"XIPropertyDeleted","","",null,null],[17,"XIPropertyCreated","","",null,null],[17,"XIPropertyModified","","",null,null],[17,"XIPropModeReplace","","",null,null],[17,"XIPropModePrepend","","",null,null],[17,"XIPropModeAppend","","",null,null],[17,"XINotifyNormal","","",null,null],[17,"XINotifyGrab","","",null,null],[17,"XINotifyUngrab","","",null,null],[17,"XINotifyWhileGrabbed","","",null,null],[17,"XINotifyPassiveGrab","","",null,null],[17,"XINotifyPassiveUngrab","","",null,null],[17,"XINotifyAncestor","","",null,null],[17,"XINotifyVirtual","","",null,null],[17,"XINotifyInferior","","",null,null],[17,"XINotifyNonlinear","","",null,null],[17,"XINotifyNonlinearVirtual","","",null,null],[17,"XINotifyPointer","","",null,null],[17,"XINotifyPointerRoot","","",null,null],[17,"XINotifyDetailNone","","",null,null],[17,"XIGrabModeSync","","",null,null],[17,"XIGrabModeAsync","","",null,null],[17,"XIGrabModeTouch","","",null,null],[17,"XIGrabSuccess","","",null,null],[17,"XIAlreadyGrabbed","","",null,null],[17,"XIGrabInvalidTime","","",null,null],[17,"XIGrabNotViewable","","",null,null],[17,"XIGrabFrozen","","",null,null],[17,"XIGrabtypeButton","","",null,null],[17,"XIGrabtypeKeycode","","",null,null],[17,"XIGrabtypeEnter","","",null,null],[17,"XIGrabtypeFocusIn","","",null,null],[17,"XIGrabtypeTouchBegin","","",null,null],[17,"XIAnyButton","","",null,null],[17,"XIAnyKeycode","","",null,null],[17,"XIAsyncDevice","","",null,null],[17,"XISyncDevice","","",null,null],[17,"XIReplayDevice","","",null,null],[17,"XIAsyncPairedDevice","","",null,null],[17,"XIAsyncPair","","",null,null],[17,"XISyncPair","","",null,null],[17,"XIAcceptTouch","","",null,null],[17,"XIRejectTouch","","",null,null],[17,"XISlaveSwitch","","",null,null],[17,"XIDeviceChange","","",null,null],[17,"XIMasterAdded","","",null,null],[17,"XIMasterRemoved","","",null,null],[17,"XISlaveAdded","","",null,null],[17,"XISlaveRemoved","","",null,null],[17,"XISlaveAttached","","",null,null],[17,"XISlaveDetached","","",null,null],[17,"XIDeviceEnabled","","",null,null],[17,"XIDeviceDisabled","","",null,null],[17,"XIAddMaster","","",null,null],[17,"XIRemoveMaster","","",null,null],[17,"XIAttachSlave","","",null,null],[17,"XIDetachSlave","","",null,null],[17,"XIAttachToMaster","","",null,null],[17,"XIFloating","","",null,null],[17,"XIModeRelative","","",null,null],[17,"XIModeAbsolute","","",null,null],[17,"XIMasterPointer","","",null,null],[17,"XIMasterKeyboard","","",null,null],[17,"XISlavePointer","","",null,null],[17,"XISlaveKeyboard","","",null,null],[17,"XIFloatingSlave","","",null,null],[17,"XIKeyClass","","",null,null],[17,"XIButtonClass","","",null,null],[17,"XIValuatorClass","","",null,null],[17,"XIScrollClass","","",null,null],[17,"XITouchClass","","",null,null],[17,"XIScrollTypeVertical","","",null,null],[17,"XIScrollTypeHorizontal","","",null,null],[17,"XIScrollFlagNoEmulation","","",null,null],[17,"XIScrollFlagPreferred","","",null,null],[17,"XIKeyRepeat","","",null,null],[17,"XIPointerEmulated","","",null,null],[17,"XITouchPendingEnd","","",null,null],[17,"XITouchEmulatingPointer","","",null,null],[17,"XIBarrierPointerReleased","","",null,null],[17,"XIBarrierDeviceIsGrabbed","","",null,null],[17,"XIDirectTouch","","",null,null],[17,"XIDependentTouch","","",null,null],[17,"XIAllDevices","","",null,null],[17,"XIAllMasterDevices","","",null,null],[17,"XI_DeviceChanged","","",null,null],[17,"XI_KeyPress","","",null,null],[17,"XI_KeyRelease","","",null,null],[17,"XI_ButtonPress","","",null,null],[17,"XI_ButtonRelease","","",null,null],[17,"XI_Motion","","",null,null],[17,"XI_Enter","","",null,null],[17,"XI_Leave","","",null,null],[17,"XI_FocusIn","","",null,null],[17,"XI_FocusOut","","",null,null],[17,"XI_HierarchyChanged","","",null,null],[17,"XI_PropertyEvent","","",null,null],[17,"XI_RawKeyPress","","",null,null],[17,"XI_RawKeyRelease","","",null,null],[17,"XI_RawButtonPress","","",null,null],[17,"XI_RawButtonRelease","","",null,null],[17,"XI_RawMotion","","",null,null],[17,"XI_TouchBegin","","",null,null],[17,"XI_TouchUpdate","","",null,null],[17,"XI_TouchEnd","","",null,null],[17,"XI_TouchOwnership","","",null,null],[17,"XI_RawTouchBegin","","",null,null],[17,"XI_RawTouchUpdate","","",null,null],[17,"XI_RawTouchEnd","","",null,null],[17,"XI_BarrierHit","","",null,null],[17,"XI_BarrierLeave","","",null,null],[17,"XI_LASTEVENT","","",null,null],[17,"XI_DeviceChangedMask","","",null,null],[17,"XI_KeyPressMask","","",null,null],[17,"XI_KeyReleaseMask","","",null,null],[17,"XI_ButtonPressMask","","",null,null],[17,"XI_ButtonReleaseMask","","",null,null],[17,"XI_MotionMask","","",null,null],[17,"XI_EnterMask","","",null,null],[17,"XI_LeaveMask","","",null,null],[17,"XI_FocusInMask","","",null,null],[17,"XI_FocusOutMask","","",null,null],[17,"XI_HierarchyChangedMask","","",null,null],[17,"XI_PropertyEventMask","","",null,null],[17,"XI_RawKeyPressMask","","",null,null],[17,"XI_RawKeyReleaseMask","","",null,null],[17,"XI_RawButtonPressMask","","",null,null],[17,"XI_RawButtonReleaseMask","","",null,null],[17,"XI_RawMotionMask","","",null,null],[17,"XI_TouchBeginMask","","",null,null],[17,"XI_TouchEndMask","","",null,null],[17,"XI_TouchOwnershipChangedMask","","",null,null],[17,"XI_TouchUpdateMask","","",null,null],[17,"XI_RawTouchBeginMask","","",null,null],[17,"XI_RawTouchEndMask","","",null,null],[17,"XI_RawTouchUpdateMask","","",null,null],[17,"XI_BarrierHitMask","","",null,null],[17,"XI_BarrierLeaveMask","","",null,null],[11,"open","","",35,{"inputs":[],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"struct_unnamed1"}],"output":{"name":"self"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",37,{"inputs":[{"name":"struct_unnamed2"}],"output":{"name":"self"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",38,{"inputs":[{"name":"struct_unnamed3"}],"output":{"name":"self"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",39,{"inputs":[{"name":"struct_unnamed4"}],"output":{"name":"self"}}],[11,"default","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"_type","","",40,null],[11,"add","","",40,null],[11,"remove","","",40,null],[11,"attach","","",40,null],[11,"detach","","",40,null],[11,"clone","","",40,{"inputs":[{"name":"union_unnamed5"}],"output":{"name":"self"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",41,{"inputs":[{"name":"struct_unnamed6"}],"output":{"name":"self"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",42,{"inputs":[{"name":"struct_unnamed7"}],"output":{"name":"self"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",43,{"inputs":[{"name":"struct_unnamed8"}],"output":{"name":"self"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",44,{"inputs":[{"name":"struct_unnamed9"}],"output":{"name":"self"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",45,{"inputs":[{"name":"struct_unnamed10"}],"output":{"name":"self"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",46,{"inputs":[{"name":"struct_unnamed11"}],"output":{"name":"self"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",47,{"inputs":[{"name":"struct_unnamed12"}],"output":{"name":"self"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",48,{"inputs":[{"name":"struct_unnamed13"}],"output":{"name":"self"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",49,{"inputs":[{"name":"struct_unnamed14"}],"output":{"name":"self"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",50,{"inputs":[{"name":"struct_unnamed15"}],"output":{"name":"self"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",51,{"inputs":[{"name":"struct_unnamed16"}],"output":{"name":"self"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",52,{"inputs":[{"name":"struct_unnamed17"}],"output":{"name":"self"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",53,{"inputs":[{"name":"struct_unnamed18"}],"output":{"name":"self"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",54,{"inputs":[{"name":"struct_unnamed19"}],"output":{"name":"self"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",55,{"inputs":[{"name":"struct_unnamed20"}],"output":{"name":"self"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",56,{"inputs":[{"name":"struct_unnamed21"}],"output":{"name":"self"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",57,{"inputs":[{"name":"struct_unnamed22"}],"output":{"name":"self"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",58,{"inputs":[{"name":"struct_unnamed23"}],"output":{"name":"self"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",59,{"inputs":[{"name":"struct_unnamed24"}],"output":{"name":"self"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",60,{"inputs":[{"name":"struct_unnamed25"}],"output":{"name":"self"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",61,{"inputs":[{"name":"struct_unnamed26"}],"output":{"name":"self"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",62,{"inputs":[{"name":"struct_unnamed27"}],"output":{"name":"self"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"struct_unnamed28"}],"output":{"name":"self"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"self"}}],[0,"xlib","x11_dl","",null,null],[3,"Xlib","x11_dl::xlib","",null,null],[12,"XActivateScreenSaver","","",64,null],[12,"XAddConnectionWatch","","",64,null],[12,"XAddExtension","","",64,null],[12,"XAddHost","","",64,null],[12,"XAddHosts","","",64,null],[12,"XAddPixel","","",64,null],[12,"XAddToExtensionList","","",64,null],[12,"XAddToSaveSet","","",64,null],[12,"XAllocClassHint","","",64,null],[12,"XAllocColor","","",64,null],[12,"XAllocColorCells","","",64,null],[12,"XAllocColorPlanes","","",64,null],[12,"XAllocIconSize","","",64,null],[12,"XAllocNamedColor","","",64,null],[12,"XAllocSizeHints","","",64,null],[12,"XAllocStandardColormap","","",64,null],[12,"XAllocWMHints","","",64,null],[12,"XAllowEvents","","",64,null],[12,"XAllPlanes","","",64,null],[12,"XAutoRepeatOff","","",64,null],[12,"XAutoRepeatOn","","",64,null],[12,"XBaseFontNameListOfFontSet","","",64,null],[12,"XBell","","",64,null],[12,"XBitmapBitOrder","","",64,null],[12,"XBitmapPad","","",64,null],[12,"XBitmapUnit","","",64,null],[12,"XBlackPixel","","",64,null],[12,"XBlackPixelOfScreen","","",64,null],[12,"XCellsOfScreen","","",64,null],[12,"XChangeActivePointerGrab","","",64,null],[12,"XChangeGC","","",64,null],[12,"XChangeKeyboardControl","","",64,null],[12,"XChangeKeyboardMapping","","",64,null],[12,"XChangePointerControl","","",64,null],[12,"XChangeProperty","","",64,null],[12,"XChangeSaveSet","","",64,null],[12,"XChangeWindowAttributes","","",64,null],[12,"XCheckIfEvent","","",64,null],[12,"XCheckMaskEvent","","",64,null],[12,"XCheckTypedEvent","","",64,null],[12,"XCheckTypedWindowEvent","","",64,null],[12,"XCheckWindowEvent","","",64,null],[12,"XCirculateSubwindows","","",64,null],[12,"XCirculateSubwindowsDown","","",64,null],[12,"XCirculateSubwindowsUp","","",64,null],[12,"XClearArea","","",64,null],[12,"XClearWindow","","",64,null],[12,"XClipBox","","",64,null],[12,"XCloseDisplay","","",64,null],[12,"XCloseIM","","",64,null],[12,"XCloseOM","","",64,null],[12,"XcmsAddColorSpace","","",64,null],[12,"XcmsAddFunctionSet","","",64,null],[12,"XcmsAllocColor","","",64,null],[12,"XcmsAllocNamedColor","","",64,null],[12,"XcmsCCCOfColormap","","",64,null],[12,"XcmsCIELabClipab","","",64,null],[12,"XcmsCIELabClipL","","",64,null],[12,"XcmsCIELabClipLab","","",64,null],[12,"XcmsCIELabQueryMaxC","","",64,null],[12,"XcmsCIELabQueryMaxL","","",64,null],[12,"XcmsCIELabQueryMaxLC","","",64,null],[12,"XcmsCIELabQueryMinL","","",64,null],[12,"XcmsCIELabToCIEXYZ","","",64,null],[12,"XcmsCIELabWhiteShiftColors","","",64,null],[12,"XcmsCIELuvClipL","","",64,null],[12,"XcmsCIELuvClipLuv","","",64,null],[12,"XcmsCIELuvClipuv","","",64,null],[12,"XcmsCIELuvQueryMaxC","","",64,null],[12,"XcmsCIELuvQueryMaxL","","",64,null],[12,"XcmsCIELuvQueryMaxLC","","",64,null],[12,"XcmsCIELuvQueryMinL","","",64,null],[12,"XcmsCIELuvToCIEuvY","","",64,null],[12,"XcmsCIELuvWhiteShiftColors","","",64,null],[12,"XcmsCIEuvYToCIELuv","","",64,null],[12,"XcmsCIEuvYToCIEXYZ","","",64,null],[12,"XcmsCIEuvYToTekHVC","","",64,null],[12,"XcmsCIExyYToCIEXYZ","","",64,null],[12,"XcmsCIEXYZToCIELab","","",64,null],[12,"XcmsCIEXYZToCIEuvY","","",64,null],[12,"XcmsCIEXYZToCIExyY","","",64,null],[12,"XcmsCIEXYZToRGBi","","",64,null],[12,"XcmsClientWhitePointOfCCC","","",64,null],[12,"XcmsConvertColors","","",64,null],[12,"XcmsCreateCCC","","",64,null],[12,"XcmsDefaultCCC","","",64,null],[12,"XcmsDisplayOfCCC","","",64,null],[12,"XcmsFormatOfPrefix","","",64,null],[12,"XcmsFreeCCC","","",64,null],[12,"XcmsLookupColor","","",64,null],[12,"XcmsPrefixOfFormat","","",64,null],[12,"XcmsQueryBlack","","",64,null],[12,"XcmsQueryBlue","","",64,null],[12,"XcmsQueryColor","","",64,null],[12,"XcmsQueryColors","","",64,null],[12,"XcmsQueryGreen","","",64,null],[12,"XcmsQueryRed","","",64,null],[12,"XcmsQueryWhite","","",64,null],[12,"XcmsRGBiToCIEXYZ","","",64,null],[12,"XcmsRGBiToRGB","","",64,null],[12,"XcmsRGBToRGBi","","",64,null],[12,"XcmsScreenNumberOfCCC","","",64,null],[12,"XcmsScreenWhitePointOfCCC","","",64,null],[12,"XcmsSetCCCOfColormap","","",64,null],[12,"XcmsSetCompressionProc","","",64,null],[12,"XcmsSetWhiteAdjustProc","","",64,null],[12,"XcmsSetWhitePoint","","",64,null],[12,"XcmsStoreColor","","",64,null],[12,"XcmsStoreColors","","",64,null],[12,"XcmsTekHVCClipC","","",64,null],[12,"XcmsTekHVCClipV","","",64,null],[12,"XcmsTekHVCClipVC","","",64,null],[12,"XcmsTekHVCQueryMaxC","","",64,null],[12,"XcmsTekHVCQueryMaxV","","",64,null],[12,"XcmsTekHVCQueryMaxVC","","",64,null],[12,"XcmsTekHVCQueryMaxVSamples","","",64,null],[12,"XcmsTekHVCQueryMinV","","",64,null],[12,"XcmsTekHVCToCIEuvY","","",64,null],[12,"XcmsTekHVCWhiteShiftColors","","",64,null],[12,"XcmsVisualOfCCC","","",64,null],[12,"XConfigureWindow","","",64,null],[12,"XConnectionNumber","","",64,null],[12,"XContextDependentDrawing","","",64,null],[12,"XContextualDrawing","","",64,null],[12,"XConvertCase","","",64,null],[12,"XConvertSelection","","",64,null],[12,"XCopyArea","","",64,null],[12,"XCopyColormapAndFree","","",64,null],[12,"XCopyGC","","",64,null],[12,"XCopyPlane","","",64,null],[12,"XCreateBitmapFromData","","",64,null],[12,"XCreateColormap","","",64,null],[12,"XCreateFontCursor","","",64,null],[12,"XCreateFontSet","","",64,null],[12,"XCreateGC","","",64,null],[12,"XCreateGlyphCursor","","",64,null],[12,"XCreateImage","","",64,null],[12,"XCreatePixmap","","",64,null],[12,"XCreatePixmapCursor","","",64,null],[12,"XCreatePixmapFromBitmapData","","",64,null],[12,"XCreateRegion","","",64,null],[12,"XCreateSimpleWindow","","",64,null],[12,"XCreateWindow","","",64,null],[12,"XDefaultColormap","","",64,null],[12,"XDefaultColormapOfScreen","","",64,null],[12,"XDefaultDepth","","",64,null],[12,"XDefaultDepthOfScreen","","",64,null],[12,"XDefaultGC","","",64,null],[12,"XDefaultGCOfScreen","","",64,null],[12,"XDefaultRootWindow","","",64,null],[12,"XDefaultScreen","","",64,null],[12,"XDefaultScreenOfDisplay","","",64,null],[12,"XDefaultString","","",64,null],[12,"XDefaultVisual","","",64,null],[12,"XDefaultVisualOfScreen","","",64,null],[12,"XDefineCursor","","",64,null],[12,"XDeleteContext","","",64,null],[12,"XDeleteModifiermapEntry","","",64,null],[12,"XDeleteProperty","","",64,null],[12,"XDestroyIC","","",64,null],[12,"XDestroyImage","","",64,null],[12,"XDestroyOC","","",64,null],[12,"XDestroyRegion","","",64,null],[12,"XDestroySubwindows","","",64,null],[12,"XDestroyWindow","","",64,null],[12,"XDirectionalDependentDrawing","","",64,null],[12,"XDisableAccessControl","","",64,null],[12,"XDisplayCells","","",64,null],[12,"XDisplayHeight","","",64,null],[12,"XDisplayHeightMM","","",64,null],[12,"XDisplayKeycodes","","",64,null],[12,"XDisplayMotionBufferSize","","",64,null],[12,"XDisplayName","","",64,null],[12,"XDisplayOfIM","","",64,null],[12,"XDisplayOfOM","","",64,null],[12,"XDisplayOfScreen","","",64,null],[12,"XDisplayPlanes","","",64,null],[12,"XDisplayString","","",64,null],[12,"XDisplayWidth","","",64,null],[12,"XDisplayWidthMM","","",64,null],[12,"XDoesBackingStore","","",64,null],[12,"XDoesSaveUnders","","",64,null],[12,"XDrawArc","","",64,null],[12,"XDrawArcs","","",64,null],[12,"XDrawImageString","","",64,null],[12,"XDrawImageString16","","",64,null],[12,"XDrawLine","","",64,null],[12,"XDrawLines","","",64,null],[12,"XDrawPoint","","",64,null],[12,"XDrawPoints","","",64,null],[12,"XDrawRectangle","","",64,null],[12,"XDrawRectangles","","",64,null],[12,"XDrawSegments","","",64,null],[12,"XDrawString","","",64,null],[12,"XDrawString16","","",64,null],[12,"XDrawText","","",64,null],[12,"XDrawText16","","",64,null],[12,"XEHeadOfExtensionList","","",64,null],[12,"XEmptyRegion","","",64,null],[12,"XEnableAccessControl","","",64,null],[12,"XEqualRegion","","",64,null],[12,"XESetBeforeFlush","","",64,null],[12,"XESetCloseDisplay","","",64,null],[12,"XESetCopyEventCookie","","",64,null],[12,"XESetCopyGC","","",64,null],[12,"XESetCreateFont","","",64,null],[12,"XESetCreateGC","","",64,null],[12,"XESetError","","",64,null],[12,"XESetErrorString","","",64,null],[12,"XESetEventToWire","","",64,null],[12,"XESetFlushGC","","",64,null],[12,"XESetFreeFont","","",64,null],[12,"XESetFreeGC","","",64,null],[12,"XESetPrintErrorValues","","",64,null],[12,"XESetWireToError","","",64,null],[12,"XESetWireToEvent","","",64,null],[12,"XESetWireToEventCookie","","",64,null],[12,"XEventMaskOfScreen","","",64,null],[12,"XEventsQueued","","",64,null],[12,"XExtendedMaxRequestSize","","",64,null],[12,"XExtentsOfFontSet","","",64,null],[12,"XFetchBuffer","","",64,null],[12,"XFetchBytes","","",64,null],[12,"XFetchName","","",64,null],[12,"XFillArc","","",64,null],[12,"XFillArcs","","",64,null],[12,"XFillPolygon","","",64,null],[12,"XFillRectangle","","",64,null],[12,"XFillRectangles","","",64,null],[12,"XFilterEvent","","",64,null],[12,"XFindContext","","",64,null],[12,"XFindOnExtensionList","","",64,null],[12,"XFlush","","",64,null],[12,"XFlushGC","","",64,null],[12,"XFontsOfFontSet","","",64,null],[12,"XForceScreenSaver","","",64,null],[12,"XFree","","",64,null],[12,"XFreeColormap","","",64,null],[12,"XFreeColors","","",64,null],[12,"XFreeCursor","","",64,null],[12,"XFreeEventData","","",64,null],[12,"XFreeExtensionList","","",64,null],[12,"XFreeFont","","",64,null],[12,"XFreeFontInfo","","",64,null],[12,"XFreeFontNames","","",64,null],[12,"XFreeFontPath","","",64,null],[12,"XFreeFontSet","","",64,null],[12,"XFreeGC","","",64,null],[12,"XFreeModifiermap","","",64,null],[12,"XFreePixmap","","",64,null],[12,"XFreeStringList","","",64,null],[12,"XGContextFromGC","","",64,null],[12,"XGeometry","","",64,null],[12,"XGetAtomName","","",64,null],[12,"XGetAtomNames","","",64,null],[12,"XGetClassHint","","",64,null],[12,"XGetCommand","","",64,null],[12,"XGetDefault","","",64,null],[12,"XGetErrorDatabaseText","","",64,null],[12,"XGetErrorText","","",64,null],[12,"XGetEventData","","",64,null],[12,"XGetFontPath","","",64,null],[12,"XGetFontProperty","","",64,null],[12,"XGetGCValues","","",64,null],[12,"XGetGeometry","","",64,null],[12,"XGetIconName","","",64,null],[12,"XGetIconSizes","","",64,null],[12,"XGetImage","","",64,null],[12,"XGetInputFocus","","",64,null],[12,"XGetKeyboardControl","","",64,null],[12,"XGetKeyboardMapping","","",64,null],[12,"XGetModifierMapping","","",64,null],[12,"XGetMotionEvents","","",64,null],[12,"XGetNormalHints","","",64,null],[12,"XGetPixel","","",64,null],[12,"XGetPointerControl","","",64,null],[12,"XGetPointerMapping","","",64,null],[12,"XGetRGBColormaps","","",64,null],[12,"XGetScreenSaver","","",64,null],[12,"XGetSelectionOwner","","",64,null],[12,"XGetSizeHints","","",64,null],[12,"XGetStandardColormap","","",64,null],[12,"XGetSubImage","","",64,null],[12,"XGetTextProperty","","",64,null],[12,"XGetTransientForHint","","",64,null],[12,"XGetVisualInfo","","",64,null],[12,"XGetWindowAttributes","","",64,null],[12,"XGetWindowProperty","","",64,null],[12,"XGetWMClientMachine","","",64,null],[12,"XGetWMColormapWindows","","",64,null],[12,"XGetWMHints","","",64,null],[12,"XGetWMIconName","","",64,null],[12,"XGetWMName","","",64,null],[12,"XGetWMNormalHints","","",64,null],[12,"XGetWMProtocols","","",64,null],[12,"XGetWMSizeHints","","",64,null],[12,"XGetZoomHints","","",64,null],[12,"XGrabButton","","",64,null],[12,"XGrabKey","","",64,null],[12,"XGrabKeyboard","","",64,null],[12,"XGrabPointer","","",64,null],[12,"XGrabServer","","",64,null],[12,"XHeightMMOfScreen","","",64,null],[12,"XHeightOfScreen","","",64,null],[12,"XIconifyWindow","","",64,null],[12,"XIfEvent","","",64,null],[12,"XImageByteOrder","","",64,null],[12,"XIMOfIC","","",64,null],[12,"XInitExtension","","",64,null],[12,"XInitImage","","",64,null],[12,"XInitThreads","","",64,null],[12,"XInsertModifiermapEntry","","",64,null],[12,"XInstallColormap","","",64,null],[12,"XInternalConnectionNumbers","","",64,null],[12,"XInternAtom","","",64,null],[12,"XInternAtoms","","",64,null],[12,"XIntersectRegion","","",64,null],[12,"XkbAddDeviceLedInfo","","",64,null],[12,"XkbAddGeomColor","","",64,null],[12,"XkbAddGeomDoodad","","",64,null],[12,"XkbAddGeomKey","","",64,null],[12,"XkbAddGeomKeyAlias","","",64,null],[12,"XkbAddGeomOutline","","",64,null],[12,"XkbAddGeomOverlay","","",64,null],[12,"XkbAddGeomOverlayKey","","",64,null],[12,"XkbAddGeomOverlayRow","","",64,null],[12,"XkbAddGeomProperty","","",64,null],[12,"XkbAddGeomRow","","",64,null],[12,"XkbAddGeomSection","","",64,null],[12,"XkbAddGeomShape","","",64,null],[12,"XkbAddKeyType","","",64,null],[12,"XkbAllocClientMap","","",64,null],[12,"XkbAllocCompatMap","","",64,null],[12,"XkbAllocControls","","",64,null],[12,"XkbAllocDeviceInfo","","",64,null],[12,"XkbAllocGeomColors","","",64,null],[12,"XkbAllocGeomDoodads","","",64,null],[12,"XkbAllocGeometry","","",64,null],[12,"XkbAllocGeomKeyAliases","","",64,null],[12,"XkbAllocGeomKeys","","",64,null],[12,"XkbAllocGeomOutlines","","",64,null],[12,"XkbAllocGeomOverlayKeys","","",64,null],[12,"XkbAllocGeomOverlayRows","","",64,null],[12,"XkbAllocGeomOverlays","","",64,null],[12,"XkbAllocGeomPoints","","",64,null],[12,"XkbAllocGeomProps","","",64,null],[12,"XkbAllocGeomRows","","",64,null],[12,"XkbAllocGeomSectionDoodads","","",64,null],[12,"XkbAllocGeomSections","","",64,null],[12,"XkbAllocGeomShapes","","",64,null],[12,"XkbAllocIndicatorMaps","","",64,null],[12,"XkbAllocKeyboard","","",64,null],[12,"XkbAllocNames","","",64,null],[12,"XkbAllocServerMap","","",64,null],[12,"XkbApplyCompatMapToKey","","",64,null],[12,"XkbApplyVirtualModChanges","","",64,null],[12,"XkbBell","","",64,null],[12,"XkbBellEvent","","",64,null],[12,"XkbChangeDeviceInfo","","",64,null],[12,"XkbChangeEnabledControls","","",64,null],[12,"XkbChangeKeycodeRange","","",64,null],[12,"XkbChangeMap","","",64,null],[12,"XkbChangeNames","","",64,null],[12,"XkbChangeTypesOfKey","","",64,null],[12,"XkbComputeEffectiveMap","","",64,null],[12,"XkbComputeRowBounds","","",64,null],[12,"XkbComputeSectionBounds","","",64,null],[12,"XkbComputeShapeBounds","","",64,null],[12,"XkbComputeShapeTop","","",64,null],[12,"XkbCopyKeyType","","",64,null],[12,"XkbCopyKeyTypes","","",64,null],[12,"XkbDeviceBell","","",64,null],[12,"XkbDeviceBellEvent","","",64,null],[12,"XkbFindOverlayForKey","","",64,null],[12,"XkbForceBell","","",64,null],[12,"XkbForceDeviceBell","","",64,null],[12,"XkbFreeClientMap","","",64,null],[12,"XkbFreeCompatMap","","",64,null],[12,"XkbFreeComponentList","","",64,null],[12,"XkbFreeControls","","",64,null],[12,"XkbFreeDeviceInfo","","",64,null],[12,"XkbFreeGeomColors","","",64,null],[12,"XkbFreeGeomDoodads","","",64,null],[12,"XkbFreeGeometry","","",64,null],[12,"XkbFreeGeomKeyAliases","","",64,null],[12,"XkbFreeGeomKeys","","",64,null],[12,"XkbFreeGeomOutlines","","",64,null],[12,"XkbFreeGeomOverlayKeys","","",64,null],[12,"XkbFreeGeomOverlayRows","","",64,null],[12,"XkbFreeGeomOverlays","","",64,null],[12,"XkbFreeGeomPoints","","",64,null],[12,"XkbFreeGeomProperties","","",64,null],[12,"XkbFreeGeomRows","","",64,null],[12,"XkbFreeGeomSections","","",64,null],[12,"XkbFreeGeomShapes","","",64,null],[12,"XkbFreeIndicatorMaps","","",64,null],[12,"XkbFreeKeyboard","","",64,null],[12,"XkbFreeNames","","",64,null],[12,"XkbFreeServerMap","","",64,null],[12,"XkbGetAutoRepeatRate","","",64,null],[12,"XkbGetAutoResetControls","","",64,null],[12,"XkbGetCompatMap","","",64,null],[12,"XkbGetControls","","",64,null],[12,"XkbGetDetectableAutoRepeat","","",64,null],[12,"XkbGetDeviceButtonActions","","",64,null],[12,"XkbGetDeviceInfo","","",64,null],[12,"XkbGetDeviceInfoChanges","","",64,null],[12,"XkbGetDeviceLedInfo","","",64,null],[12,"XkbGetGeometry","","",64,null],[12,"XkbGetIndicatorMap","","",64,null],[12,"XkbGetIndicatorState","","",64,null],[12,"XkbGetKeyActions","","",64,null],[12,"XkbGetKeyBehaviors","","",64,null],[12,"XkbGetKeyboard","","",64,null],[12,"XkbGetKeyboardByName","","",64,null],[12,"XkbGetKeyExplicitComponents","","",64,null],[12,"XkbGetKeyModifierMap","","",64,null],[12,"XkbGetKeySyms","","",64,null],[12,"XkbGetKeyTypes","","",64,null],[12,"XkbGetKeyVirtualModMap","","",64,null],[12,"XkbGetMap","","",64,null],[12,"XkbGetMapChanges","","",64,null],[12,"XkbGetNamedDeviceIndicator","","",64,null],[12,"XkbGetNamedGeometry","","",64,null],[12,"XkbGetNamedIndicator","","",64,null],[12,"XkbGetNames","","",64,null],[12,"XkbGetPerClientControls","","",64,null],[12,"XkbGetState","","",64,null],[12,"XkbGetUpdatedMap","","",64,null],[12,"XkbGetVirtualMods","","",64,null],[12,"XkbGetXlibControls","","",64,null],[12,"XkbIgnoreExtension","","",64,null],[12,"XkbInitCanonicalKeyTypes","","",64,null],[12,"XkbKeycodeToKeysym","","",64,null],[12,"XkbKeysymToModifiers","","",64,null],[12,"XkbKeyTypesForCoreSymbols","","",64,null],[12,"XkbLatchGroup","","",64,null],[12,"XkbLatchModifiers","","",64,null],[12,"XkbLibraryVersion","","",64,null],[12,"XkbListComponents","","",64,null],[12,"XkbLockGroup","","",64,null],[12,"XkbLockModifiers","","",64,null],[12,"XkbLookupKeyBinding","","",64,null],[12,"XkbLookupKeySym","","",64,null],[12,"XkbNoteControlsChanges","","",64,null],[12,"XkbNoteDeviceChanges","","",64,null],[12,"XkbNoteMapChanges","","",64,null],[12,"XkbNoteNameChanges","","",64,null],[12,"XkbOpenDisplay","","",64,null],[12,"XkbQueryExtension","","",64,null],[12,"XkbRefreshKeyboardMapping","","",64,null],[12,"XkbResizeDeviceButtonActions","","",64,null],[12,"XkbResizeKeyActions","","",64,null],[12,"XkbResizeKeySyms","","",64,null],[12,"XkbResizeKeyType","","",64,null],[12,"XkbSelectEventDetails","","",64,null],[12,"XkbSelectEvents","","",64,null],[12,"XkbSetAtomFuncs","","",64,null],[12,"XkbSetAutoRepeatRate","","",64,null],[12,"XkbSetAutoResetControls","","",64,null],[12,"XkbSetCompatMap","","",64,null],[12,"XkbSetControls","","",64,null],[12,"XkbSetDebuggingFlags","","",64,null],[12,"XkbSetDetectableAutoRepeat","","",64,null],[12,"XkbSetDeviceButtonActions","","",64,null],[12,"XkbSetDeviceInfo","","",64,null],[12,"XkbSetDeviceLedInfo","","",64,null],[12,"XkbSetGeometry","","",64,null],[12,"XkbSetIgnoreLockMods","","",64,null],[12,"XkbSetIndicatorMap","","",64,null],[12,"XkbSetMap","","",64,null],[12,"XkbSetNamedDeviceIndicator","","",64,null],[12,"XkbSetNamedIndicator","","",64,null],[12,"XkbSetNames","","",64,null],[12,"XkbSetPerClientControls","","",64,null],[12,"XkbSetServerInternalMods","","",64,null],[12,"XkbSetXlibControls","","",64,null],[12,"XkbToControl","","",64,null],[12,"XkbTranslateKeyCode","","",64,null],[12,"XkbTranslateKeySym","","",64,null],[12,"XkbUpdateActionVirtualMods","","",64,null],[12,"XkbUpdateKeyTypeVirtualMods","","",64,null],[12,"XkbUpdateMapFromCore","","",64,null],[12,"XkbUseExtension","","",64,null],[12,"XkbVirtualModsToReal","","",64,null],[12,"XkbXlibControlsImplemented","","",64,null],[12,"XKeycodeToKeysym","","",64,null],[12,"XKeysymToKeycode","","",64,null],[12,"XKeysymToString","","",64,null],[12,"XKillClient","","",64,null],[12,"XLastKnownRequestProcessed","","",64,null],[12,"XListDepths","","",64,null],[12,"XListExtensions","","",64,null],[12,"XListFonts","","",64,null],[12,"XListFontsWithInfo","","",64,null],[12,"XListHosts","","",64,null],[12,"XListInstalledColormaps","","",64,null],[12,"XListPixmapFormats","","",64,null],[12,"XListProperties","","",64,null],[12,"XLoadFont","","",64,null],[12,"XLoadQueryFont","","",64,null],[12,"XLocaleOfFontSet","","",64,null],[12,"XLocaleOfIM","","",64,null],[12,"XLocaleOfOM","","",64,null],[12,"XLockDisplay","","",64,null],[12,"XLookupColor","","",64,null],[12,"XLookupKeysym","","",64,null],[12,"XLookupString","","",64,null],[12,"XLowerWindow","","",64,null],[12,"XMapRaised","","",64,null],[12,"XMapSubwindows","","",64,null],[12,"XMapWindow","","",64,null],[12,"XMaskEvent","","",64,null],[12,"XMatchVisualInfo","","",64,null],[12,"XMaxCmapsOfScreen","","",64,null],[12,"XMaxRequestSize","","",64,null],[12,"XmbDrawImageString","","",64,null],[12,"XmbDrawString","","",64,null],[12,"XmbDrawText","","",64,null],[12,"XmbLookupString","","",64,null],[12,"XmbResetIC","","",64,null],[12,"XmbSetWMProperties","","",64,null],[12,"XmbTextEscapement","","",64,null],[12,"XmbTextExtents","","",64,null],[12,"XmbTextListToTextProperty","","",64,null],[12,"XmbTextPerCharExtents","","",64,null],[12,"XmbTextPropertyToTextList","","",64,null],[12,"XMinCmapsOfScreen","","",64,null],[12,"XMoveResizeWindow","","",64,null],[12,"XMoveWindow","","",64,null],[12,"XNewModifiermap","","",64,null],[12,"XNextEvent","","",64,null],[12,"XNextRequest","","",64,null],[12,"XNoOp","","",64,null],[12,"XOffsetRegion","","",64,null],[12,"XOMOfOC","","",64,null],[12,"XOpenDisplay","","",64,null],[12,"XOpenIM","","",64,null],[12,"XOpenOM","","",64,null],[12,"XParseColor","","",64,null],[12,"XParseGeometry","","",64,null],[12,"XPeekEvent","","",64,null],[12,"XPeekIfEvent","","",64,null],[12,"XPending","","",64,null],[12,"Xpermalloc","","",64,null],[12,"XPlanesOfScreen","","",64,null],[12,"XPointInRegion","","",64,null],[12,"XPolygonRegion","","",64,null],[12,"XProcessInternalConnection","","",64,null],[12,"XProtocolRevision","","",64,null],[12,"XProtocolVersion","","",64,null],[12,"XPutBackEvent","","",64,null],[12,"XPutImage","","",64,null],[12,"XPutPixel","","",64,null],[12,"XQLength","","",64,null],[12,"XQueryBestCursor","","",64,null],[12,"XQueryBestSize","","",64,null],[12,"XQueryBestStipple","","",64,null],[12,"XQueryBestTile","","",64,null],[12,"XQueryColor","","",64,null],[12,"XQueryColors","","",64,null],[12,"XQueryExtension","","",64,null],[12,"XQueryFont","","",64,null],[12,"XQueryKeymap","","",64,null],[12,"XQueryPointer","","",64,null],[12,"XQueryTextExtents","","",64,null],[12,"XQueryTextExtents16","","",64,null],[12,"XQueryTree","","",64,null],[12,"XRaiseWindow","","",64,null],[12,"XReadBitmapFile","","",64,null],[12,"XReadBitmapFileData","","",64,null],[12,"XRebindKeysym","","",64,null],[12,"XRecolorCursor","","",64,null],[12,"XReconfigureWMWindow","","",64,null],[12,"XRectInRegion","","",64,null],[12,"XRefreshKeyboardMapping","","",64,null],[12,"XRegisterIMInstantiateCallback","","",64,null],[12,"XRemoveConnectionWatch","","",64,null],[12,"XRemoveFromSaveSet","","",64,null],[12,"XRemoveHost","","",64,null],[12,"XRemoveHosts","","",64,null],[12,"XReparentWindow","","",64,null],[12,"XResetScreenSaver","","",64,null],[12,"XResizeWindow","","",64,null],[12,"XResourceManagerString","","",64,null],[12,"XRestackWindows","","",64,null],[12,"XrmCombineDatabase","","",64,null],[12,"XrmCombineFileDatabase","","",64,null],[12,"XrmDestroyDatabase","","",64,null],[12,"XrmEnumerateDatabase","","",64,null],[12,"XrmGetDatabase","","",64,null],[12,"XrmGetFileDatabase","","",64,null],[12,"XrmGetResource","","",64,null],[12,"XrmGetStringDatabase","","",64,null],[12,"XrmInitialize","","",64,null],[12,"XrmLocaleOfDatabase","","",64,null],[12,"XrmMergeDatabases","","",64,null],[12,"XrmParseCommand","","",64,null],[12,"XrmPermStringToQuark","","",64,null],[12,"XrmPutFileDatabase","","",64,null],[12,"XrmPutLineResource","","",64,null],[12,"XrmPutResource","","",64,null],[12,"XrmPutStringResource","","",64,null],[12,"XrmQGetResource","","",64,null],[12,"XrmQGetSearchList","","",64,null],[12,"XrmQGetSearchResource","","",64,null],[12,"XrmQPutResource","","",64,null],[12,"XrmQPutStringResource","","",64,null],[12,"XrmQuarkToString","","",64,null],[12,"XrmSetDatabase","","",64,null],[12,"XrmStringToBindingQuarkList","","",64,null],[12,"XrmStringToQuark","","",64,null],[12,"XrmStringToQuarkList","","",64,null],[12,"XrmUniqueQuark","","",64,null],[12,"XRootWindow","","",64,null],[12,"XRootWindowOfScreen","","",64,null],[12,"XRotateBuffers","","",64,null],[12,"XRotateWindowProperties","","",64,null],[12,"XSaveContext","","",64,null],[12,"XScreenCount","","",64,null],[12,"XScreenNumberOfScreen","","",64,null],[12,"XScreenOfDisplay","","",64,null],[12,"XScreenResourceString","","",64,null],[12,"XSelectInput","","",64,null],[12,"XSendEvent","","",64,null],[12,"XServerVendor","","",64,null],[12,"XSetAccessControl","","",64,null],[12,"XSetAfterFunction","","",64,null],[12,"XSetArcMode","","",64,null],[12,"XSetAuthorization","","",64,null],[12,"XSetBackground","","",64,null],[12,"XSetClassHint","","",64,null],[12,"XSetClipMask","","",64,null],[12,"XSetClipOrigin","","",64,null],[12,"XSetClipRectangles","","",64,null],[12,"XSetCloseDownMode","","",64,null],[12,"XSetCommand","","",64,null],[12,"XSetDashes","","",64,null],[12,"XSetErrorHandler","","",64,null],[12,"XSetFillRule","","",64,null],[12,"XSetFillStyle","","",64,null],[12,"XSetFont","","",64,null],[12,"XSetFontPath","","",64,null],[12,"XSetForeground","","",64,null],[12,"XSetFunction","","",64,null],[12,"XSetGraphicsExposures","","",64,null],[12,"XSetICFocus","","",64,null],[12,"XSetIconName","","",64,null],[12,"XSetIconSizes","","",64,null],[12,"XSetInputFocus","","",64,null],[12,"XSetIOErrorHandler","","",64,null],[12,"XSetLineAttributes","","",64,null],[12,"XSetLocaleModifiers","","",64,null],[12,"XSetModifierMapping","","",64,null],[12,"XSetNormalHints","","",64,null],[12,"XSetPlaneMask","","",64,null],[12,"XSetPointerMapping","","",64,null],[12,"XSetRegion","","",64,null],[12,"XSetRGBColormaps","","",64,null],[12,"XSetScreenSaver","","",64,null],[12,"XSetSelectionOwner","","",64,null],[12,"XSetSizeHints","","",64,null],[12,"XSetStandardColormap","","",64,null],[12,"XSetStandardProperties","","",64,null],[12,"XSetState","","",64,null],[12,"XSetStipple","","",64,null],[12,"XSetSubwindowMode","","",64,null],[12,"XSetTextProperty","","",64,null],[12,"XSetTile","","",64,null],[12,"XSetTransientForHint","","",64,null],[12,"XSetTSOrigin","","",64,null],[12,"XSetWindowBackground","","",64,null],[12,"XSetWindowBackgroundPixmap","","",64,null],[12,"XSetWindowBorder","","",64,null],[12,"XSetWindowBorderPixmap","","",64,null],[12,"XSetWindowBorderWidth","","",64,null],[12,"XSetWindowColormap","","",64,null],[12,"XSetWMClientMachine","","",64,null],[12,"XSetWMColormapWindows","","",64,null],[12,"XSetWMHints","","",64,null],[12,"XSetWMIconName","","",64,null],[12,"XSetWMName","","",64,null],[12,"XSetWMNormalHints","","",64,null],[12,"XSetWMProperties","","",64,null],[12,"XSetWMProtocols","","",64,null],[12,"XSetWMSizeHints","","",64,null],[12,"XSetZoomHints","","",64,null],[12,"XShrinkRegion","","",64,null],[12,"XStoreBuffer","","",64,null],[12,"XStoreBytes","","",64,null],[12,"XStoreColor","","",64,null],[12,"XStoreColors","","",64,null],[12,"XStoreName","","",64,null],[12,"XStoreNamedColor","","",64,null],[12,"XStringListToTextProperty","","",64,null],[12,"XStringToKeysym","","",64,null],[12,"XSubImage","","",64,null],[12,"XSubtractRegion","","",64,null],[12,"XSupportsLocale","","",64,null],[12,"XSync","","",64,null],[12,"XSynchronize","","",64,null],[12,"XTextExtents","","",64,null],[12,"XTextExtents16","","",64,null],[12,"XTextPropertyToStringList","","",64,null],[12,"XTextWidth","","",64,null],[12,"XTextWidth16","","",64,null],[12,"XTranslateCoordinates","","",64,null],[12,"XUndefineCursor","","",64,null],[12,"XUngrabButton","","",64,null],[12,"XUngrabKey","","",64,null],[12,"XUngrabKeyboard","","",64,null],[12,"XUngrabPointer","","",64,null],[12,"XUngrabServer","","",64,null],[12,"XUninstallColormap","","",64,null],[12,"XUnionRectWithRegion","","",64,null],[12,"XUnionRegion","","",64,null],[12,"XUnloadFont","","",64,null],[12,"XUnlockDisplay","","",64,null],[12,"XUnmapSubwindows","","",64,null],[12,"XUnmapWindow","","",64,null],[12,"XUnregisterIMInstantiateCallback","","",64,null],[12,"XUnsetICFocus","","",64,null],[12,"Xutf8DrawImageString","","",64,null],[12,"Xutf8DrawString","","",64,null],[12,"Xutf8DrawText","","",64,null],[12,"Xutf8LookupString","","",64,null],[12,"Xutf8ResetIC","","",64,null],[12,"Xutf8SetWMProperties","","",64,null],[12,"Xutf8TextEscapement","","",64,null],[12,"Xutf8TextExtents","","",64,null],[12,"Xutf8TextListToTextProperty","","",64,null],[12,"Xutf8TextPerCharExtents","","",64,null],[12,"Xutf8TextPropertyToTextList","","",64,null],[12,"XVendorRelease","","",64,null],[12,"XVisualIDFromVisual","","",64,null],[12,"XWarpPointer","","",64,null],[12,"XwcDrawImageString","","",64,null],[12,"XwcDrawString","","",64,null],[12,"XwcDrawText","","",64,null],[12,"XwcFreeStringList","","",64,null],[12,"XwcLookupString","","",64,null],[12,"XwcResetIC","","",64,null],[12,"XwcTextEscapement","","",64,null],[12,"XwcTextExtents","","",64,null],[12,"XwcTextListToTextProperty","","",64,null],[12,"XwcTextPerCharExtents","","",64,null],[12,"XwcTextPropertyToTextList","","",64,null],[12,"XWhitePixel","","",64,null],[12,"XWhitePixelOfScreen","","",64,null],[12,"XWidthMMOfScreen","","",64,null],[12,"XWidthOfScreen","","",64,null],[12,"XWindowEvent","","",64,null],[12,"XWithdrawWindow","","",64,null],[12,"XWMGeometry","","",64,null],[12,"XWriteBitmapFile","","",64,null],[12,"XXorRegion","","",64,null],[12,"XCreateIC","","",64,null],[12,"XCreateOC","","",64,null],[12,"XGetICValues","","",64,null],[12,"XGetIMValues","","",64,null],[12,"XGetOCValues","","",64,null],[12,"XGetOMValues","","",64,null],[12,"XSetICValues","","",64,null],[12,"XSetIMValues","","",64,null],[12,"XSetOCValues","","",64,null],[12,"XSetOMValues","","",64,null],[12,"XVaCreateNestedList","","",64,null],[3,"_XcmsCCC","","",null,null],[3,"XcmsColor","","",null,null],[3,"_XcmsColorSpace","","",null,null],[3,"_XcmsFunctionSet","","",null,null],[3,"_XkbAction","","",null,null],[3,"_XkbBounds","","",null,null],[3,"_XkbChanges","","",null,null],[3,"_XkbClientMapRec","","",null,null],[3,"_XkbColor","","",null,null],[3,"_XkbComponentList","","",null,null],[3,"_XkbComponentNames","","",null,null],[3,"_XkbControls","","",null,null],[3,"_XkbControlsChanges","","",null,null],[3,"_XkbControlsNotify","","",null,null],[3,"_XkbDeviceChanges","","",null,null],[3,"_XkbDeviceInfo","","",null,null],[3,"_XkbDeviceLedInfo","","",null,null],[3,"_XkbDoodad","","",null,null],[3,"_XkbExtensionDeviceNotify","","",null,null],[3,"_XkbGeometry","","",null,null],[3,"_XkbGeometrySizes","","",null,null],[3,"_XkbIndicatorMapRec","","",null,null],[3,"_XkbKey","","",null,null],[3,"_XkbKeyType","","",null,null],[3,"_XkbMapChanges","","",null,null],[3,"_XkbMapNotifyEvent","","",null,null],[3,"_XkbMods","","",null,null],[3,"_XkbNameChanges","","",null,null],[3,"_XkbNamesNotify","","",null,null],[3,"_XkbOutline","","",null,null],[3,"_XkbOverlay","","",null,null],[3,"_XkbOverlayKey","","",null,null],[3,"_XkbOverlayRow","","",null,null],[3,"_XkbProperty","","",null,null],[3,"_XkbRow","","",null,null],[3,"_XkbSection","","",null,null],[3,"_XkbServerMapRec","","",null,null],[3,"_XkbShape","","",null,null],[3,"_XkbStateRec","","",null,null],[3,"_XkbSymInterpretRec","","",null,null],[3,"XEvent","","",null,null],[12,"pad","","",65,null],[3,"XAnyEvent","","",null,null],[12,"type_","","",66,null],[12,"serial","","",66,null],[12,"send_event","","",66,null],[12,"display","","",66,null],[12,"window","","",66,null],[3,"XButtonEvent","","",null,null],[12,"type_","","",67,null],[12,"serial","","",67,null],[12,"send_event","","",67,null],[12,"display","","",67,null],[12,"window","","",67,null],[12,"root","","",67,null],[12,"subwindow","","",67,null],[12,"time","","",67,null],[12,"x","","",67,null],[12,"y","","",67,null],[12,"x_root","","",67,null],[12,"y_root","","",67,null],[12,"state","","",67,null],[12,"button","","",67,null],[12,"same_screen","","",67,null],[3,"XCirculateEvent","","",null,null],[12,"type_","","",68,null],[12,"serial","","",68,null],[12,"send_event","","",68,null],[12,"display","","",68,null],[12,"event","","",68,null],[12,"window","","",68,null],[12,"place","","",68,null],[3,"XCirculateRequestEvent","","",null,null],[12,"type_","","",69,null],[12,"serial","","",69,null],[12,"send_event","","",69,null],[12,"display","","",69,null],[12,"parent","","",69,null],[12,"window","","",69,null],[12,"place","","",69,null],[3,"XClientMessageEvent","","",null,null],[12,"type_","","",70,null],[12,"serial","","",70,null],[12,"send_event","","",70,null],[12,"display","","",70,null],[12,"window","","",70,null],[12,"message_type","","",70,null],[12,"format","","",70,null],[12,"data","","",70,null],[3,"XColormapEvent","","",null,null],[12,"type_","","",71,null],[12,"serial","","",71,null],[12,"send_event","","",71,null],[12,"display","","",71,null],[12,"window","","",71,null],[12,"colormap","","",71,null],[12,"new","","",71,null],[12,"state","","",71,null],[3,"XConfigureEvent","","",null,null],[12,"type_","","",72,null],[12,"serial","","",72,null],[12,"send_event","","",72,null],[12,"display","","",72,null],[12,"event","","",72,null],[12,"window","","",72,null],[12,"x","","",72,null],[12,"y","","",72,null],[12,"width","","",72,null],[12,"height","","",72,null],[12,"border_width","","",72,null],[12,"above","","",72,null],[12,"override_redirect","","",72,null],[3,"XConfigureRequestEvent","","",null,null],[12,"type_","","",73,null],[12,"serial","","",73,null],[12,"send_event","","",73,null],[12,"display","","",73,null],[12,"parent","","",73,null],[12,"window","","",73,null],[12,"x","","",73,null],[12,"y","","",73,null],[12,"width","","",73,null],[12,"height","","",73,null],[12,"border_width","","",73,null],[12,"above","","",73,null],[12,"detail","","",73,null],[12,"value_mask","","",73,null],[3,"XCreateWindowEvent","","",null,null],[12,"type_","","",74,null],[12,"serial","","",74,null],[12,"send_event","","",74,null],[12,"display","","",74,null],[12,"parent","","",74,null],[12,"window","","",74,null],[12,"x","","",74,null],[12,"y","","",74,null],[12,"width","","",74,null],[12,"height","","",74,null],[12,"border_width","","",74,null],[12,"override_redirect","","",74,null],[3,"XCrossingEvent","","",null,null],[12,"type_","","",75,null],[12,"serial","","",75,null],[12,"send_event","","",75,null],[12,"display","","",75,null],[12,"window","","",75,null],[12,"root","","",75,null],[12,"subwindow","","",75,null],[12,"time","","",75,null],[12,"x","","",75,null],[12,"y","","",75,null],[12,"x_root","","",75,null],[12,"y_root","","",75,null],[12,"mode","","",75,null],[12,"detail","","",75,null],[12,"same_screen","","",75,null],[12,"focus","","",75,null],[12,"state","","",75,null],[3,"XDestroyWindowEvent","","",null,null],[12,"type_","","",76,null],[12,"serial","","",76,null],[12,"send_event","","",76,null],[12,"display","","",76,null],[12,"event","","",76,null],[12,"window","","",76,null],[3,"XErrorEvent","","",null,null],[12,"type_","","",77,null],[12,"display","","",77,null],[12,"resourceid","","",77,null],[12,"serial","","",77,null],[12,"error_code","","",77,null],[12,"request_code","","",77,null],[12,"minor_code","","",77,null],[3,"XExposeEvent","","",null,null],[12,"type_","","",78,null],[12,"serial","","",78,null],[12,"send_event","","",78,null],[12,"display","","",78,null],[12,"window","","",78,null],[12,"x","","",78,null],[12,"y","","",78,null],[12,"width","","",78,null],[12,"height","","",78,null],[12,"count","","",78,null],[3,"XFocusChangeEvent","","",null,null],[12,"type_","","",79,null],[12,"serial","","",79,null],[12,"send_event","","",79,null],[12,"display","","",79,null],[12,"window","","",79,null],[12,"mode","","",79,null],[12,"detail","","",79,null],[3,"XGraphicsExposeEvent","","",null,null],[12,"type_","","",80,null],[12,"serial","","",80,null],[12,"send_event","","",80,null],[12,"display","","",80,null],[12,"drawable","","",80,null],[12,"x","","",80,null],[12,"y","","",80,null],[12,"width","","",80,null],[12,"height","","",80,null],[12,"count","","",80,null],[12,"major_code","","",80,null],[12,"minor_code","","",80,null],[3,"XGravityEvent","","",null,null],[12,"type_","","",81,null],[12,"serial","","",81,null],[12,"send_event","","",81,null],[12,"display","","",81,null],[12,"event","","",81,null],[12,"window","","",81,null],[12,"x","","",81,null],[12,"y","","",81,null],[3,"XKeyEvent","","",null,null],[12,"type_","","",82,null],[12,"serial","","",82,null],[12,"send_event","","",82,null],[12,"display","","",82,null],[12,"window","","",82,null],[12,"root","","",82,null],[12,"subwindow","","",82,null],[12,"time","","",82,null],[12,"x","","",82,null],[12,"y","","",82,null],[12,"x_root","","",82,null],[12,"y_root","","",82,null],[12,"state","","",82,null],[12,"keycode","","",82,null],[12,"same_screen","","",82,null],[3,"XKeymapEvent","","",null,null],[12,"type_","","",83,null],[12,"serial","","",83,null],[12,"send_event","","",83,null],[12,"display","","",83,null],[12,"window","","",83,null],[12,"key_vector","","",83,null],[3,"XMapEvent","","",null,null],[12,"type_","","",84,null],[12,"serial","","",84,null],[12,"send_event","","",84,null],[12,"display","","",84,null],[12,"event","","",84,null],[12,"window","","",84,null],[12,"override_redirect","","",84,null],[3,"XMappingEvent","","",null,null],[12,"type_","","",85,null],[12,"serial","","",85,null],[12,"send_event","","",85,null],[12,"display","","",85,null],[12,"event","","",85,null],[12,"request","","",85,null],[12,"first_keycode","","",85,null],[12,"count","","",85,null],[3,"XMapRequestEvent","","",null,null],[12,"type_","","",86,null],[12,"serial","","",86,null],[12,"send_event","","",86,null],[12,"display","","",86,null],[12,"parent","","",86,null],[12,"window","","",86,null],[3,"XMotionEvent","","",null,null],[12,"type_","","",87,null],[12,"serial","","",87,null],[12,"send_event","","",87,null],[12,"display","","",87,null],[12,"window","","",87,null],[12,"root","","",87,null],[12,"subwindow","","",87,null],[12,"time","","",87,null],[12,"x","","",87,null],[12,"y","","",87,null],[12,"x_root","","",87,null],[12,"y_root","","",87,null],[12,"state","","",87,null],[12,"is_hint","","",87,null],[12,"same_screen","","",87,null],[3,"XNoExposeEvent","","",null,null],[12,"type_","","",88,null],[12,"serial","","",88,null],[12,"send_event","","",88,null],[12,"display","","",88,null],[12,"drawable","","",88,null],[12,"major_code","","",88,null],[12,"minor_code","","",88,null],[3,"XPropertyEvent","","",null,null],[12,"type_","","",89,null],[12,"serial","","",89,null],[12,"send_event","","",89,null],[12,"display","","",89,null],[12,"window","","",89,null],[12,"atom","","",89,null],[12,"time","","",89,null],[12,"state","","",89,null],[3,"XReparentEvent","","",null,null],[12,"type_","","",90,null],[12,"serial","","",90,null],[12,"send_event","","",90,null],[12,"display","","",90,null],[12,"event","","",90,null],[12,"window","","",90,null],[12,"parent","","",90,null],[12,"x","","",90,null],[12,"y","","",90,null],[12,"override_redirect","","",90,null],[3,"XResizeRequestEvent","","",null,null],[12,"type_","","",91,null],[12,"serial","","",91,null],[12,"send_event","","",91,null],[12,"display","","",91,null],[12,"window","","",91,null],[12,"width","","",91,null],[12,"height","","",91,null],[3,"XSelectionClearEvent","","",null,null],[12,"type_","","",92,null],[12,"serial","","",92,null],[12,"send_event","","",92,null],[12,"display","","",92,null],[12,"window","","",92,null],[12,"selection","","",92,null],[12,"time","","",92,null],[3,"XSelectionEvent","","",null,null],[12,"type_","","",93,null],[12,"serial","","",93,null],[12,"send_event","","",93,null],[12,"display","","",93,null],[12,"requestor","","",93,null],[12,"selection","","",93,null],[12,"target","","",93,null],[12,"property","","",93,null],[12,"time","","",93,null],[3,"XSelectionRequestEvent","","",null,null],[12,"type_","","",94,null],[12,"serial","","",94,null],[12,"send_event","","",94,null],[12,"display","","",94,null],[12,"owner","","",94,null],[12,"requestor","","",94,null],[12,"selection","","",94,null],[12,"target","","",94,null],[12,"property","","",94,null],[12,"time","","",94,null],[3,"XUnmapEvent","","",null,null],[12,"type_","","",95,null],[12,"serial","","",95,null],[12,"send_event","","",95,null],[12,"display","","",95,null],[12,"event","","",95,null],[12,"window","","",95,null],[12,"from_configure","","",95,null],[3,"XVisibilityEvent","","",null,null],[12,"type_","","",96,null],[12,"serial","","",96,null],[12,"send_event","","",96,null],[12,"display","","",96,null],[12,"window","","",96,null],[12,"state","","",96,null],[3,"_XkbCompatMapRec","","",null,null],[12,"sym_interpret","","",97,null],[12,"groups","","",97,null],[12,"num_si","","",97,null],[12,"size_si","","",97,null],[3,"_XkbDesc","","",null,null],[12,"dpy","","",98,null],[12,"flags","","",98,null],[12,"device_spec","","",98,null],[12,"min_key_code","","",98,null],[12,"max_key_code","","",98,null],[12,"ctrls","","",98,null],[12,"server","","",98,null],[12,"map","","",98,null],[12,"indicators","","",98,null],[12,"names","","",98,null],[12,"compat","","",98,null],[12,"geom","","",98,null],[3,"_XkbIndicatorRec","","",null,null],[12,"phys_indicators","","",99,null],[12,"maps","","",99,null],[3,"_XkbKeyAliasRec","","",null,null],[12,"real","","",100,null],[12,"alias","","",100,null],[3,"_XkbKeyNameRec","","",null,null],[12,"name","","",101,null],[3,"_XkbNamesRec","","",null,null],[12,"keycodes","","",102,null],[12,"geometry","","",102,null],[12,"symbols","","",102,null],[12,"types","","",102,null],[12,"compat","","",102,null],[12,"vmods","","",102,null],[12,"indicators","","",102,null],[12,"groups","","",102,null],[12,"keys","","",102,null],[12,"key_aliases","","",102,null],[12,"radio_groups","","",102,null],[12,"phys_symbols","","",102,null],[12,"num_keys","","",102,null],[12,"num_key_aliases","","",102,null],[12,"num_rg","","",102,null],[3,"Depth","","",null,null],[12,"depth","","",103,null],[12,"nvisuals","","",103,null],[12,"visuals","","",103,null],[3,"Screen","","",null,null],[12,"ext_data","","",104,null],[12,"display","","",104,null],[12,"root","","",104,null],[12,"width","","",104,null],[12,"height","","",104,null],[12,"mwidth","","",104,null],[12,"mheight","","",104,null],[12,"ndepths","","",104,null],[12,"depths","","",104,null],[12,"root_depth","","",104,null],[12,"root_visual","","",104,null],[12,"default_gc","","",104,null],[12,"cmap","","",104,null],[12,"white_pixel","","",104,null],[12,"black_pixel","","",104,null],[12,"max_maps","","",104,null],[12,"min_maps","","",104,null],[12,"backing_store","","",104,null],[12,"save_unders","","",104,null],[12,"root_input_mask","","",104,null],[3,"ScreenFormat","","",null,null],[12,"ext_data","","",105,null],[12,"depth","","",105,null],[12,"bits_per_pixel","","",105,null],[12,"scanline_pad","","",105,null],[3,"Visual","","",null,null],[12,"ext_data","","",106,null],[12,"visualid","","",106,null],[12,"class","","",106,null],[12,"red_mask","","",106,null],[12,"green_mask","","",106,null],[12,"blue_mask","","",106,null],[12,"bits_per_rgb","","",106,null],[12,"map_entries","","",106,null],[3,"XArc","","",null,null],[12,"x","","",107,null],[12,"y","","",107,null],[12,"width","","",107,null],[12,"height","","",107,null],[12,"angle1","","",107,null],[12,"angle2","","",107,null],[3,"XChar2b","","",null,null],[12,"byte1","","",108,null],[12,"byte2","","",108,null],[3,"XCharStruct","","",null,null],[12,"lbearing","","",109,null],[12,"rbearing","","",109,null],[12,"width","","",109,null],[12,"ascent","","",109,null],[12,"descent","","",109,null],[12,"attributes","","",109,null],[3,"XClassHint","","",null,null],[12,"res_name","","",110,null],[12,"res_class","","",110,null],[3,"XColor","","",null,null],[12,"pixel","","",111,null],[12,"red","","",111,null],[12,"green","","",111,null],[12,"blue","","",111,null],[12,"flags","","",111,null],[12,"pad","","",111,null],[3,"XComposeStatus","","",null,null],[12,"compose_ptr","","",112,null],[12,"chars_matched","","",112,null],[3,"XExtCodes","","",null,null],[12,"extension","","",113,null],[12,"major_opcode","","",113,null],[12,"first_event","","",113,null],[12,"first_error","","",113,null],[3,"XExtData","","",null,null],[12,"number","","",114,null],[12,"next","","",114,null],[12,"free_private","","",114,null],[12,"private_data","","",114,null],[3,"XFontProp","","",null,null],[12,"name","","",115,null],[12,"card32","","",115,null],[3,"XFontSetExtents","","",null,null],[12,"max_ink_extent","","",116,null],[12,"max_logical_extent","","",116,null],[3,"XFontStruct","","",null,null],[12,"ext_data","","",117,null],[12,"fid","","",117,null],[12,"direction","","",117,null],[12,"min_char_or_byte2","","",117,null],[12,"max_char_or_byte2","","",117,null],[12,"min_byte1","","",117,null],[12,"max_byte1","","",117,null],[12,"all_chars_exist","","",117,null],[12,"default_char","","",117,null],[12,"n_properties","","",117,null],[12,"properties","","",117,null],[12,"min_bounds","","",117,null],[12,"max_bounds","","",117,null],[12,"per_char","","",117,null],[12,"ascent","","",117,null],[12,"descent","","",117,null],[3,"XGCValues","","",null,null],[12,"function","","",118,null],[12,"plane_mask","","",118,null],[12,"foreground","","",118,null],[12,"background","","",118,null],[12,"line_width","","",118,null],[12,"line_style","","",118,null],[12,"cap_style","","",118,null],[12,"join_style","","",118,null],[12,"fill_style","","",118,null],[12,"fill_rule","","",118,null],[12,"arc_mode","","",118,null],[12,"tile","","",118,null],[12,"stipple","","",118,null],[12,"ts_x_origin","","",118,null],[12,"ts_y_origin","","",118,null],[12,"font","","",118,null],[12,"subwindow_mode","","",118,null],[12,"graphics_exposures","","",118,null],[12,"clip_x_origin","","",118,null],[12,"clip_y_origin","","",118,null],[12,"clip_mask","","",118,null],[12,"dash_offset","","",118,null],[12,"dashes","","",118,null],[3,"XGenericEventCookie","","",null,null],[12,"type_","","",119,null],[12,"serial","","",119,null],[12,"send_event","","",119,null],[12,"display","","",119,null],[12,"extension","","",119,null],[12,"evtype","","",119,null],[12,"cookie","","",119,null],[12,"data","","",119,null],[3,"XHostAddress","","",null,null],[12,"family","","",120,null],[12,"length","","",120,null],[12,"address","","",120,null],[3,"XIconSize","","",null,null],[12,"min_width","","",121,null],[12,"min_height","","",121,null],[12,"max_width","","",121,null],[12,"max_height","","",121,null],[12,"width_inc","","",121,null],[12,"height_inc","","",121,null],[3,"XImage","","",null,null],[12,"width","","",122,null],[12,"height","","",122,null],[12,"xoffset","","",122,null],[12,"format","","",122,null],[12,"data","","",122,null],[12,"byte_order","","",122,null],[12,"bitmap_unit","","",122,null],[12,"bitmap_bit_order","","",122,null],[12,"bitmap_pad","","",122,null],[12,"depth","","",122,null],[12,"bytes_per_line","","",122,null],[12,"bits_per_pixel","","",122,null],[12,"red_mask","","",122,null],[12,"green_mask","","",122,null],[12,"blue_mask","","",122,null],[12,"obdata","","",122,null],[12,"funcs","","",122,null],[3,"XKeyboardControl","","",null,null],[12,"key_click_percent","","",123,null],[12,"bell_percent","","",123,null],[12,"bell_pitch","","",123,null],[12,"bell_duration","","",123,null],[12,"led","","",123,null],[12,"led_mode","","",123,null],[12,"key","","",123,null],[12,"auto_repeat_mode","","",123,null],[3,"XKeyboardState","","",null,null],[12,"key_click_percent","","",124,null],[12,"bell_percent","","",124,null],[12,"bell_pitch","","",124,null],[12,"bell_duration","","",124,null],[12,"led_mask","","",124,null],[12,"global_auto_repeat","","",124,null],[12,"auto_repeats","","",124,null],[3,"XmbTextItem","","",null,null],[12,"chars","","",125,null],[12,"nchars","","",125,null],[12,"delta","","",125,null],[12,"font_set","","",125,null],[3,"XModifierKeymap","","",null,null],[12,"max_keypermod","","",126,null],[12,"modifiermap","","",126,null],[3,"XOMCharSetList","","",null,null],[12,"charset_count","","",127,null],[12,"charset_list","","",127,null],[3,"XPixmapFormatValues","","",null,null],[12,"depth","","",128,null],[12,"bits_per_pixel","","",128,null],[12,"scanline_pad","","",128,null],[3,"XPoint","","",null,null],[12,"x","","",129,null],[12,"y","","",129,null],[3,"XRectangle","","",null,null],[12,"x","","",130,null],[12,"y","","",130,null],[12,"width","","",130,null],[12,"height","","",130,null],[3,"XrmOptionDescRec","","",null,null],[12,"option","","",131,null],[12,"specifier","","",131,null],[12,"argKind","","",131,null],[12,"value","","",131,null],[3,"XrmValue","","",null,null],[12,"size","","",132,null],[12,"addr","","",132,null],[3,"XSegment","","",null,null],[12,"x1","","",133,null],[12,"y1","","",133,null],[12,"x2","","",133,null],[12,"y2","","",133,null],[3,"XSetWindowAttributes","","",null,null],[12,"background_pixmap","","",134,null],[12,"background_pixel","","",134,null],[12,"border_pixmap","","",134,null],[12,"border_pixel","","",134,null],[12,"bit_gravity","","",134,null],[12,"win_gravity","","",134,null],[12,"backing_store","","",134,null],[12,"backing_planes","","",134,null],[12,"backing_pixel","","",134,null],[12,"save_under","","",134,null],[12,"event_mask","","",134,null],[12,"do_not_propagate_mask","","",134,null],[12,"override_redirect","","",134,null],[12,"colormap","","",134,null],[12,"cursor","","",134,null],[3,"XSizeHints","","",null,null],[12,"flags","","",135,null],[12,"x","","",135,null],[12,"y","","",135,null],[12,"width","","",135,null],[12,"height","","",135,null],[12,"min_width","","",135,null],[12,"min_height","","",135,null],[12,"max_width","","",135,null],[12,"max_height","","",135,null],[12,"width_inc","","",135,null],[12,"height_inc","","",135,null],[12,"min_aspect","","",135,null],[12,"max_aspect","","",135,null],[12,"base_width","","",135,null],[12,"base_height","","",135,null],[12,"win_gravity","","",135,null],[3,"XStandardColormap","","",null,null],[12,"colormap","","",136,null],[12,"red_max","","",136,null],[12,"red_mult","","",136,null],[12,"green_max","","",136,null],[12,"green_mult","","",136,null],[12,"blue_max","","",136,null],[12,"blue_mult","","",136,null],[12,"base_pixel","","",136,null],[12,"visualid","","",136,null],[12,"killid","","",136,null],[3,"XTextItem","","",null,null],[12,"chars","","",137,null],[12,"nchars","","",137,null],[12,"delta","","",137,null],[12,"font","","",137,null],[3,"XTextItem16","","",null,null],[12,"chars","","",138,null],[12,"nchars","","",138,null],[12,"delta","","",138,null],[12,"font","","",138,null],[3,"XTextProperty","","",null,null],[12,"value","","",139,null],[12,"encoding","","",139,null],[12,"format","","",139,null],[12,"nitems","","",139,null],[3,"XTimeCoord","","",null,null],[12,"time","","",140,null],[12,"x","","",140,null],[12,"y","","",140,null],[3,"XVisualInfo","","",null,null],[12,"visual","","",141,null],[12,"visualid","","",141,null],[12,"screen","","",141,null],[12,"depth","","",141,null],[12,"class","","",141,null],[12,"red_mask","","",141,null],[12,"green_mask","","",141,null],[12,"blue_mask","","",141,null],[12,"colormap_size","","",141,null],[12,"bits_per_rgb","","",141,null],[3,"XwcTextItem","","",null,null],[12,"chars","","",142,null],[12,"nchars","","",142,null],[12,"delta","","",142,null],[12,"font_set","","",142,null],[3,"XWindowAttributes","","",null,null],[12,"x","","",143,null],[12,"y","","",143,null],[12,"width","","",143,null],[12,"height","","",143,null],[12,"border_width","","",143,null],[12,"depth","","",143,null],[12,"visual","","",143,null],[12,"root","","",143,null],[12,"class","","",143,null],[12,"bit_gravity","","",143,null],[12,"win_gravity","","",143,null],[12,"backing_store","","",143,null],[12,"backing_planes","","",143,null],[12,"backing_pixel","","",143,null],[12,"save_under","","",143,null],[12,"colormap","","",143,null],[12,"map_installed","","",143,null],[12,"map_state","","",143,null],[12,"all_event_masks","","",143,null],[12,"your_event_mask","","",143,null],[12,"do_not_propagate_mask","","",143,null],[12,"override_redirect","","",143,null],[12,"screen","","",143,null],[3,"XWindowChanges","","",null,null],[12,"x","","",144,null],[12,"y","","",144,null],[12,"width","","",144,null],[12,"height","","",144,null],[12,"border_width","","",144,null],[12,"sibling","","",144,null],[12,"stack_mode","","",144,null],[3,"XWMHints","","",null,null],[12,"flags","","",145,null],[12,"input","","",145,null],[12,"initial_state","","",145,null],[12,"icon_pixmap","","",145,null],[12,"icon_window","","",145,null],[12,"icon_x","","",145,null],[12,"icon_y","","",145,null],[12,"icon_mask","","",145,null],[12,"window_group","","",145,null],[3,"AspectRatio","","",null,null],[12,"x","","",146,null],[12,"y","","",146,null],[3,"ClientMessageData","","",null,null],[3,"ImageFns","","",null,null],[12,"create_image","","",147,null],[12,"destroy_image","","",147,null],[12,"get_pixel","","",147,null],[12,"put_pixel","","",147,null],[12,"sub_image","","",147,null],[12,"add_pixel","","",147,null],[4,"_XDisplay","","",null,null],[4,"xError","","",null,null],[4,"xEvent","","",null,null],[4,"_XGC","","",null,null],[4,"_XIC","","",null,null],[4,"_XIM","","",null,null],[4,"_XRegion","","",null,null],[4,"_XOC","","",null,null],[4,"_XOM","","",null,null],[4,"_XrmHashBucketRec","","",null,null],[0,"xkb","","",null,null],[6,"Atom","","",null,null],[6,"Bool","","",null,null],[6,"Colormap","","",null,null],[6,"Cursor","","",null,null],[6,"Drawable","","",null,null],[6,"Font","","",null,null],[6,"GContext","","",null,null],[6,"KeyCode","","",null,null],[6,"KeySym","","",null,null],[6,"Mask","","",null,null],[6,"Pixmap","","",null,null],[6,"Status","","",null,null],[6,"Time","","",null,null],[6,"VisualID","","",null,null],[6,"Window","","",null,null],[6,"XID","","",null,null],[6,"XPointer","","",null,null],[6,"XEDataObject","","",null,null],[6,"Display","","",null,null],[6,"GC","","",null,null],[6,"Region","","",null,null],[6,"XcmsCCC","","",null,null],[6,"XcmsColorSpace","","",null,null],[6,"XcmsFunctionSet","","",null,null],[6,"XFontSet","","",null,null],[6,"XIC","","",null,null],[6,"XIM","","",null,null],[6,"XkbAction","","",null,null],[6,"XkbBoundsPtr","","",null,null],[6,"XkbChangesPtr","","",null,null],[6,"XkbClientMapPtr","","",null,null],[6,"XkbColorPtr","","",null,null],[6,"XkbCompatMapPtr","","",null,null],[6,"XkbComponentListPtr","","",null,null],[6,"XkbComponentNamesPtr","","",null,null],[6,"XkbControlsChangesPtr","","",null,null],[6,"XkbControlsNotifyEvent","","",null,null],[6,"XkbControlsPtr","","",null,null],[6,"XkbDescPtr","","",null,null],[6,"XkbDeviceChangesPtr","","",null,null],[6,"XkbDeviceInfoPtr","","",null,null],[6,"XkbDeviceLedInfoPtr","","",null,null],[6,"XkbDoodadPtr","","",null,null],[6,"XkbExtensionDeviceNotifyEvent","","",null,null],[6,"XkbGeometryPtr","","",null,null],[6,"XkbGeometrySizesPtr","","",null,null],[6,"XkbIndicatorMapPtr","","",null,null],[6,"XkbIndicatorMapRec","","",null,null],[6,"XkbIndicatorPtr","","",null,null],[6,"XkbKeyTypePtr","","",null,null],[6,"XkbMapChangesPtr","","",null,null],[6,"XkbMapNotifyEvent","","",null,null],[6,"XkbModsPtr","","",null,null],[6,"XkbModsRec","","",null,null],[6,"XkbNameChangesPtr","","",null,null],[6,"XkbNamesNotifyEvent","","",null,null],[6,"XkbNamesPtr","","",null,null],[6,"XkbKeyAliasPtr","","",null,null],[6,"XkbKeyNamePtr","","",null,null],[6,"XkbKeyPtr","","",null,null],[6,"XkbOutlinePtr","","",null,null],[6,"XkbOverlayKeyPtr","","",null,null],[6,"XkbOverlayPtr","","",null,null],[6,"XkbOverlayRowPtr","","",null,null],[6,"XkbPropertyPtr","","",null,null],[6,"XkbRowPtr","","",null,null],[6,"XkbSectionPtr","","",null,null],[6,"XkbServerMapPtr","","",null,null],[6,"XkbShapePtr","","",null,null],[6,"XkbStatePtr","","",null,null],[6,"XkbSymInterpretPtr","","",null,null],[6,"XOM","","",null,null],[6,"XrmDatabase","","",null,null],[6,"XrmOptionDescList","","",null,null],[6,"XConnectionWatchProc","","",null,null],[6,"XICCEncodingStyle","","",null,null],[6,"XOrientation","","",null,null],[6,"XrmBinding","","",null,null],[6,"XrmOptionKind","","",null,null],[6,"XButtonPressedEvent","","",null,null],[6,"XButtonReleasedEvent","","",null,null],[6,"XEnterWindowEvent","","",null,null],[6,"XLeaveWindowEvent","","",null,null],[6,"XFocusInEvent","","",null,null],[6,"XFocusOutEvent","","",null,null],[6,"XKeyPressedEvent","","",null,null],[6,"XKeyReleasedEvent","","",null,null],[6,"XPointerMovedEvent","","",null,null],[17,"AllocNone","","",null,null],[17,"AllocAll","","",null,null],[17,"XkbKeyNameLength","","",null,null],[17,"XkbNumIndicators","","",null,null],[17,"XkbNumKbdGroups","","",null,null],[17,"XkbNumVirtualMods","","",null,null],[17,"XA_PRIMARY","","",null,null],[17,"XA_SECONDARY","","",null,null],[17,"XA_ARC","","",null,null],[17,"XA_ATOM","","",null,null],[17,"XA_BITMAP","","",null,null],[17,"XA_CARDINAL","","",null,null],[17,"XA_COLORMAP","","",null,null],[17,"XA_CURSOR","","",null,null],[17,"XA_CUT_BUFFER0","","",null,null],[17,"XA_CUT_BUFFER1","","",null,null],[17,"XA_CUT_BUFFER2","","",null,null],[17,"XA_CUT_BUFFER3","","",null,null],[17,"XA_CUT_BUFFER4","","",null,null],[17,"XA_CUT_BUFFER5","","",null,null],[17,"XA_CUT_BUFFER6","","",null,null],[17,"XA_CUT_BUFFER7","","",null,null],[17,"XA_DRAWABLE","","",null,null],[17,"XA_FONT","","",null,null],[17,"XA_INTEGER","","",null,null],[17,"XA_PIXMAP","","",null,null],[17,"XA_POINT","","",null,null],[17,"XA_RECTANGLE","","",null,null],[17,"XA_RESOURCE_MANAGER","","",null,null],[17,"XA_RGB_COLOR_MAP","","",null,null],[17,"XA_RGB_BEST_MAP","","",null,null],[17,"XA_RGB_BLUE_MAP","","",null,null],[17,"XA_RGB_DEFAULT_MAP","","",null,null],[17,"XA_RGB_GRAY_MAP","","",null,null],[17,"XA_RGB_GREEN_MAP","","",null,null],[17,"XA_RGB_RED_MAP","","",null,null],[17,"XA_STRING","","",null,null],[17,"XA_VISUALID","","",null,null],[17,"XA_WINDOW","","",null,null],[17,"XA_WM_COMMAND","","",null,null],[17,"XA_WM_HINTS","","",null,null],[17,"XA_WM_CLIENT_MACHINE","","",null,null],[17,"XA_WM_ICON_NAME","","",null,null],[17,"XA_WM_ICON_SIZE","","",null,null],[17,"XA_WM_NAME","","",null,null],[17,"XA_WM_NORMAL_HINTS","","",null,null],[17,"XA_WM_SIZE_HINTS","","",null,null],[17,"XA_WM_ZOOM_HINTS","","",null,null],[17,"XA_MIN_SPACE","","",null,null],[17,"XA_NORM_SPACE","","",null,null],[17,"XA_MAX_SPACE","","",null,null],[17,"XA_END_SPACE","","",null,null],[17,"XA_SUPERSCRIPT_X","","",null,null],[17,"XA_SUPERSCRIPT_Y","","",null,null],[17,"XA_SUBSCRIPT_X","","",null,null],[17,"XA_SUBSCRIPT_Y","","",null,null],[17,"XA_UNDERLINE_POSITION","","",null,null],[17,"XA_UNDERLINE_THICKNESS","","",null,null],[17,"XA_STRIKEOUT_ASCENT","","",null,null],[17,"XA_STRIKEOUT_DESCENT","","",null,null],[17,"XA_ITALIC_ANGLE","","",null,null],[17,"XA_X_HEIGHT","","",null,null],[17,"XA_QUAD_WIDTH","","",null,null],[17,"XA_WEIGHT","","",null,null],[17,"XA_POINT_SIZE","","",null,null],[17,"XA_RESOLUTION","","",null,null],[17,"XA_COPYRIGHT","","",null,null],[17,"XA_NOTICE","","",null,null],[17,"XA_FONT_NAME","","",null,null],[17,"XA_FAMILY_NAME","","",null,null],[17,"XA_FULL_NAME","","",null,null],[17,"XA_CAP_HEIGHT","","",null,null],[17,"XA_WM_CLASS","","",null,null],[17,"XA_WM_TRANSIENT_FOR","","",null,null],[17,"False","","",null,null],[17,"True","","",null,null],[17,"Unsorted","","",null,null],[17,"YSorted","","",null,null],[17,"YXSorted","","",null,null],[17,"YXBanded","","",null,null],[17,"DoRed","","",null,null],[17,"DoGreen","","",null,null],[17,"DoBlue","","",null,null],[17,"Success","","",null,null],[17,"BadRequest","","",null,null],[17,"BadValue","","",null,null],[17,"BadWindow","","",null,null],[17,"BadPixmap","","",null,null],[17,"BadAtom","","",null,null],[17,"BadCursor","","",null,null],[17,"BadFont","","",null,null],[17,"BadMatch","","",null,null],[17,"BadDrawable","","",null,null],[17,"BadAccess","","",null,null],[17,"BadAlloc","","",null,null],[17,"BadColor","","",null,null],[17,"BadGC","","",null,null],[17,"BadIDChoice","","",null,null],[17,"BadName","","",null,null],[17,"BadLength","","",null,null],[17,"BadImplementation","","",null,null],[17,"FirstExtensionError","","",null,null],[17,"LastExtensionError","","",null,null],[17,"KeyPress","","",null,null],[17,"KeyRelease","","",null,null],[17,"ButtonPress","","",null,null],[17,"ButtonRelease","","",null,null],[17,"MotionNotify","","",null,null],[17,"EnterNotify","","",null,null],[17,"LeaveNotify","","",null,null],[17,"FocusIn","","",null,null],[17,"FocusOut","","",null,null],[17,"KeymapNotify","","",null,null],[17,"Expose","","",null,null],[17,"GraphicsExpose","","",null,null],[17,"NoExpose","","",null,null],[17,"VisibilityNotify","","",null,null],[17,"CreateNotify","","",null,null],[17,"DestroyNotify","","",null,null],[17,"UnmapNotify","","",null,null],[17,"MapNotify","","",null,null],[17,"MapRequest","","",null,null],[17,"ReparentNotify","","",null,null],[17,"ConfigureNotify","","",null,null],[17,"ConfigureRequest","","",null,null],[17,"GravityNotify","","",null,null],[17,"ResizeRequest","","",null,null],[17,"CirculateNotify","","",null,null],[17,"CirculateRequest","","",null,null],[17,"PropertyNotify","","",null,null],[17,"SelectionClear","","",null,null],[17,"SelectionRequest","","",null,null],[17,"SelectionNotify","","",null,null],[17,"ColormapNotify","","",null,null],[17,"ClientMessage","","",null,null],[17,"MappingNotify","","",null,null],[17,"GenericEvent","","",null,null],[17,"LASTEvent","","",null,null],[17,"NoEventMask","","",null,null],[17,"KeyPressMask","","",null,null],[17,"KeyReleaseMask","","",null,null],[17,"ButtonPressMask","","",null,null],[17,"ButtonReleaseMask","","",null,null],[17,"EnterWindowMask","","",null,null],[17,"LeaveWindowMask","","",null,null],[17,"PointerMotionMask","","",null,null],[17,"PointerMotionHintMask","","",null,null],[17,"Button1MotionMask","","",null,null],[17,"Button2MotionMask","","",null,null],[17,"Button3MotionMask","","",null,null],[17,"Button4MotionMask","","",null,null],[17,"Button5MotionMask","","",null,null],[17,"ButtonMotionMask","","",null,null],[17,"KeymapStateMask","","",null,null],[17,"ExposureMask","","",null,null],[17,"VisibilityChangeMask","","",null,null],[17,"StructureNotifyMask","","",null,null],[17,"ResizeRedirectMask","","",null,null],[17,"SubstructureNotifyMask","","",null,null],[17,"SubstructureRedirectMask","","",null,null],[17,"FocusChangeMask","","",null,null],[17,"PropertyChangeMask","","",null,null],[17,"ColormapChangeMask","","",null,null],[17,"OwnerGrabButtonMask","","",null,null],[17,"PropModeReplace","","",null,null],[17,"PropModePrepend","","",null,null],[17,"PropModeAppend","","",null,null],[17,"ShiftMapIndex","","",null,null],[17,"LockMapIndex","","",null,null],[17,"ControlMapIndex","","",null,null],[17,"Mod1MapIndex","","",null,null],[17,"Mod2MapIndex","","",null,null],[17,"Mod3MapIndex","","",null,null],[17,"Mod4MapIndex","","",null,null],[17,"Mod5MapIndex","","",null,null],[17,"Button1Mask","","",null,null],[17,"Button2Mask","","",null,null],[17,"Button3Mask","","",null,null],[17,"Button4Mask","","",null,null],[17,"Button5Mask","","",null,null],[17,"AnyModifier","","",null,null],[17,"NotifyNormal","","",null,null],[17,"NotifyGrab","","",null,null],[17,"NotifyUngrab","","",null,null],[17,"NotifyWhileGrabbed","","",null,null],[17,"NotifyHint","","",null,null],[17,"NotifyAncestor","","",null,null],[17,"NotifyVirtual","","",null,null],[17,"NotifyInferior","","",null,null],[17,"NotifyNonlinear","","",null,null],[17,"NotifyNonlinearVirtual","","",null,null],[17,"NotifyPointer","","",null,null],[17,"NotifyPointerRoot","","",null,null],[17,"NotifyDetailNone","","",null,null],[17,"VisibilityUnobscured","","",null,null],[17,"VisibilityPartiallyObscured","","",null,null],[17,"VisibilityFullyObscured","","",null,null],[17,"PlaceOnTop","","",null,null],[17,"PlaceOnBottom","","",null,null],[17,"FamilyInternet","","",null,null],[17,"FamilyDECnet","","",null,null],[17,"FamilyChaos","","",null,null],[17,"FamilyInternet6","","",null,null],[17,"FamilyServerInterpreted","","",null,null],[17,"PropertyNewValue","","",null,null],[17,"PropertyDelete","","",null,null],[17,"ColormapUninstalled","","",null,null],[17,"ColormapInstalled","","",null,null],[17,"GrabModeSync","","",null,null],[17,"GrabModeAsync","","",null,null],[17,"GrabSuccess","","",null,null],[17,"AlreadyGrabbed","","",null,null],[17,"GrabInvalidTime","","",null,null],[17,"GrabNotViewable","","",null,null],[17,"GrabFrozen","","",null,null],[17,"AsyncPointer","","",null,null],[17,"SyncPointer","","",null,null],[17,"ReplayPointer","","",null,null],[17,"AsyncKeyboard","","",null,null],[17,"SyncKeyboard","","",null,null],[17,"ReplayKeyboard","","",null,null],[17,"AsyncBoth","","",null,null],[17,"SyncBoth","","",null,null],[17,"RevertToNone","","",null,null],[17,"RevertToPointerRoot","","",null,null],[17,"RevertToParent","","",null,null],[17,"CWX","","",null,null],[17,"CWY","","",null,null],[17,"CWWidth","","",null,null],[17,"CWHeight","","",null,null],[17,"CWBorderWidth","","",null,null],[17,"CWSibling","","",null,null],[17,"CWStackMode","","",null,null],[17,"ForgetGravity","","",null,null],[17,"UnmapGravity","","",null,null],[17,"NorthWestGravity","","",null,null],[17,"NorthGravity","","",null,null],[17,"NorthEastGravity","","",null,null],[17,"WestGravity","","",null,null],[17,"CenterGravity","","",null,null],[17,"EastGravity","","",null,null],[17,"SouthWestGravity","","",null,null],[17,"SouthGravity","","",null,null],[17,"SouthEastGravity","","",null,null],[17,"StaticGravity","","",null,null],[17,"XYBitmap","","",null,null],[17,"XYPixmap","","",null,null],[17,"ZPixmap","","",null,null],[17,"NotUseful","","",null,null],[17,"WhenMapped","","",null,null],[17,"Always","","",null,null],[17,"IsUnmapped","","",null,null],[17,"IsUnviewable","","",null,null],[17,"IsViewable","","",null,null],[17,"ShiftMask","","",null,null],[17,"LockMask","","",null,null],[17,"ControlMask","","",null,null],[17,"Mod1Mask","","",null,null],[17,"Mod2Mask","","",null,null],[17,"Mod3Mask","","",null,null],[17,"Mod4Mask","","",null,null],[17,"Mod5Mask","","",null,null],[17,"Button1","","",null,null],[17,"Button2","","",null,null],[17,"Button3","","",null,null],[17,"Button4","","",null,null],[17,"Button5","","",null,null],[17,"USPosition","","",null,null],[17,"USSize","","",null,null],[17,"PPosition","","",null,null],[17,"PSize","","",null,null],[17,"PMinSize","","",null,null],[17,"PMaxSize","","",null,null],[17,"PResizeInc","","",null,null],[17,"PAspect","","",null,null],[17,"PBaseSize","","",null,null],[17,"PWinGravity","","",null,null],[17,"PAllHints","","",null,null],[17,"SetModeInsert","","",null,null],[17,"SetModeDelete","","",null,null],[17,"DestroyAll","","",null,null],[17,"RetainPermanent","","",null,null],[17,"RetainTemporary","","",null,null],[17,"Above","","",null,null],[17,"Below","","",null,null],[17,"TopIf","","",null,null],[17,"BottomIf","","",null,null],[17,"Opposite","","",null,null],[17,"RaiseLowest","","",null,null],[17,"LowerHighest","","",null,null],[17,"GXclear","","",null,null],[17,"GXand","","",null,null],[17,"GXandReverse","","",null,null],[17,"GXcopy","","",null,null],[17,"GXandInverted","","",null,null],[17,"GXnoop","","",null,null],[17,"GXxor","","",null,null],[17,"GXor","","",null,null],[17,"GXnor","","",null,null],[17,"GXequiv","","",null,null],[17,"GXinvert","","",null,null],[17,"GXorReverse","","",null,null],[17,"GXcopyInverted","","",null,null],[17,"GXorInverted","","",null,null],[17,"GXnand","","",null,null],[17,"GXset","","",null,null],[17,"LineSolid","","",null,null],[17,"LineOnOffDash","","",null,null],[17,"LineDoubleDash","","",null,null],[17,"CapNotLast","","",null,null],[17,"CapButt","","",null,null],[17,"CapRound","","",null,null],[17,"CapProjecting","","",null,null],[17,"JoinMiter","","",null,null],[17,"JoinRound","","",null,null],[17,"JoinBevel","","",null,null],[17,"FillSolid","","",null,null],[17,"FillTiled","","",null,null],[17,"FillStippled","","",null,null],[17,"FillOpaqueStippled","","",null,null],[17,"EvenOddRule","","",null,null],[17,"WindingRule","","",null,null],[17,"ClipByChildren","","",null,null],[17,"IncludeInferiors","","",null,null],[17,"CoordModeOrigin","","",null,null],[17,"CoordModePrevious","","",null,null],[17,"Complex","","",null,null],[17,"Nonconvex","","",null,null],[17,"Convex","","",null,null],[17,"ArcChord","","",null,null],[17,"ArcPieSlice","","",null,null],[17,"GCFunction","","",null,null],[17,"GCPlaneMask","","",null,null],[17,"GCForeground","","",null,null],[17,"GCBackground","","",null,null],[17,"GCLineWidth","","",null,null],[17,"GCLineStyle","","",null,null],[17,"GCCapStyle","","",null,null],[17,"GCJoinStyle","","",null,null],[17,"GCFillStyle","","",null,null],[17,"GCFillRule","","",null,null],[17,"GCTile","","",null,null],[17,"GCStipple","","",null,null],[17,"GCTileStipXOrigin","","",null,null],[17,"GCTileStipYOrigin","","",null,null],[17,"GCFont","","",null,null],[17,"GCSubwindowMode","","",null,null],[17,"GCGraphicsExposures","","",null,null],[17,"GCClipXOrigin","","",null,null],[17,"GCClipYOrigin","","",null,null],[17,"GCClipMask","","",null,null],[17,"GCDashOffset","","",null,null],[17,"GCDashList","","",null,null],[17,"GCArcMode","","",null,null],[17,"GCLastBit","","",null,null],[17,"FontLeftToRight","","",null,null],[17,"FontRightToLeft","","",null,null],[17,"FontChange","","",null,null],[17,"CursorShape","","",null,null],[17,"TileShape","","",null,null],[17,"StippleShape","","",null,null],[17,"AutoRepeatModeOff","","",null,null],[17,"AutoRepeatModeOn","","",null,null],[17,"AutoRepeatModeDefault","","",null,null],[17,"LedModeOff","","",null,null],[17,"LedModeOn","","",null,null],[17,"KBKeyClickPercent","","",null,null],[17,"KBBellPercent","","",null,null],[17,"KBBellPitch","","",null,null],[17,"KBBellDuration","","",null,null],[17,"KBLed","","",null,null],[17,"KBLedMode","","",null,null],[17,"KBKey","","",null,null],[17,"KBAutoRepeatMode","","",null,null],[17,"MappingSuccess","","",null,null],[17,"MappingBusy","","",null,null],[17,"MappingFailed","","",null,null],[17,"MappingModifier","","",null,null],[17,"MappingKeyboard","","",null,null],[17,"MappingPointer","","",null,null],[17,"DontPreferBlanking","","",null,null],[17,"PreferBlanking","","",null,null],[17,"DefaultBlanking","","",null,null],[17,"DisableScreenSaver","","",null,null],[17,"DisableScreenInterval","","",null,null],[17,"DontAllowExposures","","",null,null],[17,"AllowExposures","","",null,null],[17,"DefaultExposures","","",null,null],[17,"ScreenSaverReset","","",null,null],[17,"ScreenSaverActive","","",null,null],[17,"HostInsert","","",null,null],[17,"HostDelete","","",null,null],[17,"EnableAccess","","",null,null],[17,"DisableAccess","","",null,null],[17,"StaticGray","","",null,null],[17,"GrayScale","","",null,null],[17,"StaticColor","","",null,null],[17,"PseudoColor","","",null,null],[17,"TrueColor","","",null,null],[17,"DirectColor","","",null,null],[17,"VisualNoMask","","",null,null],[17,"VisualIDMask","","",null,null],[17,"VisualScreenMask","","",null,null],[17,"VisualDepthMask","","",null,null],[17,"VisualClassMask","","",null,null],[17,"VisualRedMaskMask","","",null,null],[17,"VisualGreenMaskMask","","",null,null],[17,"VisualBlueMaskMask","","",null,null],[17,"VisualColormapSizeMask","","",null,null],[17,"VisualBitsPerRGBMask","","",null,null],[17,"VisualAllMask","","",null,null],[17,"CWBackPixmap","","",null,null],[17,"CWBackPixel","","",null,null],[17,"CWBorderPixmap","","",null,null],[17,"CWBorderPixel","","",null,null],[17,"CWBitGravity","","",null,null],[17,"CWWinGravity","","",null,null],[17,"CWBackingStore","","",null,null],[17,"CWBackingPlanes","","",null,null],[17,"CWBackingPixel","","",null,null],[17,"CWOverrideRedirect","","",null,null],[17,"CWSaveUnder","","",null,null],[17,"CWEventMask","","",null,null],[17,"CWDontPropagate","","",null,null],[17,"CWColormap","","",null,null],[17,"CWCursor","","",null,null],[17,"InputOutput","","",null,null],[17,"InputOnly","","",null,null],[17,"XIMPreeditArea","","",null,null],[17,"XIMPreeditCallbacks","","",null,null],[17,"XIMPreeditPosition","","",null,null],[17,"XIMPreeditNothing","","",null,null],[17,"XIMPreeditNone","","",null,null],[17,"XIMStatusArea","","",null,null],[17,"XIMStatusCallbacks","","",null,null],[17,"XIMStatusNothing","","",null,null],[17,"XIMStatusNone","","",null,null],[17,"LSBFirst","","",null,null],[17,"MSBFirst","","",null,null],[17,"ParentRelative","","",null,null],[17,"CopyFromParent","","",null,null],[17,"PointerWindow","","",null,null],[17,"InputFocus","","",null,null],[17,"PointerRoot","","",null,null],[17,"AnyPropertyType","","",null,null],[17,"AnyKey","","",null,null],[17,"AnyButton","","",null,null],[17,"AllTemporary","","",null,null],[17,"CurrentTime","","",null,null],[17,"NoSymbol","","",null,null],[17,"X_PROTOCOL","","",null,null],[17,"X_PROTOCOL_REVISION","","",null,null],[17,"XNVaNestedList","","",null,null],[17,"XNQueryInputStyle","","",null,null],[17,"XNClientWindow","","",null,null],[17,"XNInputStyle","","",null,null],[17,"XNFocusWindow","","",null,null],[17,"XNResourceName","","",null,null],[17,"XNResourceClass","","",null,null],[17,"XNGeometryCallback","","",null,null],[17,"XNDestroyCallback","","",null,null],[17,"XNFilterEvents","","",null,null],[17,"XNPreeditStartCallback","","",null,null],[17,"XNPreeditDoneCallback","","",null,null],[17,"XNPreeditDrawCallback","","",null,null],[17,"XNPreeditCaretCallback","","",null,null],[17,"XNPreeditStateNotifyCallback","","",null,null],[17,"XNPreeditAttributes","","",null,null],[17,"XNStatusStartCallback","","",null,null],[17,"XNStatusDoneCallback","","",null,null],[17,"XNStatusDrawCallback","","",null,null],[17,"XNStatusAttributes","","",null,null],[17,"XNArea","","",null,null],[17,"XNAreaNeeded","","",null,null],[17,"XNSpotLocation","","",null,null],[17,"XNColormap","","",null,null],[17,"XNStdColormap","","",null,null],[17,"XNForeground","","",null,null],[17,"XNBackground","","",null,null],[17,"XNBackgroundPixmap","","",null,null],[17,"XNFontSet","","",null,null],[17,"XNLineSpace","","",null,null],[17,"XNCursor","","",null,null],[17,"XNQueryIMValuesList","","",null,null],[17,"XNQueryICValuesList","","",null,null],[17,"XNVisiblePosition","","",null,null],[17,"XNR6PreeditCallback","","",null,null],[17,"XNStringConversionCallback","","",null,null],[17,"XNStringConversion","","",null,null],[17,"XNResetState","","",null,null],[17,"XNHotKey","","",null,null],[17,"XNHotKeyState","","",null,null],[17,"XNPreeditState","","",null,null],[17,"XNSeparatorofNestedList","","",null,null],[17,"XBufferOverflow","","",null,null],[17,"XLookupNone","","",null,null],[17,"XLookupChars","","",null,null],[17,"XLookupKeySym","","",null,null],[17,"XLookupBoth","","",null,null],[11,"open","","",64,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"xevent"},{"name":"xevent"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"xevent"},{"name":"xevent"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"xevent"}],"output":{"name":"xevent"}}],[11,"get_type","","",65,{"inputs":[{"name":"xevent"}],"output":{"name":"c_int"}}],[11,"from","","",65,{"inputs":[{"name":"xanyevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xbuttonevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xcirculateevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xcirculaterequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xclientmessageevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xcolormapevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xconfigureevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xconfigurerequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xcreatewindowevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xcrossingevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xdestroywindowevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xerrorevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xfocuschangeevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xgraphicsexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xgravityevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xkeyevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xkeymapevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xmapevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xmappingevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xmotionevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xnoexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xpropertyevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xreparentevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xresizerequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xselectionclearevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xselectionevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xselectionrequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xunmapevent"}],"output":{"name":"xevent"}}],[11,"from","","",65,{"inputs":[{"name":"xvisibilityevent"}],"output":{"name":"xevent"}}],[11,"eq","","",66,{"inputs":[{"name":"xanyevent"},{"name":"xanyevent"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"xanyevent"},{"name":"xanyevent"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"xanyevent"}],"output":{"name":"xanyevent"}}],[11,"from","","",66,{"inputs":[{"name":"xevent"}],"output":{"name":"xanyevent"}}],[11,"eq","","",67,{"inputs":[{"name":"xbuttonevent"},{"name":"xbuttonevent"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"xbuttonevent"},{"name":"xbuttonevent"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"xbuttonevent"}],"output":{"name":"xbuttonevent"}}],[11,"from","","",67,{"inputs":[{"name":"xevent"}],"output":{"name":"xbuttonevent"}}],[11,"eq","","",68,{"inputs":[{"name":"xcirculateevent"},{"name":"xcirculateevent"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"xcirculateevent"},{"name":"xcirculateevent"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"xcirculateevent"}],"output":{"name":"xcirculateevent"}}],[11,"from","","",68,{"inputs":[{"name":"xevent"}],"output":{"name":"xcirculateevent"}}],[11,"eq","","",69,{"inputs":[{"name":"xcirculaterequestevent"},{"name":"xcirculaterequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"xcirculaterequestevent"},{"name":"xcirculaterequestevent"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"xcirculaterequestevent"}],"output":{"name":"xcirculaterequestevent"}}],[11,"from","","",69,{"inputs":[{"name":"xevent"}],"output":{"name":"xcirculaterequestevent"}}],[11,"eq","","",70,{"inputs":[{"name":"xclientmessageevent"},{"name":"xclientmessageevent"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"xclientmessageevent"},{"name":"xclientmessageevent"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"xclientmessageevent"}],"output":{"name":"xclientmessageevent"}}],[11,"from","","",70,{"inputs":[{"name":"xevent"}],"output":{"name":"xclientmessageevent"}}],[11,"eq","","",71,{"inputs":[{"name":"xcolormapevent"},{"name":"xcolormapevent"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"xcolormapevent"},{"name":"xcolormapevent"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"xcolormapevent"}],"output":{"name":"xcolormapevent"}}],[11,"from","","",71,{"inputs":[{"name":"xevent"}],"output":{"name":"xcolormapevent"}}],[11,"eq","","",72,{"inputs":[{"name":"xconfigureevent"},{"name":"xconfigureevent"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"xconfigureevent"},{"name":"xconfigureevent"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"xconfigureevent"}],"output":{"name":"xconfigureevent"}}],[11,"from","","",72,{"inputs":[{"name":"xevent"}],"output":{"name":"xconfigureevent"}}],[11,"eq","","",73,{"inputs":[{"name":"xconfigurerequestevent"},{"name":"xconfigurerequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"xconfigurerequestevent"},{"name":"xconfigurerequestevent"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"xconfigurerequestevent"}],"output":{"name":"xconfigurerequestevent"}}],[11,"from","","",73,{"inputs":[{"name":"xevent"}],"output":{"name":"xconfigurerequestevent"}}],[11,"eq","","",74,{"inputs":[{"name":"xcreatewindowevent"},{"name":"xcreatewindowevent"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"xcreatewindowevent"},{"name":"xcreatewindowevent"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"xcreatewindowevent"}],"output":{"name":"xcreatewindowevent"}}],[11,"from","","",74,{"inputs":[{"name":"xevent"}],"output":{"name":"xcreatewindowevent"}}],[11,"eq","","",75,{"inputs":[{"name":"xcrossingevent"},{"name":"xcrossingevent"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"xcrossingevent"},{"name":"xcrossingevent"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"xcrossingevent"}],"output":{"name":"xcrossingevent"}}],[11,"from","","",75,{"inputs":[{"name":"xevent"}],"output":{"name":"xcrossingevent"}}],[11,"eq","","",76,{"inputs":[{"name":"xdestroywindowevent"},{"name":"xdestroywindowevent"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"xdestroywindowevent"},{"name":"xdestroywindowevent"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"xdestroywindowevent"}],"output":{"name":"xdestroywindowevent"}}],[11,"from","","",76,{"inputs":[{"name":"xevent"}],"output":{"name":"xdestroywindowevent"}}],[11,"eq","","",77,{"inputs":[{"name":"xerrorevent"},{"name":"xerrorevent"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"xerrorevent"},{"name":"xerrorevent"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"xerrorevent"}],"output":{"name":"xerrorevent"}}],[11,"from","","",77,{"inputs":[{"name":"xevent"}],"output":{"name":"xerrorevent"}}],[11,"eq","","",78,{"inputs":[{"name":"xexposeevent"},{"name":"xexposeevent"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"xexposeevent"},{"name":"xexposeevent"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"xexposeevent"}],"output":{"name":"xexposeevent"}}],[11,"from","","",78,{"inputs":[{"name":"xevent"}],"output":{"name":"xexposeevent"}}],[11,"eq","","",79,{"inputs":[{"name":"xfocuschangeevent"},{"name":"xfocuschangeevent"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"xfocuschangeevent"},{"name":"xfocuschangeevent"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"xfocuschangeevent"}],"output":{"name":"xfocuschangeevent"}}],[11,"from","","",79,{"inputs":[{"name":"xevent"}],"output":{"name":"xfocuschangeevent"}}],[11,"eq","","",80,{"inputs":[{"name":"xgraphicsexposeevent"},{"name":"xgraphicsexposeevent"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"xgraphicsexposeevent"},{"name":"xgraphicsexposeevent"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"xgraphicsexposeevent"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"from","","",80,{"inputs":[{"name":"xevent"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"eq","","",81,{"inputs":[{"name":"xgravityevent"},{"name":"xgravityevent"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"xgravityevent"},{"name":"xgravityevent"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"xgravityevent"}],"output":{"name":"xgravityevent"}}],[11,"from","","",81,{"inputs":[{"name":"xevent"}],"output":{"name":"xgravityevent"}}],[11,"eq","","",82,{"inputs":[{"name":"xkeyevent"},{"name":"xkeyevent"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"xkeyevent"},{"name":"xkeyevent"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"xkeyevent"}],"output":{"name":"xkeyevent"}}],[11,"from","","",82,{"inputs":[{"name":"xevent"}],"output":{"name":"xkeyevent"}}],[11,"eq","","",83,{"inputs":[{"name":"xkeymapevent"},{"name":"xkeymapevent"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"xkeymapevent"},{"name":"xkeymapevent"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"xkeymapevent"}],"output":{"name":"xkeymapevent"}}],[11,"from","","",83,{"inputs":[{"name":"xevent"}],"output":{"name":"xkeymapevent"}}],[11,"eq","","",84,{"inputs":[{"name":"xmapevent"},{"name":"xmapevent"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"xmapevent"},{"name":"xmapevent"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"xmapevent"}],"output":{"name":"xmapevent"}}],[11,"from","","",84,{"inputs":[{"name":"xevent"}],"output":{"name":"xmapevent"}}],[11,"eq","","",85,{"inputs":[{"name":"xmappingevent"},{"name":"xmappingevent"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"xmappingevent"},{"name":"xmappingevent"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"xmappingevent"}],"output":{"name":"xmappingevent"}}],[11,"from","","",85,{"inputs":[{"name":"xevent"}],"output":{"name":"xmappingevent"}}],[11,"eq","","",86,{"inputs":[{"name":"xmaprequestevent"},{"name":"xmaprequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"xmaprequestevent"},{"name":"xmaprequestevent"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"xmaprequestevent"}],"output":{"name":"xmaprequestevent"}}],[11,"from","","",86,{"inputs":[{"name":"xevent"}],"output":{"name":"xmaprequestevent"}}],[11,"eq","","",87,{"inputs":[{"name":"xmotionevent"},{"name":"xmotionevent"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"xmotionevent"},{"name":"xmotionevent"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"xmotionevent"}],"output":{"name":"xmotionevent"}}],[11,"from","","",87,{"inputs":[{"name":"xevent"}],"output":{"name":"xmotionevent"}}],[11,"eq","","",88,{"inputs":[{"name":"xnoexposeevent"},{"name":"xnoexposeevent"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"xnoexposeevent"},{"name":"xnoexposeevent"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"xnoexposeevent"}],"output":{"name":"xnoexposeevent"}}],[11,"from","","",88,{"inputs":[{"name":"xevent"}],"output":{"name":"xnoexposeevent"}}],[11,"eq","","",89,{"inputs":[{"name":"xpropertyevent"},{"name":"xpropertyevent"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"xpropertyevent"},{"name":"xpropertyevent"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"xpropertyevent"}],"output":{"name":"xpropertyevent"}}],[11,"from","","",89,{"inputs":[{"name":"xevent"}],"output":{"name":"xpropertyevent"}}],[11,"eq","","",90,{"inputs":[{"name":"xreparentevent"},{"name":"xreparentevent"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"xreparentevent"},{"name":"xreparentevent"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"xreparentevent"}],"output":{"name":"xreparentevent"}}],[11,"from","","",90,{"inputs":[{"name":"xevent"}],"output":{"name":"xreparentevent"}}],[11,"eq","","",91,{"inputs":[{"name":"xresizerequestevent"},{"name":"xresizerequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"xresizerequestevent"},{"name":"xresizerequestevent"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"xresizerequestevent"}],"output":{"name":"xresizerequestevent"}}],[11,"from","","",91,{"inputs":[{"name":"xevent"}],"output":{"name":"xresizerequestevent"}}],[11,"eq","","",92,{"inputs":[{"name":"xselectionclearevent"},{"name":"xselectionclearevent"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"xselectionclearevent"},{"name":"xselectionclearevent"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"xselectionclearevent"}],"output":{"name":"xselectionclearevent"}}],[11,"from","","",92,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionclearevent"}}],[11,"eq","","",93,{"inputs":[{"name":"xselectionevent"},{"name":"xselectionevent"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"xselectionevent"},{"name":"xselectionevent"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"xselectionevent"}],"output":{"name":"xselectionevent"}}],[11,"from","","",93,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionevent"}}],[11,"eq","","",94,{"inputs":[{"name":"xselectionrequestevent"},{"name":"xselectionrequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"xselectionrequestevent"},{"name":"xselectionrequestevent"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"xselectionrequestevent"}],"output":{"name":"xselectionrequestevent"}}],[11,"from","","",94,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionrequestevent"}}],[11,"eq","","",95,{"inputs":[{"name":"xunmapevent"},{"name":"xunmapevent"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"xunmapevent"},{"name":"xunmapevent"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"xunmapevent"}],"output":{"name":"xunmapevent"}}],[11,"from","","",95,{"inputs":[{"name":"xevent"}],"output":{"name":"xunmapevent"}}],[11,"eq","","",96,{"inputs":[{"name":"xvisibilityevent"},{"name":"xvisibilityevent"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"xvisibilityevent"},{"name":"xvisibilityevent"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"xvisibilityevent"}],"output":{"name":"xvisibilityevent"}}],[11,"from","","",96,{"inputs":[{"name":"xevent"}],"output":{"name":"xvisibilityevent"}}],[11,"eq","","",98,{"inputs":[{"name":"_xkbdesc"},{"name":"_xkbdesc"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"_xkbdesc"},{"name":"_xkbdesc"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"_xkbdesc"}],"output":{"name":"_xkbdesc"}}],[11,"eq","","",100,{"inputs":[{"name":"_xkbkeyaliasrec"},{"name":"_xkbkeyaliasrec"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"_xkbkeyaliasrec"},{"name":"_xkbkeyaliasrec"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"_xkbkeyaliasrec"}],"output":{"name":"_xkbkeyaliasrec"}}],[11,"eq","","",101,{"inputs":[{"name":"_xkbkeynamerec"},{"name":"_xkbkeynamerec"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"_xkbkeynamerec"},{"name":"_xkbkeynamerec"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"_xkbkeynamerec"}],"output":{"name":"_xkbkeynamerec"}}],[11,"eq","","",102,{"inputs":[{"name":"_xkbnamesrec"},{"name":"_xkbnamesrec"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"_xkbnamesrec"},{"name":"_xkbnamesrec"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"_xkbnamesrec"}],"output":{"name":"_xkbnamesrec"}}],[11,"eq","","",103,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"eq","","",104,{"inputs":[{"name":"screen"},{"name":"screen"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"screen"},{"name":"screen"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"screen"}],"output":{"name":"screen"}}],[11,"eq","","",105,{"inputs":[{"name":"screenformat"},{"name":"screenformat"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"screenformat"},{"name":"screenformat"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"screenformat"}],"output":{"name":"screenformat"}}],[11,"eq","","",106,{"inputs":[{"name":"visual"},{"name":"visual"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"visual"},{"name":"visual"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"visual"}],"output":{"name":"visual"}}],[11,"eq","","",107,{"inputs":[{"name":"xarc"},{"name":"xarc"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"xarc"},{"name":"xarc"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"xarc"}],"output":{"name":"xarc"}}],[11,"eq","","",108,{"inputs":[{"name":"xchar2b"},{"name":"xchar2b"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"xchar2b"},{"name":"xchar2b"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"xchar2b"}],"output":{"name":"xchar2b"}}],[11,"eq","","",109,{"inputs":[{"name":"xcharstruct"},{"name":"xcharstruct"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"xcharstruct"},{"name":"xcharstruct"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"xcharstruct"}],"output":{"name":"xcharstruct"}}],[11,"eq","","",110,{"inputs":[{"name":"xclasshint"},{"name":"xclasshint"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"xclasshint"},{"name":"xclasshint"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"xclasshint"}],"output":{"name":"xclasshint"}}],[11,"eq","","",111,{"inputs":[{"name":"xcolor"},{"name":"xcolor"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"xcolor"},{"name":"xcolor"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"xcolor"}],"output":{"name":"xcolor"}}],[11,"eq","","",112,{"inputs":[{"name":"xcomposestatus"},{"name":"xcomposestatus"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"xcomposestatus"},{"name":"xcomposestatus"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"xcomposestatus"}],"output":{"name":"xcomposestatus"}}],[11,"eq","","",113,{"inputs":[{"name":"xextcodes"},{"name":"xextcodes"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"xextcodes"},{"name":"xextcodes"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"xextcodes"}],"output":{"name":"xextcodes"}}],[11,"eq","","",115,{"inputs":[{"name":"xfontprop"},{"name":"xfontprop"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"xfontprop"},{"name":"xfontprop"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"xfontprop"}],"output":{"name":"xfontprop"}}],[11,"eq","","",116,{"inputs":[{"name":"xfontsetextents"},{"name":"xfontsetextents"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"xfontsetextents"},{"name":"xfontsetextents"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"xfontsetextents"}],"output":{"name":"xfontsetextents"}}],[11,"eq","","",117,{"inputs":[{"name":"xfontstruct"},{"name":"xfontstruct"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"xfontstruct"},{"name":"xfontstruct"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"xfontstruct"}],"output":{"name":"xfontstruct"}}],[11,"eq","","",118,{"inputs":[{"name":"xgcvalues"},{"name":"xgcvalues"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"xgcvalues"},{"name":"xgcvalues"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"xgcvalues"}],"output":{"name":"xgcvalues"}}],[11,"eq","","",119,{"inputs":[{"name":"xgenericeventcookie"},{"name":"xgenericeventcookie"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"xgenericeventcookie"},{"name":"xgenericeventcookie"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"xgenericeventcookie"}],"output":{"name":"xgenericeventcookie"}}],[11,"from","","",119,{"inputs":[{"name":"xevent"}],"output":{"name":"xgenericeventcookie"}}],[11,"eq","","",120,{"inputs":[{"name":"xhostaddress"},{"name":"xhostaddress"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"xhostaddress"},{"name":"xhostaddress"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"xhostaddress"}],"output":{"name":"xhostaddress"}}],[11,"eq","","",121,{"inputs":[{"name":"xiconsize"},{"name":"xiconsize"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"xiconsize"},{"name":"xiconsize"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"xiconsize"}],"output":{"name":"xiconsize"}}],[11,"eq","","",122,{"inputs":[{"name":"ximage"},{"name":"ximage"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"ximage"},{"name":"ximage"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"ximage"}],"output":{"name":"ximage"}}],[11,"eq","","",123,{"inputs":[{"name":"xkeyboardcontrol"},{"name":"xkeyboardcontrol"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"xkeyboardcontrol"},{"name":"xkeyboardcontrol"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"xkeyboardcontrol"}],"output":{"name":"xkeyboardcontrol"}}],[11,"eq","","",124,{"inputs":[{"name":"xkeyboardstate"},{"name":"xkeyboardstate"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"xkeyboardstate"},{"name":"xkeyboardstate"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"xkeyboardstate"}],"output":{"name":"xkeyboardstate"}}],[11,"eq","","",125,{"inputs":[{"name":"xmbtextitem"},{"name":"xmbtextitem"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"xmbtextitem"},{"name":"xmbtextitem"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"xmbtextitem"}],"output":{"name":"xmbtextitem"}}],[11,"eq","","",126,{"inputs":[{"name":"xmodifierkeymap"},{"name":"xmodifierkeymap"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"xmodifierkeymap"},{"name":"xmodifierkeymap"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"xmodifierkeymap"}],"output":{"name":"xmodifierkeymap"}}],[11,"eq","","",127,{"inputs":[{"name":"xomcharsetlist"},{"name":"xomcharsetlist"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"xomcharsetlist"},{"name":"xomcharsetlist"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"xomcharsetlist"}],"output":{"name":"xomcharsetlist"}}],[11,"eq","","",128,{"inputs":[{"name":"xpixmapformatvalues"},{"name":"xpixmapformatvalues"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"xpixmapformatvalues"},{"name":"xpixmapformatvalues"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"xpixmapformatvalues"}],"output":{"name":"xpixmapformatvalues"}}],[11,"eq","","",129,{"inputs":[{"name":"xpoint"},{"name":"xpoint"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"xpoint"},{"name":"xpoint"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"xpoint"}],"output":{"name":"xpoint"}}],[11,"eq","","",130,{"inputs":[{"name":"xrectangle"},{"name":"xrectangle"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"xrectangle"},{"name":"xrectangle"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"xrectangle"}],"output":{"name":"xrectangle"}}],[11,"eq","","",131,{"inputs":[{"name":"xrmoptiondescrec"},{"name":"xrmoptiondescrec"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"xrmoptiondescrec"},{"name":"xrmoptiondescrec"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"xrmoptiondescrec"}],"output":{"name":"xrmoptiondescrec"}}],[11,"eq","","",132,{"inputs":[{"name":"xrmvalue"},{"name":"xrmvalue"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"xrmvalue"},{"name":"xrmvalue"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"xrmvalue"}],"output":{"name":"xrmvalue"}}],[11,"eq","","",133,{"inputs":[{"name":"xsegment"},{"name":"xsegment"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"xsegment"},{"name":"xsegment"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"xsegment"}],"output":{"name":"xsegment"}}],[11,"eq","","",134,{"inputs":[{"name":"xsetwindowattributes"},{"name":"xsetwindowattributes"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"xsetwindowattributes"},{"name":"xsetwindowattributes"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"xsetwindowattributes"}],"output":{"name":"xsetwindowattributes"}}],[11,"eq","","",135,{"inputs":[{"name":"xsizehints"},{"name":"xsizehints"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"xsizehints"},{"name":"xsizehints"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"xsizehints"}],"output":{"name":"xsizehints"}}],[11,"eq","","",136,{"inputs":[{"name":"xstandardcolormap"},{"name":"xstandardcolormap"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"xstandardcolormap"},{"name":"xstandardcolormap"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"xstandardcolormap"}],"output":{"name":"xstandardcolormap"}}],[11,"eq","","",137,{"inputs":[{"name":"xtextitem"},{"name":"xtextitem"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"xtextitem"},{"name":"xtextitem"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"xtextitem"}],"output":{"name":"xtextitem"}}],[11,"eq","","",138,{"inputs":[{"name":"xtextitem16"},{"name":"xtextitem16"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"xtextitem16"},{"name":"xtextitem16"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"xtextitem16"}],"output":{"name":"xtextitem16"}}],[11,"eq","","",139,{"inputs":[{"name":"xtextproperty"},{"name":"xtextproperty"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"xtextproperty"},{"name":"xtextproperty"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"xtextproperty"}],"output":{"name":"xtextproperty"}}],[11,"eq","","",140,{"inputs":[{"name":"xtimecoord"},{"name":"xtimecoord"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"xtimecoord"},{"name":"xtimecoord"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"xtimecoord"}],"output":{"name":"xtimecoord"}}],[11,"eq","","",141,{"inputs":[{"name":"xvisualinfo"},{"name":"xvisualinfo"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"xvisualinfo"},{"name":"xvisualinfo"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"xvisualinfo"}],"output":{"name":"xvisualinfo"}}],[11,"eq","","",142,{"inputs":[{"name":"xwctextitem"},{"name":"xwctextitem"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"xwctextitem"},{"name":"xwctextitem"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"xwctextitem"}],"output":{"name":"xwctextitem"}}],[11,"eq","","",143,{"inputs":[{"name":"xwindowattributes"},{"name":"xwindowattributes"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"xwindowattributes"},{"name":"xwindowattributes"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"xwindowattributes"}],"output":{"name":"xwindowattributes"}}],[11,"eq","","",144,{"inputs":[{"name":"xwindowchanges"},{"name":"xwindowchanges"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"xwindowchanges"},{"name":"xwindowchanges"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"xwindowchanges"}],"output":{"name":"xwindowchanges"}}],[11,"eq","","",145,{"inputs":[{"name":"xwmhints"},{"name":"xwmhints"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"xwmhints"},{"name":"xwmhints"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"xwmhints"}],"output":{"name":"xwmhints"}}],[11,"eq","","",146,{"inputs":[{"name":"aspectratio"},{"name":"aspectratio"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"aspectratio"},{"name":"aspectratio"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"aspectratio"}],"output":{"name":"aspectratio"}}],[11,"eq","","",148,{"inputs":[{"name":"clientmessagedata"},{"name":"clientmessagedata"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"clientmessagedata"},{"name":"clientmessagedata"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"clientmessagedata"}],"output":{"name":"clientmessagedata"}}],[11,"new","","",148,{"inputs":[],"output":{"name":"clientmessagedata"}}],[11,"get_byte","","",148,{"inputs":[{"name":"clientmessagedata"},{"name":"usize"}],"output":{"name":"c_char"}}],[11,"get_long","","",148,{"inputs":[{"name":"clientmessagedata"},{"name":"usize"}],"output":{"name":"c_long"}}],[11,"get_short","","",148,{"inputs":[{"name":"clientmessagedata"},{"name":"usize"}],"output":{"name":"c_short"}}],[11,"set_byte","","",148,{"inputs":[{"name":"clientmessagedata"},{"name":"usize"},{"name":"c_char"}],"output":null}],[11,"set_long","","",148,{"inputs":[{"name":"clientmessagedata"},{"name":"usize"},{"name":"c_long"}],"output":null}],[11,"set_short","","",148,{"inputs":[{"name":"clientmessagedata"},{"name":"usize"},{"name":"c_short"}],"output":null}],[11,"clone","","",147,{"inputs":[{"name":"imagefns"}],"output":{"name":"imagefns"}}],[11,"eq","","",147,{"inputs":[{"name":"imagefns"},{"name":"imagefns"}],"output":{"name":"bool"}}],[0,"xmu","x11_dl","",null,null],[3,"Xmu","x11_dl::xmu","",null,null],[12,"XmuAddCloseDisplayHook","","",149,null],[12,"XmuAddInitializer","","",149,null],[12,"XmuAllStandardColormaps","","",149,null],[12,"XmuAppendSegment","","",149,null],[12,"XmuAreaAnd","","",149,null],[12,"XmuAreaCopy","","",149,null],[12,"XmuAreaDup","","",149,null],[12,"XmuAreaNot","","",149,null],[12,"XmuAreaOrXor","","",149,null],[12,"XmuCallInitializers","","",149,null],[12,"XmuClientWindow","","",149,null],[12,"XmuCompareISOLatin1","","",149,null],[12,"XmuConvertStandardSelection","","",149,null],[12,"XmuCopyISOLatin1Lowered","","",149,null],[12,"XmuCopyISOLatin1Uppered","","",149,null],[12,"XmuCreateColormap","","",149,null],[12,"XmuCreatePixmapFromBitmap","","",149,null],[12,"XmuCreateStippledPixmap","","",149,null],[12,"XmuCursorNameToIndex","","",149,null],[12,"XmuCvtBackingStoreToString","","",149,null],[12,"XmuCvtFunctionToCallback","","",149,null],[12,"XmuCvtGravityToString","","",149,null],[12,"XmuCvtJustifyToString","","",149,null],[12,"XmuCvtLongToString","","",149,null],[12,"XmuCvtOrientationToString","","",149,null],[12,"XmuCvtShapeStyleToString","","",149,null],[12,"XmuCvtStringToBackingStore","","",149,null],[12,"XmuCvtStringToBitmap","","",149,null],[12,"XmuCvtStringToColorCursor","","",149,null],[12,"XmuCvtStringToCursor","","",149,null],[12,"XmuCvtStringToGravity","","",149,null],[12,"XmuCvtStringToJustify","","",149,null],[12,"XmuCvtStringToLong","","",149,null],[12,"XmuCvtStringToOrientation","","",149,null],[12,"XmuCvtStringToShapeStyle","","",149,null],[12,"XmuCvtStringToWidget","","",149,null],[12,"XmuCvtWidgetToString","","",149,null],[12,"XmuDeleteStandardColormap","","",149,null],[12,"XmuDestroyScanlineList","","",149,null],[12,"XmuDestroySegmentList","","",149,null],[12,"XmuDistinguishableColors","","",149,null],[12,"XmuDistinguishablePixels","","",149,null],[12,"XmuDQAddDisplay","","",149,null],[12,"XmuDQCreate","","",149,null],[12,"XmuDQDestroy","","",149,null],[12,"XmuDQLookupDisplay","","",149,null],[12,"XmuDQRemoveDisplay","","",149,null],[12,"XmuDrawLogo","","",149,null],[12,"XmuDrawRoundedRectangle","","",149,null],[12,"XmuFillRoundedRectangle","","",149,null],[12,"XmuGetAtomName","","",149,null],[12,"XmuGetColormapAllocation","","",149,null],[12,"XmuGetHostname","","",149,null],[12,"XmuInternAtom","","",149,null],[12,"XmuInternStrings","","",149,null],[12,"XmuLocateBitmapFile","","",149,null],[12,"XmuLocatePixmapFile","","",149,null],[12,"XmuLookupAPL","","",149,null],[12,"XmuLookupArabic","","",149,null],[12,"XmuLookupCloseDisplayHook","","",149,null],[12,"XmuLookupCyrillic","","",149,null],[12,"XmuLookupGreek","","",149,null],[12,"XmuLookupHebrew","","",149,null],[12,"XmuLookupJISX0201","","",149,null],[12,"XmuLookupKana","","",149,null],[12,"XmuLookupLatin1","","",149,null],[12,"XmuLookupLatin2","","",149,null],[12,"XmuLookupLatin3","","",149,null],[12,"XmuLookupLatin4","","",149,null],[12,"XmuLookupStandardColormap","","",149,null],[12,"XmuLookupString","","",149,null],[12,"XmuMakeAtom","","",149,null],[12,"XmuNameOfAtom","","",149,null],[12,"XmuNCopyISOLatin1Lowered","","",149,null],[12,"XmuNCopyISOLatin1Uppered","","",149,null],[12,"XmuNewArea","","",149,null],[12,"XmuNewCvtStringToWidget","","",149,null],[12,"XmuNewScanline","","",149,null],[12,"XmuNewSegment","","",149,null],[12,"XmuOptimizeArea","","",149,null],[12,"XmuOptimizeScanline","","",149,null],[12,"XmuPrintDefaultErrorMessage","","",149,null],[12,"XmuReadBitmapData","","",149,null],[12,"XmuReadBitmapDataFromFile","","",149,null],[12,"XmuRegisterExternalAgent","","",149,null],[12,"XmuReleaseStippledPixmap","","",149,null],[12,"XmuRemoveCloseDisplayHook","","",149,null],[12,"XmuReshapeWidget","","",149,null],[12,"XmuScanlineAnd","","",149,null],[12,"XmuScanlineAndSegment","","",149,null],[12,"XmuScanlineCopy","","",149,null],[12,"XmuScanlineEqu","","",149,null],[12,"XmuScanlineNot","","",149,null],[12,"XmuScanlineOr","","",149,null],[12,"XmuScanlineOrSegment","","",149,null],[12,"XmuScanlineXor","","",149,null],[12,"XmuScanlineXorSegment","","",149,null],[12,"XmuScreenOfWindow","","",149,null],[12,"XmuSimpleErrorHandler","","",149,null],[12,"XmuStandardColormap","","",149,null],[12,"XmuUpdateMapHints","","",149,null],[12,"XmuValidArea","","",149,null],[12,"XmuValidScanline","","",149,null],[12,"XmuVisualStandardColormaps","","",149,null],[12,"XmuWnCountOwnedResources","","",149,null],[12,"XmuWnFetchResources","","",149,null],[12,"XmuWnInitializeNodes","","",149,null],[12,"XmuWnNameToNode","","",149,null],[12,"XmuSnprintf","","",149,null],[12,"_XA_ATOM_PAIR","","",149,null],[12,"_XA_CHARACTER_POSITION","","",149,null],[12,"_XA_CLASS","","",149,null],[12,"_XA_CLIENT_WINDOW","","",149,null],[12,"_XA_CLIPBOARD","","",149,null],[12,"_XA_COMPOUND_TEXT","","",149,null],[12,"_XA_DECNET_ADDRESS","","",149,null],[12,"_XA_DELETE","","",149,null],[12,"_XA_FILENAME","","",149,null],[12,"_XA_HOSTNAME","","",149,null],[12,"_XA_IP_ADDRESS","","",149,null],[12,"_XA_LENGTH","","",149,null],[12,"_XA_LIST_LENGTH","","",149,null],[12,"_XA_NAME","","",149,null],[12,"_XA_NET_ADDRESS","","",149,null],[12,"_XA_NULL","","",149,null],[12,"_XA_OWNER_OS","","",149,null],[12,"_XA_SPAN","","",149,null],[12,"_XA_TARGETS","","",149,null],[12,"_XA_TEXT","","",149,null],[12,"_XA_TIMESTAMP","","",149,null],[12,"_XA_USER","","",149,null],[12,"_XA_UTF8_STRING","","",149,null],[3,"_AtomRec","","",null,null],[3,"_XmuArea","","",null,null],[3,"_XmuDisplayQueue","","",null,null],[3,"_XmuDisplayQueueEntry","","",null,null],[3,"_XmuScanline","","",null,null],[3,"_XmuSegment","","",null,null],[3,"_XmuWidgetNode","","",null,null],[6,"AtomPtr","","",null,null],[6,"XmuArea","","",null,null],[6,"XmuDisplayQueue","","",null,null],[6,"XmuDisplayQueueEntry","","",null,null],[6,"XmuScanline","","",null,null],[6,"XmuSegment","","",null,null],[6,"XmuWidgetNode","","",null,null],[11,"open","","",149,{"inputs":[],"output":{"name":"result"}}],[0,"xrecord","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xrecord","",null,null],[12,"XRecordAllocRange","","",150,null],[12,"XRecordCreateContext","","",150,null],[12,"XRecordDisableContext","","",150,null],[12,"XRecordEnableContext","","",150,null],[12,"XRecordEnableContextAsync","","",150,null],[12,"XRecordFreeContext","","",150,null],[12,"XRecordFreeData","","",150,null],[12,"XRecordFreeState","","",150,null],[12,"XRecordGetContext","","",150,null],[12,"XRecordIdBaseMask","","",150,null],[12,"XRecordProcessReplies","","",150,null],[12,"XRecordQueryVersion","","",150,null],[12,"XRecordRegisterClients","","",150,null],[12,"XRecordUnregisterClients","","",150,null],[3,"XRecordClientInfo","","",null,null],[12,"client","","",151,null],[12,"nranges","","",151,null],[12,"ranges","","",151,null],[3,"XRecordExtRange","","",null,null],[12,"ext_major","","",152,null],[12,"ext_minor","","",152,null],[3,"XRecordInterceptData","","",null,null],[12,"id_base","","",153,null],[12,"server_time","","",153,null],[12,"client_seq","","",153,null],[12,"category","","",153,null],[12,"client_swapped","","",153,null],[12,"data","","",153,null],[12,"data_len","","",153,null],[3,"XRecordRange","","",null,null],[12,"core_requests","","",154,null],[12,"core_replies","","",154,null],[12,"ext_requests","","",154,null],[12,"ext_replies","","",154,null],[12,"delivered_events","","",154,null],[12,"device_events","","",154,null],[12,"errors","","",154,null],[12,"client_started","","",154,null],[12,"client_died","","",154,null],[3,"XRecordRange8","","",null,null],[12,"first","","",155,null],[12,"last","","",155,null],[3,"XRecordRange16","","",null,null],[12,"first","","",156,null],[12,"last","","",156,null],[3,"XRecordState","","",null,null],[12,"enabled","","",157,null],[12,"datum_flags","","",157,null],[12,"nclients","","",157,null],[12,"client_info","","",157,null],[6,"XRecordClientSpec","","",null,null],[6,"XRecordContext","","",null,null],[17,"XRecordFromServerTime","","",null,null],[17,"XRecordFromClientTime","","",null,null],[17,"XRecordFromClientSequence","","",null,null],[17,"XRecordCurrentClients","","",null,null],[17,"XRecordFutureClients","","",null,null],[17,"XRecordAllClients","","",null,null],[17,"XRecordFromServer","","",null,null],[17,"XRecordFromClient","","",null,null],[17,"XRecordClientStarted","","",null,null],[17,"XRecordClientDied","","",null,null],[17,"XRecordStartOfData","","",null,null],[17,"XRecordEndOfData","","",null,null],[11,"open","","",150,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"xrecordclientinfo"},{"name":"xrecordclientinfo"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"xrecordclientinfo"},{"name":"xrecordclientinfo"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"xrecordclientinfo"}],"output":{"name":"xrecordclientinfo"}}],[11,"eq","","",152,{"inputs":[{"name":"xrecordextrange"},{"name":"xrecordextrange"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"xrecordextrange"},{"name":"xrecordextrange"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"xrecordextrange"}],"output":{"name":"xrecordextrange"}}],[11,"eq","","",153,{"inputs":[{"name":"xrecordinterceptdata"},{"name":"xrecordinterceptdata"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"xrecordinterceptdata"},{"name":"xrecordinterceptdata"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"xrecordinterceptdata"}],"output":{"name":"xrecordinterceptdata"}}],[11,"eq","","",154,{"inputs":[{"name":"xrecordrange"},{"name":"xrecordrange"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"xrecordrange"},{"name":"xrecordrange"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"xrecordrange"}],"output":{"name":"xrecordrange"}}],[11,"eq","","",155,{"inputs":[{"name":"xrecordrange8"},{"name":"xrecordrange8"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"xrecordrange8"},{"name":"xrecordrange8"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"xrecordrange8"}],"output":{"name":"xrecordrange8"}}],[11,"eq","","",156,{"inputs":[{"name":"xrecordrange16"},{"name":"xrecordrange16"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"xrecordrange16"},{"name":"xrecordrange16"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"xrecordrange16"}],"output":{"name":"xrecordrange16"}}],[11,"eq","","",157,{"inputs":[{"name":"xrecordstate"},{"name":"xrecordstate"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"xrecordstate"},{"name":"xrecordstate"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"xrecordstate"}],"output":{"name":"xrecordstate"}}],[0,"xrender","x11_dl","",null,null],[3,"Xrender","x11_dl::xrender","",null,null],[12,"XRenderAddGlyphs","","",158,null],[12,"XRenderAddTraps","","",158,null],[12,"XRenderChangePicture","","",158,null],[12,"XRenderComposite","","",158,null],[12,"XRenderCompositeDoublePoly","","",158,null],[12,"XRenderCompositeString16","","",158,null],[12,"XRenderCompositeString32","","",158,null],[12,"XRenderCompositeString8","","",158,null],[12,"XRenderCompositeText16","","",158,null],[12,"XRenderCompositeText32","","",158,null],[12,"XRenderCompositeText8","","",158,null],[12,"XRenderCompositeTrapezoids","","",158,null],[12,"XRenderCompositeTriangles","","",158,null],[12,"XRenderCompositeTriFan","","",158,null],[12,"XRenderCompositeTriStrip","","",158,null],[12,"XRenderCreateAnimCursor","","",158,null],[12,"XRenderCreateConicalGradient","","",158,null],[12,"XRenderCreateCursor","","",158,null],[12,"XRenderCreateGlyphSet","","",158,null],[12,"XRenderCreateLinearGradient","","",158,null],[12,"XRenderCreatePicture","","",158,null],[12,"XRenderCreateRadialGradient","","",158,null],[12,"XRenderCreateSolidFill","","",158,null],[12,"XRenderFillRectangle","","",158,null],[12,"XRenderFillRectangles","","",158,null],[12,"XRenderFindFormat","","",158,null],[12,"XRenderFindStandardFormat","","",158,null],[12,"XRenderFindVisualFormat","","",158,null],[12,"XRenderFreeGlyphs","","",158,null],[12,"XRenderFreeGlyphSet","","",158,null],[12,"XRenderFreePicture","","",158,null],[12,"XRenderParseColor","","",158,null],[12,"XRenderQueryExtension","","",158,null],[12,"XRenderQueryFilters","","",158,null],[12,"XRenderQueryFormats","","",158,null],[12,"XRenderQueryPictIndexValues","","",158,null],[12,"XRenderQuerySubpixelOrder","","",158,null],[12,"XRenderQueryVersion","","",158,null],[12,"XRenderReferenceGlyphSet","","",158,null],[12,"XRenderSetPictureClipRectangles","","",158,null],[12,"XRenderSetPictureClipRegion","","",158,null],[12,"XRenderSetPictureFilter","","",158,null],[12,"XRenderSetPictureTransform","","",158,null],[12,"XRenderSetSubpixelOrder","","",158,null],[3,"_XAnimCursor","","",null,null],[12,"cursor","","",159,null],[12,"delay","","",159,null],[3,"_XCircle","","",null,null],[12,"x","","",160,null],[12,"y","","",160,null],[12,"radius","","",160,null],[3,"_XConicalGradient","","",null,null],[12,"center","","",161,null],[12,"angle","","",161,null],[3,"_XFilters","","",null,null],[12,"nfilter","","",162,null],[12,"filter","","",162,null],[12,"nalias","","",162,null],[12,"alias","","",162,null],[3,"_XGlyphElt8","","",null,null],[12,"glyphset","","",163,null],[12,"chars","","",163,null],[12,"nchars","","",163,null],[12,"xOff","","",163,null],[12,"yOff","","",163,null],[3,"_XGlyphElt16","","",null,null],[12,"glyphset","","",164,null],[12,"chars","","",164,null],[12,"nchars","","",164,null],[12,"xOff","","",164,null],[12,"yOff","","",164,null],[3,"_XGlyphElt32","","",null,null],[12,"glyphset","","",165,null],[12,"chars","","",165,null],[12,"nchars","","",165,null],[12,"xOff","","",165,null],[12,"yOff","","",165,null],[3,"_XGlyphInfo","","",null,null],[12,"width","","",166,null],[12,"height","","",166,null],[12,"x","","",166,null],[12,"y","","",166,null],[12,"xOff","","",166,null],[12,"yOff","","",166,null],[3,"_XIndexValue","","",null,null],[12,"pixel","","",167,null],[12,"red","","",167,null],[12,"green","","",167,null],[12,"blue","","",167,null],[12,"alpha","","",167,null],[3,"_XLinearGradient","","",null,null],[12,"p1","","",168,null],[12,"p2","","",168,null],[3,"_XLineFixed","","",null,null],[12,"p1","","",169,null],[12,"p2","","",169,null],[3,"_XPointDouble","","",null,null],[12,"x","","",170,null],[12,"y","","",170,null],[3,"_XPointFixed","","",null,null],[12,"x","","",171,null],[12,"y","","",171,null],[3,"_XRadialGradient","","",null,null],[12,"inner","","",172,null],[12,"outer","","",172,null],[3,"XRenderColor","","",null,null],[12,"red","","",173,null],[12,"green","","",173,null],[12,"blue","","",173,null],[12,"alpha","","",173,null],[3,"XRenderDirectFormat","","",null,null],[12,"red","","",174,null],[12,"redMask","","",174,null],[12,"green","","",174,null],[12,"greenMask","","",174,null],[12,"blue","","",174,null],[12,"blueMask","","",174,null],[12,"alpha","","",174,null],[12,"alphaMask","","",174,null],[3,"XRenderPictFormat","","",null,null],[12,"id","","",175,null],[12,"type_","","",175,null],[12,"depth","","",175,null],[12,"direct","","",175,null],[12,"colormap","","",175,null],[3,"_XRenderPictureAttributes","","",null,null],[12,"repeat","","",176,null],[12,"alpha_map","","",176,null],[12,"alpha_x_origin","","",176,null],[12,"alpha_y_origin","","",176,null],[12,"clip_x_origin","","",176,null],[12,"clip_y_origin","","",176,null],[12,"clip_mask","","",176,null],[12,"graphics_exposures","","",176,null],[12,"subwindow_mode","","",176,null],[12,"poly_edge","","",176,null],[12,"poly_mode","","",176,null],[12,"dither","","",176,null],[12,"component_alpha","","",176,null],[3,"_XSpanFix","","",null,null],[12,"left","","",177,null],[12,"right","","",177,null],[12,"y","","",177,null],[3,"_XTrap","","",null,null],[12,"top","","",178,null],[12,"bottom","","",178,null],[3,"_XTrapezoid","","",null,null],[12,"top","","",179,null],[12,"bottom","","",179,null],[12,"left","","",179,null],[12,"right","","",179,null],[3,"_XTriangle","","",null,null],[12,"p1","","",180,null],[12,"p2","","",180,null],[12,"p3","","",180,null],[3,"_XTransform","","",null,null],[12,"matrix","","",181,null],[6,"Glyph","","",null,null],[6,"GlyphSet","","",null,null],[6,"PictFormat","","",null,null],[6,"Picture","","",null,null],[6,"XDouble","","",null,null],[6,"XFixed","","",null,null],[6,"XAnimCursor","","",null,null],[6,"XCircle","","",null,null],[6,"XConicalGradient","","",null,null],[6,"XFilters","","",null,null],[6,"XGlyphElt8","","",null,null],[6,"XGlyphElt16","","",null,null],[6,"XGlyphElt32","","",null,null],[6,"XGlyphInfo","","",null,null],[6,"XIndexValue","","",null,null],[6,"XLinearGradient","","",null,null],[6,"XLineFixed","","",null,null],[6,"XPointDouble","","",null,null],[6,"XPointFixed","","",null,null],[6,"XRadialGradient","","",null,null],[6,"XRenderPictureAttributes","","",null,null],[6,"XSpanFix","","",null,null],[6,"XTrap","","",null,null],[6,"XTrapezoid","","",null,null],[6,"XTriangle","","",null,null],[6,"XTransform","","",null,null],[11,"open","","",158,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"_xanimcursor"},{"name":"_xanimcursor"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"_xanimcursor"},{"name":"_xanimcursor"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"_xanimcursor"}],"output":{"name":"_xanimcursor"}}],[11,"eq","","",160,{"inputs":[{"name":"_xcircle"},{"name":"_xcircle"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"_xcircle"},{"name":"_xcircle"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"_xcircle"}],"output":{"name":"_xcircle"}}],[11,"eq","","",161,{"inputs":[{"name":"_xconicalgradient"},{"name":"_xconicalgradient"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"_xconicalgradient"},{"name":"_xconicalgradient"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"_xconicalgradient"}],"output":{"name":"_xconicalgradient"}}],[11,"eq","","",162,{"inputs":[{"name":"_xfilters"},{"name":"_xfilters"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"_xfilters"},{"name":"_xfilters"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"_xfilters"}],"output":{"name":"_xfilters"}}],[11,"eq","","",163,{"inputs":[{"name":"_xglyphelt8"},{"name":"_xglyphelt8"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"_xglyphelt8"},{"name":"_xglyphelt8"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"_xglyphelt8"}],"output":{"name":"_xglyphelt8"}}],[11,"eq","","",164,{"inputs":[{"name":"_xglyphelt16"},{"name":"_xglyphelt16"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"_xglyphelt16"},{"name":"_xglyphelt16"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"_xglyphelt16"}],"output":{"name":"_xglyphelt16"}}],[11,"eq","","",165,{"inputs":[{"name":"_xglyphelt32"},{"name":"_xglyphelt32"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"_xglyphelt32"},{"name":"_xglyphelt32"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"_xglyphelt32"}],"output":{"name":"_xglyphelt32"}}],[11,"eq","","",166,{"inputs":[{"name":"_xglyphinfo"},{"name":"_xglyphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"_xglyphinfo"},{"name":"_xglyphinfo"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"_xglyphinfo"}],"output":{"name":"_xglyphinfo"}}],[11,"eq","","",167,{"inputs":[{"name":"_xindexvalue"},{"name":"_xindexvalue"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"_xindexvalue"},{"name":"_xindexvalue"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"_xindexvalue"}],"output":{"name":"_xindexvalue"}}],[11,"eq","","",168,{"inputs":[{"name":"_xlineargradient"},{"name":"_xlineargradient"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"_xlineargradient"},{"name":"_xlineargradient"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"_xlineargradient"}],"output":{"name":"_xlineargradient"}}],[11,"eq","","",169,{"inputs":[{"name":"_xlinefixed"},{"name":"_xlinefixed"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"_xlinefixed"},{"name":"_xlinefixed"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"_xlinefixed"}],"output":{"name":"_xlinefixed"}}],[11,"eq","","",170,{"inputs":[{"name":"_xpointdouble"},{"name":"_xpointdouble"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"_xpointdouble"},{"name":"_xpointdouble"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"_xpointdouble"}],"output":{"name":"_xpointdouble"}}],[11,"eq","","",171,{"inputs":[{"name":"_xpointfixed"},{"name":"_xpointfixed"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"_xpointfixed"},{"name":"_xpointfixed"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"_xpointfixed"}],"output":{"name":"_xpointfixed"}}],[11,"eq","","",172,{"inputs":[{"name":"_xradialgradient"},{"name":"_xradialgradient"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"_xradialgradient"},{"name":"_xradialgradient"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"_xradialgradient"}],"output":{"name":"_xradialgradient"}}],[11,"eq","","",173,{"inputs":[{"name":"xrendercolor"},{"name":"xrendercolor"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"xrendercolor"},{"name":"xrendercolor"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"xrendercolor"}],"output":{"name":"xrendercolor"}}],[11,"eq","","",174,{"inputs":[{"name":"xrenderdirectformat"},{"name":"xrenderdirectformat"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"xrenderdirectformat"},{"name":"xrenderdirectformat"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"xrenderdirectformat"}],"output":{"name":"xrenderdirectformat"}}],[11,"eq","","",175,{"inputs":[{"name":"xrenderpictformat"},{"name":"xrenderpictformat"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"xrenderpictformat"},{"name":"xrenderpictformat"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"xrenderpictformat"}],"output":{"name":"xrenderpictformat"}}],[11,"eq","","",176,{"inputs":[{"name":"_xrenderpictureattributes"},{"name":"_xrenderpictureattributes"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"_xrenderpictureattributes"},{"name":"_xrenderpictureattributes"}],"output":{"name":"bool"}}],[11,"clone","","",176,{"inputs":[{"name":"_xrenderpictureattributes"}],"output":{"name":"_xrenderpictureattributes"}}],[11,"eq","","",177,{"inputs":[{"name":"_xspanfix"},{"name":"_xspanfix"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"_xspanfix"},{"name":"_xspanfix"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"_xspanfix"}],"output":{"name":"_xspanfix"}}],[11,"eq","","",178,{"inputs":[{"name":"_xtrap"},{"name":"_xtrap"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"_xtrap"},{"name":"_xtrap"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"_xtrap"}],"output":{"name":"_xtrap"}}],[11,"eq","","",179,{"inputs":[{"name":"_xtrapezoid"},{"name":"_xtrapezoid"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"_xtrapezoid"},{"name":"_xtrapezoid"}],"output":{"name":"bool"}}],[11,"clone","","",179,{"inputs":[{"name":"_xtrapezoid"}],"output":{"name":"_xtrapezoid"}}],[11,"eq","","",180,{"inputs":[{"name":"_xtriangle"},{"name":"_xtriangle"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"_xtriangle"},{"name":"_xtriangle"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"_xtriangle"}],"output":{"name":"_xtriangle"}}],[11,"eq","","",181,{"inputs":[{"name":"_xtransform"},{"name":"_xtransform"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"_xtransform"},{"name":"_xtransform"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"_xtransform"}],"output":{"name":"_xtransform"}}],[0,"xt","x11_dl","",null,null],[3,"Xt","x11_dl::xt","",null,null],[12,"XtAddActions","","",182,null],[12,"XtAddCallback","","",182,null],[12,"XtAddCallbacks","","",182,null],[12,"XtAddConverter","","",182,null],[12,"XtAddEventHandler","","",182,null],[12,"XtAddExposureToRegion","","",182,null],[12,"XtAddGrab","","",182,null],[12,"XtAddInput","","",182,null],[12,"XtAddRawEventHandler","","",182,null],[12,"XtAddSignal","","",182,null],[12,"XtAddTimeOut","","",182,null],[12,"XtAddWorkProc","","",182,null],[12,"XtAllocateGC","","",182,null],[12,"XtAppAddActionHook","","",182,null],[12,"XtAppAddActions","","",182,null],[12,"XtAppAddBlockHook","","",182,null],[12,"XtAppAddConverter","","",182,null],[12,"XtAppAddInput","","",182,null],[12,"XtAppAddSignal","","",182,null],[12,"XtAppAddTimeOut","","",182,null],[12,"XtAppAddWorkProc","","",182,null],[12,"XtAppCreateShell","","",182,null],[12,"XtAppError","","",182,null],[12,"XtAppErrorMsg","","",182,null],[12,"XtAppGetErrorDatabase","","",182,null],[12,"XtAppGetErrorDatabaseText","","",182,null],[12,"XtAppGetExitFlag","","",182,null],[12,"XtAppGetSelectionTimeout","","",182,null],[12,"XtAppInitialize","","",182,null],[12,"XtAppLock","","",182,null],[12,"XtAppMainLoop","","",182,null],[12,"XtAppNextEvent","","",182,null],[12,"XtAppPeekEvent","","",182,null],[12,"XtAppPending","","",182,null],[12,"XtAppProcessEvent","","",182,null],[12,"XtAppReleaseCacheRefs","","",182,null],[12,"XtAppSetErrorHandler","","",182,null],[12,"XtAppSetErrorMsgHandler","","",182,null],[12,"XtAppSetExitFlag","","",182,null],[12,"XtAppSetFallbackResources","","",182,null],[12,"XtAppSetSelectionTimeout","","",182,null],[12,"XtAppSetTypeConverter","","",182,null],[12,"XtAppSetWarningHandler","","",182,null],[12,"XtAppSetWarningMsgHandler","","",182,null],[12,"XtAppUnlock","","",182,null],[12,"XtAppWarning","","",182,null],[12,"XtAppWarningMsg","","",182,null],[12,"XtAugmentTranslations","","",182,null],[12,"XtBuildEventMask","","",182,null],[12,"XtCallAcceptFocus","","",182,null],[12,"XtCallActionProc","","",182,null],[12,"XtCallbackExclusive","","",182,null],[12,"XtCallbackNone","","",182,null],[12,"XtCallbackNonexclusive","","",182,null],[12,"XtCallbackPopdown","","",182,null],[12,"XtCallbackReleaseCacheRef","","",182,null],[12,"XtCallbackReleaseCacheRefList","","",182,null],[12,"XtCallCallbackList","","",182,null],[12,"XtCallCallbacks","","",182,null],[12,"XtCallConverter","","",182,null],[12,"XtCalloc","","",182,null],[12,"XtCancelSelectionRequest","","",182,null],[12,"XtChangeManagedSet","","",182,null],[12,"XtClass","","",182,null],[12,"XtCloseDisplay","","",182,null],[12,"XtConfigureWidget","","",182,null],[12,"XtConvert","","",182,null],[12,"XtConvertAndStore","","",182,null],[12,"XtConvertCase","","",182,null],[12,"XtCreateApplicationContext","","",182,null],[12,"XtCreateApplicationShell","","",182,null],[12,"XtCreateManagedWidget","","",182,null],[12,"XtCreatePopupShell","","",182,null],[12,"XtCreateSelectionRequest","","",182,null],[12,"XtCreateWidget","","",182,null],[12,"XtCreateWindow","","",182,null],[12,"XtCvtColorToPixel","","",182,null],[12,"XtCvtIntToBool","","",182,null],[12,"XtCvtIntToBoolean","","",182,null],[12,"XtCvtIntToColor","","",182,null],[12,"XtCvtIntToFloat","","",182,null],[12,"XtCvtIntToFont","","",182,null],[12,"XtCvtIntToPixel","","",182,null],[12,"XtCvtIntToPixmap","","",182,null],[12,"XtCvtIntToShort","","",182,null],[12,"XtCvtIntToUnsignedChar","","",182,null],[12,"XtCvtStringToAcceleratorTable","","",182,null],[12,"XtCvtStringToAtom","","",182,null],[12,"XtCvtStringToBool","","",182,null],[12,"XtCvtStringToBoolean","","",182,null],[12,"XtCvtStringToCommandArgArray","","",182,null],[12,"XtCvtStringToCursor","","",182,null],[12,"XtCvtStringToDimension","","",182,null],[12,"XtCvtStringToDirectoryString","","",182,null],[12,"XtCvtStringToDisplay","","",182,null],[12,"XtCvtStringToFile","","",182,null],[12,"XtCvtStringToFloat","","",182,null],[12,"XtCvtStringToFont","","",182,null],[12,"XtCvtStringToFontSet","","",182,null],[12,"XtCvtStringToFontStruct","","",182,null],[12,"XtCvtStringToGravity","","",182,null],[12,"XtCvtStringToInitialState","","",182,null],[12,"XtCvtStringToInt","","",182,null],[12,"XtCvtStringToPixel","","",182,null],[12,"XtCvtStringToRestartStyle","","",182,null],[12,"XtCvtStringToShort","","",182,null],[12,"XtCvtStringToTranslationTable","","",182,null],[12,"XtCvtStringToUnsignedChar","","",182,null],[12,"XtCvtStringToVisual","","",182,null],[12,"XtDatabase","","",182,null],[12,"XtDestroyApplicationContext","","",182,null],[12,"XtDestroyGC","","",182,null],[12,"XtDestroyWidget","","",182,null],[12,"XtDirectConvert","","",182,null],[12,"XtDisownSelection","","",182,null],[12,"XtDispatchEvent","","",182,null],[12,"XtDispatchEventToWidget","","",182,null],[12,"XtDisplay","","",182,null],[12,"XtDisplayInitialize","","",182,null],[12,"XtDisplayOfObject","","",182,null],[12,"XtDisplayStringConversionWarning","","",182,null],[12,"XtDisplayToApplicationContext","","",182,null],[12,"XtError","","",182,null],[12,"XtErrorMsg","","",182,null],[12,"XtFindFile","","",182,null],[12,"XtFree","","",182,null],[12,"XtGetActionKeysym","","",182,null],[12,"XtGetActionList","","",182,null],[12,"XtGetApplicationNameAndClass","","",182,null],[12,"XtGetApplicationResources","","",182,null],[12,"XtGetClassExtension","","",182,null],[12,"XtGetConstraintResourceList","","",182,null],[12,"XtGetDisplays","","",182,null],[12,"XtGetErrorDatabase","","",182,null],[12,"XtGetErrorDatabaseText","","",182,null],[12,"XtGetGC","","",182,null],[12,"XtGetKeyboardFocusWidget","","",182,null],[12,"XtGetKeysymTable","","",182,null],[12,"XtGetMultiClickTime","","",182,null],[12,"XtGetResourceList","","",182,null],[12,"XtGetSelectionParameters","","",182,null],[12,"XtGetSelectionRequest","","",182,null],[12,"XtGetSelectionTimeout","","",182,null],[12,"XtGetSelectionValue","","",182,null],[12,"XtGetSelectionValueIncremental","","",182,null],[12,"XtGetSelectionValues","","",182,null],[12,"XtGetSelectionValuesIncremental","","",182,null],[12,"XtGetSubresources","","",182,null],[12,"XtGetSubvalues","","",182,null],[12,"XtGetValues","","",182,null],[12,"XtGrabButton","","",182,null],[12,"XtGrabKey","","",182,null],[12,"XtGrabKeyboard","","",182,null],[12,"XtGrabPointer","","",182,null],[12,"XtHasCallbacks","","",182,null],[12,"XtHooksOfDisplay","","",182,null],[12,"XtInitialize","","",182,null],[12,"XtInitializeWidgetClass","","",182,null],[12,"XtInsertEventHandler","","",182,null],[12,"XtInsertEventTypeHandler","","",182,null],[12,"XtInsertRawEventHandler","","",182,null],[12,"XtInstallAccelerators","","",182,null],[12,"XtInstallAllAccelerators","","",182,null],[12,"XtIsApplicationShell","","",182,null],[12,"XtIsComposite","","",182,null],[12,"XtIsConstraint","","",182,null],[12,"XtIsManaged","","",182,null],[12,"XtIsObject","","",182,null],[12,"XtIsOverrideShell","","",182,null],[12,"XtIsRealized","","",182,null],[12,"XtIsRectObj","","",182,null],[12,"XtIsSensitive","","",182,null],[12,"XtIsSessionShell","","",182,null],[12,"XtIsShell","","",182,null],[12,"XtIsSubclass","","",182,null],[12,"XtIsTopLevelShell","","",182,null],[12,"XtIsTransientShell","","",182,null],[12,"XtIsVendorShell","","",182,null],[12,"XtIsWidget","","",182,null],[12,"XtIsWMShell","","",182,null],[12,"XtKeysymToKeycodeList","","",182,null],[12,"XtLastEventProcessed","","",182,null],[12,"XtLastTimestampProcessed","","",182,null],[12,"XtMainLoop","","",182,null],[12,"XtMakeGeometryRequest","","",182,null],[12,"XtMakeResizeRequest","","",182,null],[12,"XtMalloc","","",182,null],[12,"XtManageChild","","",182,null],[12,"XtManageChildren","","",182,null],[12,"XtMapWidget","","",182,null],[12,"XtMenuPopupAction","","",182,null],[12,"XtMergeArgLists","","",182,null],[12,"XtMoveWidget","","",182,null],[12,"XtName","","",182,null],[12,"XtNameToWidget","","",182,null],[12,"XtNewString","","",182,null],[12,"XtNextEvent","","",182,null],[12,"XtNoticeSignal","","",182,null],[12,"XtOpenApplication","","",182,null],[12,"XtOpenDisplay","","",182,null],[12,"XtOverrideTranslations","","",182,null],[12,"XtOwnSelection","","",182,null],[12,"XtOwnSelectionIncremental","","",182,null],[12,"XtParent","","",182,null],[12,"XtParseAcceleratorTable","","",182,null],[12,"XtParseTranslationTable","","",182,null],[12,"XtPeekEvent","","",182,null],[12,"XtPending","","",182,null],[12,"XtPopdown","","",182,null],[12,"XtPopup","","",182,null],[12,"XtPopupSpringLoaded","","",182,null],[12,"XtProcessEvent","","",182,null],[12,"XtProcessLock","","",182,null],[12,"XtProcessUnlock","","",182,null],[12,"XtQueryGeometry","","",182,null],[12,"XtRealizeWidget","","",182,null],[12,"XtRealloc","","",182,null],[12,"XtRegisterCaseConverter","","",182,null],[12,"XtRegisterDrawable","","",182,null],[12,"XtRegisterExtensionSelector","","",182,null],[12,"XtRegisterGrabAction","","",182,null],[12,"XtReleaseGC","","",182,null],[12,"XtReleasePropertyAtom","","",182,null],[12,"XtRemoveActionHook","","",182,null],[12,"XtRemoveAllCallbacks","","",182,null],[12,"XtRemoveBlockHook","","",182,null],[12,"XtRemoveCallback","","",182,null],[12,"XtRemoveCallbacks","","",182,null],[12,"XtRemoveEventHandler","","",182,null],[12,"XtRemoveEventTypeHandler","","",182,null],[12,"XtRemoveGrab","","",182,null],[12,"XtRemoveInput","","",182,null],[12,"XtRemoveRawEventHandler","","",182,null],[12,"XtRemoveSignal","","",182,null],[12,"XtRemoveTimeOut","","",182,null],[12,"XtRemoveWorkProc","","",182,null],[12,"XtReservePropertyAtom","","",182,null],[12,"XtResizeWidget","","",182,null],[12,"XtResizeWindow","","",182,null],[12,"XtResolvePathname","","",182,null],[12,"XtScreen","","",182,null],[12,"XtScreenDatabase","","",182,null],[12,"XtScreenOfObject","","",182,null],[12,"XtSendSelectionRequest","","",182,null],[12,"XtSessionGetToken","","",182,null],[12,"XtSessionReturnToken","","",182,null],[12,"XtSetErrorHandler","","",182,null],[12,"XtSetErrorMsgHandler","","",182,null],[12,"XtSetEventDispatcher","","",182,null],[12,"XtSetKeyboardFocus","","",182,null],[12,"XtSetKeyTranslator","","",182,null],[12,"XtSetLanguageProc","","",182,null],[12,"XtSetMappedWhenManaged","","",182,null],[12,"XtSetMultiClickTime","","",182,null],[12,"XtSetSelectionParameters","","",182,null],[12,"XtSetSelectionTimeout","","",182,null],[12,"XtSetSensitive","","",182,null],[12,"XtSetSubvalues","","",182,null],[12,"XtSetTypeConverter","","",182,null],[12,"XtSetValues","","",182,null],[12,"XtSetWarningHandler","","",182,null],[12,"XtSetWarningMsgHandler","","",182,null],[12,"XtSetWMColormapWindows","","",182,null],[12,"XtStringConversionWarning","","",182,null],[12,"XtSuperclass","","",182,null],[12,"XtToolkitInitialize","","",182,null],[12,"XtToolkitThreadInitialize","","",182,null],[12,"XtTranslateCoords","","",182,null],[12,"XtTranslateKey","","",182,null],[12,"XtTranslateKeycode","","",182,null],[12,"XtUngrabButton","","",182,null],[12,"XtUngrabKey","","",182,null],[12,"XtUngrabKeyboard","","",182,null],[12,"XtUngrabPointer","","",182,null],[12,"XtUninstallTranslations","","",182,null],[12,"XtUnmanageChild","","",182,null],[12,"XtUnmanageChildren","","",182,null],[12,"XtUnmapWidget","","",182,null],[12,"XtUnrealizeWidget","","",182,null],[12,"XtUnregisterDrawable","","",182,null],[12,"XtWarning","","",182,null],[12,"XtWarningMsg","","",182,null],[12,"XtWidgetToApplicationContext","","",182,null],[12,"XtWindow","","",182,null],[12,"XtWindowOfObject","","",182,null],[12,"XtWindowToWidget","","",182,null],[12,"XtAsprintf","","",182,null],[12,"XtVaAppCreateShell","","",182,null],[12,"XtVaAppInitialize","","",182,null],[12,"XtVaCreateArgsList","","",182,null],[12,"XtVaCreateManagedWidget","","",182,null],[12,"XtVaCreatePopupShell","","",182,null],[12,"XtVaCreateWidget","","",182,null],[12,"XtVaGetApplicationResources","","",182,null],[12,"XtVaGetSubresources","","",182,null],[12,"XtVaGetSubvalues","","",182,null],[12,"XtVaGetValues","","",182,null],[12,"XtVaOpenApplication","","",182,null],[12,"XtVaSetSubvalues","","",182,null],[12,"XtVaSetValues","","",182,null],[3,"Arg","","",null,null],[3,"SubstitutionRec","","",null,null],[3,"_TranslationData","","",null,null],[3,"_WidgetClassRec","","",null,null],[3,"_WidgetRec","","",null,null],[3,"_XtActionsRec","","",null,null],[3,"_XtAppStruct","","",null,null],[3,"_XtCallbackRec","","",null,null],[3,"_XtCheckpointTokenRec","","",null,null],[3,"XtConvertArgRec","","",null,null],[3,"_XtResource","","",null,null],[3,"XtWidgetGeometry","","",null,null],[6,"XtCallbackStatus","","",null,null],[6,"XtGeometryResult","","",null,null],[6,"XtGrabKind","","",null,null],[6,"XtListPosition","","",null,null],[6,"ArgList","","",null,null],[6,"Substitution","","",null,null],[6,"Widget","","",null,null],[6,"WidgetClass","","",null,null],[6,"XtAccelerators","","",null,null],[6,"XtActionList","","",null,null],[6,"XtActionsRec","","",null,null],[6,"XtAppContext","","",null,null],[6,"XtCallbackList","","",null,null],[6,"XtCallbackRec","","",null,null],[6,"XtCheckpointToken","","",null,null],[6,"XtCheckpointTokenRec","","",null,null],[6,"XtConvertArgList","","",null,null],[6,"XtResource","","",null,null],[6,"XtResourceList","","",null,null],[6,"XtTranslations","","",null,null],[11,"open","","",182,{"inputs":[],"output":{"name":"result"}}],[0,"xtest","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xtest","",null,null],[12,"XTestCompareCurrentCursorWithWindow","","",183,null],[12,"XTestCompareCursorWithWindow","","",183,null],[12,"XTestDiscard","","",183,null],[12,"XTestFakeButtonEvent","","",183,null],[12,"XTestFakeDeviceButtonEvent","","",183,null],[12,"XTestFakeDeviceKeyEvent","","",183,null],[12,"XTestFakeDeviceMotionEvent","","",183,null],[12,"XTestFakeKeyEvent","","",183,null],[12,"XTestFakeMotionEvent","","",183,null],[12,"XTestFakeProximityEvent","","",183,null],[12,"XTestFakeRelativeMotionEvent","","",183,null],[12,"XTestGrabControl","","",183,null],[12,"XTestQueryExtension","","",183,null],[12,"XTestSetGContextOfGC","","",183,null],[12,"XTestSetVisualIDOfVisual","","",183,null],[11,"open","","",183,{"inputs":[],"output":{"name":"result"}}],[0,"xrandr","x11_dl","",null,null],[3,"Xrandr","x11_dl::xrandr","",null,null],[12,"XRRAddOutputMode","","",184,null],[12,"XRRAllocGamma","","",184,null],[12,"XRRAllocModeInfo","","",184,null],[12,"XRRAllocateMonitor","","",184,null],[12,"XRRChangeOutputProperty","","",184,null],[12,"XRRChangeProviderProperty","","",184,null],[12,"XRRConfigCurrentConfiguration","","",184,null],[12,"XRRConfigCurrentRate","","",184,null],[12,"XRRConfigRates","","",184,null],[12,"XRRConfigRotations","","",184,null],[12,"XRRConfigSizes","","",184,null],[12,"XRRConfigTimes","","",184,null],[12,"XRRConfigureOutputProperty","","",184,null],[12,"XRRConfigureProviderProperty","","",184,null],[12,"XRRCreateMode","","",184,null],[12,"XRRDeleteMonitor","","",184,null],[12,"XRRDeleteOutputMode","","",184,null],[12,"XRRDeleteOutputProperty","","",184,null],[12,"XRRDeleteProviderProperty","","",184,null],[12,"XRRDestroyMode","","",184,null],[12,"XRRFreeCrtcInfo","","",184,null],[12,"XRRFreeGamma","","",184,null],[12,"XRRFreeModeInfo","","",184,null],[12,"XRRFreeMonitors","","",184,null],[12,"XRRFreeOutputInfo","","",184,null],[12,"XRRFreePanning","","",184,null],[12,"XRRFreeProviderInfo","","",184,null],[12,"XRRFreeProviderResources","","",184,null],[12,"XRRFreeScreenConfigInfo","","",184,null],[12,"XRRFreeScreenResources","","",184,null],[12,"XRRGetCrtcGamma","","",184,null],[12,"XRRGetCrtcGammaSize","","",184,null],[12,"XRRGetCrtcInfo","","",184,null],[12,"XRRGetCrtcTransform","","",184,null],[12,"XRRGetMonitors","","",184,null],[12,"XRRGetOutputInfo","","",184,null],[12,"XRRGetOutputPrimary","","",184,null],[12,"XRRGetOutputProperty","","",184,null],[12,"XRRGetPanning","","",184,null],[12,"XRRGetProviderInfo","","",184,null],[12,"XRRGetProviderProperty","","",184,null],[12,"XRRGetProviderResources","","",184,null],[12,"XRRGetScreenInfo","","",184,null],[12,"XRRGetScreenResources","","",184,null],[12,"XRRGetScreenResourcesCurrent","","",184,null],[12,"XRRGetScreenSizeRange","","",184,null],[12,"XRRListOutputProperties","","",184,null],[12,"XRRListProviderProperties","","",184,null],[12,"XRRQueryExtension","","",184,null],[12,"XRRQueryOutputProperty","","",184,null],[12,"XRRQueryProviderProperty","","",184,null],[12,"XRRQueryVersion","","",184,null],[12,"XRRRates","","",184,null],[12,"XRRRootToScreen","","",184,null],[12,"XRRRotations","","",184,null],[12,"XRRSelectInput","","",184,null],[12,"XRRSetCrtcConfig","","",184,null],[12,"XRRSetCrtcGamma","","",184,null],[12,"XRRSetCrtcTransform","","",184,null],[12,"XRRSetMonitor","","",184,null],[12,"XRRSetOutputPrimary","","",184,null],[12,"XRRSetPanning","","",184,null],[12,"XRRSetProviderOffloadSink","","",184,null],[12,"XRRSetProviderOutputSource","","",184,null],[12,"XRRSetScreenConfig","","",184,null],[12,"XRRSetScreenConfigAndRate","","",184,null],[12,"XRRSetScreenSize","","",184,null],[12,"XRRSizes","","",184,null],[12,"XRRTimes","","",184,null],[12,"XRRUpdateConfiguration","","",184,null],[3,"XRRScreenSize","","",null,null],[12,"width","","",185,null],[12,"height","","",185,null],[12,"mwidth","","",185,null],[12,"mheight","","",185,null],[3,"XRRScreenChangeNotifyEvent","","",null,null],[12,"type_","","",186,null],[12,"serial","","",186,null],[12,"send_event","","",186,null],[12,"display","","",186,null],[12,"window","","",186,null],[12,"root","","",186,null],[12,"timestamp","","",186,null],[12,"config_timestamp","","",186,null],[12,"size_index","","",186,null],[12,"subpixel_order","","",186,null],[12,"rotation","","",186,null],[12,"width","","",186,null],[12,"height","","",186,null],[12,"mwidth","","",186,null],[12,"mheight","","",186,null],[3,"XRRNotifyEvent","","",null,null],[12,"type_","","",187,null],[12,"serial","","",187,null],[12,"send_event","","",187,null],[12,"display","","",187,null],[12,"window","","",187,null],[12,"subtype","","",187,null],[3,"XRROutputChangeNotifyEvent","","",null,null],[12,"type_","","",188,null],[12,"serial","","",188,null],[12,"send_event","","",188,null],[12,"display","","",188,null],[12,"window","","",188,null],[12,"subtype","","",188,null],[12,"output","","",188,null],[12,"crtc","","",188,null],[12,"mode","","",188,null],[12,"rotation","","",188,null],[12,"connection","","",188,null],[12,"subpixel_order","","",188,null],[3,"XRRCrtcChangeNotifyEvent","","",null,null],[12,"type_","","",189,null],[12,"serial","","",189,null],[12,"send_event","","",189,null],[12,"display","","",189,null],[12,"window","","",189,null],[12,"subtype","","",189,null],[12,"crtc","","",189,null],[12,"mode","","",189,null],[12,"rotation","","",189,null],[12,"x","","",189,null],[12,"y","","",189,null],[12,"width","","",189,null],[12,"height","","",189,null],[3,"XRROutputPropertyNotifyEvent","","",null,null],[12,"type_","","",190,null],[12,"serial","","",190,null],[12,"send_event","","",190,null],[12,"display","","",190,null],[12,"window","","",190,null],[12,"subtype","","",190,null],[12,"output","","",190,null],[12,"property","","",190,null],[12,"timestamp","","",190,null],[12,"state","","",190,null],[3,"XRRProviderChangeNotifyEvent","","",null,null],[12,"type_","","",191,null],[12,"serial","","",191,null],[12,"send_event","","",191,null],[12,"display","","",191,null],[12,"window","","",191,null],[12,"subtype","","",191,null],[12,"provider","","",191,null],[12,"timestamp","","",191,null],[12,"current_role","","",191,null],[3,"XRRProviderPropertyNotifyEvent","","",null,null],[12,"type_","","",192,null],[12,"serial","","",192,null],[12,"send_event","","",192,null],[12,"display","","",192,null],[12,"window","","",192,null],[12,"subtype","","",192,null],[12,"provider","","",192,null],[12,"property","","",192,null],[12,"timestamp","","",192,null],[12,"state","","",192,null],[3,"XRRResourceChangeNotifyEvent","","",null,null],[12,"type_","","",193,null],[12,"serial","","",193,null],[12,"send_event","","",193,null],[12,"display","","",193,null],[12,"window","","",193,null],[12,"subtype","","",193,null],[12,"timestamp","","",193,null],[3,"XRRScreenConfiguration","","",null,null],[3,"XRRModeInfo","","",null,null],[12,"id","","",194,null],[12,"width","","",194,null],[12,"height","","",194,null],[12,"dotClock","","",194,null],[12,"hSyncStart","","",194,null],[12,"hSyncEnd","","",194,null],[12,"hTotal","","",194,null],[12,"hSkew","","",194,null],[12,"vSyncStart","","",194,null],[12,"vSyncEnd","","",194,null],[12,"vTotal","","",194,null],[12,"name","","",194,null],[12,"nameLength","","",194,null],[12,"modeFlags","","",194,null],[3,"XRRScreenResources","","",null,null],[12,"timestamp","","",195,null],[12,"configTimestamp","","",195,null],[12,"ncrtc","","",195,null],[12,"crtcs","","",195,null],[12,"noutput","","",195,null],[12,"outputs","","",195,null],[12,"nmode","","",195,null],[12,"modes","","",195,null],[3,"XRROutputInfo","","",null,null],[12,"timestamp","","",196,null],[12,"crtc","","",196,null],[12,"name","","",196,null],[12,"nameLen","","",196,null],[12,"mm_width","","",196,null],[12,"mm_height","","",196,null],[12,"connection","","",196,null],[12,"subpixel_order","","",196,null],[12,"ncrtc","","",196,null],[12,"crtcs","","",196,null],[12,"nclone","","",196,null],[12,"clones","","",196,null],[12,"nmode","","",196,null],[12,"npreferred","","",196,null],[12,"modes","","",196,null],[3,"XRRPropertyInfo","","",null,null],[12,"pending","","",197,null],[12,"range","","",197,null],[12,"immutable","","",197,null],[12,"num_values","","",197,null],[12,"values","","",197,null],[3,"XRRCrtcInfo","","",null,null],[12,"timestamp","","",198,null],[12,"x","","",198,null],[12,"y","","",198,null],[12,"width","","",198,null],[12,"height","","",198,null],[12,"mode","","",198,null],[12,"rotation","","",198,null],[12,"noutput","","",198,null],[12,"outputs","","",198,null],[12,"rotations","","",198,null],[12,"npossible","","",198,null],[12,"possible","","",198,null],[3,"XRRCrtcGamma","","",null,null],[12,"size","","",199,null],[12,"red","","",199,null],[12,"green","","",199,null],[12,"blue","","",199,null],[3,"XRRCrtcTransformAttributes","","",null,null],[12,"pendingTransform","","",200,null],[12,"pendingFilter","","",200,null],[12,"pendingNparams","","",200,null],[12,"pendingParams","","",200,null],[12,"currentTransform","","",200,null],[12,"currentFilter","","",200,null],[12,"currentNparams","","",200,null],[12,"currentParams","","",200,null],[3,"XRRPanning","","",null,null],[12,"timestamp","","",201,null],[12,"left","","",201,null],[12,"top","","",201,null],[12,"width","","",201,null],[12,"height","","",201,null],[12,"track_left","","",201,null],[12,"track_top","","",201,null],[12,"track_width","","",201,null],[12,"track_height","","",201,null],[12,"border_left","","",201,null],[12,"border_top","","",201,null],[12,"border_right","","",201,null],[12,"border_bottom","","",201,null],[3,"XRRProviderResources","","",null,null],[12,"timestamp","","",202,null],[12,"nproviders","","",202,null],[12,"providers","","",202,null],[3,"XRRProviderInfo","","",null,null],[12,"capabilities","","",203,null],[12,"ncrtcs","","",203,null],[12,"crtcs","","",203,null],[12,"noutputs","","",203,null],[12,"outputs","","",203,null],[12,"name","","",203,null],[12,"nassociatedproviders","","",203,null],[12,"associated_providers","","",203,null],[12,"associated_capability","","",203,null],[12,"nameLen","","",203,null],[3,"XRRMonitorInfo","","",null,null],[12,"name","","",204,null],[12,"primary","","",204,null],[12,"automatic","","",204,null],[12,"noutput","","",204,null],[12,"x","","",204,null],[12,"y","","",204,null],[12,"width","","",204,null],[12,"height","","",204,null],[12,"mwidth","","",204,null],[12,"mheight","","",204,null],[12,"outputs","","",204,null],[3,"Xrandr_2_2_0","","",null,null],[12,"XRRAddOutputMode","","",205,null],[12,"XRRAllocGamma","","",205,null],[12,"XRRAllocModeInfo","","",205,null],[12,"XRRChangeOutputProperty","","",205,null],[12,"XRRChangeProviderProperty","","",205,null],[12,"XRRConfigCurrentConfiguration","","",205,null],[12,"XRRConfigCurrentRate","","",205,null],[12,"XRRConfigRates","","",205,null],[12,"XRRConfigRotations","","",205,null],[12,"XRRConfigSizes","","",205,null],[12,"XRRConfigTimes","","",205,null],[12,"XRRConfigureOutputProperty","","",205,null],[12,"XRRConfigureProviderProperty","","",205,null],[12,"XRRCreateMode","","",205,null],[12,"XRRDeleteOutputMode","","",205,null],[12,"XRRDeleteOutputProperty","","",205,null],[12,"XRRDeleteProviderProperty","","",205,null],[12,"XRRDestroyMode","","",205,null],[12,"XRRFreeCrtcInfo","","",205,null],[12,"XRRFreeGamma","","",205,null],[12,"XRRFreeModeInfo","","",205,null],[12,"XRRFreeOutputInfo","","",205,null],[12,"XRRFreePanning","","",205,null],[12,"XRRFreeProviderInfo","","",205,null],[12,"XRRFreeProviderResources","","",205,null],[12,"XRRFreeScreenConfigInfo","","",205,null],[12,"XRRFreeScreenResources","","",205,null],[12,"XRRGetCrtcGamma","","",205,null],[12,"XRRGetCrtcGammaSize","","",205,null],[12,"XRRGetCrtcInfo","","",205,null],[12,"XRRGetCrtcTransform","","",205,null],[12,"XRRGetOutputInfo","","",205,null],[12,"XRRGetOutputPrimary","","",205,null],[12,"XRRGetOutputProperty","","",205,null],[12,"XRRGetPanning","","",205,null],[12,"XRRGetProviderInfo","","",205,null],[12,"XRRGetProviderProperty","","",205,null],[12,"XRRGetProviderResources","","",205,null],[12,"XRRGetScreenInfo","","",205,null],[12,"XRRGetScreenResources","","",205,null],[12,"XRRGetScreenResourcesCurrent","","",205,null],[12,"XRRGetScreenSizeRange","","",205,null],[12,"XRRListOutputProperties","","",205,null],[12,"XRRListProviderProperties","","",205,null],[12,"XRRQueryExtension","","",205,null],[12,"XRRQueryOutputProperty","","",205,null],[12,"XRRQueryProviderProperty","","",205,null],[12,"XRRQueryVersion","","",205,null],[12,"XRRRates","","",205,null],[12,"XRRRootToScreen","","",205,null],[12,"XRRRotations","","",205,null],[12,"XRRSelectInput","","",205,null],[12,"XRRSetCrtcConfig","","",205,null],[12,"XRRSetCrtcGamma","","",205,null],[12,"XRRSetCrtcTransform","","",205,null],[12,"XRRSetOutputPrimary","","",205,null],[12,"XRRSetPanning","","",205,null],[12,"XRRSetProviderOffloadSink","","",205,null],[12,"XRRSetProviderOutputSource","","",205,null],[12,"XRRSetScreenConfig","","",205,null],[12,"XRRSetScreenConfigAndRate","","",205,null],[12,"XRRSetScreenSize","","",205,null],[12,"XRRSizes","","",205,null],[12,"XRRTimes","","",205,null],[12,"XRRUpdateConfiguration","","",205,null],[6,"Connection","","",null,null],[6,"Rotation","","",null,null],[6,"SizeID","","",null,null],[6,"SubpixelOrder","","",null,null],[6,"RROutput","","",null,null],[6,"RRCrtc","","",null,null],[6,"RRMode","","",null,null],[6,"RRProvider","","",null,null],[6,"XRRModeFlags","","",null,null],[11,"open","","",184,{"inputs":[],"output":{"name":"result"}}],[11,"eq","","",185,{"inputs":[{"name":"xrrscreensize"},{"name":"xrrscreensize"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"xrrscreensize"},{"name":"xrrscreensize"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"xrrscreensize"}],"output":{"name":"xrrscreensize"}}],[11,"eq","","",186,{"inputs":[{"name":"xrrscreenchangenotifyevent"},{"name":"xrrscreenchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"xrrscreenchangenotifyevent"},{"name":"xrrscreenchangenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"xrrscreenchangenotifyevent"}],"output":{"name":"xrrscreenchangenotifyevent"}}],[11,"eq","","",187,{"inputs":[{"name":"xrrnotifyevent"},{"name":"xrrnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"xrrnotifyevent"},{"name":"xrrnotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",187,{"inputs":[{"name":"xrrnotifyevent"}],"output":{"name":"xrrnotifyevent"}}],[11,"eq","","",188,{"inputs":[{"name":"xrroutputchangenotifyevent"},{"name":"xrroutputchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"xrroutputchangenotifyevent"},{"name":"xrroutputchangenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",188,{"inputs":[{"name":"xrroutputchangenotifyevent"}],"output":{"name":"xrroutputchangenotifyevent"}}],[11,"eq","","",189,{"inputs":[{"name":"xrrcrtcchangenotifyevent"},{"name":"xrrcrtcchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"xrrcrtcchangenotifyevent"},{"name":"xrrcrtcchangenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"xrrcrtcchangenotifyevent"}],"output":{"name":"xrrcrtcchangenotifyevent"}}],[11,"eq","","",190,{"inputs":[{"name":"xrroutputpropertynotifyevent"},{"name":"xrroutputpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"xrroutputpropertynotifyevent"},{"name":"xrroutputpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",190,{"inputs":[{"name":"xrroutputpropertynotifyevent"}],"output":{"name":"xrroutputpropertynotifyevent"}}],[11,"eq","","",191,{"inputs":[{"name":"xrrproviderchangenotifyevent"},{"name":"xrrproviderchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"xrrproviderchangenotifyevent"},{"name":"xrrproviderchangenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",191,{"inputs":[{"name":"xrrproviderchangenotifyevent"}],"output":{"name":"xrrproviderchangenotifyevent"}}],[11,"eq","","",192,{"inputs":[{"name":"xrrproviderpropertynotifyevent"},{"name":"xrrproviderpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"xrrproviderpropertynotifyevent"},{"name":"xrrproviderpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",192,{"inputs":[{"name":"xrrproviderpropertynotifyevent"}],"output":{"name":"xrrproviderpropertynotifyevent"}}],[11,"eq","","",193,{"inputs":[{"name":"xrrresourcechangenotifyevent"},{"name":"xrrresourcechangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"xrrresourcechangenotifyevent"},{"name":"xrrresourcechangenotifyevent"}],"output":{"name":"bool"}}],[11,"clone","","",193,{"inputs":[{"name":"xrrresourcechangenotifyevent"}],"output":{"name":"xrrresourcechangenotifyevent"}}],[11,"eq","","",194,{"inputs":[{"name":"xrrmodeinfo"},{"name":"xrrmodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"xrrmodeinfo"},{"name":"xrrmodeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",194,{"inputs":[{"name":"xrrmodeinfo"}],"output":{"name":"xrrmodeinfo"}}],[11,"eq","","",195,{"inputs":[{"name":"xrrscreenresources"},{"name":"xrrscreenresources"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"xrrscreenresources"},{"name":"xrrscreenresources"}],"output":{"name":"bool"}}],[11,"clone","","",195,{"inputs":[{"name":"xrrscreenresources"}],"output":{"name":"xrrscreenresources"}}],[11,"eq","","",196,{"inputs":[{"name":"xrroutputinfo"},{"name":"xrroutputinfo"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"xrroutputinfo"},{"name":"xrroutputinfo"}],"output":{"name":"bool"}}],[11,"clone","","",196,{"inputs":[{"name":"xrroutputinfo"}],"output":{"name":"xrroutputinfo"}}],[11,"eq","","",197,{"inputs":[{"name":"xrrpropertyinfo"},{"name":"xrrpropertyinfo"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"xrrpropertyinfo"},{"name":"xrrpropertyinfo"}],"output":{"name":"bool"}}],[11,"clone","","",197,{"inputs":[{"name":"xrrpropertyinfo"}],"output":{"name":"xrrpropertyinfo"}}],[11,"eq","","",198,{"inputs":[{"name":"xrrcrtcinfo"},{"name":"xrrcrtcinfo"}],"output":{"name":"bool"}}],[11,"ne","","",198,{"inputs":[{"name":"xrrcrtcinfo"},{"name":"xrrcrtcinfo"}],"output":{"name":"bool"}}],[11,"clone","","",198,{"inputs":[{"name":"xrrcrtcinfo"}],"output":{"name":"xrrcrtcinfo"}}],[11,"eq","","",199,{"inputs":[{"name":"xrrcrtcgamma"},{"name":"xrrcrtcgamma"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"xrrcrtcgamma"},{"name":"xrrcrtcgamma"}],"output":{"name":"bool"}}],[11,"clone","","",199,{"inputs":[{"name":"xrrcrtcgamma"}],"output":{"name":"xrrcrtcgamma"}}],[11,"eq","","",200,{"inputs":[{"name":"xrrcrtctransformattributes"},{"name":"xrrcrtctransformattributes"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"xrrcrtctransformattributes"},{"name":"xrrcrtctransformattributes"}],"output":{"name":"bool"}}],[11,"clone","","",200,{"inputs":[{"name":"xrrcrtctransformattributes"}],"output":{"name":"xrrcrtctransformattributes"}}],[11,"eq","","",201,{"inputs":[{"name":"xrrpanning"},{"name":"xrrpanning"}],"output":{"name":"bool"}}],[11,"ne","","",201,{"inputs":[{"name":"xrrpanning"},{"name":"xrrpanning"}],"output":{"name":"bool"}}],[11,"clone","","",201,{"inputs":[{"name":"xrrpanning"}],"output":{"name":"xrrpanning"}}],[11,"eq","","",202,{"inputs":[{"name":"xrrproviderresources"},{"name":"xrrproviderresources"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"xrrproviderresources"},{"name":"xrrproviderresources"}],"output":{"name":"bool"}}],[11,"clone","","",202,{"inputs":[{"name":"xrrproviderresources"}],"output":{"name":"xrrproviderresources"}}],[11,"eq","","",203,{"inputs":[{"name":"xrrproviderinfo"},{"name":"xrrproviderinfo"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"xrrproviderinfo"},{"name":"xrrproviderinfo"}],"output":{"name":"bool"}}],[11,"clone","","",203,{"inputs":[{"name":"xrrproviderinfo"}],"output":{"name":"xrrproviderinfo"}}],[11,"eq","","",204,{"inputs":[{"name":"xrrmonitorinfo"},{"name":"xrrmonitorinfo"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"xrrmonitorinfo"},{"name":"xrrmonitorinfo"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"xrrmonitorinfo"}],"output":{"name":"xrrmonitorinfo"}}],[11,"open","","",205,{"inputs":[],"output":{"name":"result"}}]],"paths":[[4,"OpenErrorKind"],[3,"OpenError"],[3,"Glx"],[3,"Xcursor"],[3,"_XcursorAnimate"],[3,"_XcursorChunkHeader"],[3,"_XcursorComment"],[3,"_XcursorComments"],[3,"_XcursorCursors"],[3,"_XcursorFile"],[3,"_XcursorFileHeader"],[3,"_XcursorFileToc"],[3,"_XcursorImage"],[3,"_XcursorImages"],[3,"Xf86vmode"],[3,"XF86VidModeGamma"],[3,"XF86VidModeModeInfo"],[3,"XF86VidModeModeLine"],[3,"XF86VidModeMonitor"],[3,"XF86VidModeNotifyEvent"],[3,"XF86VidModeSyncRange"],[3,"Xlib"],[3,"XineramaScreenInfo"],[3,"XPanoramiXInfo"],[3,"XInput"],[3,"XDevice"],[3,"XDeviceControl"],[3,"XDeviceInfo"],[3,"XDeviceState"],[3,"XDeviceTimeCoord"],[3,"XExtensionVersion"],[3,"XFeedbackControl"],[3,"XFeedbackState"],[3,"XInputClass"],[3,"XInputClassInfo"],[3,"XInput2"],[3,"Struct_Unnamed1"],[3,"Struct_Unnamed2"],[3,"Struct_Unnamed3"],[3,"Struct_Unnamed4"],[3,"Union_Unnamed5"],[3,"Struct_Unnamed6"],[3,"Struct_Unnamed7"],[3,"Struct_Unnamed8"],[3,"Struct_Unnamed9"],[3,"Struct_Unnamed10"],[3,"Struct_Unnamed11"],[3,"Struct_Unnamed12"],[3,"Struct_Unnamed13"],[3,"Struct_Unnamed14"],[3,"Struct_Unnamed15"],[3,"Struct_Unnamed16"],[3,"Struct_Unnamed17"],[3,"Struct_Unnamed18"],[3,"Struct_Unnamed19"],[3,"Struct_Unnamed20"],[3,"Struct_Unnamed21"],[3,"Struct_Unnamed22"],[3,"Struct_Unnamed23"],[3,"Struct_Unnamed24"],[3,"Struct_Unnamed25"],[3,"Struct_Unnamed26"],[3,"Struct_Unnamed27"],[3,"Struct_Unnamed28"],[3,"Xlib"],[3,"XEvent"],[3,"XAnyEvent"],[3,"XButtonEvent"],[3,"XCirculateEvent"],[3,"XCirculateRequestEvent"],[3,"XClientMessageEvent"],[3,"XColormapEvent"],[3,"XConfigureEvent"],[3,"XConfigureRequestEvent"],[3,"XCreateWindowEvent"],[3,"XCrossingEvent"],[3,"XDestroyWindowEvent"],[3,"XErrorEvent"],[3,"XExposeEvent"],[3,"XFocusChangeEvent"],[3,"XGraphicsExposeEvent"],[3,"XGravityEvent"],[3,"XKeyEvent"],[3,"XKeymapEvent"],[3,"XMapEvent"],[3,"XMappingEvent"],[3,"XMapRequestEvent"],[3,"XMotionEvent"],[3,"XNoExposeEvent"],[3,"XPropertyEvent"],[3,"XReparentEvent"],[3,"XResizeRequestEvent"],[3,"XSelectionClearEvent"],[3,"XSelectionEvent"],[3,"XSelectionRequestEvent"],[3,"XUnmapEvent"],[3,"XVisibilityEvent"],[3,"_XkbCompatMapRec"],[3,"_XkbDesc"],[3,"_XkbIndicatorRec"],[3,"_XkbKeyAliasRec"],[3,"_XkbKeyNameRec"],[3,"_XkbNamesRec"],[3,"Depth"],[3,"Screen"],[3,"ScreenFormat"],[3,"Visual"],[3,"XArc"],[3,"XChar2b"],[3,"XCharStruct"],[3,"XClassHint"],[3,"XColor"],[3,"XComposeStatus"],[3,"XExtCodes"],[3,"XExtData"],[3,"XFontProp"],[3,"XFontSetExtents"],[3,"XFontStruct"],[3,"XGCValues"],[3,"XGenericEventCookie"],[3,"XHostAddress"],[3,"XIconSize"],[3,"XImage"],[3,"XKeyboardControl"],[3,"XKeyboardState"],[3,"XmbTextItem"],[3,"XModifierKeymap"],[3,"XOMCharSetList"],[3,"XPixmapFormatValues"],[3,"XPoint"],[3,"XRectangle"],[3,"XrmOptionDescRec"],[3,"XrmValue"],[3,"XSegment"],[3,"XSetWindowAttributes"],[3,"XSizeHints"],[3,"XStandardColormap"],[3,"XTextItem"],[3,"XTextItem16"],[3,"XTextProperty"],[3,"XTimeCoord"],[3,"XVisualInfo"],[3,"XwcTextItem"],[3,"XWindowAttributes"],[3,"XWindowChanges"],[3,"XWMHints"],[3,"AspectRatio"],[3,"ImageFns"],[3,"ClientMessageData"],[3,"Xmu"],[3,"Xf86vmode"],[3,"XRecordClientInfo"],[3,"XRecordExtRange"],[3,"XRecordInterceptData"],[3,"XRecordRange"],[3,"XRecordRange8"],[3,"XRecordRange16"],[3,"XRecordState"],[3,"Xrender"],[3,"_XAnimCursor"],[3,"_XCircle"],[3,"_XConicalGradient"],[3,"_XFilters"],[3,"_XGlyphElt8"],[3,"_XGlyphElt16"],[3,"_XGlyphElt32"],[3,"_XGlyphInfo"],[3,"_XIndexValue"],[3,"_XLinearGradient"],[3,"_XLineFixed"],[3,"_XPointDouble"],[3,"_XPointFixed"],[3,"_XRadialGradient"],[3,"XRenderColor"],[3,"XRenderDirectFormat"],[3,"XRenderPictFormat"],[3,"_XRenderPictureAttributes"],[3,"_XSpanFix"],[3,"_XTrap"],[3,"_XTrapezoid"],[3,"_XTriangle"],[3,"_XTransform"],[3,"Xt"],[3,"Xf86vmode"],[3,"Xrandr"],[3,"XRRScreenSize"],[3,"XRRScreenChangeNotifyEvent"],[3,"XRRNotifyEvent"],[3,"XRROutputChangeNotifyEvent"],[3,"XRRCrtcChangeNotifyEvent"],[3,"XRROutputPropertyNotifyEvent"],[3,"XRRProviderChangeNotifyEvent"],[3,"XRRProviderPropertyNotifyEvent"],[3,"XRRResourceChangeNotifyEvent"],[3,"XRRModeInfo"],[3,"XRRScreenResources"],[3,"XRROutputInfo"],[3,"XRRPropertyInfo"],[3,"XRRCrtcInfo"],[3,"XRRCrtcGamma"],[3,"XRRCrtcTransformAttributes"],[3,"XRRPanning"],[3,"XRRProviderResources"],[3,"XRRProviderInfo"],[3,"XRRMonitorInfo"],[3,"Xrandr_2_2_0"]]};
searchIndex["image"] = {"doc":"This crate provides native rust implementations of\nimage encoders and decoders and basic image manipulation\nfunctions.","items":[[3,"Luma","image","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Holds the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image&#39;s dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",6,null],[13,"Triangle","","Linear Filter",6,null],[13,"CatmullRom","","Cubic Filter",6,null],[13,"Gaussian","","Gaussian Filter",6,null],[13,"Lanczos3","","Lanczos with window 3",6,null],[4,"ImageFormat","","An enumeration of supported image formats.\nNot all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",7,null],[13,"JPEG","","An Image in JPEG Format",7,null],[13,"GIF","","An Image in GIF Format",7,null],[13,"WEBP","","An Image in WEBP Format",7,null],[13,"PPM","","An Image in PPM Format",7,null],[13,"TIFF","","An Image in TIFF Format",7,null],[13,"TGA","","An Image in TGA Format",7,null],[13,"BMP","","An Image in BMP Format",7,null],[13,"ICO","","An Image in ICO Format",7,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",8,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",8,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",8,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",8,null],[5,"open","","Open the image located at the path specified.\nThe image&#39;s format is determined from the path&#39;s file extension.",null,{"inputs":[{"name":"p"}],"output":{"name":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"inputs":[{"name":"r"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\nSee &quot;Kohonen neural networks for optimal colour quantization&quot;\nin &quot;Network: Computation in Neural Systems&quot; Vol. 5 (1994) pp 351-367.\nfor a discussion of the algorithm.\nSee also  http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data",9,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data",9,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",9,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",9,null],[0,"imageops","image","Image Processing Functions",null,null],[4,"FilterType","image::imageops","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",6,null],[13,"Triangle","","Linear Filter",6,null],[13,"CatmullRom","","Cubic Filter",6,null],[13,"Gaussian","","Gaussian Filter",6,null],[13,"Lanczos3","","Lanczos with window 3",6,null],[5,"rotate90","","Rotate an image 90 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image.\n```kernel``` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions.\n```nwidth``` and ```nheight``` are the new dimensions.\n```filter``` is the sampling filter to use.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image.\n```sigma``` is a measure of how much to blur by.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image.\n```sigma``` is the amount to blur the image by.\n```threshold``` is the threshold for the difference between",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"colorops","","Public only because of Rust bug:\nhttps://github.com/rust-lang/rust/issues/18241\nFunctions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image.\nThis function operates in place.",null,{"inputs":[{"name":"i"}],"output":null}],[5,"contrast","","Adjust the contrast of the supplied image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying\nFloyd-Steinberg dithering to improve the visual conception",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":null}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":{"name":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","","The color type on which the map operates on",10,null],[10,"index_of","","Returns the index of the closed match of `color`\nin the color map.",10,{"inputs":[{"name":"colormap"},{"name":"color"}],"output":{"name":"usize"}}],[10,"map_color","","Maps `color` to the closest color in the color map.",10,{"inputs":[{"name":"colormap"},{"name":"color"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"bilevel"}],"output":{"name":"bilevel"}}],[11,"index_of","","",11,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",11,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":null}],[11,"index_of","image::math::nq","",9,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",9,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":null}],[11,"clone","image","",6,{"inputs":[{"name":"filtertype"}],"output":{"name":"filtertype"}}],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",12,{"inputs":[{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",12,null],[11,"read_image","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",13,null],[12,"height","","The height of the luma plane",13,null],[12,"ybuf","","The luma plane of the frame",13,null],[12,"keyframe","","Indicates whether this frame is a keyframe",13,null],[12,"for_display","","Indicates whether this frame is intended for display",13,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",13,null],[3,"VP8Decoder","","VP8 Decoder",null,null],[11,"clone","","",13,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",13,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"frame"}}],[11,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",14,{"inputs":[{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",14,{"inputs":[{"name":"vp8decoder"}],"output":{"name":"result"}}],[0,"ppm","image","Encoding of portable pixmap Images",null,null],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder.",null,null],[11,"new","","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",15,{"inputs":[{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",15,null],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","PNG decoder",null,null],[3,"PNGEncoder","","PNG encoder",null,null],[11,"new","","Creates a new decoder that decodes from the stream ```r```",16,{"inputs":[{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"dimensions","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",16,null],[11,"read_image","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to ```w```",17,{"inputs":[{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",17,null],[11,"from","image","",4,null],[11,"from","","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"ico","","Decoding of ICO files",null,null],[3,"ICODecoder","image::ico","An ico decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",18,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",18,null],[11,"read_image","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[11,"new","","Create a new encoder that writes its output to ```w```",19,{"inputs":[{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",19,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",20,{"inputs":[{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",20,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",20,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",20,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",20,null],[11,"read_image","","",20,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"from","image","",4,{"inputs":[{"name":"pixelformat"}],"output":{"name":"colortype"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[0,"gif","","Decoding of GIF Images",null,null],[11,"from_rgba","gif::common","Creates a frame from pixels in RGBA format.",21,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",21,null],[11,"default","","",21,{"inputs":[],"output":{"name":"frame"}}],[11,"fmt","","",21,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[3,"Frame","image::gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",21,null],[12,"dispose","","Disposal method.",21,null],[12,"transparent","","Transparent index (if available).",21,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",21,null],[12,"top","","Offset from the top border of the canvas.",21,null],[12,"left","","Offset from the left border of the canvas.",21,null],[12,"width","","Width of the frame.",21,null],[12,"height","","Height of the frame.",21,null],[12,"interlaced","","True if the image is interlaced.",21,null],[12,"palette","","Frame local color palette if available.",21,null],[12,"buffer","","Buffer containing the image data.\nOnly indices unless configured differently.",21,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[11,"new","","Creates a new decoder that decodes the input steam ```r```",22,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"dimensions","","",22,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",22,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",22,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",22,null],[11,"read_image","","",22,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"new","","Creates a new GIF encoder.",23,{"inputs":[{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes a frame.",23,{"inputs":[{"name":"encoder"},{"name":"frame"}],"output":{"name":"imageresult"}}],[11,"from","image","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"tiff","","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",null,null],[11,"fmt","","",24,{"inputs":[{"name":"tiffdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",24,{"inputs":[{"name":"r"}],"output":{"name":"imageresult"}}],[11,"init","","Initializes the decoder.",24,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",24,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",24,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",24,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",24,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_long","","Reads a TIFF long value",24,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",24,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",24,{"inputs":[{"name":"tiffdecoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",24,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",24,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",24,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",24,null],[11,"read_image","","",24,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",25,{"inputs":[{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",25,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",25,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",25,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",25,null],[11,"read_image","","",25,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[0,"bmp","image","Decoding of BMP Images",null,null],[3,"BMPDecoder","image::bmp","A bmp decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",26,{"inputs":[{"name":"r"}],"output":{"name":"bmpdecoder"}}],[11,"dimensions","","",26,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",26,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",26,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",26,null],[11,"read_image","","",26,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"fmt","image","",5,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"imageerror"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"imageerror"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"imageformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"imageformat"}],"output":{"name":"imageformat"}}],[11,"next","","",27,{"inputs":[{"name":"pixels"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"mutpixels"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",29,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",29,{"inputs":[{"name":"subimage"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",29,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"to_image","","Convert this subimage to an ImageBuffer",29,{"inputs":[{"name":"subimage"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",29,null],[11,"bounds","","",29,null],[11,"get_pixel","","",29,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"put_pixel","","",29,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",29,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"get_pixel_mut","","",29,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"clone","","",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey\npixels with transparency.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rgbimage"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rgbaimage"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"grayimage"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"grayalphaimage"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"raw_pixels","","Return this image&#39;s pixels as a byte vector.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"vec"}}],[11,"color","","Return this image&#39;s color type.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image.\nThis method operates inplace.",8,{"inputs":[{"name":"dynamicimage"}],"output":null}],[11,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image&#39;s aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image&#39;s dimensions",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image&#39;s dimensions",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image.\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",8,null],[11,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",8,{"inputs":[{"name":"dynamicimage"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"save","","Encode this image and write it to ```w```",8,{"inputs":[{"name":"dynamicimage"},{"name":"w"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",8,null],[11,"bounds","","",8,null],[11,"get_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"put_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"clone","","",4,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",4,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"rgb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"eq","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"channel_count","","",2,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",2,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",2,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgba"}}],[11,"to_luma","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"lumaa"}}],[11,"map","","",2,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",2,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",2,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",2,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",2,{"inputs":[{"name":"rgb"},{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"},{"name":"f"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"rgb"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":null}],[11,"index","","",2,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",2,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"luma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"eq","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"channel_count","","",0,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",0,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",0,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"rgba"}}],[11,"to_luma","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"lumaa"}}],[11,"map","","",0,{"inputs":[{"name":"luma"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",0,{"inputs":[{"name":"luma"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",0,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",0,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",0,{"inputs":[{"name":"luma"},{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",0,{"inputs":[{"name":"luma"},{"name":"luma"},{"name":"f"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"luma"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"rgba"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"eq","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"channel_count","","",3,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",3,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",3,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"to_luma","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"lumaa"}}],[11,"map","","",3,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",3,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",3,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",3,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",3,{"inputs":[{"name":"rgba"},{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"},{"name":"f"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"rgba"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",3,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"lumaa"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"eq","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"channel_count","","",1,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",1,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",1,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgba"}}],[11,"to_luma","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"map","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",1,{"inputs":[{"name":"lumaa"},{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"lumaa"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"from_raw","","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)",30,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",30,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",30,null],[11,"width","","The width of this image.",30,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",30,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",30,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",30,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",30,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",30,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",30,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",30,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",30,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"save","","Saves the buffer to a file at the path specified.",30,{"inputs":[{"name":"imagebuffer"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",30,null],[11,"deref_mut","","",30,null],[11,"index","","",30,null],[11,"index_mut","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",30,null],[11,"bounds","","",30,null],[11,"get_pixel","","",30,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",30,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",30,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",30,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",30,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",30,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"new","","Creates a new image buffer based on a `Vec&lt;P::Subpixel&gt;`.",30,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",30,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel&#39;s x and y coordinates.",30,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",30,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",30,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"vec"}}],[11,"convert","","",30,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"new","","Contructs a new frame iterator",31,{"inputs":[{"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",32,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",32,{"inputs":[{"name":"rgbaimage"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",32,{"inputs":[{"name":"rgbaimage"},{"name":"u32"},{"name":"u32"},{"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",32,{"inputs":[{"name":"frame"}],"output":{"name":"ratio"}}],[11,"buffer","","Returns the image buffer",32,{"inputs":[{"name":"frame"}],"output":{"name":"rgbaimage"}}],[11,"into_buffer","","Returns the image buffer",32,{"inputs":[{"name":"frame"}],"output":{"name":"rgbaimage"}}],[11,"left","","Returns the x offset",32,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"top","","Returns the y offset",32,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"next","","",31,{"inputs":[{"name":"frames"}],"output":{"name":"option"}}],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",33,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",33,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"row_len","","Returns the length in bytes of one decoded row of the image",33,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"read_scanline","","Reads one row from the image into ```buf``` and returns the row index",33,null],[10,"read_image","","Decodes the entire image and return it as a Vector",33,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"is_animated","","Returns true if the image is animated",33,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",33,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",33,{"inputs":[{"name":"imagedecoder"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","","The type of pixel.",34,null],[10,"dimensions","","The width and height of this image.",34,null],[11,"width","","The width of this image.",34,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",34,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[10,"bounds","","The bounding rectangle of this image.",34,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_pixel","","Returns the pixel located at (x, y)",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[10,"put_pixel","","Put a pixel at location (x, y)",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",34,{"inputs":[{"name":"genericimage"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",34,{"inputs":[{"name":"genericimage"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",34,{"inputs":[{"name":"genericimage"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","","The underlying subpixel type.",35,null],[10,"channel_count","","Returns the number of channels of this pixel type.",35,{"inputs":[],"output":{"name":"u8"}}],[10,"channels","","Returns the components as a slice.",35,null],[10,"channels_mut","","Returns the components as a mutable slice",35,null],[10,"color_model","","Returns a string that can help to interprete the meaning each channel\nSee [gimp babl](http://gegl.org/babl/).",35,{"inputs":[],"output":{"name":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",35,{"inputs":[],"output":{"name":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel\nhas less than 4 channels the remainder is filled with the maximum value",35,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d.\nIf the pixel does not contain 4 channels the extra are ignored.",35,{"inputs":[{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"}],"output":{"name":"self"}}],[10,"from_slice","","Returns a view into a slice.",35,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",35,null],[10,"to_rgb","","Convert this pixel to RGB",35,{"inputs":[{"name":"pixel"}],"output":{"name":"rgb"}}],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",35,{"inputs":[{"name":"pixel"}],"output":{"name":"rgba"}}],[10,"to_luma","","Convert this pixel to luma",35,{"inputs":[{"name":"pixel"}],"output":{"name":"luma"}}],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",35,{"inputs":[{"name":"pixel"}],"output":{"name":"lumaa"}}],[10,"map","","Apply the function ```f``` to each channel of this pixel.",35,{"inputs":[{"name":"pixel"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply","","Apply the function ```f``` to each channel of this pixel.",35,{"inputs":[{"name":"pixel"},{"name":"f"}],"output":null}],[10,"map_with_alpha","","Apply the function ```f``` to each channel except the alpha channel.\nApply the function ```g``` to the alpha channel.",35,{"inputs":[{"name":"pixel"},{"name":"f"},{"name":"g"}],"output":{"name":"self"}}],[10,"apply_with_alpha","","Apply the function ```f``` to each channel except the alpha channel.\nApply the function ```g``` to the alpha channel. Works in-place.",35,{"inputs":[{"name":"pixel"},{"name":"f"},{"name":"g"}],"output":null}],[10,"map2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise.",35,{"inputs":[{"name":"pixel"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise. Works in-place.",35,{"inputs":[{"name":"pixel"},{"name":"self"},{"name":"f"}],"output":null}],[10,"invert","","Invert this pixel",35,{"inputs":[{"name":"pixel"}],"output":null}],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",35,{"inputs":[{"name":"pixel"},{"name":"self"}],"output":null}],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",null,null],[10,"convert","","Converts `self` to a buffer of type T",36,{"inputs":[{"name":"convertbuffer"}],"output":{"name":"t"}}],[8,"Primitive","","Primitive trait from old stdlib",null,null],[11,"is_animated","","Returns true if the image is animated",33,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",33,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",33,{"inputs":[{"name":"imagedecoder"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[11,"width","","The width of this image.",34,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",34,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",34,{"inputs":[{"name":"genericimage"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",34,{"inputs":[{"name":"genericimage"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",34,{"inputs":[{"name":"genericimage"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",34,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to\nadjust it&#39;s alpha value accordingly.",37,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"FilterType"],[4,"ImageFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPDecoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex["rusttype"] = {"doc":"RustType is a pure Rust alternative to libraries like FreeType.","items":[[3,"Rect","rusttype","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",null,null],[12,"min","","",0,null],[12,"max","","",0,null],[3,"Point","","A point in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",1,null],[12,"y","","",1,null],[3,"Vector","","A vector in 2-dimensional space, with each dimension of type `N`.",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[3,"Line","","A straight line between two points, `p[0]` and `p[1]`",null,null],[12,"p","","",3,null],[3,"Curve","","A quadratic Bezier curve, starting at `p[0]`, ending at `p[2]`, with control point `p[1]`.",null,null],[12,"p","","",4,null],[3,"FontCollection","","A collection of fonts read straight from a font file&#39;s data. The data in the collection is not validated.\nThis structure may or may not own the font data.",null,null],[3,"Font","","A single font. This may or may not own the font data.",null,null],[3,"Codepoint","","Represents a Unicode code point.",null,null],[12,"0","","",5,null],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to\nthe correct glyph in a font other than the one that it was obtained from.",null,null],[12,"0","","",6,null],[3,"Glyph","","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or\nit may be a standalone glyph that owns the data needed by it.",null,null],[3,"HMetrics","","The &quot;horizontal metrics&quot; of a glyph. This is useful for calculating the horizontal offset of a glyph\nfrom the previous one in a string when laying a string out horizontally.",null,null],[12,"advance_width","","The horizontal offset that the origin of the next glyph should be from the origin of this glyph.",7,null],[12,"left_side_bearing","","The horizontal offset between the origin of this glyph and the leftmost edge/point of the glyph.",7,null],[3,"VMetrics","","The &quot;vertical metrics&quot; of a font at a particular scale. This is useful for calculating the amount of\nvertical space to give a line of text, and for computing the vertical offset between successive lines.",null,null],[12,"ascent","","The highest point that any glyph in the font extends to above the baseline. Typically positive.",8,null],[12,"descent","","The lowest point that any glyph in the font extends to below the baseline. Typically negative.",8,null],[12,"line_gap","","The gap to leave between the descent of one line and the ascent of the next. This is of\ncourse only a guideline given by the font&#39;s designers.",8,null],[3,"ScaledGlyph","","A glyph augmented with scaling information. You can query such a glyph for information that depends\non the scale of the glyph.",null,null],[3,"PositionedGlyph","","A glyph augmented with positioning and scaling information. You can query such a glyph for information\nthat depends on the scale and position of the glyph.",null,null],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical\nscale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the\nface will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor\n*f* in the horizontal direction is achieved by setting `x` equal to *f* times `y`.",null,null],[12,"x","","Horizontal scale, in pixels.",9,null],[12,"y","","Vertical scale, in pixels.",9,null],[3,"GlyphIter","","",null,null],[3,"LayoutIter","","",null,null],[3,"Contour","","A closed loop consisting of a sequence of `Segment`s.",null,null],[12,"segments","","",10,null],[4,"SharedBytes","","`SharedBytes` handles the lifetime of font data used in RustType. The data is either a shared\nreference to externally owned data, or managed by reference counting. `SharedBytes` can be\nconveniently used with `From` and `Into`, and dereferences to the contained bytes.",null,null],[13,"ByRef","","",11,null],[13,"ByArc","","",11,null],[4,"CodepointOrGlyphId","","Represents either a Unicode code point, or a glyph identifier for a font.",null,null],[13,"Codepoint","","",12,null],[13,"GlyphId","","",12,null],[4,"Segment","","Part of a `Contour`, either a `Line` or a `Curve`.",null,null],[13,"Line","","",13,null],[13,"Curve","","",13,null],[5,"point","","A convenience function for generating `Point`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"point"}}],[5,"vector","","A convenience function for generating `Vector`s.",null,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vector"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"point"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"point"}],"output":{"name":"point"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"vector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"vector"}],"output":{"name":"vector"}}],[11,"sub","","",1,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"vector"}}],[11,"add","","",2,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"sub","","",2,{"inputs":[{"name":"vector"},{"name":"vector"}],"output":{"name":"vector"}}],[11,"mul","","",2,{"inputs":[{"name":"vector"},{"name":"f32"}],"output":{"name":"vector"}}],[11,"mul","","",2,{"inputs":[{"name":"vector"},{"name":"f64"}],"output":{"name":"vector"}}],[11,"div","","",2,{"inputs":[{"name":"vector"},{"name":"f32"}],"output":{"name":"vector"}}],[11,"div","","",2,{"inputs":[{"name":"vector"},{"name":"f64"}],"output":{"name":"vector"}}],[11,"add","","",1,{"inputs":[{"name":"point"},{"name":"vector"}],"output":{"name":"point"}}],[11,"sub","","",1,{"inputs":[{"name":"point"},{"name":"vector"}],"output":{"name":"point"}}],[11,"add","","",2,{"inputs":[{"name":"vector"},{"name":"point"}],"output":{"name":"point"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"line"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"line"}],"output":{"name":"line"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"curve"},{"name":"curve"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"curve"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"curve"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"curve"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"curve"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"curve"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"curve"},{"name":"curve"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"curve"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"curve"}],"output":{"name":"curve"}}],[11,"cmp","","",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"width","","",0,{"inputs":[{"name":"rect"}],"output":{"name":"n"}}],[11,"height","","",0,{"inputs":[{"name":"rect"}],"output":{"name":"n"}}],[0,"gpu_cache","","This module provides capabilities for managing a cache of rendered glyphs in GPU memory, with the goal of\nminimisng the size and frequency of glyph uploads to GPU memory from the CPU.",null,null],[3,"Cache","rusttype::gpu_cache","An implementation of a dynamic GPU glyph cache. See the module documentation for more information.",null,null],[4,"CacheReadErr","","Returned from `Cache::rect_for`.",null,null],[13,"GlyphNotCached","","Indicates that the requested glyph is not present in the cache",14,null],[4,"CacheWriteErr","","Returned from `Cache::cache_queued`.",null,null],[13,"GlyphTooLarge","","At least one of the queued glyphs is too big to fit into the cache, even if all other glyphs are removed.",15,null],[13,"NoRoomForWholeQueue","","Not all of the requested glyphs can fit into the cache, even if the cache is completely cleared before\nthe attempt.",15,null],[11,"cmp","","",14,{"inputs":[{"name":"cachereaderr"},{"name":"cachereaderr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"cachereaderr"},{"name":"cachereaderr"}],"output":{"name":"option"}}],[11,"eq","","",14,{"inputs":[{"name":"cachereaderr"},{"name":"cachereaderr"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"cachereaderr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"cachereaderr"}],"output":{"name":"cachereaderr"}}],[11,"cmp","","",15,{"inputs":[{"name":"cachewriteerr"},{"name":"cachewriteerr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"cachewriteerr"},{"name":"cachewriteerr"}],"output":{"name":"option"}}],[11,"eq","","",15,{"inputs":[{"name":"cachewriteerr"},{"name":"cachewriteerr"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"cachewriteerr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"cachewriteerr"}],"output":{"name":"cachewriteerr"}}],[11,"new","","Constructs a new cache. Note that this is just the CPU side of the cache. The GPU texture is managed\nby the user.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"cache"}}],[11,"set_scale_tolerance","","Sets the scale tolerance for the cache. See the documentation for `Cache::new` for more information.",16,{"inputs":[{"name":"cache"},{"name":"f32"}],"output":null}],[11,"scale_tolerance","","Returns the current scale tolerance for the cache.",16,{"inputs":[{"name":"cache"}],"output":{"name":"f32"}}],[11,"set_position_tolerance","","Sets the subpixel position tolerance for the cache. See the documentation for `Cache::new` for more\ninformation.",16,{"inputs":[{"name":"cache"},{"name":"f32"}],"output":null}],[11,"position_tolerance","","Returns the current subpixel position tolerance for the cache.",16,{"inputs":[{"name":"cache"}],"output":{"name":"f32"}}],[11,"dimensions","","Returns the cache texture dimensions assumed by the cache. For proper operation this should\nmatch the dimensions of the used GPU texture.",16,null],[11,"queue_glyph","","Queue a glyph for caching by the next call to `cache_queued`. `font_id` is used to\ndisambiguate glyphs from different fonts. The user should ensure that `font_id` is unique to the\nfont the glyph is from.",16,{"inputs":[{"name":"cache"},{"name":"usize"},{"name":"positionedglyph"}],"output":null}],[11,"clear","","Clears the cache. Does not affect the glyph queue.",16,{"inputs":[{"name":"cache"}],"output":null}],[11,"clear_queue","","Clears the glyph queue.",16,{"inputs":[{"name":"cache"}],"output":null}],[11,"cache_queued","","Caches the queued glyphs. If this is unsuccessful, the queue is untouched.\nAny glyphs cached by previous calls to this function may be removed from the cache to make\nroom for the newly queued glyphs. Thus if you want to ensure that a glyph is in the cache,\nthe most recently cached queue must have contained that glyph.",16,{"inputs":[{"name":"cache"},{"name":"f"}],"output":{"name":"result"}}],[11,"rect_for","","Retrieves the (floating point) texture coordinates of the quad for a glyph in the cache,\nas well as the pixel-space (integer) coordinates that this region should be drawn at.\nIn the majority of cases these pixel-space coordinates should be identical to the bounding box of the\ninput glyph. They only differ if the cache has returned a substitute glyph that is deemed close enough\nto the requested glyph as specified by the cache tolerance parameters.",16,{"inputs":[{"name":"cache"},{"name":"usize"},{"name":"positionedglyph"}],"output":{"name":"result"}}],[11,"clone","rusttype","",17,{"inputs":[{"name":"fontcollection"}],"output":{"name":"fontcollection"}}],[11,"clone","","",18,{"inputs":[{"name":"font"}],"output":{"name":"font"}}],[11,"clone","","",11,{"inputs":[{"name":"sharedbytes"}],"output":{"name":"sharedbytes"}}],[11,"deref","","",11,null],[11,"from","","",11,null],[11,"from","","",11,{"inputs":[{"name":"arc"}],"output":{"name":"sharedbytes"}}],[11,"from","","",11,{"inputs":[{"name":"box"}],"output":{"name":"sharedbytes"}}],[11,"from","","",11,{"inputs":[{"name":"vec"}],"output":{"name":"sharedbytes"}}],[11,"cmp","","",5,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"cmp","","",12,{"inputs":[{"name":"codepointorglyphid"},{"name":"codepointorglyphid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"codepointorglyphid"},{"name":"codepointorglyphid"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"codepointorglyphid"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"codepointorglyphid"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"codepointorglyphid"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"codepointorglyphid"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"codepointorglyphid"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"codepointorglyphid"},{"name":"codepointorglyphid"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"codepointorglyphid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"codepointorglyphid"}],"output":{"name":"codepointorglyphid"}}],[11,"cmp","","",6,{"inputs":[{"name":"glyphid"},{"name":"glyphid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"glyphid"},{"name":"glyphid"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"glyphid"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"glyphid"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"glyphid"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"glyphid"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"glyphid"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"glyphid"},{"name":"glyphid"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"glyphid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"glyphid"}],"output":{"name":"glyphid"}}],[11,"clone","","",19,{"inputs":[{"name":"glyph"}],"output":{"name":"glyph"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"hmetrics"},{"name":"hmetrics"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"hmetrics"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"hmetrics"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"hmetrics"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"hmetrics"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"hmetrics"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"hmetrics"},{"name":"hmetrics"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"hmetrics"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"hmetrics"}],"output":{"name":"hmetrics"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"vmetrics"},{"name":"vmetrics"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"vmetrics"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"vmetrics"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"vmetrics"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"vmetrics"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"vmetrics"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"vmetrics"},{"name":"vmetrics"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"vmetrics"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"vmetrics"}],"output":{"name":"vmetrics"}}],[11,"clone","","",20,{"inputs":[{"name":"scaledglyph"}],"output":{"name":"scaledglyph"}}],[11,"clone","","",21,{"inputs":[{"name":"positionedglyph"}],"output":{"name":"positionedglyph"}}],[11,"fmt","","",9,{"inputs":[{"name":"scale"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"scale"},{"name":"scale"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"scale"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"scale"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"scale"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"scale"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"scale"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"scale"},{"name":"scale"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"scale"}],"output":{"name":"scale"}}],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",9,{"inputs":[{"name":"f32"}],"output":{"name":"scale"}}],[11,"from","","",5,{"inputs":[{"name":"char"}],"output":{"name":"codepoint"}}],[11,"from","","",12,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepointorglyphid"}}],[11,"from","","",12,{"inputs":[{"name":"glyphid"}],"output":{"name":"codepointorglyphid"}}],[11,"from","","",12,{"inputs":[{"name":"char"}],"output":{"name":"codepointorglyphid"}}],[11,"from_bytes","","Constructs a font collection from an array of bytes, typically loaded from a font file.\nThis array may be owned (e.g. `Vec&lt;u8&gt;`), or borrowed (`&amp;[u8]`).\nAs long as `From&lt;T&gt;` is implemented for `Bytes` for some type `T`, `T` can be used as input.",17,{"inputs":[{"name":"b"}],"output":{"name":"fontcollection"}}],[11,"into_font","","In the common case that a font collection consists of only one font, this function\nconsumes this font collection and turns it into a font. If this is not the case,\nor the font is not valid (read: not supported by this library), `None` is returned.",17,{"inputs":[{"name":"fontcollection"}],"output":{"name":"option"}}],[11,"font_at","","Gets the font at index `i` in the font collection, if it exists and is valid.\nThe produced font borrows the font data that is either borrowed or owned by this font collection.",17,{"inputs":[{"name":"fontcollection"},{"name":"usize"}],"output":{"name":"option"}}],[11,"v_metrics","","The &quot;vertical metrics&quot; for this font at a given scale. These metrics are shared by all of the glyphs\nin the font.\nSee `VMetrics` for more detail.",18,{"inputs":[{"name":"font"},{"name":"scale"}],"output":{"name":"vmetrics"}}],[11,"glyph_count","","The number of glyphs present in this font. Glyph identifiers for this font will always be in the range\n`0..self.glyph_count()`",18,{"inputs":[{"name":"font"}],"output":{"name":"usize"}}],[11,"glyph","","Returns the corresponding glyph for a Unicode code point or a glyph id for this font.\nIf id corresponds to a glyph identifier, the identifier must be valid (smaller than `self.glyph_count()`),\notherwise `None` is returned.",18,{"inputs":[{"name":"font"},{"name":"c"}],"output":{"name":"option"}}],[11,"glyphs_for","","A convenience function.",18,{"inputs":[{"name":"font"},{"name":"i"}],"output":{"name":"glyphiter"}}],[11,"layout","","A convenience function for laying out glyphs for a string horizontally. It does not take control\ncharacters like line breaks into account, as treatment of these is likely to depend on the application.",18,{"inputs":[{"name":"font"},{"name":"str"},{"name":"scale"},{"name":"point"}],"output":{"name":"layoutiter"}}],[11,"pair_kerning","","Returns additional kerning to apply as well as that given by HMetrics for a particular pair of glyphs.",18,{"inputs":[{"name":"font"},{"name":"scale"},{"name":"a"},{"name":"b"}],"output":{"name":"f32"}}],[11,"next","","",22,{"inputs":[{"name":"glyphiter"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"layoutiter"}],"output":{"name":"option"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources,\nit no longer has a reference to the font which it was created from (using `standalone()`). In which\ncase, `None` is returned.",19,{"inputs":[{"name":"glyph"}],"output":{"name":"option"}}],[11,"id","","The glyph identifier for this glyph.",19,{"inputs":[{"name":"glyph"}],"output":{"name":"glyphid"}}],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph\navailable.",19,{"inputs":[{"name":"glyph"},{"name":"scale"}],"output":{"name":"scaledglyph"}}],[11,"standalone","","Turns a `Glyph&lt;&#39;a&gt;` into a `Glyph&lt;&#39;static&gt;`. This produces a glyph that owns its resources,\nextracted from the font. This glyph can outlive the font that it comes from.",19,{"inputs":[{"name":"glyph"}],"output":{"name":"glyph"}}],[11,"fmt","","",13,{"inputs":[{"name":"segment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"segment"}],"output":{"name":"segment"}}],[11,"fmt","","",10,{"inputs":[{"name":"contour"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"contour"}],"output":{"name":"contour"}}],[11,"id","","The glyph identifier for this glyph.",20,{"inputs":[{"name":"scaledglyph"}],"output":{"name":"glyphid"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources,\nit no longer has a reference to the font which it was created from (using `standalone()`). In which\ncase, `None` is returned.",20,{"inputs":[{"name":"scaledglyph"}],"output":{"name":"option"}}],[11,"into_unscaled","","A reference to this glyph without the scaling",20,{"inputs":[{"name":"scaledglyph"}],"output":{"name":"glyph"}}],[11,"unscaled","","Removes the scaling from this glyph",20,{"inputs":[{"name":"scaledglyph"}],"output":{"name":"glyph"}}],[11,"positioned","","Augments this glyph with positioning information, making methods that depend on the position of the\nglyph available.",20,{"inputs":[{"name":"scaledglyph"},{"name":"point"}],"output":{"name":"positionedglyph"}}],[11,"scale","","",20,{"inputs":[{"name":"scaledglyph"}],"output":{"name":"scale"}}],[11,"h_metrics","","Retrieves the &quot;horizontal metrics&quot; of this glyph. See `HMetrics` for more detail.",20,{"inputs":[{"name":"scaledglyph"}],"output":{"name":"hmetrics"}}],[11,"shape","","Produces a list of the contours that make up the shape of this glyph. Each contour consists of\na sequence of segments. Each segment is either a straight `Line` or a `Curve`.",20,{"inputs":[{"name":"scaledglyph"}],"output":{"name":"option"}}],[11,"exact_bounding_box","","The bounding box of the shape of this glyph, not to be confused with `pixel_bounding_box`, the\nconservative pixel-boundary bounding box. The coordinates are relative to the glyph&#39;s origin.",20,{"inputs":[{"name":"scaledglyph"}],"output":{"name":"option"}}],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See\nthat function for more details.",20,{"inputs":[{"name":"scaledglyph"}],"output":{"name":"scaledglyph"}}],[11,"id","","The glyph identifier for this glyph.",21,{"inputs":[{"name":"positionedglyph"}],"output":{"name":"glyphid"}}],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources,\nit no longer has a reference to the font which it was created from (using `standalone()`). In which\ncase, `None` is returned.",21,{"inputs":[{"name":"positionedglyph"}],"output":{"name":"option"}}],[11,"unpositioned","","A reference to this glyph without positioning",21,{"inputs":[{"name":"positionedglyph"}],"output":{"name":"scaledglyph"}}],[11,"into_unpositioned","","Removes the positioning from this glyph",21,{"inputs":[{"name":"positionedglyph"}],"output":{"name":"scaledglyph"}}],[11,"pixel_bounding_box","","The conservative pixel-boundary bounding box for this glyph. This is the smallest rectangle\naligned to pixel boundaries that encloses the shape of this glyph at this position.",21,{"inputs":[{"name":"positionedglyph"}],"output":{"name":"option"}}],[11,"shape","","Similar to `ScaledGlyph::shape()`, but with the position of the glyph taken into account.",21,{"inputs":[{"name":"positionedglyph"}],"output":{"name":"option"}}],[11,"scale","","",21,{"inputs":[{"name":"positionedglyph"}],"output":{"name":"scale"}}],[11,"position","","",21,{"inputs":[{"name":"positionedglyph"}],"output":{"name":"point"}}],[11,"draw","","Rasterises this glyph. For each pixel in the rect given by `pixel_bounding_box()`, `o` is called:",21,{"inputs":[{"name":"positionedglyph"},{"name":"o"}],"output":null}],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See\nthat function for more details.",21,{"inputs":[{"name":"positionedglyph"}],"output":{"name":"positionedglyph"}}]],"paths":[[3,"Rect"],[3,"Point"],[3,"Vector"],[3,"Line"],[3,"Curve"],[3,"Codepoint"],[3,"GlyphId"],[3,"HMetrics"],[3,"VMetrics"],[3,"Scale"],[3,"Contour"],[4,"SharedBytes"],[4,"CodepointOrGlyphId"],[4,"Segment"],[4,"CacheReadErr"],[4,"CacheWriteErr"],[3,"Cache"],[3,"FontCollection"],[3,"Font"],[3,"Glyph"],[3,"ScaledGlyph"],[3,"PositionedGlyph"],[3,"GlyphIter"],[3,"LayoutIter"]]};
searchIndex["ndarray"] = {"doc":"The `ndarray` crate provides an N-dimensional container similar to numpy’s\nndarray.","items":[[3,"Indexes","ndarray","An iterator over the indexes of an array shape.",null,null],[3,"Si","","A slice, a description of a range of an array axis.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[12,"2","","",0,null],[3,"InnerIter","","An iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",null,null],[3,"InnerIterMut","","An iterator that traverses over all dimensions but the innermost,\nand yields each inner row (mutable).",null,null],[3,"OuterIter","","An iterator that traverses over the outermost dimension\nand yields each subview.",null,null],[3,"OuterIterMut","","An iterator that traverses over the outermost dimension\nand yields each subview (mutable).",null,null],[3,"ArrayBase","","An *N*-dimensional array.",null,null],[3,"ViewRepr","","Array view’s representation.",null,null],[3,"Elements","","An iterator over the elements of an array.",null,null],[3,"ElementsMut","","An iterator over the elements of an array (mutable).",null,null],[3,"Indexed","","An iterator over the indexes and elements of an array.",null,null],[3,"IndexedMut","","An iterator over the indexes and elements of an array (mutable).",null,null],[4,"ShapeError","","An error that can be produced by `.into_shape()`",null,null],[13,"IncompatibleShapes","","incompatible shapes in reshape, (from, to)",1,null],[13,"IncompatibleLayout","","incompatible layout: not contiguous",1,null],[13,"DimensionTooLarge","","Dimension too large (shape)",1,null],[5,"zeros","","Return an array filled with zeros",null,{"inputs":[{"name":"d"}],"output":{"name":"ownedarray"}}],[5,"arr0","","Return a zero-dimensional array with the element `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"array"}}],[5,"arr1","","Return a one-dimensional array with elements from `xs`.",null,null],[5,"aview0","","Return a zero-dimensional array view borrowing `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"arrayview"}}],[5,"aview1","","Return a one-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview2","","Return a two-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview_mut1","","Return a one-dimensional read-write array view with elements borrowing `xs`.",null,null],[5,"arr2","","Return a two-dimensional array with elements from `xs`.",null,null],[5,"arr3","","Return a three-dimensional array with elements from `xs`.",null,null],[0,"linalg","","***Deprecated: linalg is not in good shape.***",null,null],[5,"eye","ndarray::linalg","Return the identity matrix of dimension *n*.",null,{"inputs":[{"name":"ix"}],"output":{"name":"mat"}}],[5,"least_squares","","Solve *a x = b* with linear least squares approximation.",null,{"inputs":[{"name":"mat"},{"name":"col"}],"output":{"name":"col"}}],[5,"cholesky","","Factor *a = L L&lt;sup&gt;T&lt;/sup&gt;*.",null,{"inputs":[{"name":"mat"}],"output":{"name":"mat"}}],[5,"subst_fw","","Solve *L x = b* where *L* is a lower triangular matrix.",null,{"inputs":[{"name":"mat"},{"name":"col"}],"output":{"name":"col"}}],[5,"subst_bw","","Solve *U x = b* where *U* is an upper triangular matrix.",null,{"inputs":[{"name":"mat"},{"name":"col"}],"output":{"name":"col"}}],[6,"Col","","Column vector.",null,null],[6,"Mat","","Rectangular matrix.",null,null],[8,"Ring","","Trait union for a ring with 1.",null,null],[8,"Field","","Trait union for a field.",null,null],[8,"ComplexField","","A real or complex number.",null,null],[11,"conjugate","","",2,{"inputs":[{"name":"complexfield"}],"output":{"name":"self"}}],[10,"sqrt_real","","",2,{"inputs":[{"name":"complexfield"}],"output":{"name":"self"}}],[11,"is_complex","","",2,{"inputs":[],"output":{"name":"bool"}}],[11,"conjugate","num_complex","",3,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt_real","","",3,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_complex","","",3,{"inputs":[],"output":{"name":"bool"}}],[11,"index","ndarray","",4,{"inputs":[{"name":"arraybase"},{"name":"i"}],"output":{"name":"elem"}}],[11,"index_mut","","",4,{"inputs":[{"name":"arraybase"},{"name":"i"}],"output":{"name":"elem"}}],[11,"eq","","Return `true` if the array shapes and all elements of `self` and\n`rhs` are equal. Return `false` otherwise.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"bool"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"arraybase"}}],[11,"hash","","",4,{"inputs":[{"name":"arraybase"},{"name":"h"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"arraybase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"arraybase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"arraybase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"arraybase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"arraybase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ndim","collections::vec","",5,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"slice","","",5,null],[11,"slice_mut","","",5,null],[11,"remove_axis","","",5,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"clone","ndarray","",6,{"inputs":[{"name":"indexes"}],"output":{"name":"indexes"}}],[11,"new","","Create an iterator over the array shape `dim`.",6,{"inputs":[{"name":"d"}],"output":{"name":"indexes"}}],[11,"next","","",6,{"inputs":[{"name":"indexes"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"clone","","",7,{"inputs":[{"name":"elements"}],"output":{"name":"elements"}}],[11,"next","","",7,{"inputs":[{"name":"elements"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"elements"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"indexed"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next","","",9,{"inputs":[{"name":"elementsmut"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"elementsmut"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"indexedmut"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next","","",11,{"inputs":[{"name":"inneriter"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next","","",12,{"inputs":[{"name":"inneritermut"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next","","",13,{"inputs":[{"name":"outeriter"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"outeriter"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"outeritermut"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"inputs":[{"name":"outeritermut"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"si"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"si"},{"name":"si"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"si"},{"name":"si"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"si"}],"output":{"name":"si"}}],[11,"from","","",0,{"inputs":[{"name":"range"}],"output":{"name":"si"}}],[11,"from","","",0,{"inputs":[{"name":"rangefrom"}],"output":{"name":"si"}}],[11,"from","","",0,{"inputs":[{"name":"rangeto"}],"output":{"name":"si"}}],[11,"from","","",0,{"inputs":[{"name":"rangefull"}],"output":{"name":"si"}}],[11,"step","","",0,{"inputs":[{"name":"si"},{"name":"ixs"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"shapeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"shapeerror"}],"output":{"name":"shapeerror"}}],[11,"description","","",1,{"inputs":[{"name":"shapeerror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"shapeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",4,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"sub","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",4,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"mul","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",4,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"div","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",4,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"rem","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"rem","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"rem","","",4,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitand","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitand","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitand","","",4,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitor","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitor","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitor","","",4,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",4,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"shl","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shl","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shl","","",4,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"shr","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shr","","",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shr","","",4,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"add","num_complex","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"sub","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"mul","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"div","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"add","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"sub","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"mul","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"div","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",3,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"neg","ndarray","Perform an elementwise negation of `self` and return the result.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"not","","Perform an elementwise unary not of `self` and return the result.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[6,"Ix","","Array index type",null,null],[6,"Ixs","","Array index type (signed)",null,null],[6,"Array","","Array where the data is reference counted and copy on write, it\ncan act as both an owner as the data as well as a lightweight view.",null,null],[6,"OwnedArray","","Array where the data is owned uniquely.",null,null],[6,"ArrayView","","A lightweight array view.",null,null],[6,"ArrayViewMut","","A lightweight read-write array view.",null,null],[17,"S","","Slice value for the full range of an axis.",null,null],[8,"Dimension","","Trait for the shape and index types of arrays.",null,null],[16,"SliceArg","","`SliceArg` is the type which is used to specify slicing for this\ndimension.",15,null],[10,"ndim","","",15,{"inputs":[{"name":"dimension"}],"output":{"name":"usize"}}],[11,"slice","","",15,null],[11,"slice_mut","","",15,null],[11,"size","","",15,{"inputs":[{"name":"dimension"}],"output":{"name":"usize"}}],[11,"default_strides","","",15,{"inputs":[{"name":"dimension"}],"output":{"name":"self"}}],[11,"first_index","","",15,{"inputs":[{"name":"dimension"}],"output":{"name":"option"}}],[11,"next_for","","Iteration -- Use self as size, and return next index after `index`\nor None if there are no more.",15,{"inputs":[{"name":"dimension"},{"name":"self"}],"output":{"name":"option"}}],[11,"stride_offset","","Return stride offset for index.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",15,{"inputs":[{"name":"dimension"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"do_slices","","Modify dimension, strides and return data pointer offset",15,{"inputs":[{"name":"self"},{"name":"self"},{"name":"slicearg"}],"output":{"name":"isize"}}],[8,"RemoveAxis","","Helper trait to define a larger-than relation for array shapes:\nremoving one axis from *Self* gives smaller dimension *Smaller*.",null,null],[16,"Smaller","","",16,null],[10,"remove_axis","","",16,{"inputs":[{"name":"removeaxis"},{"name":"usize"}],"output":{"name":"smaller"}}],[8,"NdIndex","","A tuple or fixed size array that can be used to index an array.",null,null],[16,"Dim","","",17,null],[8,"Data","","Array’s inner representation.",null,null],[16,"Elem","","",18,null],[10,"slice","","",18,null],[8,"DataMut","","Array’s writable inner representation.",null,null],[10,"slice_mut","","",19,null],[11,"ensure_unique","","",19,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"is_unique","","",19,{"inputs":[{"name":"datamut"}],"output":{"name":"bool"}}],[8,"DataClone","","Clone an Array’s storage.",null,null],[10,"clone_with_ptr","","Unsafe because, `ptr` must point inside the current storage.",20,null],[8,"DataOwned","","Array representation that is a unique or shared owner of its data.",null,null],[10,"new","","",21,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_shared","","",21,{"inputs":[{"name":"dataowned"}],"output":{"name":"rc"}}],[8,"DataShared","","Array representation that is a lightweight view.",null,null],[8,"Initializer","","Slice or fixed-size array used for array initialization",null,null],[16,"Elem","","",22,null],[10,"as_init_slice","","",22,null],[11,"is_fixed_size","","",22,{"inputs":[],"output":{"name":"bool"}}],[8,"FixedInitializer","","Fixed-size array used for array initialization",null,null],[10,"len","","",23,{"inputs":[],"output":{"name":"usize"}}],[8,"Scalar","","Elements that can be used as direct operands in arithmetic with arrays.",null,null],[11,"slice","alloc::rc","",24,null],[11,"slice_mut","","",24,null],[11,"ensure_unique","","",24,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"is_unique","","",24,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"clone_with_ptr","","",24,null],[11,"slice","collections::vec","",5,null],[11,"slice_mut","","",5,null],[11,"clone_with_ptr","","",5,null],[11,"slice","ndarray","",25,null],[11,"clone_with_ptr","","",25,null],[11,"slice","","",25,null],[11,"slice_mut","","",25,null],[11,"new","collections::vec","",5,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_shared","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"rc"}}],[11,"new","alloc::rc","",24,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_shared","","",24,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"clone","ndarray","",25,{"inputs":[{"name":"viewrepr"}],"output":{"name":"viewrepr"}}],[11,"clone","","",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"from_vec","","Create a one-dimensional array from a vector (no allocation needed).",4,{"inputs":[{"name":"vec"}],"output":{"name":"arraybase"}}],[11,"from_iter","","Create a one-dimensional array from an iterable.",4,{"inputs":[{"name":"i"}],"output":{"name":"arraybase"}}],[11,"linspace","","Create a one-dimensional array from inclusive interval\n`[start, end]` with `n` elements. `F` must be a floating point type.",4,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"arraybase"}}],[11,"range","","Create a one-dimensional array from interval `[start, end)`",4,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"arraybase"}}],[11,"eye","","Create an identity matrix of size `n` (square 2D array).",4,{"inputs":[{"name":"ix"}],"output":{"name":"arraybase"}}],[11,"from_elem","","Create an array with copies of `elem`, dimension `dim`.",4,{"inputs":[{"name":"d"},{"name":"a"}],"output":{"name":"arraybase"}}],[11,"zeros","","Create an array with zeros, dimension `dim`.",4,{"inputs":[{"name":"d"}],"output":{"name":"arraybase"}}],[11,"default","","Create an array with default values, dimension `dim`.",4,{"inputs":[{"name":"d"}],"output":{"name":"arraybase"}}],[11,"from_vec_dim","","Create an array from a vector (with no allocation needed).",4,{"inputs":[{"name":"d"},{"name":"vec"}],"output":{"name":"arraybase"}}],[11,"into_outer_iter","","Return an outer iterator for this view.",26,{"inputs":[{"name":"arrayview"}],"output":{"name":"outeriter"}}],[11,"into_outer_iter","","",27,{"inputs":[{"name":"arrayviewmut"}],"output":{"name":"outeritermut"}}],[11,"len","","Return the total number of elements in the Array.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"usize"}}],[11,"dim","","Return the shape of the array.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"d"}}],[11,"shape","","Return the shape of the array as a slice.",4,null],[11,"strides","","Return the strides of the array",4,null],[11,"ndim","","Return the number of dimensions (axes) in the array",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"usize"}}],[11,"view","","Return a read-only view of the array",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"arrayview"}}],[11,"view_mut","","Return a read-write view of the array",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"arrayviewmut"}}],[11,"to_owned","","Return an uniquely owned copy of the array",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"to_shared","","Return a shared ownership (copy on write) array.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"array"}}],[11,"into_shared","","Turn the array into a shared ownership (copy on write) array,\nwithout any copying.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"array"}}],[11,"iter","","Return an iterator of references to the elements of the array.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"elements"}}],[11,"indexed_iter","","Return an iterator of references to the elements of the array.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"indexed"}}],[11,"iter_mut","","Return an iterator of mutable references to the elements of the array.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"elementsmut"}}],[11,"indexed_iter_mut","","Return an iterator of indexes and mutable references to the elements of the array.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"indexedmut"}}],[11,"slice","","Return a sliced array.",4,{"inputs":[{"name":"arraybase"},{"name":"slicearg"}],"output":{"name":"arrayview"}}],[11,"islice","","Slice the array’s view in place.",4,{"inputs":[{"name":"arraybase"},{"name":"slicearg"}],"output":null}],[11,"slice_iter","","***Deprecated: Use `.slice()` instead.***",4,{"inputs":[{"name":"arraybase"},{"name":"slicearg"}],"output":{"name":"elements"}}],[11,"slice_mut","","Return a sliced read-write view of the array.",4,{"inputs":[{"name":"arraybase"},{"name":"slicearg"}],"output":{"name":"arrayviewmut"}}],[11,"slice_iter_mut","","***Deprecated: use `.slice_mut()`***",4,{"inputs":[{"name":"arraybase"},{"name":"slicearg"}],"output":{"name":"elementsmut"}}],[11,"get","","Return a reference to the element at `index`, or return `None`\nif the index is out of bounds.",4,{"inputs":[{"name":"arraybase"},{"name":"i"}],"output":{"name":"option"}}],[11,"at","","***Deprecated: use .get(i)***",4,{"inputs":[{"name":"arraybase"},{"name":"d"}],"output":{"name":"option"}}],[11,"get_mut","","Return a mutable reference to the element at `index`, or return `None`\nif the index is out of bounds.",4,{"inputs":[{"name":"arraybase"},{"name":"i"}],"output":{"name":"option"}}],[11,"at_mut","","***Deprecated: use .get_mut(i)***",4,{"inputs":[{"name":"arraybase"},{"name":"d"}],"output":{"name":"option"}}],[11,"uget","","Perform *unchecked* array indexing.",4,{"inputs":[{"name":"arraybase"},{"name":"d"}],"output":{"name":"a"}}],[11,"uchk_at","","***Deprecated: use `.uget()`***",4,{"inputs":[{"name":"arraybase"},{"name":"d"}],"output":{"name":"a"}}],[11,"uget_mut","","Perform *unchecked* array indexing.",4,{"inputs":[{"name":"arraybase"},{"name":"d"}],"output":{"name":"a"}}],[11,"uchk_at_mut","","***Deprecated: use `.uget_mut()`***",4,{"inputs":[{"name":"arraybase"},{"name":"d"}],"output":{"name":"a"}}],[11,"swap_axes","","Swap axes `ax` and `bx`.",4,{"inputs":[{"name":"arraybase"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"subview","","Along `axis`, select the subview `index` and return a\nview with that axis removed.",4,{"inputs":[{"name":"arraybase"},{"name":"usize"},{"name":"ix"}],"output":{"name":"arrayview"}}],[11,"isubview","","Collapse dimension `axis` into length one,\nand select the subview of `index` along that axis.",4,{"inputs":[{"name":"arraybase"},{"name":"usize"},{"name":"ix"}],"output":null}],[11,"into_subview","","Along `axis`, select the subview `index` and return `self`\nwith that axis removed.",4,{"inputs":[{"name":"arraybase"},{"name":"usize"},{"name":"ix"}],"output":{"name":"arraybase"}}],[11,"subview_mut","","Along `axis`, select the subview `index` and return a read-write view\nwith the axis removed.",4,{"inputs":[{"name":"arraybase"},{"name":"usize"},{"name":"ix"}],"output":{"name":"arrayviewmut"}}],[11,"sub_iter_mut","","***Deprecated: use `.subview_mut()`***",4,{"inputs":[{"name":"arraybase"},{"name":"usize"},{"name":"ix"}],"output":{"name":"elementsmut"}}],[11,"inner_iter","","Return an iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"inneriter"}}],[11,"inner_iter_mut","","Return an iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"inneritermut"}}],[11,"outer_iter","","Return an iterator that traverses over the outermost dimension\nand yields each subview.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"outeriter"}}],[11,"outer_iter_mut","","Return an iterator that traverses over the outermost dimension\nand yields each subview.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"outeritermut"}}],[11,"axis_iter","","Return an iterator that traverses over `axis`\nand yields each subview along it.",4,{"inputs":[{"name":"arraybase"},{"name":"usize"}],"output":{"name":"outeriter"}}],[11,"axis_iter_mut","","Return an iterator that traverses over `axis`\nand yields each mutable subview along it.",4,{"inputs":[{"name":"arraybase"},{"name":"usize"}],"output":{"name":"outeritermut"}}],[11,"diag","","Return an view of the diagonal elements of the array.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"arrayview"}}],[11,"diag_mut","","Return a read-write view over the diagonal elements of the array.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"arrayviewmut"}}],[11,"into_diag","","Return the diagonal as a one-dimensional array.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"diag_iter","","***Deprecated: use `.diag()`***",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"elements"}}],[11,"diag_iter_mut","","***Deprecated: use `.diag_mut()`***",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"elementsmut"}}],[11,"is_standard_layout","","Return `true` if the array data is laid out in contiguous “C order” in\nmemory (where the last index is the most rapidly varying).",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"bool"}}],[11,"as_slice","","Return the array’s data as a slice, if it is contiguous and\nthe element order corresponds to the memory order. Return `None` otherwise.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"option"}}],[11,"as_slice_mut","","Return the array’s data as a slice, if it is contiguous and\nthe element order corresponds to the memory order. Return `None` otherwise.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"option"}}],[11,"reshape","","Transform the array into `shape`; any shape with the same number of\nelements is accepted.",4,{"inputs":[{"name":"arraybase"},{"name":"e"}],"output":{"name":"arraybase"}}],[11,"into_shape","","Transform the array into `shape`; any shape with the same number of\nelements is accepted, but the source array or view must be\ncontiguous, otherwise we cannot rearrange the dimension.",4,{"inputs":[{"name":"arraybase"},{"name":"e"}],"output":{"name":"result"}}],[11,"broadcast","","Act like a larger size and/or shape array by *broadcasting*\ninto a larger shape, if possible.",4,{"inputs":[{"name":"arraybase"},{"name":"e"}],"output":{"name":"option"}}],[11,"broadcast_iter","","***Deprecated: Use `.broadcast()` instead.***",4,{"inputs":[{"name":"arraybase"},{"name":"e"}],"output":{"name":"option"}}],[11,"raw_data","","Return a slice of the array’s backing data in memory order.",4,null],[11,"raw_data_mut","","Return a mutable slice of the array’s backing data in memory order.",4,null],[11,"assign","","Perform an elementwise assigment to `self` from `rhs`.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"assign_scalar","","Perform an elementwise assigment to `self` from scalar `x`.",4,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"zip_mut_with","","Traverse two arrays in unspecified order, in lock step,\ncalling the closure `f` on each element pair.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"},{"name":"f"}],"output":null}],[11,"fold","","Traverse the array elements in order and apply a fold,\nreturning the resulting value.",4,{"inputs":[{"name":"arraybase"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"map","","Apply `f` elementwise and return a new array with\nthe results.",4,{"inputs":[{"name":"arraybase"},{"name":"f"}],"output":{"name":"ownedarray"}}],[11,"sum","","Return sum along `axis`.",4,{"inputs":[{"name":"arraybase"},{"name":"usize"}],"output":{"name":"ownedarray"}}],[11,"scalar_sum","","Return the sum of all elements in the array.",4,{"inputs":[{"name":"arraybase"}],"output":{"name":"a"}}],[11,"mean","","Return mean along `axis`.",4,{"inputs":[{"name":"arraybase"},{"name":"usize"}],"output":{"name":"ownedarray"}}],[11,"allclose","","Return `true` if the arrays&#39; elementwise differences are all within\nthe given absolute tolerance.&lt;br&gt;\nReturn `false` otherwise, or if the shapes disagree.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"},{"name":"a"}],"output":{"name":"bool"}}],[11,"dot","","Compute the dot product of one-dimensional arrays.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"a"}}],[11,"row","","Return an array view of row `index`.",4,{"inputs":[{"name":"arraybase"},{"name":"ix"}],"output":{"name":"arrayview"}}],[11,"row_mut","","Return a mutable array view of row `index`.",4,{"inputs":[{"name":"arraybase"},{"name":"ix"}],"output":{"name":"arrayviewmut"}}],[11,"column","","Return an array view of column `index`.",4,{"inputs":[{"name":"arraybase"},{"name":"ix"}],"output":{"name":"arrayview"}}],[11,"column_mut","","Return a mutable array view of column `index`.",4,{"inputs":[{"name":"arraybase"},{"name":"ix"}],"output":{"name":"arrayviewmut"}}],[11,"row_iter","","***Deprecated: Use `.row()` instead.***",4,{"inputs":[{"name":"arraybase"},{"name":"ix"}],"output":{"name":"elements"}}],[11,"col_iter","","***Deprecated: Use `.column()` instead.***",4,{"inputs":[{"name":"arraybase"},{"name":"ix"}],"output":{"name":"elements"}}],[11,"mat_mul","","Perform matrix multiplication of rectangular arrays `self` and `rhs`.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"mat_mul_col","","Perform the matrix multiplication of the rectangular array `self` and\ncolumn vector `rhs`.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"iadd","","Perform elementwise\naddition\n between `self` and `rhs`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"iadd_scalar","","Perform elementwise\naddition\n between `self` and the scalar `x`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"isub","","Perform elementwise\nsubtraction\n between `self` and `rhs`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"isub_scalar","","Perform elementwise\nsubtraction\n between `self` and the scalar `x`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"imul","","Perform elementwise\nmultiplication\n between `self` and `rhs`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"imul_scalar","","Perform elementwise\nmultiplication\n between `self` and the scalar `x`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"idiv","","Perform elementwise\ndivision\n between `self` and `rhs`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"idiv_scalar","","Perform elementwise\ndivision\n between `self` and the scalar `x`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"irem","","Perform elementwise\nremainder\n between `self` and `rhs`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"irem_scalar","","Perform elementwise\nremainder\n between `self` and the scalar `x`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ibitand","","Perform elementwise\nbit and\n between `self` and `rhs`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"ibitand_scalar","","Perform elementwise\nbit and\n between `self` and the scalar `x`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ibitor","","Perform elementwise\nbit or\n between `self` and `rhs`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"ibitor_scalar","","Perform elementwise\nbit or\n between `self` and the scalar `x`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ibitxor","","Perform elementwise\nbit xor\n between `self` and `rhs`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"ibitxor_scalar","","Perform elementwise\nbit xor\n between `self` and the scalar `x`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ishl","","Perform elementwise\nleft shift\n between `self` and `rhs`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"ishl_scalar","","Perform elementwise\nleft shift\n between `self` and the scalar `x`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ishr","","Perform elementwise\nright shift\n between `self` and `rhs`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"ishr_scalar","","Perform elementwise\nright shift\n between `self` and the scalar `x`,\n *in place*.",4,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ineg","","Perform an elementwise negation of `self`, *in place*.",4,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"inot","","Perform an elementwise unary not of `self`, *in place*.",4,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"indexed"}],"output":{"name":"indexed"}}],[14,"s!","","Slice argument constructor.",null,null],[11,"into_iter","","",26,{"inputs":[{"name":"arrayview"}],"output":{"name":"intoiter"}}],[11,"into_iter","","",27,{"inputs":[{"name":"arrayviewmut"}],"output":{"name":"intoiter"}}],[11,"slice","","",15,null],[11,"slice_mut","","",15,null],[11,"size","","",15,{"inputs":[{"name":"dimension"}],"output":{"name":"usize"}}],[11,"default_strides","","",15,{"inputs":[{"name":"dimension"}],"output":{"name":"self"}}],[11,"first_index","","",15,{"inputs":[{"name":"dimension"}],"output":{"name":"option"}}],[11,"next_for","","Iteration -- Use self as size, and return next index after `index`\nor None if there are no more.",15,{"inputs":[{"name":"dimension"},{"name":"self"}],"output":{"name":"option"}}],[11,"stride_offset","","Return stride offset for index.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",15,{"inputs":[{"name":"dimension"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"do_slices","","Modify dimension, strides and return data pointer offset",15,{"inputs":[{"name":"self"},{"name":"self"},{"name":"slicearg"}],"output":{"name":"isize"}}],[11,"ndim","","",28,{"inputs":[{"name":"ix"}],"output":{"name":"usize"}}],[11,"size","","",28,{"inputs":[{"name":"ix"}],"output":{"name":"usize"}}],[11,"default_strides","","",28,{"inputs":[{"name":"ix"}],"output":{"name":"self"}}],[11,"first_index","","",28,{"inputs":[{"name":"ix"}],"output":{"name":"option"}}],[11,"next_for","","",28,{"inputs":[{"name":"ix"},{"name":"ix"}],"output":{"name":"option"}}],[11,"stride_offset","","Self is an index, return the stride offset",28,{"inputs":[{"name":"ix"},{"name":"ix"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",28,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"option"}}],[11,"remove_axis","","",28,null]],"paths":[[3,"Si"],[4,"ShapeError"],[8,"ComplexField"],[3,"Complex"],[3,"ArrayBase"],[3,"Vec"],[3,"Indexes"],[3,"Elements"],[3,"Indexed"],[3,"ElementsMut"],[3,"IndexedMut"],[3,"InnerIter"],[3,"InnerIterMut"],[3,"OuterIter"],[3,"OuterIterMut"],[8,"Dimension"],[8,"RemoveAxis"],[8,"NdIndex"],[8,"Data"],[8,"DataMut"],[8,"DataClone"],[8,"DataOwned"],[8,"Initializer"],[8,"FixedInitializer"],[3,"Rc"],[3,"ViewRepr"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"Ix"]]};
searchIndex["jpeg_decoder"] = {"doc":"","items":[[3,"Decoder","jpeg_decoder","",null,null],[3,"ImageInfo","","",null,null],[12,"width","","",0,null],[12,"height","","",0,null],[12,"pixel_format","","",0,null],[4,"PixelFormat","","",null,null],[13,"L8","","",1,null],[13,"RGB24","","",1,null],[13,"CMYK32","","",1,null],[4,"Error","","",null,null],[13,"Format","","",2,null],[13,"Unsupported","","",2,null],[13,"Io","","",2,null],[13,"Internal","","",2,null],[4,"UnsupportedFeature","","",null,null],[13,"Hierarchical","","",3,null],[13,"Lossless","","",3,null],[13,"ArithmeticEntropyCoding","","",3,null],[13,"SamplePrecision","","",3,null],[13,"ComponentCount","","",3,null],[13,"DNL","","",3,null],[13,"SubsamplingRatio","","",3,null],[11,"eq","","",1,{"inputs":[{"name":"pixelformat"},{"name":"pixelformat"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"pixelformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"pixelformat"}],"output":{"name":"pixelformat"}}],[11,"eq","","",0,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"imageinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"imageinfo"}],"output":{"name":"imageinfo"}}],[11,"new","","",4,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"info","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"option"}}],[11,"read_info","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"unsupportedfeature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"recverror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"senderror"}],"output":{"name":"error"}}]],"paths":[[3,"ImageInfo"],[4,"PixelFormat"],[4,"Error"],[4,"UnsupportedFeature"],[3,"Decoder"]]};
searchIndex["png"] = {"doc":"# PNG encoder and decoder\nThis crate contains a PNG decoder. It supports reading of single lines or whole frames.\n## The decoder\nThe most important types for decoding purposes are [`Decoder`](struct.Decoder.html) and\n[`Reader`](struct.Reader.html). They both wrap a `std::io::Read`.\n`Decoder` serves as a builder for `Reader`. Calling `Decoder::read_info` reads from the `Read` until the\nimage data is reached.\n### Using the decoder\n    use std::fs::File;","items":[[3,"FrameControl","png","Frame control information",null,null],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",0,null],[12,"width","","Width of the following frame",0,null],[12,"height","","Height of the following frame",0,null],[12,"x_offset","","X position at which to render the following frame",0,null],[12,"y_offset","","Y position at which to render the following frame",0,null],[12,"delay_num","","Frame delay fraction numerator",0,null],[12,"delay_den","","Frame delay fraction denominator",0,null],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",0,null],[12,"blend_op","","Type of frame area rendering for this frame",0,null],[3,"AnimationControl","","Animation control information",null,null],[12,"num_frames","","Number of frames",1,null],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",1,null],[3,"Info","","PNG info struct",null,null],[12,"width","","",2,null],[12,"height","","",2,null],[12,"bit_depth","","",2,null],[12,"color_type","","",2,null],[12,"interlaced","","",2,null],[12,"trns","","",2,null],[12,"palette","","",2,null],[12,"frame_control","","",2,null],[12,"animation_control","","",2,null],[3,"Transformations","","# Output transformations",null,null],[3,"Decoder","","PNG Decoder",null,null],[3,"Reader","","PNG reader (mostly high-level interface)",null,null],[3,"OutputInfo","","Output info",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"color_type","","",3,null],[12,"bit_depth","","",3,null],[12,"line_size","","",3,null],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",null,null],[3,"Encoder","","",null,null],[3,"Writer","","",null,null],[4,"ColorType","","",null,null],[13,"Grayscale","","",4,null],[13,"RGB","","",4,null],[13,"Indexed","","",4,null],[13,"GrayscaleAlpha","","",4,null],[13,"RGBA","","",4,null],[4,"BitDepth","","Bit depth of the png file",null,null],[13,"One","","",5,null],[13,"Two","","",5,null],[13,"Four","","",5,null],[13,"Eight","","",5,null],[13,"Sixteen","","",5,null],[4,"Decoded","","Result of the decoding process",null,null],[13,"Nothing","","Nothing decoded yet",6,null],[13,"Header","","",6,null],[13,"ChunkBegin","","",6,null],[13,"ChunkComplete","","",6,null],[13,"AnimationControl","","",6,null],[13,"FrameControl","","",6,null],[13,"ImageData","","Decoded raw image data.",6,null],[13,"PartialChunk","","",6,null],[13,"ImageEnd","","",6,null],[4,"DecodingError","","",null,null],[13,"IoError","","",7,null],[13,"Format","","",7,null],[13,"InvalidSignature","","",7,null],[13,"CrcMismatch","","",7,null],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",7,null],[12,"crc_val","","Stored CRC32 value",7,null],[12,"crc_sum","","Calculated CRC32 sum",7,null],[12,"chunk","","",7,null],[13,"Other","png","",7,null],[13,"CorruptFlateStream","","",7,null],[4,"EncodingError","","",null,null],[13,"IoError","","",8,null],[13,"Format","","",8,null],[0,"chunk","","Chunk types and functions",null,null],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"is_private","","Returns true if the chunk is private.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set.\nIf it is set the chunk name is invalid.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"save_to_copy","","Returns true if the chunk is safe to copy if unknown.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[6,"ChunkType","","",null,null],[17,"IHDR","","Image header",null,null],[17,"PLTE","","Palette",null,null],[17,"IDAT","","Image data",null,null],[17,"IEND","","Image trailer",null,null],[17,"tRNS","","Transparency",null,null],[17,"bKGD","","Background colour",null,null],[17,"tIME","","Image last-modification time",null,null],[17,"acTL","","Animation control",null,null],[17,"fcTL","","Frame control",null,null],[17,"fdAT","","Frame data",null,null],[11,"fmt","png","",6,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"decodingerror"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"from","","",7,{"inputs":[{"name":"string"}],"output":{"name":"decodingerror"}}],[11,"from","std::io::error","",9,{"inputs":[{"name":"decodingerror"}],"output":{"name":"error"}}],[11,"new","png","Creates a new StreamingDecoder",10,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"reset","","Resets the StreamingDecoder",10,{"inputs":[{"name":"streamingdecoder"}],"output":null}],[11,"update","","Low level StreamingDecoder interface.",10,null],[11,"set_param","","",11,{"inputs":[{"name":"transformations"},{"name":"decoder"}],"output":null}],[11,"buffer_size","","Returns the size needed to hold a decoded frame",3,{"inputs":[{"name":"outputinfo"}],"output":{"name":"usize"}}],[11,"new","","",12,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads all meta data until the first IDAT chunk",12,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"info","","",13,{"inputs":[{"name":"reader"}],"output":{"name":"info"}}],[11,"next_frame","","Decodes the next frame into `buf`",13,null],[11,"next_row","","Returns the next processed row of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"next_interlaced_row","","Returns the next processed row of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"output_color_type","","Returns the color type and the number of bits per sample\nof the data returned by `Reader::next_row` and Reader::frames`.",13,null],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame\nthat is decoded using the given input transformations.",13,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",13,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"fmt","","",8,{"inputs":[{"name":"encodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"encodingerror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"encodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"encodingerror"}}],[11,"from","std::io::error","",9,{"inputs":[{"name":"encodingerror"}],"output":{"name":"error"}}],[11,"new","png","",14,{"inputs":[{"name":"w"},{"name":"u32"},{"name":"u32"}],"output":{"name":"encoder"}}],[11,"write_header","","",14,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"set_param","","",4,{"inputs":[{"name":"colortype"},{"name":"encoder"}],"output":null}],[11,"set_param","","",5,{"inputs":[{"name":"bitdepth"},{"name":"encoder"}],"output":null}],[11,"write_chunk","","",15,null],[11,"write_image_data","","Writes the image data.",15,null],[11,"drop","","",15,{"inputs":[{"name":"writer"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",4,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",4,{"inputs":[{"name":"colortype"}],"output":{"name":"usize"}}],[11,"from_u8","","u8 -&gt; Self. Temporary solution until Rust provides a canonical one.",4,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"bitdepth"},{"name":"bitdepth"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"bitdepth"}],"output":{"name":"bitdepth"}}],[11,"fmt","","",5,{"inputs":[{"name":"bitdepth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","u8 -&gt; Self. Temporary solution until Rust provides a canonical one.",5,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"framecontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"animationcontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"animationcontrol"}],"output":{"name":"animationcontrol"}}],[11,"fmt","","",2,{"inputs":[{"name":"info"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"info"}}],[11,"size","","Size of the image",2,null],[11,"is_animated","","Returns true if the image is an APNG image.",2,{"inputs":[{"name":"info"}],"output":{"name":"bool"}}],[11,"animation_control","","Returns the frame control information of the image",2,{"inputs":[{"name":"info"}],"output":{"name":"option"}}],[11,"frame_control","","Returns the frame control information of the current frame",2,{"inputs":[{"name":"info"}],"output":{"name":"option"}}],[11,"bits_per_pixel","","Returns the bits per pixel",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"bytes_per_pixel","","Returns the bytes per pixel",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",2,{"inputs":[{"name":"info"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"hash","","",11,null],[11,"cmp","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"eq","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"transformations"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[],"output":{"name":"transformations"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[],"output":{"name":"transformations"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",11,{"inputs":[{"name":"u32"}],"output":{"name":"transformations"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"not","","Returns the complement of this set of flags.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"transformations"}}],[17,"TRANSFORM_IDENTITY","","No transformation",null,null],[17,"TRANSFORM_STRIP_16","","Strip 16-bit samples to 8 bits",null,null],[17,"TRANSFORM_STRIP_ALPHA","","Discard the alpha channel",null,null],[17,"TRANSFORM_PACKING","","Expand 1, 2 and 4-bit samples to bytes",null,null],[17,"TRANSFORM_PACKSWAP","","Change order of packed pixels to LSB first",null,null],[17,"TRANSFORM_EXPAND","","Expand paletted images to RGB, expand grayscale images of\nless than 8-bit depth to 8-bit depth, and expand tRNS chunks\nto alpha channels.",null,null],[17,"TRANSFORM_INVERT_MONO","","Invert monochrome images",null,null],[17,"TRANSFORM_SHIFT","","Normalize pixels to the sBIT depth",null,null],[17,"TRANSFORM_BGR","","Flip RGB to BGR, RGBA to BGRA",null,null],[17,"TRANSFORM_SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",null,null],[17,"TRANSFORM_SWAP_ENDIAN","","Byte-swap 16-bit samples",null,null],[17,"TRANSFORM_INVERT_ALPHA","","Change alpha from opacity to transparency",null,null],[17,"TRANSFORM_STRIP_FILLER","","",null,null],[17,"TRANSFORM_STRIP_FILLER_BEFORE","","",null,null],[17,"TRANSFORM_STRIP_FILLER_AFTER","","",null,null],[17,"TRANSFORM_GRAY_TO_RGB","","",null,null],[17,"TRANSFORM_EXPAND_16","","",null,null],[17,"TRANSFORM_SCALE_16","","",null,null],[8,"Parameter","","Configuration parameter trait",null,null],[10,"set_param","","",16,{"inputs":[{"name":"parameter"},{"name":"object"}],"output":null}],[8,"HasParameters","","Object has parameters",null,null],[11,"set","","",17,{"inputs":[{"name":"hasparameters"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","",17,{"inputs":[{"name":"hasparameters"},{"name":"t"}],"output":{"name":"self"}}]],"paths":[[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"Error"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex["piston"] = {"doc":"A user friendly game engine written in Rust.","items":[],"paths":[]};
searchIndex["enum_primitive"] = {"doc":"This crate exports a macro `enum_from_primitive!` that wraps an\n`enum` declaration and automatically adds an implementation of\n`num::FromPrimitive` (reexported here), to allow conversion from\nprimitive integers to the enum.  It therefore provides an\nalternative to the built-in `#[derive(FromPrimitive)]`, which\nrequires the unstable `std::num::FromPrimitive` and is disabled in\nRust 1.0.","items":[[11,"is_some","core::option","Returns `true` if the option is a `Some` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",0,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",0,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",0,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[4,"Option","enum_primitive","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive!","","Wrap this macro around an `enum` declaration to get an\nautomatically generated implementation of `num::FromPrimitive`.",null,null]],"paths":[[4,"Option"],[8,"FromPrimitive"]]};
searchIndex["event_loop"] = {"doc":"A generic event loop for games and interactive applications","items":[[3,"WindowEvents","event_loop","An event loop iterator",null,null],[17,"DEFAULT_UPS","","The default updates per second.",null,null],[17,"DEFAULT_MAX_FPS","","The default maximum frames per second.",null,null],[8,"Events","","A trait for create event iterator from window.",null,null],[10,"events","","Creates event iterator from window.",0,{"inputs":[{"name":"events"}],"output":{"name":"windowevents"}}],[8,"EventLoop","","Methods implements for event loop settings.",null,null],[10,"set_ups","","The number of updates per second",1,{"inputs":[{"name":"eventloop"},{"name":"u64"}],"output":null}],[11,"ups","","The number of updates per second",1,{"inputs":[{"name":"eventloop"},{"name":"u64"}],"output":{"name":"self"}}],[10,"set_max_fps","","The maximum number of frames per second",1,{"inputs":[{"name":"eventloop"},{"name":"u64"}],"output":null}],[11,"max_fps","","The maximum number of frames per second",1,{"inputs":[{"name":"eventloop"},{"name":"u64"}],"output":{"name":"self"}}],[10,"set_swap_buffers","","Enable or disable automatic swapping of buffers.",1,{"inputs":[{"name":"eventloop"},{"name":"bool"}],"output":null}],[11,"swap_buffers","","Enable or disable automatic swapping of buffers.",1,{"inputs":[{"name":"eventloop"},{"name":"bool"}],"output":{"name":"self"}}],[10,"set_bench_mode","","Enable or disable benchmark mode.\nWhen enabled, it will render and update without sleep and ignore input.\nUsed to test performance by playing through as fast as possible.",1,{"inputs":[{"name":"eventloop"},{"name":"bool"}],"output":null}],[11,"bench_mode","","Enable or disable benchmark mode.\nWhen enabled, it will render and update without sleep and ignore input.\nUsed to test performance by playing through as fast as possible.",1,{"inputs":[{"name":"eventloop"},{"name":"bool"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"windowevents"}],"output":{"name":"windowevents"}}],[11,"new","","Creates a new event iterator with default UPS and FPS settings.",2,{"inputs":[],"output":{"name":"windowevents"}}],[11,"next","","Returns the next game event.",2,{"inputs":[{"name":"windowevents"},{"name":"w"}],"output":{"name":"option"}}],[11,"set_ups","","",2,{"inputs":[{"name":"windowevents"},{"name":"u64"}],"output":null}],[11,"set_max_fps","","",2,{"inputs":[{"name":"windowevents"},{"name":"u64"}],"output":null}],[11,"set_swap_buffers","","",2,{"inputs":[{"name":"windowevents"},{"name":"bool"}],"output":null}],[11,"set_bench_mode","","",2,{"inputs":[{"name":"windowevents"},{"name":"bool"}],"output":null}]],"paths":[[8,"Events"],[8,"EventLoop"],[3,"WindowEvents"]]};
searchIndex["window"] = {"doc":"Window abstraction","items":[[3,"Size","window","Size in pixels.",null,null],[12,"width","","The width in pixels.",0,null],[12,"height","","The height in pixels.",0,null],[3,"WindowSettings","","Settings for window behavior.",null,null],[3,"NoWindow","","An implementation of Window that runs without a window at all.",null,null],[6,"ProcAddress","","The type of an OpenGL function address.",null,null],[8,"BuildFromWindowSettings","","Builds window from window settings.",null,null],[10,"build_from_window_settings","","Builds window from window settings.",1,{"inputs":[{"name":"windowsettings"}],"output":{"name":"result"}}],[8,"Window","","Required to use the event loop.",null,null],[16,"Event","","The event type emitted by `poll_event`",2,null],[10,"set_should_close","","Tells the window to close or stay open.",2,{"inputs":[{"name":"window"},{"name":"bool"}],"output":null}],[10,"should_close","","Returns true if window should close.",2,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[10,"size","","Gets the size of the window in user coordinates.",2,{"inputs":[{"name":"window"}],"output":{"name":"size"}}],[10,"swap_buffers","","Swaps render buffers.",2,{"inputs":[{"name":"window"}],"output":null}],[10,"poll_event","","Polls event from window.",2,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[10,"draw_size","","Gets draw size of the window.\nThis is equal to the size of the frame buffer of the inner window,\nexcluding the title bar and borders.",2,{"inputs":[{"name":"window"}],"output":{"name":"size"}}],[8,"AdvancedWindow","","Implemented by fully supported window back-ends.",null,null],[10,"get_title","","Gets a copy of the title of the window.",3,{"inputs":[{"name":"advancedwindow"}],"output":{"name":"string"}}],[10,"set_title","","Sets the title of the window.",3,{"inputs":[{"name":"advancedwindow"},{"name":"string"}],"output":null}],[11,"title","","Sets title on window.",3,{"inputs":[{"name":"advancedwindow"},{"name":"string"}],"output":{"name":"self"}}],[10,"get_exit_on_esc","","Gets whether to exit when pressing esc.",3,{"inputs":[{"name":"advancedwindow"}],"output":{"name":"bool"}}],[10,"set_exit_on_esc","","Sets whether to exit when pressing esc.",3,{"inputs":[{"name":"advancedwindow"},{"name":"bool"}],"output":null}],[11,"exit_on_esc","","Sets whether to exit when pressing esc.",3,{"inputs":[{"name":"advancedwindow"},{"name":"bool"}],"output":{"name":"self"}}],[10,"set_capture_cursor","","Sets whether to capture/grab cursor.\nThis is used to lock and hide cursor to the window,\nfor example in a first-person shooter game.",3,{"inputs":[{"name":"advancedwindow"},{"name":"bool"}],"output":null}],[11,"capture_cursor","","Sets whether to capture/grab cursor (see `set_capture_cursor`).",3,{"inputs":[{"name":"advancedwindow"},{"name":"bool"}],"output":{"name":"self"}}],[8,"OpenGLWindow","","Trait for OpenGL specific operations.",null,null],[10,"get_proc_address","","Returns the address of an OpenGL function if it exist, else returns null pointer.",4,{"inputs":[{"name":"openglwindow"},{"name":"str"}],"output":{"name":"procaddress"}}],[10,"is_current","","Returns true if this context is the current context.",4,{"inputs":[{"name":"openglwindow"}],"output":{"name":"bool"}}],[10,"make_current","","Make this context current.",4,{"inputs":[{"name":"openglwindow"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"size"}],"output":{"name":"size"}}],[11,"fmt","","",0,{"inputs":[{"name":"size"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,null],[11,"from","","",0,null],[11,"new","","Creates window settings with defaults.",5,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"windowsettings"}}],[11,"build","","Builds window.",5,{"inputs":[{"name":"windowsettings"}],"output":{"name":"result"}}],[11,"get_title","","Gets title.",5,{"inputs":[{"name":"windowsettings"}],"output":{"name":"string"}}],[11,"title","","Sets title.",5,{"inputs":[{"name":"windowsettings"},{"name":"string"}],"output":{"name":"self"}}],[11,"get_size","","Gets size.",5,{"inputs":[{"name":"windowsettings"}],"output":{"name":"size"}}],[11,"size","","Sets size.",5,{"inputs":[{"name":"windowsettings"},{"name":"size"}],"output":{"name":"self"}}],[11,"get_fullscreen","","Gets fullscreen.",5,{"inputs":[{"name":"windowsettings"}],"output":{"name":"bool"}}],[11,"fullscreen","","Sets fullscreen.",5,{"inputs":[{"name":"windowsettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_exit_on_esc","","Gets exit on esc.",5,{"inputs":[{"name":"windowsettings"}],"output":{"name":"bool"}}],[11,"exit_on_esc","","Sets exit on esc.",5,{"inputs":[{"name":"windowsettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_samples","","Gets samples.",5,{"inputs":[{"name":"windowsettings"}],"output":{"name":"u8"}}],[11,"samples","","Sets samples.",5,{"inputs":[{"name":"windowsettings"},{"name":"u8"}],"output":{"name":"self"}}],[11,"get_vsync","","Gets vsync.",5,{"inputs":[{"name":"windowsettings"}],"output":{"name":"bool"}}],[11,"vsync","","Sets vsync.",5,{"inputs":[{"name":"windowsettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_maybe_opengl","","Gets opengl.",5,{"inputs":[{"name":"windowsettings"}],"output":{"name":"option"}}],[11,"maybe_opengl","","Sets opengl.",5,{"inputs":[{"name":"windowsettings"},{"name":"option"}],"output":{"name":"self"}}],[11,"opengl","","Sets opengl.",5,{"inputs":[{"name":"windowsettings"},{"name":"opengl"}],"output":{"name":"self"}}],[11,"get_srgb","","Gets sRGB.",5,{"inputs":[{"name":"windowsettings"}],"output":{"name":"bool"}}],[11,"srgb","","Sets sRGB.",5,{"inputs":[{"name":"windowsettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"new","","Returns a new `NoWindow`.",6,{"inputs":[{"name":"windowsettings"}],"output":{"name":"nowindow"}}],[11,"should_close","","",6,{"inputs":[{"name":"nowindow"}],"output":{"name":"bool"}}],[11,"set_should_close","","",6,{"inputs":[{"name":"nowindow"},{"name":"bool"}],"output":null}],[11,"size","","",6,{"inputs":[{"name":"nowindow"}],"output":{"name":"size"}}],[11,"swap_buffers","","",6,{"inputs":[{"name":"nowindow"}],"output":null}],[11,"poll_event","","",6,{"inputs":[{"name":"nowindow"}],"output":{"name":"option"}}],[11,"draw_size","","",6,{"inputs":[{"name":"nowindow"}],"output":{"name":"size"}}],[11,"build_from_window_settings","","",6,{"inputs":[{"name":"windowsettings"}],"output":{"name":"result"}}],[11,"get_title","","",6,{"inputs":[{"name":"nowindow"}],"output":{"name":"string"}}],[11,"set_title","","",6,{"inputs":[{"name":"nowindow"},{"name":"string"}],"output":null}],[11,"get_exit_on_esc","","",6,{"inputs":[{"name":"nowindow"}],"output":{"name":"bool"}}],[11,"set_exit_on_esc","","",6,{"inputs":[{"name":"nowindow"},{"name":"bool"}],"output":null}],[11,"set_capture_cursor","","",6,{"inputs":[{"name":"nowindow"},{"name":"bool"}],"output":null}]],"paths":[[3,"Size"],[8,"BuildFromWindowSettings"],[8,"Window"],[8,"AdvancedWindow"],[8,"OpenGLWindow"],[3,"WindowSettings"],[3,"NoWindow"]]};
searchIndex["input"] = {"doc":"A flexible structure for user interactions\nto be used in window frameworks and widgets libraries.","items":[[3,"UpdateArgs","input","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",0,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",1,null],[12,"width","","The width of rendered area in points.",1,null],[12,"height","","The height of rendered area in points.",1,null],[12,"draw_width","","The width of rendered area in pixels.",1,null],[12,"draw_height","","The height of rendered area in pixels.",1,null],[3,"AfterRenderArgs","","After render arguments.",null,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",2,null],[3,"EventId","","Used to identify events arguments provided by traits.",null,null],[12,"0","","",3,null],[4,"Event","","Adds render and update events to input events",null,null],[13,"Render","","Render graphics.",4,null],[13,"AfterRender","","After rendering and swapping buffers.",4,null],[13,"Update","","Update the state of the application.",4,null],[13,"Idle","","Do background tasks that can be done incrementally.",4,null],[13,"Input","","Input event.",4,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",5,null],[13,"Mouse","","A mouse button.",5,null],[13,"Controller","","A controller button.",5,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",6,null],[13,"MouseRelative","","x and y in relative coordinates.",6,null],[13,"MouseScroll","","x and y in scroll ticks.",6,null],[13,"ControllerAxis","","joystick axis move event.",6,null],[4,"Input","","Models input events.",null,null],[13,"Press","","Pressed a button.",7,null],[13,"Release","","Released a button.",7,null],[13,"Move","","Moved mouse cursor.",7,null],[13,"Text","","Text (usually from keyboard).",7,null],[13,"Resize","","Window got resized.",7,null],[13,"Focus","","Window gained or lost focus.",7,null],[13,"Cursor","","Window gained or lost cursor.",7,null],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","input::keyboard","",null,null],[4,"Key","","Represent a keyboard key.\nKeycodes follows SDL http://wiki.libsdl.org/SDLKeycodeLookup",null,null],[13,"Unknown","","",8,null],[13,"Backspace","","",8,null],[13,"Tab","","",8,null],[13,"Return","","",8,null],[13,"Escape","","",8,null],[13,"Space","","",8,null],[13,"Exclaim","","",8,null],[13,"Quotedbl","","",8,null],[13,"Hash","","",8,null],[13,"Dollar","","",8,null],[13,"Percent","","",8,null],[13,"Ampersand","","",8,null],[13,"Quote","","",8,null],[13,"LeftParen","","",8,null],[13,"RightParen","","",8,null],[13,"Asterisk","","",8,null],[13,"Plus","","",8,null],[13,"Comma","","",8,null],[13,"Minus","","",8,null],[13,"Period","","",8,null],[13,"Slash","","",8,null],[13,"D0","","",8,null],[13,"D1","","",8,null],[13,"D2","","",8,null],[13,"D3","","",8,null],[13,"D4","","",8,null],[13,"D5","","",8,null],[13,"D6","","",8,null],[13,"D7","","",8,null],[13,"D8","","",8,null],[13,"D9","","",8,null],[13,"Colon","","",8,null],[13,"Semicolon","","",8,null],[13,"Less","","",8,null],[13,"Equals","","",8,null],[13,"Greater","","",8,null],[13,"Question","","",8,null],[13,"At","","",8,null],[13,"LeftBracket","","",8,null],[13,"Backslash","","",8,null],[13,"RightBracket","","",8,null],[13,"Caret","","",8,null],[13,"Underscore","","",8,null],[13,"Backquote","","",8,null],[13,"A","","",8,null],[13,"B","","",8,null],[13,"C","","",8,null],[13,"D","","",8,null],[13,"E","","",8,null],[13,"F","","",8,null],[13,"G","","",8,null],[13,"H","","",8,null],[13,"I","","",8,null],[13,"J","","",8,null],[13,"K","","",8,null],[13,"L","","",8,null],[13,"M","","",8,null],[13,"N","","",8,null],[13,"O","","",8,null],[13,"P","","",8,null],[13,"Q","","",8,null],[13,"R","","",8,null],[13,"S","","",8,null],[13,"T","","",8,null],[13,"U","","",8,null],[13,"V","","",8,null],[13,"W","","",8,null],[13,"X","","",8,null],[13,"Y","","",8,null],[13,"Z","","",8,null],[13,"Delete","","",8,null],[13,"CapsLock","","",8,null],[13,"F1","","",8,null],[13,"F2","","",8,null],[13,"F3","","",8,null],[13,"F4","","",8,null],[13,"F5","","",8,null],[13,"F6","","",8,null],[13,"F7","","",8,null],[13,"F8","","",8,null],[13,"F9","","",8,null],[13,"F10","","",8,null],[13,"F11","","",8,null],[13,"F12","","",8,null],[13,"PrintScreen","","",8,null],[13,"ScrollLock","","",8,null],[13,"Pause","","",8,null],[13,"Insert","","",8,null],[13,"Home","","",8,null],[13,"PageUp","","",8,null],[13,"End","","",8,null],[13,"PageDown","","",8,null],[13,"Right","","",8,null],[13,"Left","","",8,null],[13,"Down","","",8,null],[13,"Up","","",8,null],[13,"NumLockClear","","",8,null],[13,"NumPadDivide","","",8,null],[13,"NumPadMultiply","","",8,null],[13,"NumPadMinus","","",8,null],[13,"NumPadPlus","","",8,null],[13,"NumPadEnter","","",8,null],[13,"NumPad1","","",8,null],[13,"NumPad2","","",8,null],[13,"NumPad3","","",8,null],[13,"NumPad4","","",8,null],[13,"NumPad5","","",8,null],[13,"NumPad6","","",8,null],[13,"NumPad7","","",8,null],[13,"NumPad8","","",8,null],[13,"NumPad9","","",8,null],[13,"NumPad0","","",8,null],[13,"NumPadPeriod","","",8,null],[13,"Application","","",8,null],[13,"Power","","",8,null],[13,"NumPadEquals","","",8,null],[13,"F13","","",8,null],[13,"F14","","",8,null],[13,"F15","","",8,null],[13,"F16","","",8,null],[13,"F17","","",8,null],[13,"F18","","",8,null],[13,"F19","","",8,null],[13,"F20","","",8,null],[13,"F21","","",8,null],[13,"F22","","",8,null],[13,"F23","","",8,null],[13,"F24","","",8,null],[13,"Execute","","",8,null],[13,"Help","","",8,null],[13,"Menu","","",8,null],[13,"Select","","",8,null],[13,"Stop","","",8,null],[13,"Again","","",8,null],[13,"Undo","","",8,null],[13,"Cut","","",8,null],[13,"Copy","","",8,null],[13,"Paste","","",8,null],[13,"Find","","",8,null],[13,"Mute","","",8,null],[13,"VolumeUp","","",8,null],[13,"VolumeDown","","",8,null],[13,"NumPadComma","","",8,null],[13,"NumPadEqualsAS400","","",8,null],[13,"AltErase","","",8,null],[13,"Sysreq","","",8,null],[13,"Cancel","","",8,null],[13,"Clear","","",8,null],[13,"Prior","","",8,null],[13,"Return2","","",8,null],[13,"Separator","","",8,null],[13,"Out","","",8,null],[13,"Oper","","",8,null],[13,"ClearAgain","","",8,null],[13,"CrSel","","",8,null],[13,"ExSel","","",8,null],[13,"NumPad00","","",8,null],[13,"NumPad000","","",8,null],[13,"ThousandsSeparator","","",8,null],[13,"DecimalSeparator","","",8,null],[13,"CurrencyUnit","","",8,null],[13,"CurrencySubUnit","","",8,null],[13,"NumPadLeftParen","","",8,null],[13,"NumPadRightParen","","",8,null],[13,"NumPadLeftBrace","","",8,null],[13,"NumPadRightBrace","","",8,null],[13,"NumPadTab","","",8,null],[13,"NumPadBackspace","","",8,null],[13,"NumPadA","","",8,null],[13,"NumPadB","","",8,null],[13,"NumPadC","","",8,null],[13,"NumPadD","","",8,null],[13,"NumPadE","","",8,null],[13,"NumPadF","","",8,null],[13,"NumPadXor","","",8,null],[13,"NumPadPower","","",8,null],[13,"NumPadPercent","","",8,null],[13,"NumPadLess","","",8,null],[13,"NumPadGreater","","",8,null],[13,"NumPadAmpersand","","",8,null],[13,"NumPadDblAmpersand","","",8,null],[13,"NumPadVerticalBar","","",8,null],[13,"NumPadDblVerticalBar","","",8,null],[13,"NumPadColon","","",8,null],[13,"NumPadHash","","",8,null],[13,"NumPadSpace","","",8,null],[13,"NumPadAt","","",8,null],[13,"NumPadExclam","","",8,null],[13,"NumPadMemStore","","",8,null],[13,"NumPadMemRecall","","",8,null],[13,"NumPadMemClear","","",8,null],[13,"NumPadMemAdd","","",8,null],[13,"NumPadMemSubtract","","",8,null],[13,"NumPadMemMultiply","","",8,null],[13,"NumPadMemDivide","","",8,null],[13,"NumPadPlusMinus","","",8,null],[13,"NumPadClear","","",8,null],[13,"NumPadClearEntry","","",8,null],[13,"NumPadBinary","","",8,null],[13,"NumPadOctal","","",8,null],[13,"NumPadDecimal","","",8,null],[13,"NumPadHexadecimal","","",8,null],[13,"LCtrl","","",8,null],[13,"LShift","","",8,null],[13,"LAlt","","",8,null],[13,"LGui","","",8,null],[13,"RCtrl","","",8,null],[13,"RShift","","",8,null],[13,"RAlt","","",8,null],[13,"RGui","","",8,null],[13,"Mode","","",8,null],[13,"AudioNext","","",8,null],[13,"AudioPrev","","",8,null],[13,"AudioStop","","",8,null],[13,"AudioPlay","","",8,null],[13,"AudioMute","","",8,null],[13,"MediaSelect","","",8,null],[13,"Www","","",8,null],[13,"Mail","","",8,null],[13,"Calculator","","",8,null],[13,"Computer","","",8,null],[13,"AcSearch","","",8,null],[13,"AcHome","","",8,null],[13,"AcBack","","",8,null],[13,"AcForward","","",8,null],[13,"AcStop","","",8,null],[13,"AcRefresh","","",8,null],[13,"AcBookmarks","","",8,null],[13,"BrightnessDown","","",8,null],[13,"BrightnessUp","","",8,null],[13,"DisplaySwitch","","",8,null],[13,"KbdIllumToggle","","",8,null],[13,"KbdIllumDown","","",8,null],[13,"KbdIllumUp","","",8,null],[13,"Eject","","",8,null],[13,"Sleep","","",8,null],[17,"NO_MODIFIER","","No modifier.",null,null],[17,"CTRL","","Ctrl.",null,null],[17,"SHIFT","","Shift.",null,null],[17,"ALT","","Alt.",null,null],[17,"GUI","","Gui.",null,null],[17,"CTRL_SHIFT","","Ctrl + Shift.",null,null],[17,"CTRL_ALT","","Ctrl + Alt.",null,null],[17,"CTRL_GUI","","Ctrl + Gui.",null,null],[17,"CTRL_SHIFT_ALT","","Ctrl + Shift + Alt.",null,null],[17,"CTRL_SHIFT_GUI","","Ctrl + Shift + Gui.",null,null],[17,"CTRL_SHIFT_ALT_GUI","","Ctrl + Shift + Alt + Gui.",null,null],[17,"SHIFT_ALT","","Shift + Alt.",null,null],[17,"SHIFT_GUI","","Shift + Gui.",null,null],[17,"SHIFT_ALT_GUI","","Shift + Alt + Gui.",null,null],[17,"ALT_GUI","","Alt + Gui.",null,null],[11,"hash","","",9,null],[11,"cmp","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"eq","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"encode","","",9,{"inputs":[{"name":"modifierkey"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"modifierkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"inputs":[{"name":"modifierkey"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",9,{"inputs":[{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"inputs":[{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"inputs":[{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"not","","Returns the complement of this set of flags.",9,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"from_iter","","",9,{"inputs":[{"name":"t"}],"output":{"name":"modifierkey"}}],[11,"event","","Change modifier key state depending on input.",9,{"inputs":[{"name":"modifierkey"},{"name":"e"}],"output":null}],[11,"default","","",9,{"inputs":[],"output":{"name":"modifierkey"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"key"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from","","",8,{"inputs":[{"name":"u32"}],"output":{"name":"key"}}],[11,"eq","","",8,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"ordering"}}],[11,"code","","Returns an id of the key",8,{"inputs":[{"name":"key"}],"output":{"name":"i32"}}],[0,"mouse","input","Back-end agnostic mouse buttons.",null,null],[4,"MouseButton","input::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",10,null],[13,"Left","","Left mouse button.",10,null],[13,"Right","","Right mouse button.",10,null],[13,"Middle","","Middle mouse button.",10,null],[13,"X1","","Extra mouse button number 1.",10,null],[13,"X2","","Extra mouse button number 2.",10,null],[13,"Button6","","Mouse button number 6.",10,null],[13,"Button7","","Mouse button number 7.",10,null],[13,"Button8","","Mouse button number 8.",10,null],[8,"MouseCursorEvent","","The position of the mouse cursor",null,null],[10,"from_xy","","Creates a mouse cursor event.",11,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_cursor","","Calls closure if this is a mouse cursor event.",11,{"inputs":[{"name":"mousecursorevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_cursor_args","","Returns mouse cursor arguments.",11,{"inputs":[{"name":"mousecursorevent"}],"output":{"name":"option"}}],[8,"MouseRelativeEvent","","The relative movement of mouse cursor",null,null],[10,"from_xy","","Creates a mouse relative event.",12,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_relative","","Calls closure if this is a mouse relative event.",12,{"inputs":[{"name":"mouserelativeevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_relative_args","","Returns mouse relative arguments.",12,{"inputs":[{"name":"mouserelativeevent"}],"output":{"name":"option"}}],[8,"MouseScrollEvent","","The scroll of the mouse wheel",null,null],[10,"from_xy","","Creates a mouse scroll event.",13,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_scroll","","Calls a closure if this is a mouse scroll event.",13,{"inputs":[{"name":"mousescrollevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_scroll_args","","Returns mouse scroll arguments.",13,{"inputs":[{"name":"mousescrollevent"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"partial_cmp","","",10,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"ordering"}}],[11,"eq","","",10,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"encode","","",10,{"inputs":[{"name":"mousebutton"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"from","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"mousebutton"}}],[0,"controller","input","Back-end agnostic controller events.",null,null],[3,"ControllerButton","input::controller","Components of a controller button event. Not guaranteed consistent across\nbackends.",null,null],[12,"id","","Which controller was the button on.",14,null],[12,"button","","Which button was pressed.",14,null],[3,"ControllerAxisArgs","","Components of a controller axis move event. Not guaranteed consistent across\nbackends.",null,null],[12,"id","","Which controller moved.",15,null],[12,"axis","","The axis that moved.",15,null],[12,"position","","Position of the controller. Usually [-1.0, 1.0], though backends may use\na different range for various devices.",15,null],[8,"ControllerAxisEvent","","The position of a controller axis changed.",null,null],[10,"from_controller_axis_args","","Creates a controller axis event.",16,{"inputs":[{"name":"controlleraxisargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"controller_axis","","Calls closure if this is a controller axis event.",16,{"inputs":[{"name":"controlleraxisevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"controller_axis_args","","Returns controller axis arguments.",16,{"inputs":[{"name":"controlleraxisevent"}],"output":{"name":"option"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"controllerbutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"controllerbutton"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"controllerbutton"},{"name":"controllerbutton"}],"output":{"name":"bool"}}],[11,"encode","","",14,{"inputs":[{"name":"controllerbutton"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"controllerbutton"}],"output":{"name":"controllerbutton"}}],[11,"new","","Create a new ControllerButton object. Intended for use by backends when\nemitting events.",14,{"inputs":[{"name":"i32"},{"name":"u8"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"controlleraxisargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"controlleraxisargs"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"controlleraxisargs"},{"name":"controlleraxisargs"}],"output":{"name":"bool"}}],[11,"encode","","",15,{"inputs":[{"name":"controlleraxisargs"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"controlleraxisargs"}}],[11,"new","","Create a new ControllerAxisArgs object. Intended for use by backends when\nemitting events.",15,{"inputs":[{"name":"i32"},{"name":"u8"},{"name":"f64"}],"output":{"name":"self"}}],[0,"generic_event","input","Trait for generic events",null,null],[8,"GenericEvent","input::generic_event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",17,{"inputs":[{"name":"genericevent"}],"output":{"name":"eventid"}}],[10,"with_args","","Calls closure with arguments",17,{"inputs":[{"name":"genericevent"},{"name":"f"}],"output":{"name":"u"}}],[10,"from_args","","Converts from arguments to `Self`",17,{"inputs":[{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"event_id","input","",7,{"inputs":[{"name":"input"}],"output":{"name":"eventid"}}],[11,"with_args","","",7,{"inputs":[{"name":"input"},{"name":"f"}],"output":{"name":"u"}}],[11,"from_args","","",7,{"inputs":[{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"event_id","","",4,{"inputs":[{"name":"event"}],"output":{"name":"eventid"}}],[11,"with_args","","",4,{"inputs":[{"name":"event"},{"name":"f"}],"output":{"name":"u"}}],[11,"from_args","","",4,{"inputs":[{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"updateargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"updateargs"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"updateargs"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"updateargs"}],"output":{"name":"updateargs"}}],[11,"fmt","","",1,{"inputs":[{"name":"renderargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"renderargs"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"renderargs"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"renderargs"}],"output":{"name":"renderargs"}}],[11,"viewport","","Returns viewport information filling entire render area.",1,{"inputs":[{"name":"renderargs"}],"output":{"name":"viewport"}}],[11,"fmt","","",18,{"inputs":[{"name":"afterrenderargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"afterrenderargs"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"afterrenderargs"}}],[11,"fmt","","",2,{"inputs":[{"name":"idleargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"idleargs"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"idleargs"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"idleargs"}],"output":{"name":"idleargs"}}],[11,"fmt","","",4,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"from","","",4,{"inputs":[{"name":"renderargs"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"updateargs"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"idleargs"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"input"}],"output":{"name":"self"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",19,{"inputs":[{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",19,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"update","","Calls closure if this is an update event.",19,{"inputs":[{"name":"updateevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",19,{"inputs":[{"name":"updateevent"}],"output":{"name":"option"}}],[8,"RenderEvent","","When the next frame should be rendered",null,null],[10,"from_render_args","","Creates a render event.",20,{"inputs":[{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"render","","Calls closure if this is a render event.",20,{"inputs":[{"name":"renderevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",20,{"inputs":[{"name":"renderevent"}],"output":{"name":"option"}}],[8,"AfterRenderEvent","","After rendering and buffers are swapped.",null,null],[10,"from_after_render_args","","Creates an after render event.",21,{"inputs":[{"name":"afterrenderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"after_render","","Calls closure if this is an after render event.",21,{"inputs":[{"name":"afterrenderevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",21,{"inputs":[{"name":"afterrenderevent"}],"output":{"name":"option"}}],[8,"IdleEvent","","When background tasks should be performed",null,null],[10,"from_idle_args","","Creates an idle event.",22,{"inputs":[{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",22,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"idle","","Calls closure if this is an idle event.",22,{"inputs":[{"name":"idleevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",22,{"inputs":[{"name":"idleevent"}],"output":{"name":"option"}}],[8,"PressEvent","","The press of a button",null,null],[10,"from_button","","Creates a press event.",23,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"press","","Calls closure if this is a press event.",23,{"inputs":[{"name":"pressevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",23,{"inputs":[{"name":"pressevent"}],"output":{"name":"option"}}],[8,"ReleaseEvent","","The release of a button",null,null],[10,"from_button","","Creates a release event.",24,{"inputs":[{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"release","","Calls closure if this is a release event.",24,{"inputs":[{"name":"releaseevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",24,{"inputs":[{"name":"releaseevent"}],"output":{"name":"option"}}],[8,"TextEvent","","When receiving text from user, such as typing a character",null,null],[10,"from_text","","Creates a text event.",25,{"inputs":[{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[10,"text","","Calls closure if this is a text event.",25,{"inputs":[{"name":"textevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",25,{"inputs":[{"name":"textevent"}],"output":{"name":"option"}}],[8,"ResizeEvent","","When the window is resized",null,null],[10,"from_width_height","","Creates a resize event.",26,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[10,"resize","","Calls closure if this is a resize event.",26,{"inputs":[{"name":"resizeevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",26,{"inputs":[{"name":"resizeevent"}],"output":{"name":"option"}}],[8,"FocusEvent","","When window gets or loses focus",null,null],[10,"from_focused","","Creates a focus event.",27,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"focus","","Calls closure if this is a focus event.",27,{"inputs":[{"name":"focusevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",27,{"inputs":[{"name":"focusevent"}],"output":{"name":"option"}}],[8,"CursorEvent","","When window gets or loses cursor",null,null],[10,"from_cursor","","Creates a cursor event.",28,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"cursor","","Calls closure if this is a cursor event.",28,{"inputs":[{"name":"cursorevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",28,{"inputs":[{"name":"cursorevent"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"eventid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"eventid"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"eventid"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"eventid"}],"output":{"name":"eventid"}}],[11,"fmt","","",5,{"inputs":[{"name":"button"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"button"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"button"},{"name":"button"}],"output":{"name":"bool"}}],[11,"encode","","",5,{"inputs":[{"name":"button"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"button"}],"output":{"name":"button"}}],[11,"fmt","","",6,{"inputs":[{"name":"motion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"motion"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"motion"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"encode","","",6,{"inputs":[{"name":"motion"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"motion"}],"output":{"name":"motion"}}],[11,"fmt","","",7,{"inputs":[{"name":"input"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"input"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"input"},{"name":"input"}],"output":{"name":"bool"}}],[11,"encode","","",7,{"inputs":[{"name":"input"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"input"}],"output":{"name":"input"}}],[11,"from","","",5,{"inputs":[{"name":"key"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"mousebutton"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"controllerbutton"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"controlleraxisargs"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"motion"}],"output":{"name":"self"}}],[11,"from_dt","","Creates an update event with delta time.",19,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",19,{"inputs":[{"name":"updateevent"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",20,{"inputs":[{"name":"renderevent"}],"output":{"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",21,{"inputs":[{"name":"afterrenderevent"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",22,{"inputs":[{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",22,{"inputs":[{"name":"idleevent"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",23,{"inputs":[{"name":"pressevent"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",24,{"inputs":[{"name":"releaseevent"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",25,{"inputs":[{"name":"textevent"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",26,{"inputs":[{"name":"resizeevent"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",27,{"inputs":[{"name":"focusevent"}],"output":{"name":"option"}}],[11,"cursor_args","","Returns cursor arguments.",28,{"inputs":[{"name":"cursorevent"}],"output":{"name":"option"}}]],"paths":[[3,"UpdateArgs"],[3,"RenderArgs"],[3,"IdleArgs"],[3,"EventId"],[4,"Event"],[4,"Button"],[4,"Motion"],[4,"Input"],[4,"Key"],[3,"ModifierKey"],[4,"MouseButton"],[8,"MouseCursorEvent"],[8,"MouseRelativeEvent"],[8,"MouseScrollEvent"],[3,"ControllerButton"],[3,"ControllerAxisArgs"],[8,"ControllerAxisEvent"],[8,"GenericEvent"],[3,"AfterRenderArgs"],[8,"UpdateEvent"],[8,"RenderEvent"],[8,"AfterRenderEvent"],[8,"IdleEvent"],[8,"PressEvent"],[8,"ReleaseEvent"],[8,"TextEvent"],[8,"ResizeEvent"],[8,"FocusEvent"],[8,"CursorEvent"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[11,"new","num_bigint","Creates and initializes a BigInt.",0,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",0,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",0,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",0,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",0,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",0,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",0,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",0,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"to_i64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",0,null],[11,"div_floor","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",0,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"checked_div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"neg","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"shr","","",0,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shl","","",0,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bigint"}}],[11,"cmp","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"to_biguint","","",0,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[3,"BigInt","num","A big signed integer type.",null,null],[11,"to_bigint","num_bigint","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",1,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",1,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",1,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",1,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"to_biguint","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from_i64","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"to_i64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",1,null],[11,"div_floor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",1,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"checked_div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"neg","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"one","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"zero","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"shr","","",1,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl","","",1,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"bitxor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"biguint"}}],[11,"cmp","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"encode","","",1,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",1,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[3,"BigUint","num","A big unsigned integer type.",null,null],[6,"Rational","","",null,null],[6,"BigRational","","",null,null],[11,"new","num_complex","Create a new Complex",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",2,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",2,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",2,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",2,null],[11,"from_polar","","Convert a polar representation into a complex number.",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",2,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",2,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",2,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",2,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"complex"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",2,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"div","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",2,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"neg","","",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"encode","","",2,{"inputs":[{"name":"complex"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Complex","num","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",2,null],[12,"im","","Imaginary portion of the complex number",2,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",3,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",3,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",3,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",3,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",4,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",4,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",5,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",5,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",6,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",7,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",10,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",11,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",12,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",13,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",15,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",15,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",15,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",15,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",15,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[6,"BigDigit","num::bigint","",null,null],[6,"DoubleBigDigit","","",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[0,"big_digit","","",null,null],[17,"BITS","num::bigint::big_digit","",null,null],[17,"BASE","","",null,null],[5,"from_doublebigdigit","","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u64"}}],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",19,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[11,"hash","num_bigint","",20,null],[11,"mul","","",20,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"neg","","Negate Sign value.",20,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"encode","","",20,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"cmp","","",20,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",20,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","","",20,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Sign","num::bigint","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",20,null],[13,"NoSign","","",20,null],[13,"Plus","","",20,null],[3,"BigInt","","A big signed integer type.",null,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",21,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",22,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",22,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",22,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",22,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",22,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","num_bigint","",23,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"from","","",23,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[11,"description","","",23,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"ParseBigIntError","num::bigint","",null,null],[13,"ParseInt","","",23,null],[13,"Other","","",23,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",2,null],[12,"im","","Imaginary portion of the complex number",2,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",3,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",3,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",3,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",3,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",3,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"next_back","num_iter","",24,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"clone","","",24,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[11,"next_back","num_iter","",25,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[3,"RangeInclusive","num::iter","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[11,"clone","num_iter","",26,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",26,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[3,"RangeStep","num::iter","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[11,"clone","num_iter","",27,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",27,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[3,"RangeStepInclusive","num::iter","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",5,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",5,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",6,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",7,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",10,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",11,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",12,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",13,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[0,"float","num::traits","",null,null],[8,"Float","num::traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",15,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",15,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",15,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",15,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",15,null],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num::traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",4,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",4,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","num_traits","",28,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"FloatErrorKind","num::traits","",null,null],[13,"Empty","","",28,null],[13,"Invalid","","",28,null],[11,"fmt","num_traits","",29,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",29,null],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",5,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",5,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",8,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",6,{"inputs":[],"output":{"name":"self"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",13,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",15,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",15,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",15,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",15,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",15,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",15,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",15,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",15,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",15,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",15,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",11,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",12,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",9,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",14,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",14,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",14,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",10,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",7,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",7,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",7,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[11,"from_str","num_rational","Parses `numer/denom` or just `numer`.",30,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"abs","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",30,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"one","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"zero","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"neg","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"eq","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"from_float","","Converts a float into a rational number.",30,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"pow","","Raises the ratio to the power of an exponent",30,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",30,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"encode","","",30,{"inputs":[{"name":"ratio"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[6,"Rational","","",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","",null,null],[11,"fmt","num_rational","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"description","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}],[3,"ParseRatioError","num::rational","",null,null],[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[3,"BigInt"],[3,"BigUint"],[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[8,"RandBigInt"],[4,"ParseBigIntError"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"ratio"},{"name":"__st"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",0,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"ratio"},{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["euclid"] = {"doc":"","items":[[0,"approxeq","euclid","",null,null],[8,"ApproxEq","euclid::approxeq","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","",0,{"inputs":[],"output":{"name":"eps"}}],[10,"approx_eq","","",0,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[10,"approx_eq_eps","","",0,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"eps"}],"output":{"name":"bool"}}],[0,"length","euclid","A one-dimensional length, tagged with its units.",null,null],[3,"Length","euclid::length","A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.",null,null],[12,"0","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"length"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"length"},{"name":"__sunitt"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__dunitt"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"t"}],"output":{"name":"length"}}],[11,"get","","",1,{"inputs":[{"name":"length"}],"output":{"name":"t"}}],[11,"add","","",1,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"length"}}],[11,"sub","","",1,null],[11,"div","","",1,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"scalefactor"}}],[11,"mul","","",1,{"inputs":[{"name":"length"},{"name":"scalefactor"}],"output":{"name":"length"}}],[11,"div","","",1,{"inputs":[{"name":"length"},{"name":"scalefactor"}],"output":{"name":"length"}}],[11,"neg","","",1,{"inputs":[{"name":"length"}],"output":{"name":"length"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",1,{"inputs":[{"name":"length"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"length"}],"output":{"name":"length"}}],[11,"eq","","",1,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"ordering"}}],[11,"zero","","",1,{"inputs":[],"output":{"name":"length"}}],[0,"matrix","euclid","",null,null],[6,"Matrix4","euclid::matrix","",null,null],[0,"matrix2d","euclid","",null,null],[3,"Matrix2D","euclid::matrix2d","",null,null],[11,"clone","","",2,{"inputs":[{"name":"matrix2d"}],"output":{"name":"matrix2d"}}],[11,"new","","",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[11,"mul","","",2,{"inputs":[{"name":"matrix2d"},{"name":"matrix2d"}],"output":{"name":"matrix2d"}}],[11,"translate","","",2,{"inputs":[{"name":"matrix2d"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[11,"scale","","",2,{"inputs":[{"name":"matrix2d"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[11,"identity","","",2,{"inputs":[],"output":{"name":"matrix2d"}}],[11,"to_array","","",2,null],[11,"transform_point","","Returns the given point transformed by this matrix.",2,{"inputs":[{"name":"matrix2d"},{"name":"point2d"}],"output":{"name":"point2d"}}],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this\nmatrix.",2,{"inputs":[{"name":"matrix2d"},{"name":"rect"}],"output":{"name":"rect"}}],[0,"matrix4d","euclid","",null,null],[3,"Matrix4D","euclid::matrix4d","",null,null],[12,"m11","","",3,null],[12,"m12","","",3,null],[12,"m13","","",3,null],[12,"m14","","",3,null],[12,"m21","","",3,null],[12,"m22","","",3,null],[12,"m23","","",3,null],[12,"m24","","",3,null],[12,"m31","","",3,null],[12,"m32","","",3,null],[12,"m33","","",3,null],[12,"m34","","",3,null],[12,"m41","","",3,null],[12,"m42","","",3,null],[12,"m43","","",3,null],[12,"m44","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"matrix4d"},{"name":"matrix4d"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"matrix4d"},{"name":"matrix4d"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"matrix4d"}],"output":{"name":"matrix4d"}}],[11,"fmt","","",3,{"inputs":[{"name":"matrix4d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix4d"}}],[11,"new_2d","","",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix4d"}}],[11,"ortho","","",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix4d"}}],[11,"identity","","",3,{"inputs":[],"output":{"name":"matrix4d"}}],[11,"is_2d","","",3,{"inputs":[{"name":"matrix4d"}],"output":{"name":"bool"}}],[11,"approx_eq","","",3,{"inputs":[{"name":"matrix4d"},{"name":"matrix4d"}],"output":{"name":"bool"}}],[11,"mul","","",3,{"inputs":[{"name":"matrix4d"},{"name":"matrix4d"}],"output":{"name":"matrix4d"}}],[11,"invert","","",3,{"inputs":[{"name":"matrix4d"}],"output":{"name":"matrix4d"}}],[11,"determinant","","",3,{"inputs":[{"name":"matrix4d"}],"output":{"name":"t"}}],[11,"mul_s","","",3,{"inputs":[{"name":"matrix4d"},{"name":"t"}],"output":{"name":"matrix4d"}}],[11,"scale","","",3,{"inputs":[{"name":"matrix4d"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix4d"}}],[11,"transform_point","","Returns the given point transformed by this matrix.",3,{"inputs":[{"name":"matrix4d"},{"name":"point2d"}],"output":{"name":"point2d"}}],[11,"transform_point4d","","",3,{"inputs":[{"name":"matrix4d"},{"name":"point4d"}],"output":{"name":"point4d"}}],[11,"to_array","","",3,null],[11,"translate","","",3,{"inputs":[{"name":"matrix4d"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix4d"}}],[11,"create_translation","","Create a 3d translation matrix",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix4d"}}],[11,"create_scale","","Create a 3d scale matrix",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix4d"}}],[11,"create_rotation","","Create a 3d rotation matrix from an angle / axis.\nThe supplied axis must be normalized.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix4d"}}],[11,"create_skew","","Create a 2d skew matrix.\nhttps://drafts.csswg.org/css-transforms/#funcdef-skew",3,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"matrix4d"}}],[11,"create_perspective","","Create a simple perspective projection matrix",3,{"inputs":[{"name":"t"}],"output":{"name":"matrix4d"}}],[0,"num","euclid","A one-dimensional length, tagged with its units.",null,null],[8,"Zero","euclid::num","",null,null],[10,"zero","","",4,{"inputs":[],"output":{"name":"self"}}],[8,"One","","",null,null],[10,"one","","",5,{"inputs":[],"output":{"name":"self"}}],[0,"point","euclid","",null,null],[3,"Point2D","euclid::point","",null,null],[12,"x","","",6,null],[12,"y","","",6,null],[3,"Point3D","","",null,null],[12,"x","","",7,null],[12,"y","","",7,null],[12,"z","","",7,null],[3,"Point4D","","",null,null],[12,"x","","",8,null],[12,"y","","",8,null],[12,"z","","",8,null],[12,"w","","",8,null],[6,"TypedPoint2D","","",null,null],[11,"eq","","",6,{"inputs":[{"name":"point2d"},{"name":"point2d"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"point2d"},{"name":"point2d"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"encode","","",6,{"inputs":[{"name":"point2d"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"point2d"}],"output":{"name":"point2d"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"point2d"}}],[11,"fmt","","",6,{"inputs":[{"name":"point2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"point2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",6,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"point2d"}}],[11,"dot","","",6,{"inputs":[{"name":"point2d"},{"name":"point2d"}],"output":{"name":"t"}}],[11,"cross","","",6,{"inputs":[{"name":"point2d"},{"name":"point2d"}],"output":{"name":"t"}}],[11,"add","","",6,{"inputs":[{"name":"point2d"},{"name":"point2d"}],"output":{"name":"point2d"}}],[11,"add","","",6,{"inputs":[{"name":"point2d"},{"name":"size2d"}],"output":{"name":"point2d"}}],[11,"add_size","","",6,{"inputs":[{"name":"point2d"},{"name":"size2d"}],"output":{"name":"point2d"}}],[11,"sub","","",6,{"inputs":[{"name":"point2d"},{"name":"point2d"}],"output":{"name":"point2d"}}],[11,"neg","","",6,{"inputs":[{"name":"point2d"}],"output":{"name":"point2d"}}],[11,"min","","",6,{"inputs":[{"name":"point2d"},{"name":"point2d"}],"output":{"name":"point2d"}}],[11,"max","","",6,{"inputs":[{"name":"point2d"},{"name":"point2d"}],"output":{"name":"point2d"}}],[11,"mul","","",6,{"inputs":[{"name":"point2d"},{"name":"scale"}],"output":{"name":"point2d"}}],[11,"div","","",6,{"inputs":[{"name":"point2d"},{"name":"scale"}],"output":{"name":"point2d"}}],[11,"typed","","",9,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint2d"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",9,{"inputs":[{"name":"typedpoint2d"}],"output":{"name":"point2d"}}],[11,"from_untyped","","Tag a unitless value with units.",9,{"inputs":[{"name":"point2d"}],"output":{"name":"typedpoint2d"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",6,{"inputs":[{"name":"point2d"}],"output":{"name":"option"}}],[11,"as_f32","","",6,{"inputs":[{"name":"point2d"}],"output":{"name":"point2d"}}],[11,"as_uint","","",6,{"inputs":[{"name":"point2d"}],"output":{"name":"point2d"}}],[11,"eq","","",7,{"inputs":[{"name":"point3d"},{"name":"point3d"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"point3d"},{"name":"point3d"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"encode","","",7,{"inputs":[{"name":"point3d"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"point3d"}],"output":{"name":"point3d"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"point3d"}}],[11,"fmt","","",7,{"inputs":[{"name":"point3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"point3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",7,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"point3d"}}],[11,"dot","","",7,{"inputs":[{"name":"point3d"},{"name":"point3d"}],"output":{"name":"t"}}],[11,"cross","","",7,{"inputs":[{"name":"point3d"},{"name":"point3d"}],"output":{"name":"point3d"}}],[11,"add","","",7,{"inputs":[{"name":"point3d"},{"name":"point3d"}],"output":{"name":"point3d"}}],[11,"sub","","",7,{"inputs":[{"name":"point3d"},{"name":"point3d"}],"output":{"name":"point3d"}}],[11,"neg","","",7,{"inputs":[{"name":"point3d"}],"output":{"name":"point3d"}}],[11,"min","","",7,{"inputs":[{"name":"point3d"},{"name":"point3d"}],"output":{"name":"point3d"}}],[11,"max","","",7,{"inputs":[{"name":"point3d"},{"name":"point3d"}],"output":{"name":"point3d"}}],[11,"eq","","",8,{"inputs":[{"name":"point4d"},{"name":"point4d"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"point4d"},{"name":"point4d"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"encode","","",8,{"inputs":[{"name":"point4d"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"point4d"}],"output":{"name":"point4d"}}],[11,"zero","","",8,{"inputs":[],"output":{"name":"point4d"}}],[11,"fmt","","",8,{"inputs":[{"name":"point4d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"point4d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"point4d"}}],[11,"add","","",8,{"inputs":[{"name":"point4d"},{"name":"point4d"}],"output":{"name":"point4d"}}],[11,"sub","","",8,{"inputs":[{"name":"point4d"},{"name":"point4d"}],"output":{"name":"point4d"}}],[11,"neg","","",8,{"inputs":[{"name":"point4d"}],"output":{"name":"point4d"}}],[11,"min","","",8,{"inputs":[{"name":"point4d"},{"name":"point4d"}],"output":{"name":"point4d"}}],[11,"max","","",8,{"inputs":[{"name":"point4d"},{"name":"point4d"}],"output":{"name":"point4d"}}],[0,"rect","euclid","",null,null],[3,"Rect","euclid::rect","",null,null],[12,"origin","","",10,null],[12,"size","","",10,null],[5,"min","","",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[6,"TypedRect","","",null,null],[11,"eq","","",10,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"encode","","",10,{"inputs":[{"name":"rect"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"fmt","","",10,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"point2d"},{"name":"size2d"}],"output":{"name":"rect"}}],[11,"intersects","","",10,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"max_x","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"t"}}],[11,"min_x","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"t"}}],[11,"max_y","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"t"}}],[11,"min_y","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"t"}}],[11,"intersection","","",10,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"option"}}],[11,"translate","","",10,{"inputs":[{"name":"rect"},{"name":"point2d"}],"output":{"name":"rect"}}],[11,"contains","","",10,{"inputs":[{"name":"rect"},{"name":"point2d"}],"output":{"name":"bool"}}],[11,"inflate","","",10,{"inputs":[{"name":"rect"},{"name":"t"},{"name":"t"}],"output":{"name":"rect"}}],[11,"top_right","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"point2d"}}],[11,"bottom_left","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"point2d"}}],[11,"bottom_right","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"point2d"}}],[11,"translate_by_size","","",10,{"inputs":[{"name":"rect"},{"name":"size2d"}],"output":{"name":"rect"}}],[11,"union","","",10,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"rect"}}],[11,"scale","","",10,{"inputs":[{"name":"rect"},{"name":"scale"},{"name":"scale"}],"output":{"name":"rect"}}],[11,"zero","","",10,{"inputs":[],"output":{"name":"rect"}}],[11,"is_empty","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"bool"}}],[11,"mul","","",10,{"inputs":[{"name":"rect"},{"name":"scale"}],"output":{"name":"rect"}}],[11,"div","","",10,{"inputs":[{"name":"rect"},{"name":"scale"}],"output":{"name":"rect"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",10,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"from_untyped","","Tag a unitless value with units.",10,{"inputs":[{"name":"rect"}],"output":{"name":"typedrect"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",10,{"inputs":[{"name":"rect"}],"output":{"name":"option"}}],[11,"as_f32","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"as_uint","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[0,"scale_factor","euclid","A type-checked scaling factor between units.",null,null],[3,"ScaleFactor","euclid::scale_factor","A scaling factor between two different units of measurement.",null,null],[12,"0","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"scalefactor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"scalefactor"},{"name":"__ssrcdstt"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"__dsrcdstt"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"t"}],"output":{"name":"scalefactor"}}],[11,"get","","",11,{"inputs":[{"name":"scalefactor"}],"output":{"name":"t"}}],[11,"inv","","The inverse ScaleFactor (1.0 / self).",11,{"inputs":[{"name":"scalefactor"}],"output":{"name":"scalefactor"}}],[11,"mul","","",11,{"inputs":[{"name":"scalefactor"},{"name":"scalefactor"}],"output":{"name":"scalefactor"}}],[11,"add","","",11,{"inputs":[{"name":"scalefactor"},{"name":"scalefactor"}],"output":{"name":"scalefactor"}}],[11,"sub","","",11,{"inputs":[{"name":"scalefactor"},{"name":"scalefactor"}],"output":{"name":"scalefactor"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",11,{"inputs":[{"name":"scalefactor"}],"output":{"name":"option"}}],[11,"eq","","",11,{"inputs":[{"name":"scalefactor"},{"name":"scalefactor"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"scalefactor"}],"output":{"name":"scalefactor"}}],[0,"side_offsets","euclid","A group of side offsets, which correspond to top/left/bottom/right for borders, padding,\nand margins in CSS.",null,null],[3,"SideOffsets2D","euclid::side_offsets","A group of side offsets, which correspond to top/left/bottom/right for borders, padding,\nand margins in CSS.",null,null],[12,"top","","",12,null],[12,"right","","",12,null],[12,"bottom","","",12,null],[12,"left","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"sideoffsets2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"sideoffsets2d"},{"name":"sideoffsets2d"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"sideoffsets2d"},{"name":"sideoffsets2d"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"sideoffsets2d"}],"output":{"name":"sideoffsets2d"}}],[11,"new","","",12,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"sideoffsets2d"}}],[11,"new_all_same","","",12,{"inputs":[{"name":"t"}],"output":{"name":"sideoffsets2d"}}],[11,"horizontal","","",12,{"inputs":[{"name":"sideoffsets2d"}],"output":{"name":"t"}}],[11,"vertical","","",12,{"inputs":[{"name":"sideoffsets2d"}],"output":{"name":"t"}}],[11,"add","","",12,{"inputs":[{"name":"sideoffsets2d"},{"name":"sideoffsets2d"}],"output":{"name":"sideoffsets2d"}}],[11,"zero","","",12,{"inputs":[],"output":{"name":"sideoffsets2d"}}],[0,"size","euclid","",null,null],[3,"Size2D","euclid::size","",null,null],[12,"width","","",13,null],[12,"height","","",13,null],[6,"TypedSize2D","","",null,null],[11,"eq","","",13,{"inputs":[{"name":"size2d"},{"name":"size2d"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"size2d"},{"name":"size2d"}],"output":{"name":"bool"}}],[11,"encode","","",13,{"inputs":[{"name":"size2d"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"size2d"}],"output":{"name":"size2d"}}],[11,"fmt","","",13,{"inputs":[{"name":"size2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"size2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"size2d"}}],[11,"area","","",13,{"inputs":[{"name":"size2d"}],"output":{"name":"u"}}],[11,"zero","","",13,{"inputs":[],"output":{"name":"size2d"}}],[11,"zero","","",13,{"inputs":[],"output":{"name":"size2d"}}],[11,"mul","","",13,{"inputs":[{"name":"size2d"},{"name":"scale"}],"output":{"name":"size2d"}}],[11,"div","","",13,{"inputs":[{"name":"size2d"},{"name":"scale"}],"output":{"name":"size2d"}}],[11,"typed","","",13,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedsize2d"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",13,{"inputs":[{"name":"size2d"}],"output":{"name":"size2d"}}],[11,"from_untyped","","Tag a unitless value with units.",13,{"inputs":[{"name":"size2d"}],"output":{"name":"typedsize2d"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",13,{"inputs":[{"name":"size2d"}],"output":{"name":"option"}}],[11,"as_f32","","",13,{"inputs":[{"name":"size2d"}],"output":{"name":"size2d"}}],[11,"as_uint","","",13,{"inputs":[{"name":"size2d"}],"output":{"name":"size2d"}}]],"paths":[[8,"ApproxEq"],[3,"Length"],[3,"Matrix2D"],[3,"Matrix4D"],[8,"Zero"],[8,"One"],[3,"Point2D"],[3,"Point3D"],[3,"Point4D"],[6,"TypedPoint2D"],[3,"Rect"],[3,"ScaleFactor"],[3,"SideOffsets2D"],[3,"Size2D"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple *.next()*\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatDefault","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\nmore detail.",null,null],[13,"NoElements","","Empty iterator",3,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",3,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger\nthan the second",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",4,null],[4,"Partition","","Classifies the result of the `.partition_map()` closure into a\npartition.",null,null],[13,"Left","","Classify into the left partition.",5,null],[13,"Right","","Classify into the right partition.",5,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",6,null],[13,"Done","","Fold is complete and will return this value",6,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",7,{"inputs":[{"name":"interleave"}],"output":{"name":"interleave"}}],[11,"new","","Creat a new `Interleave` iterator.",7,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",7,{"inputs":[{"name":"interleave"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"interleaveshortest"}}],[11,"new","","Create a new `InterleaveShortest` iterator.",8,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",8,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"putback"}],"output":{"name":"putback"}}],[11,"new","","Iterator element type is `A`",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",9,{"inputs":[{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",9,null],[11,"put_back","","Put back a single value to the front of the iterator.",9,{"inputs":[{"name":"putback"},{"name":"item"}],"output":null}],[11,"next","","",9,{"inputs":[{"name":"putback"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"new","","Iterator element type is `A`",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",10,{"inputs":[{"name":"putbackn"},{"name":"item"}],"output":null}],[11,"next","","",10,{"inputs":[{"name":"putbackn"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"putbackn"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"product"}],"output":{"name":"product"}}],[11,"new","","Create a new cartesian product iterator",11,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",11,{"inputs":[{"name":"product"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"batching"}],"output":{"name":"batching"}}],[11,"new","","Create a new Batching iterator.",12,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",12,{"inputs":[{"name":"batching"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"groupby"}],"output":{"name":"groupby"}}],[11,"new","","Create a new `GroupBy` iterator.",13,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",13,{"inputs":[{"name":"groupby"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"step"}],"output":{"name":"step"}}],[11,"new","","Create a `Step` iterator.",14,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",14,{"inputs":[{"name":"step"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"merge"}],"output":{"name":"self"}}],[11,"next","","",15,{"inputs":[{"name":"merge"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"mergeby"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"mergeby"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"multipeek"}],"output":{"name":"multipeek"}}],[11,"new","","Create a `MultiPeek` iterator.",17,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like *.next()* with the only difference that it doesn&#39;t\nadvance itself. *.peek()* can be called multiple times, to peek\nfurther ahead.",17,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"next","","",17,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"coalesce"}],"output":{"name":"self"}}],[11,"new","","Create a new `Coalesce`.",18,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,{"inputs":[{"name":"coalesce"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"dedup"}],"output":{"name":"self"}}],[11,"new","","Create a new `Dedup`.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,{"inputs":[{"name":"dedup"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"mendslices"}],"output":{"name":"self"}}],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,{"inputs":[{"name":"mendslices"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",21,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",21,{"inputs":[{"name":"takewhileref"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"whilesome"}],"output":{"name":"whilesome"}}],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",22,{"inputs":[{"name":"whilesome"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"combinations"}],"output":{"name":"combinations"}}],[11,"new","","Create a new `Combinations` from a clonable iterator.",23,{"inputs":[{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",23,{"inputs":[{"name":"combinations"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",24,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",24,{"inputs":[{"name":"combinationsn"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"uniqueby"}],"output":{"name":"uniqueby"}}],[11,"new","","Create a new `UniqueBy` iterator.",25,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",25,{"inputs":[{"name":"uniqueby"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"next","","",26,{"inputs":[{"name":"unique"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"clone","","",26,{"inputs":[{"name":"unique"}],"output":{"name":"unique"}}],[11,"new","","Create a new `Flatten` iterator.",27,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",27,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"next_back","","",27,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"flatten"}],"output":{"name":"self"}}],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"clone","itertools","",28,{"inputs":[{"name":"formatdefault"}],"output":{"name":"formatdefault"}}],[11,"fmt","","",29,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"formatdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"groups"}],"output":{"name":"option"}}],[11,"drop","","",31,{"inputs":[{"name":"group"}],"output":null}],[11,"next","","",31,{"inputs":[{"name":"group"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"drop","","",33,{"inputs":[{"name":"chunk"}],"output":null}],[11,"next","","",33,{"inputs":[{"name":"chunk"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"intersperse"}],"output":{"name":"intersperse"}}],[11,"new","","Create a new Intersperse iterator",34,{"inputs":[{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",34,{"inputs":[{"name":"intersperse"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"islice"}],"output":{"name":"islice"}}],[11,"new","","Create a new **ISlice**.",35,{"inputs":[{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",35,{"inputs":[{"name":"islice"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",36,{"inputs":[{"name":"kmerge"}],"output":{"name":"kmerge"}}],[11,"next","","",36,{"inputs":[{"name":"kmerge"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"linspace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"linspace"}],"output":{"name":"linspace"}}],[11,"next","","",37,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"minmaxresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x, y)` is returned where `x &lt;= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",3,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"option"}}],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",38,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",38,{"inputs":[{"name":"intoiteratortuple"}],"output":{"name":"output"}}],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",39,null],[10,"append","","“Append” value `x` to a tuple.",39,{"inputs":[{"name":"appendtuple"},{"name":"x"}],"output":{"name":"result"}}],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",40,null],[11,"clone","","",41,{"inputs":[{"name":"flattuples"}],"output":{"name":"flattuples"}}],[11,"next","","",41,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next_back","","",41,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"start","core::ops","",42,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",43,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",44,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",44,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","itertools","",45,{"inputs":[{"name":"padusing"}],"output":{"name":"padusing"}}],[11,"new","","Create a new **PadUsing** iterator.",45,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",45,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next_back","","",45,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"rciter"}}],[11,"next","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"new","","Create a new **RepeatN** with **n** repetitions.",46,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",46,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"new","","Create a new `RepeatCall` from a closure.",47,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",47,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",48,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",49,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",48,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",48,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",48,{"inputs":[{"name":"stride"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",48,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",48,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",48,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",48,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",48,{"inputs":[{"name":"stride"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",48,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",48,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",49,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",49,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",49,{"inputs":[{"name":"stridemut"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",49,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",49,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",49,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",49,{"inputs":[{"name":"stridemut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",49,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",49,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"clone","","",48,{"inputs":[{"name":"stride"}],"output":{"name":"stride"}}],[11,"get_mut","","Return a mutable reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"index_mut","","Return a mutable reference to the element at a given index.",49,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"next","","",50,{"inputs":[{"name":"tee"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"zipeq"}],"output":{"name":"zipeq"}}],[11,"next","","",51,{"inputs":[{"name":"zipeq"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"ziplongest"}],"output":{"name":"ziplongest"}}],[11,"new","","Create a new `ZipLongest` iterator.",52,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",52,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"eitherorboth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"eitherorboth"}],"output":{"name":"eitherorboth"}}],[11,"clone","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"new","","Create a new `Zip` from a tuple of iterators.",53,{"inputs":[{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next","","",53,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"zipslices"}],"output":{"name":"zipslices"}}],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",54,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",54,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",54,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"len","","",54,{"inputs":[{"name":"zipslices"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",54,{"inputs":[{"name":"zipslices"},{"name":"usize"}],"output":{"name":"item"}}],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",55,{"inputs":[{"name":"itertools"},{"name":"item"}],"output":{"name":"intersperse"}}],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupbylazy"}}],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"chunkslazy"}}],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",55,null],[11,"slice","","Return a sliced iterator.",55,{"inputs":[{"name":"itertools"},{"name":"r"}],"output":{"name":"islice"}}],[11,"into_rc","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"rciter"}}],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"step"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",55,{"inputs":[{"name":"itertools"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"kmerge"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"product"}}],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"multipeek"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"mendslices"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"whilesome"}}],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"combinations"}}],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",55,{"inputs":[{"name":"itertools"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"flatten"}}],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",55,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",55,{"inputs":[{"name":"itertools"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",55,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":null}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",55,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",55,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"string"}}],[11,"format_default","","Format all iterator elements, separated by `sep`.",55,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"formatdefault"}}],[11,"format","","Format all iterator elements, separated by `sep`.",55,{"inputs":[{"name":"itertools"},{"name":"str"},{"name":"f"}],"output":{"name":"format"}}],[11,"fold_results","","Fold `Result` values from an iterator.",55,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",55,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator adaptor that applies a function, producing a single, final value.",55,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"option"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two\npartitions. Unlike `Iterator::partition`, each partition may\nhave a distinct type.",55,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",55,{"inputs":[{"name":"itertools"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by\nthe specified function.",55,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"MinMaxResult"],[4,"EitherOrBoth"],[4,"Partition"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"FormatDefault"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"complex"},{"name":"__st"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"]]};
searchIndex["rayon"] = {"doc":"","items":[[3,"Configuration","rayon","Contains the rayon thread pool configuration.",null,null],[3,"ThreadPool","","",null,null],[4,"InitError","","Custom error type for the rayon thread pool configuration.",null,null],[13,"NumberOfThreadsZero","","Error if number of threads is set to zero.",0,null],[13,"GlobalPoolAlreadyInitialized","","Error if the gloal thread pool is initialized multiple times\nand the configuration is not equal for all configurations.",0,null],[5,"dump_stats","","This is a debugging API not really intended for end users. It will\ndump some performance statistics out using `println`.",null,{"inputs":[],"output":null}],[5,"initialize","","Initializes the global thread pool. This initialization is\n**optional**.  If you do not call this function, the thread pool\nwill be automatically initialized with the default\nconfiguration. In fact, calling `initialize` is not recommended,\nexcept for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[5,"join","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"initerror"},{"name":"initerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"initerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"initerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"initerror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"configuration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"configuration"}],"output":{"name":"configuration"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",1,{"inputs":[],"output":{"name":"configuration"}}],[11,"num_threads","","Get the number of threads that will be used for the thread\npool. See `set_num_threads` for more information.",1,{"inputs":[{"name":"configuration"}],"output":{"name":"option"}}],[11,"set_num_threads","","Set the number of threads to be used in the rayon threadpool.\nThe argument `num_threads` must not be zero. If you do not\ncall this function, rayon will select a suitable default\n(currently, the default is one thread per CPU core).",1,{"inputs":[{"name":"configuration"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"new","","Constructs a new thread pool with the given configuration. If\nthe configuration is not valid, returns a suitable `Err`\nresult.  See `InitError` for more details.",2,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to `join`\nwhich occur there will then operate within that threadpool.",2,{"inputs":[{"name":"threadpool"},{"name":"op"}],"output":{"name":"r"}}],[11,"drop","","",2,{"inputs":[{"name":"threadpool"}],"output":null}],[0,"par_iter","","The `ParallelIterator` module makes it easy to write parallel\nprograms using an iterator-style interface. To get access to all\nthe methods you want, the easiest is to write `use\nrayon::prelude::*;` at the top of your module, which will import\nthe various traits and methods you need.",null,null],[0,"collect","rayon::par_iter","",null,null],[5,"collect_into","rayon::par_iter::collect","",null,{"inputs":[{"name":"par_iter"},{"name":"vec"}],"output":null}],[0,"enumerate","rayon::par_iter","",null,null],[3,"Enumerate","rayon::par_iter::enumerate","",null,null],[3,"EnumerateProducer","","",null,null],[11,"new","","",3,{"inputs":[{"name":"m"}],"output":{"name":"enumerate"}}],[11,"drive_unindexed","","",3,{"inputs":[{"name":"enumerate"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",3,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"drive","","",3,{"inputs":[{"name":"enumerate"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",3,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"with_producer","","",3,{"inputs":[{"name":"enumerate"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",4,{"inputs":[{"name":"enumerateproducer"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",4,null],[11,"into_iter","","",4,{"inputs":[{"name":"enumerateproducer"}],"output":{"name":"intoiter"}}],[0,"filter","rayon::par_iter","",null,null],[3,"Filter","rayon::par_iter::filter","",null,null],[11,"new","","",5,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filter"}}],[11,"drive_unindexed","","",5,{"inputs":[{"name":"filter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",5,{"inputs":[{"name":"filter"}],"output":{"name":"usize"}}],[11,"drive","","",5,{"inputs":[{"name":"filter"},{"name":"c"}],"output":{"name":"result"}}],[0,"filter_map","rayon::par_iter","",null,null],[3,"FilterMap","rayon::par_iter::filter_map","",null,null],[11,"new","","",6,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filtermap"}}],[11,"drive_unindexed","","",6,{"inputs":[{"name":"filtermap"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",6,{"inputs":[{"name":"filtermap"}],"output":{"name":"usize"}}],[11,"drive","","",6,{"inputs":[{"name":"filtermap"},{"name":"c"}],"output":{"name":"result"}}],[0,"flat_map","rayon::par_iter","",null,null],[3,"FlatMap","rayon::par_iter::flat_map","",null,null],[11,"new","","",7,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"flatmap"}}],[11,"drive_unindexed","","",7,{"inputs":[{"name":"flatmap"},{"name":"c"}],"output":{"name":"result"}}],[0,"internal","rayon::par_iter","Internal traits and functions used to implement parallel\niteration. These should be considered highly unstable: users of\nparallel iterators should not need to interact with them directly.\nSee `README.md` for a high-level overview.",null,null],[3,"NoopReducer","rayon::par_iter::internal","Utility type for consumers that don&#39;t need a &quot;reduce&quot; step. Just\nreduces unit to unit.",null,null],[5,"bridge","","",null,{"inputs":[{"name":"par_iter"},{"name":"c"}],"output":{"name":"result"}}],[8,"ProducerCallback","","",null,null],[16,"Output","","",8,null],[10,"callback","","",8,{"inputs":[{"name":"producercallback"},{"name":"p"}],"output":{"name":"output"}}],[8,"Producer","","A producer which will produce a fixed number of items N. This is\nnot queryable through the API; the consumer is expected to track\nit.",null,null],[10,"cost","","Cost to produce `len` items, where `len` must be `N`.",9,{"inputs":[{"name":"producer"},{"name":"usize"}],"output":{"name":"f64"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the\nother `index..N`. Index must be less than `N`.",9,null],[8,"Consumer","","A consumer which consumes items that are fed to it.",null,null],[16,"Folder","","",10,null],[16,"Reducer","","",10,null],[16,"Result","","",10,null],[10,"cost","","If it costs `producer_cost` to produce the items we will\nconsume, returns cost adjusted to account for consuming them.",10,{"inputs":[{"name":"consumer"},{"name":"f64"}],"output":{"name":"f64"}}],[10,"split_at","","Divide the consumer into two consumers, one processing items\n`0..index` and one processing items from `index..`. Also\nproduces a reducer that can be used to reduce the results at\nthe end.",10,null],[10,"into_folder","","Convert the consumer into a folder that can consume items\nsequentially, eventually producing a final result.",10,{"inputs":[{"name":"consumer"}],"output":{"name":"folder"}}],[8,"Folder","","",null,null],[16,"Result","","",11,null],[10,"consume","","Consume next item and return new sequential state.",11,{"inputs":[{"name":"folder"},{"name":"item"}],"output":{"name":"self"}}],[10,"complete","","Finish consuming items, produce final result.",11,{"inputs":[{"name":"folder"}],"output":{"name":"result"}}],[8,"Reducer","","",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a\nsplit.",12,{"inputs":[{"name":"reducer"},{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied.",null,null],[10,"split_off","","",13,{"inputs":[{"name":"unindexedconsumer"}],"output":{"name":"self"}}],[10,"to_reducer","","",13,{"inputs":[{"name":"unindexedconsumer"}],"output":{"name":"reducer"}}],[11,"reduce","","",14,null],[0,"len","rayon::par_iter","",null,null],[3,"ParallelLen","rayon::par_iter::len","",null,null],[12,"maximal_len","","Maximal number of elements that we will write",15,null],[12,"cost","","An estimate of the &quot;cost&quot; of this operation. This is a kind of\nabstract concept you can use to influence how fine-grained the\nthreads are.",15,null],[12,"sparse","","If true, all elements will be written. If false, some may not.\nFor example, `sparse` will be false if there is a filter.\nWhen doing a collect, sparse iterators require a compression\nstep.",15,null],[17,"THRESHOLD","","",null,null],[17,"FUNC_ADJUSTMENT","","",null,null],[11,"clone","","",15,{"inputs":[{"name":"parallellen"}],"output":{"name":"parallellen"}}],[11,"left_cost","","",15,{"inputs":[{"name":"parallellen"},{"name":"usize"}],"output":{"name":"parallellen"}}],[11,"right_cost","","",15,{"inputs":[{"name":"parallellen"},{"name":"usize"}],"output":{"name":"parallellen"}}],[0,"for_each","rayon::par_iter","",null,null],[5,"for_each","rayon::par_iter::for_each","",null,{"inputs":[{"name":"par_iter"},{"name":"op"}],"output":null}],[0,"reduce","rayon::par_iter","",null,null],[3,"ReduceFolder","rayon::par_iter::reduce","",null,null],[3,"SumOp","","",null,null],[3,"MulOp","","",null,null],[3,"MinOp","","",null,null],[3,"MaxOp","","",null,null],[3,"ReduceWithOp","","",null,null],[3,"ReduceWithIdentityOp","","",null,null],[5,"reduce","","",null,{"inputs":[{"name":"par_iter"},{"name":"reduce_op"}],"output":{"name":"t"}}],[17,"SUM","","",null,null],[17,"MUL","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[8,"ReduceOp","","Specifies a &quot;reduce operator&quot;. This is the combination of a start\nvalue and a reduce function. The reduce function takes two items\nand computes a reduced version. The start value `S` is a kind of\n&quot;zero&quot; or &quot;identity&quot; value that may be intermingled as needed;\nidealy, `reduce(S, X)` for any item `X` yields `X`.",null,null],[10,"start_value","","",16,{"inputs":[{"name":"reduceop"}],"output":{"name":"t"}}],[10,"reduce","","",16,{"inputs":[{"name":"reduceop"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"consume","","",17,{"inputs":[{"name":"reducefolder"},{"name":"item"}],"output":{"name":"self"}}],[11,"complete","","",17,{"inputs":[{"name":"reducefolder"}],"output":{"name":"item"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"i8"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"i16"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"i32"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"i64"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"isize"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"isize"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"u8"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"u16"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"u32"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"u64"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"usize"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"f32"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"start_value","","",18,{"inputs":[{"name":"sumop"}],"output":{"name":"f64"}}],[11,"reduce","","",18,{"inputs":[{"name":"sumop"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"i8"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"i16"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"i32"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"i64"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"isize"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"isize"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"u8"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"u16"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"u32"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"u64"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"usize"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"f32"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"start_value","","",19,{"inputs":[{"name":"mulop"}],"output":{"name":"f64"}}],[11,"reduce","","",19,{"inputs":[{"name":"mulop"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"i8"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"i16"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"i32"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"i64"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"isize"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"isize"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"u8"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"u16"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"u32"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"u64"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"usize"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"f32"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"start_value","","",20,{"inputs":[{"name":"minop"}],"output":{"name":"f64"}}],[11,"reduce","","",20,{"inputs":[{"name":"minop"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"i8"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"i16"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"i32"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"i64"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"isize"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"isize"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"u8"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"u16"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"u32"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"u64"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"usize"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"f32"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"start_value","","",21,{"inputs":[{"name":"maxop"}],"output":{"name":"f64"}}],[11,"reduce","","",21,{"inputs":[{"name":"maxop"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"new","","",22,{"inputs":[{"name":"op"}],"output":{"name":"reducewithop"}}],[11,"start_value","","",22,{"inputs":[{"name":"reducewithop"}],"output":{"name":"option"}}],[11,"reduce","","",22,{"inputs":[{"name":"reducewithop"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"new","","",23,{"inputs":[{"name":"item"},{"name":"op"}],"output":{"name":"reducewithidentityop"}}],[11,"start_value","","",23,{"inputs":[{"name":"reducewithidentityop"}],"output":{"name":"item"}}],[11,"reduce","","",23,{"inputs":[{"name":"reducewithidentityop"},{"name":"item"},{"name":"item"}],"output":{"name":"item"}}],[0,"slice","rayon::par_iter","",null,null],[3,"SliceIter","rayon::par_iter::slice","",null,null],[3,"SliceProducer","","",null,null],[11,"drive_unindexed","","",24,{"inputs":[{"name":"sliceiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",24,{"inputs":[{"name":"sliceiter"}],"output":{"name":"usize"}}],[11,"drive","","",24,{"inputs":[{"name":"sliceiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",24,{"inputs":[{"name":"sliceiter"}],"output":{"name":"usize"}}],[11,"with_producer","","",24,{"inputs":[{"name":"sliceiter"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",25,{"inputs":[{"name":"sliceproducer"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",25,null],[11,"into_iter","","",25,{"inputs":[{"name":"sliceproducer"}],"output":{"name":"intoiter"}}],[0,"slice_mut","rayon::par_iter","",null,null],[3,"SliceIterMut","rayon::par_iter::slice_mut","",null,null],[3,"SliceMutProducer","","",null,null],[11,"drive_unindexed","","",26,{"inputs":[{"name":"sliceitermut"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",26,{"inputs":[{"name":"sliceitermut"}],"output":{"name":"usize"}}],[11,"drive","","",26,{"inputs":[{"name":"sliceitermut"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",26,{"inputs":[{"name":"sliceitermut"}],"output":{"name":"usize"}}],[11,"with_producer","","",26,{"inputs":[{"name":"sliceitermut"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",27,{"inputs":[{"name":"slicemutproducer"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",27,null],[11,"into_iter","","",27,{"inputs":[{"name":"slicemutproducer"}],"output":{"name":"intoiter"}}],[0,"map","rayon::par_iter","",null,null],[3,"Map","rayon::par_iter::map","",null,null],[3,"MapProducer","","",null,null],[11,"new","","",28,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"map"}}],[11,"drive_unindexed","","",28,{"inputs":[{"name":"map"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",28,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"drive","","",28,{"inputs":[{"name":"map"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",28,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"with_producer","","",28,{"inputs":[{"name":"map"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",29,{"inputs":[{"name":"mapproducer"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",29,null],[11,"into_iter","","",29,{"inputs":[{"name":"mapproducer"}],"output":{"name":"intoiter"}}],[0,"weight","rayon::par_iter","",null,null],[3,"Weight","rayon::par_iter::weight","",null,null],[3,"WeightProducer","","",null,null],[11,"new","","",30,{"inputs":[{"name":"m"},{"name":"f64"}],"output":{"name":"weight"}}],[11,"drive_unindexed","","",30,{"inputs":[{"name":"weight"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",30,{"inputs":[{"name":"weight"}],"output":{"name":"usize"}}],[11,"drive","","",30,{"inputs":[{"name":"weight"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",30,{"inputs":[{"name":"weight"}],"output":{"name":"usize"}}],[11,"with_producer","","",30,{"inputs":[{"name":"weight"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",31,{"inputs":[{"name":"weightproducer"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",31,null],[11,"into_iter","","",31,{"inputs":[{"name":"weightproducer"}],"output":{"name":"intoiter"}}],[0,"zip","rayon::par_iter","",null,null],[3,"ZipIter","rayon::par_iter::zip","",null,null],[3,"ZipProducer","","",null,null],[11,"new","","",32,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"zipiter"}}],[11,"drive_unindexed","","",32,{"inputs":[{"name":"zipiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",32,{"inputs":[{"name":"zipiter"}],"output":{"name":"usize"}}],[11,"drive","","",32,{"inputs":[{"name":"zipiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",32,{"inputs":[{"name":"zipiter"}],"output":{"name":"usize"}}],[11,"with_producer","","",32,{"inputs":[{"name":"zipiter"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",33,{"inputs":[{"name":"zipproducer"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",33,null],[11,"into_iter","","",33,{"inputs":[{"name":"zipproducer"}],"output":{"name":"intoiter"}}],[0,"range","rayon::par_iter","",null,null],[3,"RangeIter","rayon::par_iter::range","",null,null],[11,"into_par_iter","core::ops","",34,{"inputs":[{"name":"range"}],"output":{"name":"iter"}}],[11,"drive_unindexed","rayon::par_iter::range","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"drive","","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"with_producer","","",35,{"inputs":[{"name":"rangeiter"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",35,{"inputs":[{"name":"rangeiter"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",35,null],[11,"into_iter","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"intoiter"}}],[11,"into_par_iter","core::ops","",34,{"inputs":[{"name":"range"}],"output":{"name":"iter"}}],[11,"drive_unindexed","rayon::par_iter::range","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"drive","","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"with_producer","","",35,{"inputs":[{"name":"rangeiter"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",35,{"inputs":[{"name":"rangeiter"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",35,null],[11,"into_iter","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"intoiter"}}],[11,"into_par_iter","core::ops","",34,{"inputs":[{"name":"range"}],"output":{"name":"iter"}}],[11,"drive_unindexed","rayon::par_iter::range","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"drive","","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"with_producer","","",35,{"inputs":[{"name":"rangeiter"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",35,{"inputs":[{"name":"rangeiter"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",35,null],[11,"into_iter","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"intoiter"}}],[11,"into_par_iter","core::ops","",34,{"inputs":[{"name":"range"}],"output":{"name":"iter"}}],[11,"drive_unindexed","rayon::par_iter::range","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"drive","","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"with_producer","","",35,{"inputs":[{"name":"rangeiter"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",35,{"inputs":[{"name":"rangeiter"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",35,null],[11,"into_iter","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"intoiter"}}],[11,"into_par_iter","core::ops","",34,{"inputs":[{"name":"range"}],"output":{"name":"iter"}}],[11,"drive_unindexed","rayon::par_iter::range","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"drive","","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"with_producer","","",35,{"inputs":[{"name":"rangeiter"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",35,{"inputs":[{"name":"rangeiter"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",35,null],[11,"into_iter","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"intoiter"}}],[11,"into_par_iter","core::ops","",34,{"inputs":[{"name":"range"}],"output":{"name":"iter"}}],[11,"drive_unindexed","rayon::par_iter::range","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"drive","","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"with_producer","","",35,{"inputs":[{"name":"rangeiter"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",35,{"inputs":[{"name":"rangeiter"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",35,null],[11,"into_iter","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"intoiter"}}],[11,"into_par_iter","core::ops","",34,{"inputs":[{"name":"range"}],"output":{"name":"iter"}}],[11,"drive_unindexed","rayon::par_iter::range","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"drive","","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"with_producer","","",35,{"inputs":[{"name":"rangeiter"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",35,{"inputs":[{"name":"rangeiter"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",35,null],[11,"into_iter","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"intoiter"}}],[11,"into_par_iter","core::ops","",34,{"inputs":[{"name":"range"}],"output":{"name":"iter"}}],[11,"drive_unindexed","rayon::par_iter::range","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"drive","","",35,{"inputs":[{"name":"rangeiter"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"usize"}}],[11,"with_producer","","",35,{"inputs":[{"name":"rangeiter"},{"name":"cb"}],"output":{"name":"output"}}],[11,"cost","","",35,{"inputs":[{"name":"rangeiter"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",35,null],[11,"into_iter","","",35,{"inputs":[{"name":"rangeiter"}],"output":{"name":"intoiter"}}],[0,"vec","rayon::par_iter","",null,null],[3,"VecIter","rayon::par_iter::vec","",null,null],[3,"VecProducer","","",null,null],[3,"SliceDrain","","",null,null],[11,"into_par_iter","collections::vec","",36,{"inputs":[{"name":"vec"}],"output":{"name":"iter"}}],[11,"drive_unindexed","rayon::par_iter::vec","",37,{"inputs":[{"name":"veciter"},{"name":"c"}],"output":{"name":"result"}}],[11,"upper_bound","","",37,{"inputs":[{"name":"veciter"}],"output":{"name":"usize"}}],[11,"drive","","",37,{"inputs":[{"name":"veciter"},{"name":"c"}],"output":{"name":"result"}}],[11,"len","","",37,{"inputs":[{"name":"veciter"}],"output":{"name":"usize"}}],[11,"with_producer","","",37,{"inputs":[{"name":"veciter"},{"name":"cb"}],"output":{"name":"output"}}],[11,"drop","","",37,{"inputs":[{"name":"veciter"}],"output":null}],[11,"cost","","",38,{"inputs":[{"name":"vecproducer"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"split_at","","",38,null],[11,"into_iter","","",38,{"inputs":[{"name":"vecproducer"}],"output":{"name":"intoiter"}}],[11,"drop","","",38,{"inputs":[{"name":"vecproducer"}],"output":null}],[11,"next","","",39,{"inputs":[{"name":"slicedrain"}],"output":{"name":"option"}}],[11,"drop","","",39,{"inputs":[{"name":"slicedrain"}],"output":null}],[8,"IntoParallelIterator","rayon::par_iter","",null,null],[16,"Iter","","",40,null],[16,"Item","","",40,null],[10,"into_par_iter","","",40,{"inputs":[{"name":"intoparalleliterator"}],"output":{"name":"iter"}}],[8,"IntoParallelRefIterator","","",null,null],[16,"Iter","","",41,null],[16,"Item","","",41,null],[10,"par_iter","","",41,{"inputs":[{"name":"intoparallelrefiterator"}],"output":{"name":"iter"}}],[8,"IntoParallelRefMutIterator","","",null,null],[16,"Iter","","",42,null],[16,"Item","","",42,null],[10,"par_iter_mut","","",42,{"inputs":[{"name":"intoparallelrefmutiterator"}],"output":{"name":"iter"}}],[8,"ParallelIterator","","The `ParallelIterator` interface.",null,null],[16,"Item","","",43,null],[11,"weight","","Indicates the relative &quot;weight&quot; of producing each item in this\nparallel iterator. A higher weight will cause finer-grained\nparallel subtasks. 1.0 indicates something very cheap and\nuniform, like copying a value out of an array, or computing `x\n+ 1`. If your tasks are either very expensive, or very\nunpredictable, you are better off with higher values. See also\n`weight_max`, which is a convenient shorthand to force the\nfinest grained parallel execution posible. Tuning this value\nshould not affect correctness but can improve (or hurt)\nperformance.",43,{"inputs":[{"name":"paralleliterator"},{"name":"f64"}],"output":{"name":"weight"}}],[11,"weight_max","","Shorthand for `self.weight(f64::INFINITY)`. This forces the\nsmallest granularity of parallel execution, which makes sense\nwhen your parallel tasks are (potentially) very expensive to\nexecute.",43,{"inputs":[{"name":"paralleliterator"}],"output":{"name":"weight"}}],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",43,{"inputs":[{"name":"paralleliterator"},{"name":"op"}],"output":null}],[11,"map","","Applies `map_op` to each item of his iterator, producing a new\niterator with the results.",43,{"inputs":[{"name":"paralleliterator"},{"name":"map_op"}],"output":{"name":"map"}}],[11,"filter","","Applies `map_op` to each item of his iterator, producing a new\niterator with the results.",43,{"inputs":[{"name":"paralleliterator"},{"name":"filter_op"}],"output":{"name":"filter"}}],[11,"filter_map","","Applies `map_op` to each item of his iterator, producing a new\niterator with the results.",43,{"inputs":[{"name":"paralleliterator"},{"name":"filter_op"}],"output":{"name":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of his iterator, producing a new\niterator with the results.",43,{"inputs":[{"name":"paralleliterator"},{"name":"map_op"}],"output":{"name":"flatmap"}}],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`.\nSee also `sum`, `mul`, `min`, etc, which are slightly more\nefficient. Returns `None` if the iterator is empty.",43,{"inputs":[{"name":"paralleliterator"},{"name":"op"}],"output":{"name":"option"}}],[11,"reduce_with_identity","","Reduces the items in the iterator into one item using `op`.\nThe argument `identity` represents an &quot;identity&quot; value which\nmay be inserted into the sequence as needed to create\nopportunities for parallel execution. So, for example, if you\nare doing a summation, then `identity` ought to be something\nthat represents the zero for your type (but consider just\ncalling `sum()` in that case).",43,{"inputs":[{"name":"paralleliterator"},{"name":"item"},{"name":"op"}],"output":{"name":"item"}}],[11,"sum","","Sums up the items in the iterator.",43,{"inputs":[{"name":"paralleliterator"}],"output":{"name":"item"}}],[11,"mul","","Multiplies all the items in the iterator.",43,{"inputs":[{"name":"paralleliterator"}],"output":{"name":"item"}}],[11,"min","","Computes the minimum of all the items in the iterator.",43,{"inputs":[{"name":"paralleliterator"}],"output":{"name":"item"}}],[11,"max","","Computes the maximum of all the items in the iterator.",43,{"inputs":[{"name":"paralleliterator"}],"output":{"name":"item"}}],[11,"reduce","","Reduces the items using the given &quot;reduce operator&quot;. You may\nprefer `reduce_with` for a simpler interface.",43,{"inputs":[{"name":"paralleliterator"},{"name":"reduce_op"}],"output":{"name":"item"}}],[8,"BoundedParallelIterator","","A trait for parallel iterators items where the precise number of\nitems is not known, but we can at least give an upper-bound. These\nsorts of iterators result from filtering.",null,null],[10,"upper_bound","","",44,{"inputs":[{"name":"boundedparalleliterator"}],"output":{"name":"usize"}}],[8,"ExactParallelIterator","","A trait for parallel iterators items where the precise number of\nitems is known. This occurs when e.g. iterating over a\nvector. Knowing precisely how many items will be produced is very\nuseful.",null,null],[10,"len","","Produces an exact count of how many items this iterator will\nproduce, presuming no panic occurs.",45,{"inputs":[{"name":"exactparalleliterator"}],"output":{"name":"usize"}}],[11,"collect_into","","Collects the results of the iterator into the specified\nvector. The vector is always truncated before execution\nbegins. If possible, reusing the vector across calls can lead\nto better performance since it reuses the same backing buffer.",45,{"inputs":[{"name":"exactparalleliterator"},{"name":"vec"}],"output":null}],[8,"IndexedParallelIterator","","An iterator that supports &quot;random access&quot; to its data, meaning\nthat you can split it at arbitrary indices and draw data from\nthose points.",null,null],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from\nthis iterator and `B` are from the iterator given as argument.\nLike the `zip` method on ordinary iterators, if the two\niterators are of unequal length, you only get the items they\nhave in common.",46,{"inputs":[{"name":"indexedparalleliterator"},{"name":"zip_op"}],"output":{"name":"zipiter"}}],[11,"enumerate","","Yields an index along with each item.",46,{"inputs":[{"name":"indexedparalleliterator"}],"output":{"name":"enumerate"}}],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits.\nThe intention is that one can include `use rayon::prelude::*` and\nhave easy access to the various traits and methods you will need.",null,null]],"paths":[[4,"InitError"],[3,"Configuration"],[3,"ThreadPool"],[3,"Enumerate"],[3,"EnumerateProducer"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[3,"NoopReducer"],[3,"ParallelLen"],[8,"ReduceOp"],[3,"ReduceFolder"],[3,"SumOp"],[3,"MulOp"],[3,"MinOp"],[3,"MaxOp"],[3,"ReduceWithOp"],[3,"ReduceWithIdentityOp"],[3,"SliceIter"],[3,"SliceProducer"],[3,"SliceIterMut"],[3,"SliceMutProducer"],[3,"Map"],[3,"MapProducer"],[3,"Weight"],[3,"WeightProducer"],[3,"ZipIter"],[3,"ZipProducer"],[3,"Range"],[3,"RangeIter"],[3,"Vec"],[3,"VecIter"],[3,"VecProducer"],[3,"SliceDrain"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"BoundedParallelIterator"],[8,"ExactParallelIterator"],[8,"IndexedParallelIterator"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["wayland_window"] = {"doc":"Wayland Window, a minimalistic decoration-drawing library for\nwayland applications.","items":[[3,"DecoratedSurface","wayland_window","A wrapper for a decorated surface.",null,null],[5,"substract_borders","","Substracts the border dimensions from the given dimensions.",null,null],[5,"add_borders","","Adds the border dimensions to the given dimensions.",null,null],[11,"resize","","Resizes the borders to given width and height.",0,{"inputs":[{"name":"decoratedsurface"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"new","","Creates a new decorated window around given surface.",0,{"inputs":[{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"wlcompositor"},{"name":"wlsubcompositor"},{"name":"wlshm"},{"name":"wlshell"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_title","","Set a short title for the surface.",0,{"inputs":[{"name":"decoratedsurface"},{"name":"string"}],"output":null}],[11,"set_class","","Set a class for the surface.",0,{"inputs":[{"name":"decoratedsurface"},{"name":"string"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"decoratedsurface"}],"output":{"name":"option"}}],[11,"set_cursor","wayland_client::sys::wayland::client","set the pointer surface",1,null],[11,"release","","release the pointer object",1,null],[11,"drop","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"wlpointer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ptr","","",1,null],[11,"interface","","",1,null],[11,"interface_name","","",1,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",1,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",1,{"inputs":[{"name":"wlpointer"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",1,null],[11,"from_ptr_no_own","","",1,null],[11,"set_evt_iterator","","",1,null]],"paths":[[3,"DecoratedSurface"],[3,"WlPointer"]]};
searchIndex["wayland_kbd"] = {"doc":"Keyboard mapping utility for `wayland-client` using libxkbcommon.","items":[[3,"MappedKeyboard","wayland_kbd","A wayland keyboard mapped to its keymap",null,null],[3,"KeyEvent","","",null,null],[12,"keycode","","The raw keycode associated with this event. Only use it if\nyou know what you&#39;re doing.",0,null],[12,"serial","","",0,null],[12,"time","","",0,null],[12,"keystate","","",0,null],[4,"MappedKeyboardEvent","","",null,null],[13,"KeyEvent","","",1,null],[13,"Other","","",1,null],[4,"MappedKeyboardError","","",null,null],[13,"XKBNotFound","","",2,null],[13,"NoKeyboardOnSeat","","",2,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",3,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",3,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",3,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",3,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",3,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",3,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",3,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",3,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",3,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",3,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",3,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",3,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",3,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",3,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",3,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",3,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",3,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",3,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",3,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",3,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",3,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",3,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",3,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",3,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",3,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"as_utf8","wayland_kbd","Tries to retrieve the key event as an UTF8 sequence",0,{"inputs":[{"name":"keyevent"}],"output":{"name":"option"}}],[11,"as_symbol","","Tries to match this key event as a key symbol according to current keyboard state.",0,{"inputs":[{"name":"keyevent"}],"output":{"name":"option"}}],[11,"new","","Creates a mapped keyboard by extracting the keyboard from a seat.",4,{"inputs":[{"name":"wlseat"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"mappedkeyboard"}],"output":{"name":"option"}}],[0,"keysyms","","",null,null],[17,"XKB_KEY_VoidSymbol","wayland_kbd::keysyms","",null,null],[17,"XKB_KEY_BackSpace","","",null,null],[17,"XKB_KEY_Tab","","",null,null],[17,"XKB_KEY_Linefeed","","",null,null],[17,"XKB_KEY_Clear","","",null,null],[17,"XKB_KEY_Return","","",null,null],[17,"XKB_KEY_Pause","","",null,null],[17,"XKB_KEY_Scroll_Lock","","",null,null],[17,"XKB_KEY_Sys_Req","","",null,null],[17,"XKB_KEY_Escape","","",null,null],[17,"XKB_KEY_Delete","","",null,null],[17,"XKB_KEY_Multi_key","","",null,null],[17,"XKB_KEY_Codeinput","","",null,null],[17,"XKB_KEY_SingleCandidate","","",null,null],[17,"XKB_KEY_MultipleCandidate","","",null,null],[17,"XKB_KEY_PreviousCandidate","","",null,null],[17,"XKB_KEY_Kanji","","",null,null],[17,"XKB_KEY_Muhenkan","","",null,null],[17,"XKB_KEY_Henkan_Mode","","",null,null],[17,"XKB_KEY_Henkan","","",null,null],[17,"XKB_KEY_Romaji","","",null,null],[17,"XKB_KEY_Hiragana","","",null,null],[17,"XKB_KEY_Katakana","","",null,null],[17,"XKB_KEY_Hiragana_Katakana","","",null,null],[17,"XKB_KEY_Zenkaku","","",null,null],[17,"XKB_KEY_Hankaku","","",null,null],[17,"XKB_KEY_Zenkaku_Hankaku","","",null,null],[17,"XKB_KEY_Touroku","","",null,null],[17,"XKB_KEY_Massyo","","",null,null],[17,"XKB_KEY_Kana_Lock","","",null,null],[17,"XKB_KEY_Kana_Shift","","",null,null],[17,"XKB_KEY_Eisu_Shift","","",null,null],[17,"XKB_KEY_Eisu_toggle","","",null,null],[17,"XKB_KEY_Kanji_Bangou","","",null,null],[17,"XKB_KEY_Zen_Koho","","",null,null],[17,"XKB_KEY_Mae_Koho","","",null,null],[17,"XKB_KEY_Home","","",null,null],[17,"XKB_KEY_Left","","",null,null],[17,"XKB_KEY_Up","","",null,null],[17,"XKB_KEY_Right","","",null,null],[17,"XKB_KEY_Down","","",null,null],[17,"XKB_KEY_Prior","","",null,null],[17,"XKB_KEY_Page_Up","","",null,null],[17,"XKB_KEY_Next","","",null,null],[17,"XKB_KEY_Page_Down","","",null,null],[17,"XKB_KEY_End","","",null,null],[17,"XKB_KEY_Begin","","",null,null],[17,"XKB_KEY_Select","","",null,null],[17,"XKB_KEY_Print","","",null,null],[17,"XKB_KEY_Execute","","",null,null],[17,"XKB_KEY_Insert","","",null,null],[17,"XKB_KEY_Undo","","",null,null],[17,"XKB_KEY_Redo","","",null,null],[17,"XKB_KEY_Menu","","",null,null],[17,"XKB_KEY_Find","","",null,null],[17,"XKB_KEY_Cancel","","",null,null],[17,"XKB_KEY_Help","","",null,null],[17,"XKB_KEY_Break","","",null,null],[17,"XKB_KEY_Mode_switch","","",null,null],[17,"XKB_KEY_script_switch","","",null,null],[17,"XKB_KEY_Num_Lock","","",null,null],[17,"XKB_KEY_KP_Space","","",null,null],[17,"XKB_KEY_KP_Tab","","",null,null],[17,"XKB_KEY_KP_Enter","","",null,null],[17,"XKB_KEY_KP_F1","","",null,null],[17,"XKB_KEY_KP_F2","","",null,null],[17,"XKB_KEY_KP_F3","","",null,null],[17,"XKB_KEY_KP_F4","","",null,null],[17,"XKB_KEY_KP_Home","","",null,null],[17,"XKB_KEY_KP_Left","","",null,null],[17,"XKB_KEY_KP_Up","","",null,null],[17,"XKB_KEY_KP_Right","","",null,null],[17,"XKB_KEY_KP_Down","","",null,null],[17,"XKB_KEY_KP_Prior","","",null,null],[17,"XKB_KEY_KP_Page_Up","","",null,null],[17,"XKB_KEY_KP_Next","","",null,null],[17,"XKB_KEY_KP_Page_Down","","",null,null],[17,"XKB_KEY_KP_End","","",null,null],[17,"XKB_KEY_KP_Begin","","",null,null],[17,"XKB_KEY_KP_Insert","","",null,null],[17,"XKB_KEY_KP_Delete","","",null,null],[17,"XKB_KEY_KP_Equal","","",null,null],[17,"XKB_KEY_KP_Multiply","","",null,null],[17,"XKB_KEY_KP_Add","","",null,null],[17,"XKB_KEY_KP_Separator","","",null,null],[17,"XKB_KEY_KP_Subtract","","",null,null],[17,"XKB_KEY_KP_Decimal","","",null,null],[17,"XKB_KEY_KP_Divide","","",null,null],[17,"XKB_KEY_KP_0","","",null,null],[17,"XKB_KEY_KP_1","","",null,null],[17,"XKB_KEY_KP_2","","",null,null],[17,"XKB_KEY_KP_3","","",null,null],[17,"XKB_KEY_KP_4","","",null,null],[17,"XKB_KEY_KP_5","","",null,null],[17,"XKB_KEY_KP_6","","",null,null],[17,"XKB_KEY_KP_7","","",null,null],[17,"XKB_KEY_KP_8","","",null,null],[17,"XKB_KEY_KP_9","","",null,null],[17,"XKB_KEY_F1","","",null,null],[17,"XKB_KEY_F2","","",null,null],[17,"XKB_KEY_F3","","",null,null],[17,"XKB_KEY_F4","","",null,null],[17,"XKB_KEY_F5","","",null,null],[17,"XKB_KEY_F6","","",null,null],[17,"XKB_KEY_F7","","",null,null],[17,"XKB_KEY_F8","","",null,null],[17,"XKB_KEY_F9","","",null,null],[17,"XKB_KEY_F10","","",null,null],[17,"XKB_KEY_F11","","",null,null],[17,"XKB_KEY_L1","","",null,null],[17,"XKB_KEY_F12","","",null,null],[17,"XKB_KEY_L2","","",null,null],[17,"XKB_KEY_F13","","",null,null],[17,"XKB_KEY_L3","","",null,null],[17,"XKB_KEY_F14","","",null,null],[17,"XKB_KEY_L4","","",null,null],[17,"XKB_KEY_F15","","",null,null],[17,"XKB_KEY_L5","","",null,null],[17,"XKB_KEY_F16","","",null,null],[17,"XKB_KEY_L6","","",null,null],[17,"XKB_KEY_F17","","",null,null],[17,"XKB_KEY_L7","","",null,null],[17,"XKB_KEY_F18","","",null,null],[17,"XKB_KEY_L8","","",null,null],[17,"XKB_KEY_F19","","",null,null],[17,"XKB_KEY_L9","","",null,null],[17,"XKB_KEY_F20","","",null,null],[17,"XKB_KEY_L10","","",null,null],[17,"XKB_KEY_F21","","",null,null],[17,"XKB_KEY_R1","","",null,null],[17,"XKB_KEY_F22","","",null,null],[17,"XKB_KEY_R2","","",null,null],[17,"XKB_KEY_F23","","",null,null],[17,"XKB_KEY_R3","","",null,null],[17,"XKB_KEY_F24","","",null,null],[17,"XKB_KEY_R4","","",null,null],[17,"XKB_KEY_F25","","",null,null],[17,"XKB_KEY_R5","","",null,null],[17,"XKB_KEY_F26","","",null,null],[17,"XKB_KEY_R6","","",null,null],[17,"XKB_KEY_F27","","",null,null],[17,"XKB_KEY_R7","","",null,null],[17,"XKB_KEY_F28","","",null,null],[17,"XKB_KEY_R8","","",null,null],[17,"XKB_KEY_F29","","",null,null],[17,"XKB_KEY_R9","","",null,null],[17,"XKB_KEY_F30","","",null,null],[17,"XKB_KEY_R10","","",null,null],[17,"XKB_KEY_F31","","",null,null],[17,"XKB_KEY_R11","","",null,null],[17,"XKB_KEY_F32","","",null,null],[17,"XKB_KEY_R12","","",null,null],[17,"XKB_KEY_F33","","",null,null],[17,"XKB_KEY_R13","","",null,null],[17,"XKB_KEY_F34","","",null,null],[17,"XKB_KEY_R14","","",null,null],[17,"XKB_KEY_F35","","",null,null],[17,"XKB_KEY_R15","","",null,null],[17,"XKB_KEY_Shift_L","","",null,null],[17,"XKB_KEY_Shift_R","","",null,null],[17,"XKB_KEY_Control_L","","",null,null],[17,"XKB_KEY_Control_R","","",null,null],[17,"XKB_KEY_Caps_Lock","","",null,null],[17,"XKB_KEY_Shift_Lock","","",null,null],[17,"XKB_KEY_Meta_L","","",null,null],[17,"XKB_KEY_Meta_R","","",null,null],[17,"XKB_KEY_Alt_L","","",null,null],[17,"XKB_KEY_Alt_R","","",null,null],[17,"XKB_KEY_Super_L","","",null,null],[17,"XKB_KEY_Super_R","","",null,null],[17,"XKB_KEY_Hyper_L","","",null,null],[17,"XKB_KEY_Hyper_R","","",null,null],[17,"XKB_KEY_ISO_Lock","","",null,null],[17,"XKB_KEY_ISO_Level2_Latch","","",null,null],[17,"XKB_KEY_ISO_Level3_Shift","","",null,null],[17,"XKB_KEY_ISO_Level3_Latch","","",null,null],[17,"XKB_KEY_ISO_Level3_Lock","","",null,null],[17,"XKB_KEY_ISO_Level5_Shift","","",null,null],[17,"XKB_KEY_ISO_Level5_Latch","","",null,null],[17,"XKB_KEY_ISO_Level5_Lock","","",null,null],[17,"XKB_KEY_ISO_Group_Shift","","",null,null],[17,"XKB_KEY_ISO_Group_Latch","","",null,null],[17,"XKB_KEY_ISO_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Next_Group","","",null,null],[17,"XKB_KEY_ISO_Next_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Prev_Group","","",null,null],[17,"XKB_KEY_ISO_Prev_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_First_Group","","",null,null],[17,"XKB_KEY_ISO_First_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Last_Group","","",null,null],[17,"XKB_KEY_ISO_Last_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Left_Tab","","",null,null],[17,"XKB_KEY_ISO_Move_Line_Up","","",null,null],[17,"XKB_KEY_ISO_Move_Line_Down","","",null,null],[17,"XKB_KEY_ISO_Partial_Line_Up","","",null,null],[17,"XKB_KEY_ISO_Partial_Line_Down","","",null,null],[17,"XKB_KEY_ISO_Partial_Space_Left","","",null,null],[17,"XKB_KEY_ISO_Partial_Space_Right","","",null,null],[17,"XKB_KEY_ISO_Set_Margin_Left","","",null,null],[17,"XKB_KEY_ISO_Set_Margin_Right","","",null,null],[17,"XKB_KEY_ISO_Release_Margin_Left","","",null,null],[17,"XKB_KEY_ISO_Release_Margin_Right","","",null,null],[17,"XKB_KEY_ISO_Release_Both_Margins","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Left","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Right","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Up","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Down","","",null,null],[17,"XKB_KEY_ISO_Continuous_Underline","","",null,null],[17,"XKB_KEY_ISO_Discontinuous_Underline","","",null,null],[17,"XKB_KEY_ISO_Emphasize","","",null,null],[17,"XKB_KEY_ISO_Center_Object","","",null,null],[17,"XKB_KEY_ISO_Enter","","",null,null],[17,"XKB_KEY_dead_grave","","",null,null],[17,"XKB_KEY_dead_acute","","",null,null],[17,"XKB_KEY_dead_circumflex","","",null,null],[17,"XKB_KEY_dead_tilde","","",null,null],[17,"XKB_KEY_dead_perispomeni","","",null,null],[17,"XKB_KEY_dead_macron","","",null,null],[17,"XKB_KEY_dead_breve","","",null,null],[17,"XKB_KEY_dead_abovedot","","",null,null],[17,"XKB_KEY_dead_diaeresis","","",null,null],[17,"XKB_KEY_dead_abovering","","",null,null],[17,"XKB_KEY_dead_doubleacute","","",null,null],[17,"XKB_KEY_dead_caron","","",null,null],[17,"XKB_KEY_dead_cedilla","","",null,null],[17,"XKB_KEY_dead_ogonek","","",null,null],[17,"XKB_KEY_dead_iota","","",null,null],[17,"XKB_KEY_dead_voiced_sound","","",null,null],[17,"XKB_KEY_dead_semivoiced_sound","","",null,null],[17,"XKB_KEY_dead_belowdot","","",null,null],[17,"XKB_KEY_dead_hook","","",null,null],[17,"XKB_KEY_dead_horn","","",null,null],[17,"XKB_KEY_dead_stroke","","",null,null],[17,"XKB_KEY_dead_abovecomma","","",null,null],[17,"XKB_KEY_dead_psili","","",null,null],[17,"XKB_KEY_dead_abovereversedcomma","","",null,null],[17,"XKB_KEY_dead_dasia","","",null,null],[17,"XKB_KEY_dead_doublegrave","","",null,null],[17,"XKB_KEY_dead_belowring","","",null,null],[17,"XKB_KEY_dead_belowmacron","","",null,null],[17,"XKB_KEY_dead_belowcircumflex","","",null,null],[17,"XKB_KEY_dead_belowtilde","","",null,null],[17,"XKB_KEY_dead_belowbreve","","",null,null],[17,"XKB_KEY_dead_belowdiaeresis","","",null,null],[17,"XKB_KEY_dead_invertedbreve","","",null,null],[17,"XKB_KEY_dead_belowcomma","","",null,null],[17,"XKB_KEY_dead_currency","","",null,null],[17,"XKB_KEY_dead_lowline","","",null,null],[17,"XKB_KEY_dead_aboveverticalline","","",null,null],[17,"XKB_KEY_dead_belowverticalline","","",null,null],[17,"XKB_KEY_dead_longsolidusoverlay","","",null,null],[17,"XKB_KEY_dead_a","","",null,null],[17,"XKB_KEY_dead_A","","",null,null],[17,"XKB_KEY_dead_e","","",null,null],[17,"XKB_KEY_dead_E","","",null,null],[17,"XKB_KEY_dead_i","","",null,null],[17,"XKB_KEY_dead_I","","",null,null],[17,"XKB_KEY_dead_o","","",null,null],[17,"XKB_KEY_dead_O","","",null,null],[17,"XKB_KEY_dead_u","","",null,null],[17,"XKB_KEY_dead_U","","",null,null],[17,"XKB_KEY_dead_small_schwa","","",null,null],[17,"XKB_KEY_dead_capital_schwa","","",null,null],[17,"XKB_KEY_dead_greek","","",null,null],[17,"XKB_KEY_First_Virtual_Screen","","",null,null],[17,"XKB_KEY_Prev_Virtual_Screen","","",null,null],[17,"XKB_KEY_Next_Virtual_Screen","","",null,null],[17,"XKB_KEY_Last_Virtual_Screen","","",null,null],[17,"XKB_KEY_Terminate_Server","","",null,null],[17,"XKB_KEY_AccessX_Enable","","",null,null],[17,"XKB_KEY_AccessX_Feedback_Enable","","",null,null],[17,"XKB_KEY_RepeatKeys_Enable","","",null,null],[17,"XKB_KEY_SlowKeys_Enable","","",null,null],[17,"XKB_KEY_BounceKeys_Enable","","",null,null],[17,"XKB_KEY_StickyKeys_Enable","","",null,null],[17,"XKB_KEY_MouseKeys_Enable","","",null,null],[17,"XKB_KEY_MouseKeys_Accel_Enable","","",null,null],[17,"XKB_KEY_Overlay1_Enable","","",null,null],[17,"XKB_KEY_Overlay2_Enable","","",null,null],[17,"XKB_KEY_AudibleBell_Enable","","",null,null],[17,"XKB_KEY_Pointer_Left","","",null,null],[17,"XKB_KEY_Pointer_Right","","",null,null],[17,"XKB_KEY_Pointer_Up","","",null,null],[17,"XKB_KEY_Pointer_Down","","",null,null],[17,"XKB_KEY_Pointer_UpLeft","","",null,null],[17,"XKB_KEY_Pointer_UpRight","","",null,null],[17,"XKB_KEY_Pointer_DownLeft","","",null,null],[17,"XKB_KEY_Pointer_DownRight","","",null,null],[17,"XKB_KEY_Pointer_Button_Dflt","","",null,null],[17,"XKB_KEY_Pointer_Button1","","",null,null],[17,"XKB_KEY_Pointer_Button2","","",null,null],[17,"XKB_KEY_Pointer_Button3","","",null,null],[17,"XKB_KEY_Pointer_Button4","","",null,null],[17,"XKB_KEY_Pointer_Button5","","",null,null],[17,"XKB_KEY_Pointer_DblClick_Dflt","","",null,null],[17,"XKB_KEY_Pointer_DblClick1","","",null,null],[17,"XKB_KEY_Pointer_DblClick2","","",null,null],[17,"XKB_KEY_Pointer_DblClick3","","",null,null],[17,"XKB_KEY_Pointer_DblClick4","","",null,null],[17,"XKB_KEY_Pointer_DblClick5","","",null,null],[17,"XKB_KEY_Pointer_Drag_Dflt","","",null,null],[17,"XKB_KEY_Pointer_Drag1","","",null,null],[17,"XKB_KEY_Pointer_Drag2","","",null,null],[17,"XKB_KEY_Pointer_Drag3","","",null,null],[17,"XKB_KEY_Pointer_Drag4","","",null,null],[17,"XKB_KEY_Pointer_Drag5","","",null,null],[17,"XKB_KEY_Pointer_EnableKeys","","",null,null],[17,"XKB_KEY_Pointer_Accelerate","","",null,null],[17,"XKB_KEY_Pointer_DfltBtnNext","","",null,null],[17,"XKB_KEY_Pointer_DfltBtnPrev","","",null,null],[17,"XKB_KEY_ch","","",null,null],[17,"XKB_KEY_Ch","","",null,null],[17,"XKB_KEY_CH","","",null,null],[17,"XKB_KEY_c_h","","",null,null],[17,"XKB_KEY_C_h","","",null,null],[17,"XKB_KEY_C_H","","",null,null],[17,"XKB_KEY_3270_Duplicate","","",null,null],[17,"XKB_KEY_3270_FieldMark","","",null,null],[17,"XKB_KEY_3270_Right2","","",null,null],[17,"XKB_KEY_3270_Left2","","",null,null],[17,"XKB_KEY_3270_BackTab","","",null,null],[17,"XKB_KEY_3270_EraseEOF","","",null,null],[17,"XKB_KEY_3270_EraseInput","","",null,null],[17,"XKB_KEY_3270_Reset","","",null,null],[17,"XKB_KEY_3270_Quit","","",null,null],[17,"XKB_KEY_3270_PA1","","",null,null],[17,"XKB_KEY_3270_PA2","","",null,null],[17,"XKB_KEY_3270_PA3","","",null,null],[17,"XKB_KEY_3270_Test","","",null,null],[17,"XKB_KEY_3270_Attn","","",null,null],[17,"XKB_KEY_3270_CursorBlink","","",null,null],[17,"XKB_KEY_3270_AltCursor","","",null,null],[17,"XKB_KEY_3270_KeyClick","","",null,null],[17,"XKB_KEY_3270_Jump","","",null,null],[17,"XKB_KEY_3270_Ident","","",null,null],[17,"XKB_KEY_3270_Rule","","",null,null],[17,"XKB_KEY_3270_Copy","","",null,null],[17,"XKB_KEY_3270_Play","","",null,null],[17,"XKB_KEY_3270_Setup","","",null,null],[17,"XKB_KEY_3270_Record","","",null,null],[17,"XKB_KEY_3270_ChangeScreen","","",null,null],[17,"XKB_KEY_3270_DeleteWord","","",null,null],[17,"XKB_KEY_3270_ExSelect","","",null,null],[17,"XKB_KEY_3270_CursorSelect","","",null,null],[17,"XKB_KEY_3270_PrintScreen","","",null,null],[17,"XKB_KEY_3270_Enter","","",null,null],[17,"XKB_KEY_space","","",null,null],[17,"XKB_KEY_exclam","","",null,null],[17,"XKB_KEY_quotedbl","","",null,null],[17,"XKB_KEY_numbersign","","",null,null],[17,"XKB_KEY_dollar","","",null,null],[17,"XKB_KEY_percent","","",null,null],[17,"XKB_KEY_ampersand","","",null,null],[17,"XKB_KEY_apostrophe","","",null,null],[17,"XKB_KEY_quoteright","","",null,null],[17,"XKB_KEY_parenleft","","",null,null],[17,"XKB_KEY_parenright","","",null,null],[17,"XKB_KEY_asterisk","","",null,null],[17,"XKB_KEY_plus","","",null,null],[17,"XKB_KEY_comma","","",null,null],[17,"XKB_KEY_minus","","",null,null],[17,"XKB_KEY_period","","",null,null],[17,"XKB_KEY_slash","","",null,null],[17,"XKB_KEY_0","","",null,null],[17,"XKB_KEY_1","","",null,null],[17,"XKB_KEY_2","","",null,null],[17,"XKB_KEY_3","","",null,null],[17,"XKB_KEY_4","","",null,null],[17,"XKB_KEY_5","","",null,null],[17,"XKB_KEY_6","","",null,null],[17,"XKB_KEY_7","","",null,null],[17,"XKB_KEY_8","","",null,null],[17,"XKB_KEY_9","","",null,null],[17,"XKB_KEY_colon","","",null,null],[17,"XKB_KEY_semicolon","","",null,null],[17,"XKB_KEY_less","","",null,null],[17,"XKB_KEY_equal","","",null,null],[17,"XKB_KEY_greater","","",null,null],[17,"XKB_KEY_question","","",null,null],[17,"XKB_KEY_at","","",null,null],[17,"XKB_KEY_A","","",null,null],[17,"XKB_KEY_B","","",null,null],[17,"XKB_KEY_C","","",null,null],[17,"XKB_KEY_D","","",null,null],[17,"XKB_KEY_E","","",null,null],[17,"XKB_KEY_F","","",null,null],[17,"XKB_KEY_G","","",null,null],[17,"XKB_KEY_H","","",null,null],[17,"XKB_KEY_I","","",null,null],[17,"XKB_KEY_J","","",null,null],[17,"XKB_KEY_K","","",null,null],[17,"XKB_KEY_L","","",null,null],[17,"XKB_KEY_M","","",null,null],[17,"XKB_KEY_N","","",null,null],[17,"XKB_KEY_O","","",null,null],[17,"XKB_KEY_P","","",null,null],[17,"XKB_KEY_Q","","",null,null],[17,"XKB_KEY_R","","",null,null],[17,"XKB_KEY_S","","",null,null],[17,"XKB_KEY_T","","",null,null],[17,"XKB_KEY_U","","",null,null],[17,"XKB_KEY_V","","",null,null],[17,"XKB_KEY_W","","",null,null],[17,"XKB_KEY_X","","",null,null],[17,"XKB_KEY_Y","","",null,null],[17,"XKB_KEY_Z","","",null,null],[17,"XKB_KEY_bracketleft","","",null,null],[17,"XKB_KEY_backslash","","",null,null],[17,"XKB_KEY_bracketright","","",null,null],[17,"XKB_KEY_asciicircum","","",null,null],[17,"XKB_KEY_underscore","","",null,null],[17,"XKB_KEY_grave","","",null,null],[17,"XKB_KEY_quoteleft","","",null,null],[17,"XKB_KEY_a","","",null,null],[17,"XKB_KEY_b","","",null,null],[17,"XKB_KEY_c","","",null,null],[17,"XKB_KEY_d","","",null,null],[17,"XKB_KEY_e","","",null,null],[17,"XKB_KEY_f","","",null,null],[17,"XKB_KEY_g","","",null,null],[17,"XKB_KEY_h","","",null,null],[17,"XKB_KEY_i","","",null,null],[17,"XKB_KEY_j","","",null,null],[17,"XKB_KEY_k","","",null,null],[17,"XKB_KEY_l","","",null,null],[17,"XKB_KEY_m","","",null,null],[17,"XKB_KEY_n","","",null,null],[17,"XKB_KEY_o","","",null,null],[17,"XKB_KEY_p","","",null,null],[17,"XKB_KEY_q","","",null,null],[17,"XKB_KEY_r","","",null,null],[17,"XKB_KEY_s","","",null,null],[17,"XKB_KEY_t","","",null,null],[17,"XKB_KEY_u","","",null,null],[17,"XKB_KEY_v","","",null,null],[17,"XKB_KEY_w","","",null,null],[17,"XKB_KEY_x","","",null,null],[17,"XKB_KEY_y","","",null,null],[17,"XKB_KEY_z","","",null,null],[17,"XKB_KEY_braceleft","","",null,null],[17,"XKB_KEY_bar","","",null,null],[17,"XKB_KEY_braceright","","",null,null],[17,"XKB_KEY_asciitilde","","",null,null],[17,"XKB_KEY_nobreakspace","","",null,null],[17,"XKB_KEY_exclamdown","","",null,null],[17,"XKB_KEY_cent","","",null,null],[17,"XKB_KEY_sterling","","",null,null],[17,"XKB_KEY_currency","","",null,null],[17,"XKB_KEY_yen","","",null,null],[17,"XKB_KEY_brokenbar","","",null,null],[17,"XKB_KEY_section","","",null,null],[17,"XKB_KEY_diaeresis","","",null,null],[17,"XKB_KEY_copyright","","",null,null],[17,"XKB_KEY_ordfeminine","","",null,null],[17,"XKB_KEY_guillemotleft","","",null,null],[17,"XKB_KEY_notsign","","",null,null],[17,"XKB_KEY_hyphen","","",null,null],[17,"XKB_KEY_registered","","",null,null],[17,"XKB_KEY_macron","","",null,null],[17,"XKB_KEY_degree","","",null,null],[17,"XKB_KEY_plusminus","","",null,null],[17,"XKB_KEY_twosuperior","","",null,null],[17,"XKB_KEY_threesuperior","","",null,null],[17,"XKB_KEY_acute","","",null,null],[17,"XKB_KEY_mu","","",null,null],[17,"XKB_KEY_paragraph","","",null,null],[17,"XKB_KEY_periodcentered","","",null,null],[17,"XKB_KEY_cedilla","","",null,null],[17,"XKB_KEY_onesuperior","","",null,null],[17,"XKB_KEY_masculine","","",null,null],[17,"XKB_KEY_guillemotright","","",null,null],[17,"XKB_KEY_onequarter","","",null,null],[17,"XKB_KEY_onehalf","","",null,null],[17,"XKB_KEY_threequarters","","",null,null],[17,"XKB_KEY_questiondown","","",null,null],[17,"XKB_KEY_Agrave","","",null,null],[17,"XKB_KEY_Aacute","","",null,null],[17,"XKB_KEY_Acircumflex","","",null,null],[17,"XKB_KEY_Atilde","","",null,null],[17,"XKB_KEY_Adiaeresis","","",null,null],[17,"XKB_KEY_Aring","","",null,null],[17,"XKB_KEY_AE","","",null,null],[17,"XKB_KEY_Ccedilla","","",null,null],[17,"XKB_KEY_Egrave","","",null,null],[17,"XKB_KEY_Eacute","","",null,null],[17,"XKB_KEY_Ecircumflex","","",null,null],[17,"XKB_KEY_Ediaeresis","","",null,null],[17,"XKB_KEY_Igrave","","",null,null],[17,"XKB_KEY_Iacute","","",null,null],[17,"XKB_KEY_Icircumflex","","",null,null],[17,"XKB_KEY_Idiaeresis","","",null,null],[17,"XKB_KEY_ETH","","",null,null],[17,"XKB_KEY_Eth","","",null,null],[17,"XKB_KEY_Ntilde","","",null,null],[17,"XKB_KEY_Ograve","","",null,null],[17,"XKB_KEY_Oacute","","",null,null],[17,"XKB_KEY_Ocircumflex","","",null,null],[17,"XKB_KEY_Otilde","","",null,null],[17,"XKB_KEY_Odiaeresis","","",null,null],[17,"XKB_KEY_multiply","","",null,null],[17,"XKB_KEY_Oslash","","",null,null],[17,"XKB_KEY_Ooblique","","",null,null],[17,"XKB_KEY_Ugrave","","",null,null],[17,"XKB_KEY_Uacute","","",null,null],[17,"XKB_KEY_Ucircumflex","","",null,null],[17,"XKB_KEY_Udiaeresis","","",null,null],[17,"XKB_KEY_Yacute","","",null,null],[17,"XKB_KEY_THORN","","",null,null],[17,"XKB_KEY_Thorn","","",null,null],[17,"XKB_KEY_ssharp","","",null,null],[17,"XKB_KEY_agrave","","",null,null],[17,"XKB_KEY_aacute","","",null,null],[17,"XKB_KEY_acircumflex","","",null,null],[17,"XKB_KEY_atilde","","",null,null],[17,"XKB_KEY_adiaeresis","","",null,null],[17,"XKB_KEY_aring","","",null,null],[17,"XKB_KEY_ae","","",null,null],[17,"XKB_KEY_ccedilla","","",null,null],[17,"XKB_KEY_egrave","","",null,null],[17,"XKB_KEY_eacute","","",null,null],[17,"XKB_KEY_ecircumflex","","",null,null],[17,"XKB_KEY_ediaeresis","","",null,null],[17,"XKB_KEY_igrave","","",null,null],[17,"XKB_KEY_iacute","","",null,null],[17,"XKB_KEY_icircumflex","","",null,null],[17,"XKB_KEY_idiaeresis","","",null,null],[17,"XKB_KEY_eth","","",null,null],[17,"XKB_KEY_ntilde","","",null,null],[17,"XKB_KEY_ograve","","",null,null],[17,"XKB_KEY_oacute","","",null,null],[17,"XKB_KEY_ocircumflex","","",null,null],[17,"XKB_KEY_otilde","","",null,null],[17,"XKB_KEY_odiaeresis","","",null,null],[17,"XKB_KEY_division","","",null,null],[17,"XKB_KEY_oslash","","",null,null],[17,"XKB_KEY_ooblique","","",null,null],[17,"XKB_KEY_ugrave","","",null,null],[17,"XKB_KEY_uacute","","",null,null],[17,"XKB_KEY_ucircumflex","","",null,null],[17,"XKB_KEY_udiaeresis","","",null,null],[17,"XKB_KEY_yacute","","",null,null],[17,"XKB_KEY_thorn","","",null,null],[17,"XKB_KEY_ydiaeresis","","",null,null],[17,"XKB_KEY_Aogonek","","",null,null],[17,"XKB_KEY_breve","","",null,null],[17,"XKB_KEY_Lstroke","","",null,null],[17,"XKB_KEY_Lcaron","","",null,null],[17,"XKB_KEY_Sacute","","",null,null],[17,"XKB_KEY_Scaron","","",null,null],[17,"XKB_KEY_Scedilla","","",null,null],[17,"XKB_KEY_Tcaron","","",null,null],[17,"XKB_KEY_Zacute","","",null,null],[17,"XKB_KEY_Zcaron","","",null,null],[17,"XKB_KEY_Zabovedot","","",null,null],[17,"XKB_KEY_aogonek","","",null,null],[17,"XKB_KEY_ogonek","","",null,null],[17,"XKB_KEY_lstroke","","",null,null],[17,"XKB_KEY_lcaron","","",null,null],[17,"XKB_KEY_sacute","","",null,null],[17,"XKB_KEY_caron","","",null,null],[17,"XKB_KEY_scaron","","",null,null],[17,"XKB_KEY_scedilla","","",null,null],[17,"XKB_KEY_tcaron","","",null,null],[17,"XKB_KEY_zacute","","",null,null],[17,"XKB_KEY_doubleacute","","",null,null],[17,"XKB_KEY_zcaron","","",null,null],[17,"XKB_KEY_zabovedot","","",null,null],[17,"XKB_KEY_Racute","","",null,null],[17,"XKB_KEY_Abreve","","",null,null],[17,"XKB_KEY_Lacute","","",null,null],[17,"XKB_KEY_Cacute","","",null,null],[17,"XKB_KEY_Ccaron","","",null,null],[17,"XKB_KEY_Eogonek","","",null,null],[17,"XKB_KEY_Ecaron","","",null,null],[17,"XKB_KEY_Dcaron","","",null,null],[17,"XKB_KEY_Dstroke","","",null,null],[17,"XKB_KEY_Nacute","","",null,null],[17,"XKB_KEY_Ncaron","","",null,null],[17,"XKB_KEY_Odoubleacute","","",null,null],[17,"XKB_KEY_Rcaron","","",null,null],[17,"XKB_KEY_Uring","","",null,null],[17,"XKB_KEY_Udoubleacute","","",null,null],[17,"XKB_KEY_Tcedilla","","",null,null],[17,"XKB_KEY_racute","","",null,null],[17,"XKB_KEY_abreve","","",null,null],[17,"XKB_KEY_lacute","","",null,null],[17,"XKB_KEY_cacute","","",null,null],[17,"XKB_KEY_ccaron","","",null,null],[17,"XKB_KEY_eogonek","","",null,null],[17,"XKB_KEY_ecaron","","",null,null],[17,"XKB_KEY_dcaron","","",null,null],[17,"XKB_KEY_dstroke","","",null,null],[17,"XKB_KEY_nacute","","",null,null],[17,"XKB_KEY_ncaron","","",null,null],[17,"XKB_KEY_odoubleacute","","",null,null],[17,"XKB_KEY_rcaron","","",null,null],[17,"XKB_KEY_uring","","",null,null],[17,"XKB_KEY_udoubleacute","","",null,null],[17,"XKB_KEY_tcedilla","","",null,null],[17,"XKB_KEY_abovedot","","",null,null],[17,"XKB_KEY_Hstroke","","",null,null],[17,"XKB_KEY_Hcircumflex","","",null,null],[17,"XKB_KEY_Iabovedot","","",null,null],[17,"XKB_KEY_Gbreve","","",null,null],[17,"XKB_KEY_Jcircumflex","","",null,null],[17,"XKB_KEY_hstroke","","",null,null],[17,"XKB_KEY_hcircumflex","","",null,null],[17,"XKB_KEY_idotless","","",null,null],[17,"XKB_KEY_gbreve","","",null,null],[17,"XKB_KEY_jcircumflex","","",null,null],[17,"XKB_KEY_Cabovedot","","",null,null],[17,"XKB_KEY_Ccircumflex","","",null,null],[17,"XKB_KEY_Gabovedot","","",null,null],[17,"XKB_KEY_Gcircumflex","","",null,null],[17,"XKB_KEY_Ubreve","","",null,null],[17,"XKB_KEY_Scircumflex","","",null,null],[17,"XKB_KEY_cabovedot","","",null,null],[17,"XKB_KEY_ccircumflex","","",null,null],[17,"XKB_KEY_gabovedot","","",null,null],[17,"XKB_KEY_gcircumflex","","",null,null],[17,"XKB_KEY_ubreve","","",null,null],[17,"XKB_KEY_scircumflex","","",null,null],[17,"XKB_KEY_kra","","",null,null],[17,"XKB_KEY_kappa","","",null,null],[17,"XKB_KEY_Rcedilla","","",null,null],[17,"XKB_KEY_Itilde","","",null,null],[17,"XKB_KEY_Lcedilla","","",null,null],[17,"XKB_KEY_Emacron","","",null,null],[17,"XKB_KEY_Gcedilla","","",null,null],[17,"XKB_KEY_Tslash","","",null,null],[17,"XKB_KEY_rcedilla","","",null,null],[17,"XKB_KEY_itilde","","",null,null],[17,"XKB_KEY_lcedilla","","",null,null],[17,"XKB_KEY_emacron","","",null,null],[17,"XKB_KEY_gcedilla","","",null,null],[17,"XKB_KEY_tslash","","",null,null],[17,"XKB_KEY_ENG","","",null,null],[17,"XKB_KEY_eng","","",null,null],[17,"XKB_KEY_Amacron","","",null,null],[17,"XKB_KEY_Iogonek","","",null,null],[17,"XKB_KEY_Eabovedot","","",null,null],[17,"XKB_KEY_Imacron","","",null,null],[17,"XKB_KEY_Ncedilla","","",null,null],[17,"XKB_KEY_Omacron","","",null,null],[17,"XKB_KEY_Kcedilla","","",null,null],[17,"XKB_KEY_Uogonek","","",null,null],[17,"XKB_KEY_Utilde","","",null,null],[17,"XKB_KEY_Umacron","","",null,null],[17,"XKB_KEY_amacron","","",null,null],[17,"XKB_KEY_iogonek","","",null,null],[17,"XKB_KEY_eabovedot","","",null,null],[17,"XKB_KEY_imacron","","",null,null],[17,"XKB_KEY_ncedilla","","",null,null],[17,"XKB_KEY_omacron","","",null,null],[17,"XKB_KEY_kcedilla","","",null,null],[17,"XKB_KEY_uogonek","","",null,null],[17,"XKB_KEY_utilde","","",null,null],[17,"XKB_KEY_umacron","","",null,null],[17,"XKB_KEY_Wcircumflex","","",null,null],[17,"XKB_KEY_wcircumflex","","",null,null],[17,"XKB_KEY_Ycircumflex","","",null,null],[17,"XKB_KEY_ycircumflex","","",null,null],[17,"XKB_KEY_Babovedot","","",null,null],[17,"XKB_KEY_babovedot","","",null,null],[17,"XKB_KEY_Dabovedot","","",null,null],[17,"XKB_KEY_dabovedot","","",null,null],[17,"XKB_KEY_Fabovedot","","",null,null],[17,"XKB_KEY_fabovedot","","",null,null],[17,"XKB_KEY_Mabovedot","","",null,null],[17,"XKB_KEY_mabovedot","","",null,null],[17,"XKB_KEY_Pabovedot","","",null,null],[17,"XKB_KEY_pabovedot","","",null,null],[17,"XKB_KEY_Sabovedot","","",null,null],[17,"XKB_KEY_sabovedot","","",null,null],[17,"XKB_KEY_Tabovedot","","",null,null],[17,"XKB_KEY_tabovedot","","",null,null],[17,"XKB_KEY_Wgrave","","",null,null],[17,"XKB_KEY_wgrave","","",null,null],[17,"XKB_KEY_Wacute","","",null,null],[17,"XKB_KEY_wacute","","",null,null],[17,"XKB_KEY_Wdiaeresis","","",null,null],[17,"XKB_KEY_wdiaeresis","","",null,null],[17,"XKB_KEY_Ygrave","","",null,null],[17,"XKB_KEY_ygrave","","",null,null],[17,"XKB_KEY_OE","","",null,null],[17,"XKB_KEY_oe","","",null,null],[17,"XKB_KEY_Ydiaeresis","","",null,null],[17,"XKB_KEY_overline","","",null,null],[17,"XKB_KEY_kana_fullstop","","",null,null],[17,"XKB_KEY_kana_openingbracket","","",null,null],[17,"XKB_KEY_kana_closingbracket","","",null,null],[17,"XKB_KEY_kana_comma","","",null,null],[17,"XKB_KEY_kana_conjunctive","","",null,null],[17,"XKB_KEY_kana_middledot","","",null,null],[17,"XKB_KEY_kana_WO","","",null,null],[17,"XKB_KEY_kana_a","","",null,null],[17,"XKB_KEY_kana_i","","",null,null],[17,"XKB_KEY_kana_u","","",null,null],[17,"XKB_KEY_kana_e","","",null,null],[17,"XKB_KEY_kana_o","","",null,null],[17,"XKB_KEY_kana_ya","","",null,null],[17,"XKB_KEY_kana_yu","","",null,null],[17,"XKB_KEY_kana_yo","","",null,null],[17,"XKB_KEY_kana_tsu","","",null,null],[17,"XKB_KEY_kana_tu","","",null,null],[17,"XKB_KEY_prolongedsound","","",null,null],[17,"XKB_KEY_kana_A","","",null,null],[17,"XKB_KEY_kana_I","","",null,null],[17,"XKB_KEY_kana_U","","",null,null],[17,"XKB_KEY_kana_E","","",null,null],[17,"XKB_KEY_kana_O","","",null,null],[17,"XKB_KEY_kana_KA","","",null,null],[17,"XKB_KEY_kana_KI","","",null,null],[17,"XKB_KEY_kana_KU","","",null,null],[17,"XKB_KEY_kana_KE","","",null,null],[17,"XKB_KEY_kana_KO","","",null,null],[17,"XKB_KEY_kana_SA","","",null,null],[17,"XKB_KEY_kana_SHI","","",null,null],[17,"XKB_KEY_kana_SU","","",null,null],[17,"XKB_KEY_kana_SE","","",null,null],[17,"XKB_KEY_kana_SO","","",null,null],[17,"XKB_KEY_kana_TA","","",null,null],[17,"XKB_KEY_kana_CHI","","",null,null],[17,"XKB_KEY_kana_TI","","",null,null],[17,"XKB_KEY_kana_TSU","","",null,null],[17,"XKB_KEY_kana_TU","","",null,null],[17,"XKB_KEY_kana_TE","","",null,null],[17,"XKB_KEY_kana_TO","","",null,null],[17,"XKB_KEY_kana_NA","","",null,null],[17,"XKB_KEY_kana_NI","","",null,null],[17,"XKB_KEY_kana_NU","","",null,null],[17,"XKB_KEY_kana_NE","","",null,null],[17,"XKB_KEY_kana_NO","","",null,null],[17,"XKB_KEY_kana_HA","","",null,null],[17,"XKB_KEY_kana_HI","","",null,null],[17,"XKB_KEY_kana_FU","","",null,null],[17,"XKB_KEY_kana_HU","","",null,null],[17,"XKB_KEY_kana_HE","","",null,null],[17,"XKB_KEY_kana_HO","","",null,null],[17,"XKB_KEY_kana_MA","","",null,null],[17,"XKB_KEY_kana_MI","","",null,null],[17,"XKB_KEY_kana_MU","","",null,null],[17,"XKB_KEY_kana_ME","","",null,null],[17,"XKB_KEY_kana_MO","","",null,null],[17,"XKB_KEY_kana_YA","","",null,null],[17,"XKB_KEY_kana_YU","","",null,null],[17,"XKB_KEY_kana_YO","","",null,null],[17,"XKB_KEY_kana_RA","","",null,null],[17,"XKB_KEY_kana_RI","","",null,null],[17,"XKB_KEY_kana_RU","","",null,null],[17,"XKB_KEY_kana_RE","","",null,null],[17,"XKB_KEY_kana_RO","","",null,null],[17,"XKB_KEY_kana_WA","","",null,null],[17,"XKB_KEY_kana_N","","",null,null],[17,"XKB_KEY_voicedsound","","",null,null],[17,"XKB_KEY_semivoicedsound","","",null,null],[17,"XKB_KEY_kana_switch","","",null,null],[17,"XKB_KEY_Farsi_0","","",null,null],[17,"XKB_KEY_Farsi_1","","",null,null],[17,"XKB_KEY_Farsi_2","","",null,null],[17,"XKB_KEY_Farsi_3","","",null,null],[17,"XKB_KEY_Farsi_4","","",null,null],[17,"XKB_KEY_Farsi_5","","",null,null],[17,"XKB_KEY_Farsi_6","","",null,null],[17,"XKB_KEY_Farsi_7","","",null,null],[17,"XKB_KEY_Farsi_8","","",null,null],[17,"XKB_KEY_Farsi_9","","",null,null],[17,"XKB_KEY_Arabic_percent","","",null,null],[17,"XKB_KEY_Arabic_superscript_alef","","",null,null],[17,"XKB_KEY_Arabic_tteh","","",null,null],[17,"XKB_KEY_Arabic_peh","","",null,null],[17,"XKB_KEY_Arabic_tcheh","","",null,null],[17,"XKB_KEY_Arabic_ddal","","",null,null],[17,"XKB_KEY_Arabic_rreh","","",null,null],[17,"XKB_KEY_Arabic_comma","","",null,null],[17,"XKB_KEY_Arabic_fullstop","","",null,null],[17,"XKB_KEY_Arabic_0","","",null,null],[17,"XKB_KEY_Arabic_1","","",null,null],[17,"XKB_KEY_Arabic_2","","",null,null],[17,"XKB_KEY_Arabic_3","","",null,null],[17,"XKB_KEY_Arabic_4","","",null,null],[17,"XKB_KEY_Arabic_5","","",null,null],[17,"XKB_KEY_Arabic_6","","",null,null],[17,"XKB_KEY_Arabic_7","","",null,null],[17,"XKB_KEY_Arabic_8","","",null,null],[17,"XKB_KEY_Arabic_9","","",null,null],[17,"XKB_KEY_Arabic_semicolon","","",null,null],[17,"XKB_KEY_Arabic_question_mark","","",null,null],[17,"XKB_KEY_Arabic_hamza","","",null,null],[17,"XKB_KEY_Arabic_maddaonalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonwaw","","",null,null],[17,"XKB_KEY_Arabic_hamzaunderalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonyeh","","",null,null],[17,"XKB_KEY_Arabic_alef","","",null,null],[17,"XKB_KEY_Arabic_beh","","",null,null],[17,"XKB_KEY_Arabic_tehmarbuta","","",null,null],[17,"XKB_KEY_Arabic_teh","","",null,null],[17,"XKB_KEY_Arabic_theh","","",null,null],[17,"XKB_KEY_Arabic_jeem","","",null,null],[17,"XKB_KEY_Arabic_hah","","",null,null],[17,"XKB_KEY_Arabic_khah","","",null,null],[17,"XKB_KEY_Arabic_dal","","",null,null],[17,"XKB_KEY_Arabic_thal","","",null,null],[17,"XKB_KEY_Arabic_ra","","",null,null],[17,"XKB_KEY_Arabic_zain","","",null,null],[17,"XKB_KEY_Arabic_seen","","",null,null],[17,"XKB_KEY_Arabic_sheen","","",null,null],[17,"XKB_KEY_Arabic_sad","","",null,null],[17,"XKB_KEY_Arabic_dad","","",null,null],[17,"XKB_KEY_Arabic_tah","","",null,null],[17,"XKB_KEY_Arabic_zah","","",null,null],[17,"XKB_KEY_Arabic_ain","","",null,null],[17,"XKB_KEY_Arabic_ghain","","",null,null],[17,"XKB_KEY_Arabic_tatweel","","",null,null],[17,"XKB_KEY_Arabic_feh","","",null,null],[17,"XKB_KEY_Arabic_qaf","","",null,null],[17,"XKB_KEY_Arabic_kaf","","",null,null],[17,"XKB_KEY_Arabic_lam","","",null,null],[17,"XKB_KEY_Arabic_meem","","",null,null],[17,"XKB_KEY_Arabic_noon","","",null,null],[17,"XKB_KEY_Arabic_ha","","",null,null],[17,"XKB_KEY_Arabic_heh","","",null,null],[17,"XKB_KEY_Arabic_waw","","",null,null],[17,"XKB_KEY_Arabic_alefmaksura","","",null,null],[17,"XKB_KEY_Arabic_yeh","","",null,null],[17,"XKB_KEY_Arabic_fathatan","","",null,null],[17,"XKB_KEY_Arabic_dammatan","","",null,null],[17,"XKB_KEY_Arabic_kasratan","","",null,null],[17,"XKB_KEY_Arabic_fatha","","",null,null],[17,"XKB_KEY_Arabic_damma","","",null,null],[17,"XKB_KEY_Arabic_kasra","","",null,null],[17,"XKB_KEY_Arabic_shadda","","",null,null],[17,"XKB_KEY_Arabic_sukun","","",null,null],[17,"XKB_KEY_Arabic_madda_above","","",null,null],[17,"XKB_KEY_Arabic_hamza_above","","",null,null],[17,"XKB_KEY_Arabic_hamza_below","","",null,null],[17,"XKB_KEY_Arabic_jeh","","",null,null],[17,"XKB_KEY_Arabic_veh","","",null,null],[17,"XKB_KEY_Arabic_keheh","","",null,null],[17,"XKB_KEY_Arabic_gaf","","",null,null],[17,"XKB_KEY_Arabic_noon_ghunna","","",null,null],[17,"XKB_KEY_Arabic_heh_doachashmee","","",null,null],[17,"XKB_KEY_Farsi_yeh","","",null,null],[17,"XKB_KEY_Arabic_farsi_yeh","","",null,null],[17,"XKB_KEY_Arabic_yeh_baree","","",null,null],[17,"XKB_KEY_Arabic_heh_goal","","",null,null],[17,"XKB_KEY_Arabic_switch","","",null,null],[17,"XKB_KEY_Cyrillic_GHE_bar","","",null,null],[17,"XKB_KEY_Cyrillic_ghe_bar","","",null,null],[17,"XKB_KEY_Cyrillic_ZHE_descender","","",null,null],[17,"XKB_KEY_Cyrillic_zhe_descender","","",null,null],[17,"XKB_KEY_Cyrillic_KA_descender","","",null,null],[17,"XKB_KEY_Cyrillic_ka_descender","","",null,null],[17,"XKB_KEY_Cyrillic_KA_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_ka_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_EN_descender","","",null,null],[17,"XKB_KEY_Cyrillic_en_descender","","",null,null],[17,"XKB_KEY_Cyrillic_U_straight","","",null,null],[17,"XKB_KEY_Cyrillic_u_straight","","",null,null],[17,"XKB_KEY_Cyrillic_U_straight_bar","","",null,null],[17,"XKB_KEY_Cyrillic_u_straight_bar","","",null,null],[17,"XKB_KEY_Cyrillic_HA_descender","","",null,null],[17,"XKB_KEY_Cyrillic_ha_descender","","",null,null],[17,"XKB_KEY_Cyrillic_CHE_descender","","",null,null],[17,"XKB_KEY_Cyrillic_che_descender","","",null,null],[17,"XKB_KEY_Cyrillic_CHE_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_che_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_SHHA","","",null,null],[17,"XKB_KEY_Cyrillic_shha","","",null,null],[17,"XKB_KEY_Cyrillic_SCHWA","","",null,null],[17,"XKB_KEY_Cyrillic_schwa","","",null,null],[17,"XKB_KEY_Cyrillic_I_macron","","",null,null],[17,"XKB_KEY_Cyrillic_i_macron","","",null,null],[17,"XKB_KEY_Cyrillic_O_bar","","",null,null],[17,"XKB_KEY_Cyrillic_o_bar","","",null,null],[17,"XKB_KEY_Cyrillic_U_macron","","",null,null],[17,"XKB_KEY_Cyrillic_u_macron","","",null,null],[17,"XKB_KEY_Serbian_dje","","",null,null],[17,"XKB_KEY_Macedonia_gje","","",null,null],[17,"XKB_KEY_Cyrillic_io","","",null,null],[17,"XKB_KEY_Ukrainian_ie","","",null,null],[17,"XKB_KEY_Ukranian_je","","",null,null],[17,"XKB_KEY_Macedonia_dse","","",null,null],[17,"XKB_KEY_Ukrainian_i","","",null,null],[17,"XKB_KEY_Ukranian_i","","",null,null],[17,"XKB_KEY_Ukrainian_yi","","",null,null],[17,"XKB_KEY_Ukranian_yi","","",null,null],[17,"XKB_KEY_Cyrillic_je","","",null,null],[17,"XKB_KEY_Serbian_je","","",null,null],[17,"XKB_KEY_Cyrillic_lje","","",null,null],[17,"XKB_KEY_Serbian_lje","","",null,null],[17,"XKB_KEY_Cyrillic_nje","","",null,null],[17,"XKB_KEY_Serbian_nje","","",null,null],[17,"XKB_KEY_Serbian_tshe","","",null,null],[17,"XKB_KEY_Macedonia_kje","","",null,null],[17,"XKB_KEY_Ukrainian_ghe_with_upturn","","",null,null],[17,"XKB_KEY_Byelorussian_shortu","","",null,null],[17,"XKB_KEY_Cyrillic_dzhe","","",null,null],[17,"XKB_KEY_Serbian_dze","","",null,null],[17,"XKB_KEY_numerosign","","",null,null],[17,"XKB_KEY_Serbian_DJE","","",null,null],[17,"XKB_KEY_Macedonia_GJE","","",null,null],[17,"XKB_KEY_Cyrillic_IO","","",null,null],[17,"XKB_KEY_Ukrainian_IE","","",null,null],[17,"XKB_KEY_Ukranian_JE","","",null,null],[17,"XKB_KEY_Macedonia_DSE","","",null,null],[17,"XKB_KEY_Ukrainian_I","","",null,null],[17,"XKB_KEY_Ukranian_I","","",null,null],[17,"XKB_KEY_Ukrainian_YI","","",null,null],[17,"XKB_KEY_Ukranian_YI","","",null,null],[17,"XKB_KEY_Cyrillic_JE","","",null,null],[17,"XKB_KEY_Serbian_JE","","",null,null],[17,"XKB_KEY_Cyrillic_LJE","","",null,null],[17,"XKB_KEY_Serbian_LJE","","",null,null],[17,"XKB_KEY_Cyrillic_NJE","","",null,null],[17,"XKB_KEY_Serbian_NJE","","",null,null],[17,"XKB_KEY_Serbian_TSHE","","",null,null],[17,"XKB_KEY_Macedonia_KJE","","",null,null],[17,"XKB_KEY_Ukrainian_GHE_WITH_UPTURN","","",null,null],[17,"XKB_KEY_Byelorussian_SHORTU","","",null,null],[17,"XKB_KEY_Cyrillic_DZHE","","",null,null],[17,"XKB_KEY_Serbian_DZE","","",null,null],[17,"XKB_KEY_Cyrillic_yu","","",null,null],[17,"XKB_KEY_Cyrillic_a","","",null,null],[17,"XKB_KEY_Cyrillic_be","","",null,null],[17,"XKB_KEY_Cyrillic_tse","","",null,null],[17,"XKB_KEY_Cyrillic_de","","",null,null],[17,"XKB_KEY_Cyrillic_ie","","",null,null],[17,"XKB_KEY_Cyrillic_ef","","",null,null],[17,"XKB_KEY_Cyrillic_ghe","","",null,null],[17,"XKB_KEY_Cyrillic_ha","","",null,null],[17,"XKB_KEY_Cyrillic_i","","",null,null],[17,"XKB_KEY_Cyrillic_shorti","","",null,null],[17,"XKB_KEY_Cyrillic_ka","","",null,null],[17,"XKB_KEY_Cyrillic_el","","",null,null],[17,"XKB_KEY_Cyrillic_em","","",null,null],[17,"XKB_KEY_Cyrillic_en","","",null,null],[17,"XKB_KEY_Cyrillic_o","","",null,null],[17,"XKB_KEY_Cyrillic_pe","","",null,null],[17,"XKB_KEY_Cyrillic_ya","","",null,null],[17,"XKB_KEY_Cyrillic_er","","",null,null],[17,"XKB_KEY_Cyrillic_es","","",null,null],[17,"XKB_KEY_Cyrillic_te","","",null,null],[17,"XKB_KEY_Cyrillic_u","","",null,null],[17,"XKB_KEY_Cyrillic_zhe","","",null,null],[17,"XKB_KEY_Cyrillic_ve","","",null,null],[17,"XKB_KEY_Cyrillic_softsign","","",null,null],[17,"XKB_KEY_Cyrillic_yeru","","",null,null],[17,"XKB_KEY_Cyrillic_ze","","",null,null],[17,"XKB_KEY_Cyrillic_sha","","",null,null],[17,"XKB_KEY_Cyrillic_e","","",null,null],[17,"XKB_KEY_Cyrillic_shcha","","",null,null],[17,"XKB_KEY_Cyrillic_che","","",null,null],[17,"XKB_KEY_Cyrillic_hardsign","","",null,null],[17,"XKB_KEY_Cyrillic_YU","","",null,null],[17,"XKB_KEY_Cyrillic_A","","",null,null],[17,"XKB_KEY_Cyrillic_BE","","",null,null],[17,"XKB_KEY_Cyrillic_TSE","","",null,null],[17,"XKB_KEY_Cyrillic_DE","","",null,null],[17,"XKB_KEY_Cyrillic_IE","","",null,null],[17,"XKB_KEY_Cyrillic_EF","","",null,null],[17,"XKB_KEY_Cyrillic_GHE","","",null,null],[17,"XKB_KEY_Cyrillic_HA","","",null,null],[17,"XKB_KEY_Cyrillic_I","","",null,null],[17,"XKB_KEY_Cyrillic_SHORTI","","",null,null],[17,"XKB_KEY_Cyrillic_KA","","",null,null],[17,"XKB_KEY_Cyrillic_EL","","",null,null],[17,"XKB_KEY_Cyrillic_EM","","",null,null],[17,"XKB_KEY_Cyrillic_EN","","",null,null],[17,"XKB_KEY_Cyrillic_O","","",null,null],[17,"XKB_KEY_Cyrillic_PE","","",null,null],[17,"XKB_KEY_Cyrillic_YA","","",null,null],[17,"XKB_KEY_Cyrillic_ER","","",null,null],[17,"XKB_KEY_Cyrillic_ES","","",null,null],[17,"XKB_KEY_Cyrillic_TE","","",null,null],[17,"XKB_KEY_Cyrillic_U","","",null,null],[17,"XKB_KEY_Cyrillic_ZHE","","",null,null],[17,"XKB_KEY_Cyrillic_VE","","",null,null],[17,"XKB_KEY_Cyrillic_SOFTSIGN","","",null,null],[17,"XKB_KEY_Cyrillic_YERU","","",null,null],[17,"XKB_KEY_Cyrillic_ZE","","",null,null],[17,"XKB_KEY_Cyrillic_SHA","","",null,null],[17,"XKB_KEY_Cyrillic_E","","",null,null],[17,"XKB_KEY_Cyrillic_SHCHA","","",null,null],[17,"XKB_KEY_Cyrillic_CHE","","",null,null],[17,"XKB_KEY_Cyrillic_HARDSIGN","","",null,null],[17,"XKB_KEY_Greek_ALPHAaccent","","",null,null],[17,"XKB_KEY_Greek_EPSILONaccent","","",null,null],[17,"XKB_KEY_Greek_ETAaccent","","",null,null],[17,"XKB_KEY_Greek_IOTAaccent","","",null,null],[17,"XKB_KEY_Greek_IOTAdieresis","","",null,null],[17,"XKB_KEY_Greek_IOTAdiaeresis","","",null,null],[17,"XKB_KEY_Greek_OMICRONaccent","","",null,null],[17,"XKB_KEY_Greek_UPSILONaccent","","",null,null],[17,"XKB_KEY_Greek_UPSILONdieresis","","",null,null],[17,"XKB_KEY_Greek_OMEGAaccent","","",null,null],[17,"XKB_KEY_Greek_accentdieresis","","",null,null],[17,"XKB_KEY_Greek_horizbar","","",null,null],[17,"XKB_KEY_Greek_alphaaccent","","",null,null],[17,"XKB_KEY_Greek_epsilonaccent","","",null,null],[17,"XKB_KEY_Greek_etaaccent","","",null,null],[17,"XKB_KEY_Greek_iotaaccent","","",null,null],[17,"XKB_KEY_Greek_iotadieresis","","",null,null],[17,"XKB_KEY_Greek_iotaaccentdieresis","","",null,null],[17,"XKB_KEY_Greek_omicronaccent","","",null,null],[17,"XKB_KEY_Greek_upsilonaccent","","",null,null],[17,"XKB_KEY_Greek_upsilondieresis","","",null,null],[17,"XKB_KEY_Greek_upsilonaccentdieresis","","",null,null],[17,"XKB_KEY_Greek_omegaaccent","","",null,null],[17,"XKB_KEY_Greek_ALPHA","","",null,null],[17,"XKB_KEY_Greek_BETA","","",null,null],[17,"XKB_KEY_Greek_GAMMA","","",null,null],[17,"XKB_KEY_Greek_DELTA","","",null,null],[17,"XKB_KEY_Greek_EPSILON","","",null,null],[17,"XKB_KEY_Greek_ZETA","","",null,null],[17,"XKB_KEY_Greek_ETA","","",null,null],[17,"XKB_KEY_Greek_THETA","","",null,null],[17,"XKB_KEY_Greek_IOTA","","",null,null],[17,"XKB_KEY_Greek_KAPPA","","",null,null],[17,"XKB_KEY_Greek_LAMDA","","",null,null],[17,"XKB_KEY_Greek_LAMBDA","","",null,null],[17,"XKB_KEY_Greek_MU","","",null,null],[17,"XKB_KEY_Greek_NU","","",null,null],[17,"XKB_KEY_Greek_XI","","",null,null],[17,"XKB_KEY_Greek_OMICRON","","",null,null],[17,"XKB_KEY_Greek_PI","","",null,null],[17,"XKB_KEY_Greek_RHO","","",null,null],[17,"XKB_KEY_Greek_SIGMA","","",null,null],[17,"XKB_KEY_Greek_TAU","","",null,null],[17,"XKB_KEY_Greek_UPSILON","","",null,null],[17,"XKB_KEY_Greek_PHI","","",null,null],[17,"XKB_KEY_Greek_CHI","","",null,null],[17,"XKB_KEY_Greek_PSI","","",null,null],[17,"XKB_KEY_Greek_OMEGA","","",null,null],[17,"XKB_KEY_Greek_alpha","","",null,null],[17,"XKB_KEY_Greek_beta","","",null,null],[17,"XKB_KEY_Greek_gamma","","",null,null],[17,"XKB_KEY_Greek_delta","","",null,null],[17,"XKB_KEY_Greek_epsilon","","",null,null],[17,"XKB_KEY_Greek_zeta","","",null,null],[17,"XKB_KEY_Greek_eta","","",null,null],[17,"XKB_KEY_Greek_theta","","",null,null],[17,"XKB_KEY_Greek_iota","","",null,null],[17,"XKB_KEY_Greek_kappa","","",null,null],[17,"XKB_KEY_Greek_lamda","","",null,null],[17,"XKB_KEY_Greek_lambda","","",null,null],[17,"XKB_KEY_Greek_mu","","",null,null],[17,"XKB_KEY_Greek_nu","","",null,null],[17,"XKB_KEY_Greek_xi","","",null,null],[17,"XKB_KEY_Greek_omicron","","",null,null],[17,"XKB_KEY_Greek_pi","","",null,null],[17,"XKB_KEY_Greek_rho","","",null,null],[17,"XKB_KEY_Greek_sigma","","",null,null],[17,"XKB_KEY_Greek_finalsmallsigma","","",null,null],[17,"XKB_KEY_Greek_tau","","",null,null],[17,"XKB_KEY_Greek_upsilon","","",null,null],[17,"XKB_KEY_Greek_phi","","",null,null],[17,"XKB_KEY_Greek_chi","","",null,null],[17,"XKB_KEY_Greek_psi","","",null,null],[17,"XKB_KEY_Greek_omega","","",null,null],[17,"XKB_KEY_Greek_switch","","",null,null],[17,"XKB_KEY_leftradical","","",null,null],[17,"XKB_KEY_topleftradical","","",null,null],[17,"XKB_KEY_horizconnector","","",null,null],[17,"XKB_KEY_topintegral","","",null,null],[17,"XKB_KEY_botintegral","","",null,null],[17,"XKB_KEY_vertconnector","","",null,null],[17,"XKB_KEY_topleftsqbracket","","",null,null],[17,"XKB_KEY_botleftsqbracket","","",null,null],[17,"XKB_KEY_toprightsqbracket","","",null,null],[17,"XKB_KEY_botrightsqbracket","","",null,null],[17,"XKB_KEY_topleftparens","","",null,null],[17,"XKB_KEY_botleftparens","","",null,null],[17,"XKB_KEY_toprightparens","","",null,null],[17,"XKB_KEY_botrightparens","","",null,null],[17,"XKB_KEY_leftmiddlecurlybrace","","",null,null],[17,"XKB_KEY_rightmiddlecurlybrace","","",null,null],[17,"XKB_KEY_topleftsummation","","",null,null],[17,"XKB_KEY_botleftsummation","","",null,null],[17,"XKB_KEY_topvertsummationconnector","","",null,null],[17,"XKB_KEY_botvertsummationconnector","","",null,null],[17,"XKB_KEY_toprightsummation","","",null,null],[17,"XKB_KEY_botrightsummation","","",null,null],[17,"XKB_KEY_rightmiddlesummation","","",null,null],[17,"XKB_KEY_lessthanequal","","",null,null],[17,"XKB_KEY_notequal","","",null,null],[17,"XKB_KEY_greaterthanequal","","",null,null],[17,"XKB_KEY_integral","","",null,null],[17,"XKB_KEY_therefore","","",null,null],[17,"XKB_KEY_variation","","",null,null],[17,"XKB_KEY_infinity","","",null,null],[17,"XKB_KEY_nabla","","",null,null],[17,"XKB_KEY_approximate","","",null,null],[17,"XKB_KEY_similarequal","","",null,null],[17,"XKB_KEY_ifonlyif","","",null,null],[17,"XKB_KEY_implies","","",null,null],[17,"XKB_KEY_identical","","",null,null],[17,"XKB_KEY_radical","","",null,null],[17,"XKB_KEY_includedin","","",null,null],[17,"XKB_KEY_includes","","",null,null],[17,"XKB_KEY_intersection","","",null,null],[17,"XKB_KEY_union","","",null,null],[17,"XKB_KEY_logicaland","","",null,null],[17,"XKB_KEY_logicalor","","",null,null],[17,"XKB_KEY_partialderivative","","",null,null],[17,"XKB_KEY_function","","",null,null],[17,"XKB_KEY_leftarrow","","",null,null],[17,"XKB_KEY_uparrow","","",null,null],[17,"XKB_KEY_rightarrow","","",null,null],[17,"XKB_KEY_downarrow","","",null,null],[17,"XKB_KEY_blank","","",null,null],[17,"XKB_KEY_soliddiamond","","",null,null],[17,"XKB_KEY_checkerboard","","",null,null],[17,"XKB_KEY_ht","","",null,null],[17,"XKB_KEY_ff","","",null,null],[17,"XKB_KEY_cr","","",null,null],[17,"XKB_KEY_lf","","",null,null],[17,"XKB_KEY_nl","","",null,null],[17,"XKB_KEY_vt","","",null,null],[17,"XKB_KEY_lowrightcorner","","",null,null],[17,"XKB_KEY_uprightcorner","","",null,null],[17,"XKB_KEY_upleftcorner","","",null,null],[17,"XKB_KEY_lowleftcorner","","",null,null],[17,"XKB_KEY_crossinglines","","",null,null],[17,"XKB_KEY_horizlinescan1","","",null,null],[17,"XKB_KEY_horizlinescan3","","",null,null],[17,"XKB_KEY_horizlinescan5","","",null,null],[17,"XKB_KEY_horizlinescan7","","",null,null],[17,"XKB_KEY_horizlinescan9","","",null,null],[17,"XKB_KEY_leftt","","",null,null],[17,"XKB_KEY_rightt","","",null,null],[17,"XKB_KEY_bott","","",null,null],[17,"XKB_KEY_topt","","",null,null],[17,"XKB_KEY_vertbar","","",null,null],[17,"XKB_KEY_emspace","","",null,null],[17,"XKB_KEY_enspace","","",null,null],[17,"XKB_KEY_em3space","","",null,null],[17,"XKB_KEY_em4space","","",null,null],[17,"XKB_KEY_digitspace","","",null,null],[17,"XKB_KEY_punctspace","","",null,null],[17,"XKB_KEY_thinspace","","",null,null],[17,"XKB_KEY_hairspace","","",null,null],[17,"XKB_KEY_emdash","","",null,null],[17,"XKB_KEY_endash","","",null,null],[17,"XKB_KEY_signifblank","","",null,null],[17,"XKB_KEY_ellipsis","","",null,null],[17,"XKB_KEY_doubbaselinedot","","",null,null],[17,"XKB_KEY_onethird","","",null,null],[17,"XKB_KEY_twothirds","","",null,null],[17,"XKB_KEY_onefifth","","",null,null],[17,"XKB_KEY_twofifths","","",null,null],[17,"XKB_KEY_threefifths","","",null,null],[17,"XKB_KEY_fourfifths","","",null,null],[17,"XKB_KEY_onesixth","","",null,null],[17,"XKB_KEY_fivesixths","","",null,null],[17,"XKB_KEY_careof","","",null,null],[17,"XKB_KEY_figdash","","",null,null],[17,"XKB_KEY_leftanglebracket","","",null,null],[17,"XKB_KEY_decimalpoint","","",null,null],[17,"XKB_KEY_rightanglebracket","","",null,null],[17,"XKB_KEY_marker","","",null,null],[17,"XKB_KEY_oneeighth","","",null,null],[17,"XKB_KEY_threeeighths","","",null,null],[17,"XKB_KEY_fiveeighths","","",null,null],[17,"XKB_KEY_seveneighths","","",null,null],[17,"XKB_KEY_trademark","","",null,null],[17,"XKB_KEY_signaturemark","","",null,null],[17,"XKB_KEY_trademarkincircle","","",null,null],[17,"XKB_KEY_leftopentriangle","","",null,null],[17,"XKB_KEY_rightopentriangle","","",null,null],[17,"XKB_KEY_emopencircle","","",null,null],[17,"XKB_KEY_emopenrectangle","","",null,null],[17,"XKB_KEY_leftsinglequotemark","","",null,null],[17,"XKB_KEY_rightsinglequotemark","","",null,null],[17,"XKB_KEY_leftdoublequotemark","","",null,null],[17,"XKB_KEY_rightdoublequotemark","","",null,null],[17,"XKB_KEY_prescription","","",null,null],[17,"XKB_KEY_permille","","",null,null],[17,"XKB_KEY_minutes","","",null,null],[17,"XKB_KEY_seconds","","",null,null],[17,"XKB_KEY_latincross","","",null,null],[17,"XKB_KEY_hexagram","","",null,null],[17,"XKB_KEY_filledrectbullet","","",null,null],[17,"XKB_KEY_filledlefttribullet","","",null,null],[17,"XKB_KEY_filledrighttribullet","","",null,null],[17,"XKB_KEY_emfilledcircle","","",null,null],[17,"XKB_KEY_emfilledrect","","",null,null],[17,"XKB_KEY_enopencircbullet","","",null,null],[17,"XKB_KEY_enopensquarebullet","","",null,null],[17,"XKB_KEY_openrectbullet","","",null,null],[17,"XKB_KEY_opentribulletup","","",null,null],[17,"XKB_KEY_opentribulletdown","","",null,null],[17,"XKB_KEY_openstar","","",null,null],[17,"XKB_KEY_enfilledcircbullet","","",null,null],[17,"XKB_KEY_enfilledsqbullet","","",null,null],[17,"XKB_KEY_filledtribulletup","","",null,null],[17,"XKB_KEY_filledtribulletdown","","",null,null],[17,"XKB_KEY_leftpointer","","",null,null],[17,"XKB_KEY_rightpointer","","",null,null],[17,"XKB_KEY_club","","",null,null],[17,"XKB_KEY_diamond","","",null,null],[17,"XKB_KEY_heart","","",null,null],[17,"XKB_KEY_maltesecross","","",null,null],[17,"XKB_KEY_dagger","","",null,null],[17,"XKB_KEY_doubledagger","","",null,null],[17,"XKB_KEY_checkmark","","",null,null],[17,"XKB_KEY_ballotcross","","",null,null],[17,"XKB_KEY_musicalsharp","","",null,null],[17,"XKB_KEY_musicalflat","","",null,null],[17,"XKB_KEY_malesymbol","","",null,null],[17,"XKB_KEY_femalesymbol","","",null,null],[17,"XKB_KEY_telephone","","",null,null],[17,"XKB_KEY_telephonerecorder","","",null,null],[17,"XKB_KEY_phonographcopyright","","",null,null],[17,"XKB_KEY_caret","","",null,null],[17,"XKB_KEY_singlelowquotemark","","",null,null],[17,"XKB_KEY_doublelowquotemark","","",null,null],[17,"XKB_KEY_cursor","","",null,null],[17,"XKB_KEY_leftcaret","","",null,null],[17,"XKB_KEY_rightcaret","","",null,null],[17,"XKB_KEY_downcaret","","",null,null],[17,"XKB_KEY_upcaret","","",null,null],[17,"XKB_KEY_overbar","","",null,null],[17,"XKB_KEY_downtack","","",null,null],[17,"XKB_KEY_upshoe","","",null,null],[17,"XKB_KEY_downstile","","",null,null],[17,"XKB_KEY_underbar","","",null,null],[17,"XKB_KEY_jot","","",null,null],[17,"XKB_KEY_quad","","",null,null],[17,"XKB_KEY_uptack","","",null,null],[17,"XKB_KEY_circle","","",null,null],[17,"XKB_KEY_upstile","","",null,null],[17,"XKB_KEY_downshoe","","",null,null],[17,"XKB_KEY_rightshoe","","",null,null],[17,"XKB_KEY_leftshoe","","",null,null],[17,"XKB_KEY_lefttack","","",null,null],[17,"XKB_KEY_righttack","","",null,null],[17,"XKB_KEY_hebrew_doublelowline","","",null,null],[17,"XKB_KEY_hebrew_aleph","","",null,null],[17,"XKB_KEY_hebrew_bet","","",null,null],[17,"XKB_KEY_hebrew_beth","","",null,null],[17,"XKB_KEY_hebrew_gimel","","",null,null],[17,"XKB_KEY_hebrew_gimmel","","",null,null],[17,"XKB_KEY_hebrew_dalet","","",null,null],[17,"XKB_KEY_hebrew_daleth","","",null,null],[17,"XKB_KEY_hebrew_he","","",null,null],[17,"XKB_KEY_hebrew_waw","","",null,null],[17,"XKB_KEY_hebrew_zain","","",null,null],[17,"XKB_KEY_hebrew_zayin","","",null,null],[17,"XKB_KEY_hebrew_chet","","",null,null],[17,"XKB_KEY_hebrew_het","","",null,null],[17,"XKB_KEY_hebrew_tet","","",null,null],[17,"XKB_KEY_hebrew_teth","","",null,null],[17,"XKB_KEY_hebrew_yod","","",null,null],[17,"XKB_KEY_hebrew_finalkaph","","",null,null],[17,"XKB_KEY_hebrew_kaph","","",null,null],[17,"XKB_KEY_hebrew_lamed","","",null,null],[17,"XKB_KEY_hebrew_finalmem","","",null,null],[17,"XKB_KEY_hebrew_mem","","",null,null],[17,"XKB_KEY_hebrew_finalnun","","",null,null],[17,"XKB_KEY_hebrew_nun","","",null,null],[17,"XKB_KEY_hebrew_samech","","",null,null],[17,"XKB_KEY_hebrew_samekh","","",null,null],[17,"XKB_KEY_hebrew_ayin","","",null,null],[17,"XKB_KEY_hebrew_finalpe","","",null,null],[17,"XKB_KEY_hebrew_pe","","",null,null],[17,"XKB_KEY_hebrew_finalzade","","",null,null],[17,"XKB_KEY_hebrew_finalzadi","","",null,null],[17,"XKB_KEY_hebrew_zade","","",null,null],[17,"XKB_KEY_hebrew_zadi","","",null,null],[17,"XKB_KEY_hebrew_qoph","","",null,null],[17,"XKB_KEY_hebrew_kuf","","",null,null],[17,"XKB_KEY_hebrew_resh","","",null,null],[17,"XKB_KEY_hebrew_shin","","",null,null],[17,"XKB_KEY_hebrew_taw","","",null,null],[17,"XKB_KEY_hebrew_taf","","",null,null],[17,"XKB_KEY_Hebrew_switch","","",null,null],[17,"XKB_KEY_Thai_kokai","","",null,null],[17,"XKB_KEY_Thai_khokhai","","",null,null],[17,"XKB_KEY_Thai_khokhuat","","",null,null],[17,"XKB_KEY_Thai_khokhwai","","",null,null],[17,"XKB_KEY_Thai_khokhon","","",null,null],[17,"XKB_KEY_Thai_khorakhang","","",null,null],[17,"XKB_KEY_Thai_ngongu","","",null,null],[17,"XKB_KEY_Thai_chochan","","",null,null],[17,"XKB_KEY_Thai_choching","","",null,null],[17,"XKB_KEY_Thai_chochang","","",null,null],[17,"XKB_KEY_Thai_soso","","",null,null],[17,"XKB_KEY_Thai_chochoe","","",null,null],[17,"XKB_KEY_Thai_yoying","","",null,null],[17,"XKB_KEY_Thai_dochada","","",null,null],[17,"XKB_KEY_Thai_topatak","","",null,null],[17,"XKB_KEY_Thai_thothan","","",null,null],[17,"XKB_KEY_Thai_thonangmontho","","",null,null],[17,"XKB_KEY_Thai_thophuthao","","",null,null],[17,"XKB_KEY_Thai_nonen","","",null,null],[17,"XKB_KEY_Thai_dodek","","",null,null],[17,"XKB_KEY_Thai_totao","","",null,null],[17,"XKB_KEY_Thai_thothung","","",null,null],[17,"XKB_KEY_Thai_thothahan","","",null,null],[17,"XKB_KEY_Thai_thothong","","",null,null],[17,"XKB_KEY_Thai_nonu","","",null,null],[17,"XKB_KEY_Thai_bobaimai","","",null,null],[17,"XKB_KEY_Thai_popla","","",null,null],[17,"XKB_KEY_Thai_phophung","","",null,null],[17,"XKB_KEY_Thai_fofa","","",null,null],[17,"XKB_KEY_Thai_phophan","","",null,null],[17,"XKB_KEY_Thai_fofan","","",null,null],[17,"XKB_KEY_Thai_phosamphao","","",null,null],[17,"XKB_KEY_Thai_moma","","",null,null],[17,"XKB_KEY_Thai_yoyak","","",null,null],[17,"XKB_KEY_Thai_rorua","","",null,null],[17,"XKB_KEY_Thai_ru","","",null,null],[17,"XKB_KEY_Thai_loling","","",null,null],[17,"XKB_KEY_Thai_lu","","",null,null],[17,"XKB_KEY_Thai_wowaen","","",null,null],[17,"XKB_KEY_Thai_sosala","","",null,null],[17,"XKB_KEY_Thai_sorusi","","",null,null],[17,"XKB_KEY_Thai_sosua","","",null,null],[17,"XKB_KEY_Thai_hohip","","",null,null],[17,"XKB_KEY_Thai_lochula","","",null,null],[17,"XKB_KEY_Thai_oang","","",null,null],[17,"XKB_KEY_Thai_honokhuk","","",null,null],[17,"XKB_KEY_Thai_paiyannoi","","",null,null],[17,"XKB_KEY_Thai_saraa","","",null,null],[17,"XKB_KEY_Thai_maihanakat","","",null,null],[17,"XKB_KEY_Thai_saraaa","","",null,null],[17,"XKB_KEY_Thai_saraam","","",null,null],[17,"XKB_KEY_Thai_sarai","","",null,null],[17,"XKB_KEY_Thai_saraii","","",null,null],[17,"XKB_KEY_Thai_saraue","","",null,null],[17,"XKB_KEY_Thai_sarauee","","",null,null],[17,"XKB_KEY_Thai_sarau","","",null,null],[17,"XKB_KEY_Thai_sarauu","","",null,null],[17,"XKB_KEY_Thai_phinthu","","",null,null],[17,"XKB_KEY_Thai_maihanakat_maitho","","",null,null],[17,"XKB_KEY_Thai_baht","","",null,null],[17,"XKB_KEY_Thai_sarae","","",null,null],[17,"XKB_KEY_Thai_saraae","","",null,null],[17,"XKB_KEY_Thai_sarao","","",null,null],[17,"XKB_KEY_Thai_saraaimaimuan","","",null,null],[17,"XKB_KEY_Thai_saraaimaimalai","","",null,null],[17,"XKB_KEY_Thai_lakkhangyao","","",null,null],[17,"XKB_KEY_Thai_maiyamok","","",null,null],[17,"XKB_KEY_Thai_maitaikhu","","",null,null],[17,"XKB_KEY_Thai_maiek","","",null,null],[17,"XKB_KEY_Thai_maitho","","",null,null],[17,"XKB_KEY_Thai_maitri","","",null,null],[17,"XKB_KEY_Thai_maichattawa","","",null,null],[17,"XKB_KEY_Thai_thanthakhat","","",null,null],[17,"XKB_KEY_Thai_nikhahit","","",null,null],[17,"XKB_KEY_Thai_leksun","","",null,null],[17,"XKB_KEY_Thai_leknung","","",null,null],[17,"XKB_KEY_Thai_leksong","","",null,null],[17,"XKB_KEY_Thai_leksam","","",null,null],[17,"XKB_KEY_Thai_leksi","","",null,null],[17,"XKB_KEY_Thai_lekha","","",null,null],[17,"XKB_KEY_Thai_lekhok","","",null,null],[17,"XKB_KEY_Thai_lekchet","","",null,null],[17,"XKB_KEY_Thai_lekpaet","","",null,null],[17,"XKB_KEY_Thai_lekkao","","",null,null],[17,"XKB_KEY_Hangul","","",null,null],[17,"XKB_KEY_Hangul_Start","","",null,null],[17,"XKB_KEY_Hangul_End","","",null,null],[17,"XKB_KEY_Hangul_Hanja","","",null,null],[17,"XKB_KEY_Hangul_Jamo","","",null,null],[17,"XKB_KEY_Hangul_Romaja","","",null,null],[17,"XKB_KEY_Hangul_Codeinput","","",null,null],[17,"XKB_KEY_Hangul_Jeonja","","",null,null],[17,"XKB_KEY_Hangul_Banja","","",null,null],[17,"XKB_KEY_Hangul_PreHanja","","",null,null],[17,"XKB_KEY_Hangul_PostHanja","","",null,null],[17,"XKB_KEY_Hangul_SingleCandidate","","",null,null],[17,"XKB_KEY_Hangul_MultipleCandidate","","",null,null],[17,"XKB_KEY_Hangul_PreviousCandidate","","",null,null],[17,"XKB_KEY_Hangul_Special","","",null,null],[17,"XKB_KEY_Hangul_switch","","",null,null],[17,"XKB_KEY_Hangul_Kiyeog","","",null,null],[17,"XKB_KEY_Hangul_SsangKiyeog","","",null,null],[17,"XKB_KEY_Hangul_KiyeogSios","","",null,null],[17,"XKB_KEY_Hangul_Nieun","","",null,null],[17,"XKB_KEY_Hangul_NieunJieuj","","",null,null],[17,"XKB_KEY_Hangul_NieunHieuh","","",null,null],[17,"XKB_KEY_Hangul_Dikeud","","",null,null],[17,"XKB_KEY_Hangul_SsangDikeud","","",null,null],[17,"XKB_KEY_Hangul_Rieul","","",null,null],[17,"XKB_KEY_Hangul_RieulKiyeog","","",null,null],[17,"XKB_KEY_Hangul_RieulMieum","","",null,null],[17,"XKB_KEY_Hangul_RieulPieub","","",null,null],[17,"XKB_KEY_Hangul_RieulSios","","",null,null],[17,"XKB_KEY_Hangul_RieulTieut","","",null,null],[17,"XKB_KEY_Hangul_RieulPhieuf","","",null,null],[17,"XKB_KEY_Hangul_RieulHieuh","","",null,null],[17,"XKB_KEY_Hangul_Mieum","","",null,null],[17,"XKB_KEY_Hangul_Pieub","","",null,null],[17,"XKB_KEY_Hangul_SsangPieub","","",null,null],[17,"XKB_KEY_Hangul_PieubSios","","",null,null],[17,"XKB_KEY_Hangul_Sios","","",null,null],[17,"XKB_KEY_Hangul_SsangSios","","",null,null],[17,"XKB_KEY_Hangul_Ieung","","",null,null],[17,"XKB_KEY_Hangul_Jieuj","","",null,null],[17,"XKB_KEY_Hangul_SsangJieuj","","",null,null],[17,"XKB_KEY_Hangul_Cieuc","","",null,null],[17,"XKB_KEY_Hangul_Khieuq","","",null,null],[17,"XKB_KEY_Hangul_Tieut","","",null,null],[17,"XKB_KEY_Hangul_Phieuf","","",null,null],[17,"XKB_KEY_Hangul_Hieuh","","",null,null],[17,"XKB_KEY_Hangul_A","","",null,null],[17,"XKB_KEY_Hangul_AE","","",null,null],[17,"XKB_KEY_Hangul_YA","","",null,null],[17,"XKB_KEY_Hangul_YAE","","",null,null],[17,"XKB_KEY_Hangul_EO","","",null,null],[17,"XKB_KEY_Hangul_E","","",null,null],[17,"XKB_KEY_Hangul_YEO","","",null,null],[17,"XKB_KEY_Hangul_YE","","",null,null],[17,"XKB_KEY_Hangul_O","","",null,null],[17,"XKB_KEY_Hangul_WA","","",null,null],[17,"XKB_KEY_Hangul_WAE","","",null,null],[17,"XKB_KEY_Hangul_OE","","",null,null],[17,"XKB_KEY_Hangul_YO","","",null,null],[17,"XKB_KEY_Hangul_U","","",null,null],[17,"XKB_KEY_Hangul_WEO","","",null,null],[17,"XKB_KEY_Hangul_WE","","",null,null],[17,"XKB_KEY_Hangul_WI","","",null,null],[17,"XKB_KEY_Hangul_YU","","",null,null],[17,"XKB_KEY_Hangul_EU","","",null,null],[17,"XKB_KEY_Hangul_YI","","",null,null],[17,"XKB_KEY_Hangul_I","","",null,null],[17,"XKB_KEY_Hangul_J_Kiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_SsangKiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_KiyeogSios","","",null,null],[17,"XKB_KEY_Hangul_J_Nieun","","",null,null],[17,"XKB_KEY_Hangul_J_NieunJieuj","","",null,null],[17,"XKB_KEY_Hangul_J_NieunHieuh","","",null,null],[17,"XKB_KEY_Hangul_J_Dikeud","","",null,null],[17,"XKB_KEY_Hangul_J_Rieul","","",null,null],[17,"XKB_KEY_Hangul_J_RieulKiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_RieulMieum","","",null,null],[17,"XKB_KEY_Hangul_J_RieulPieub","","",null,null],[17,"XKB_KEY_Hangul_J_RieulSios","","",null,null],[17,"XKB_KEY_Hangul_J_RieulTieut","","",null,null],[17,"XKB_KEY_Hangul_J_RieulPhieuf","","",null,null],[17,"XKB_KEY_Hangul_J_RieulHieuh","","",null,null],[17,"XKB_KEY_Hangul_J_Mieum","","",null,null],[17,"XKB_KEY_Hangul_J_Pieub","","",null,null],[17,"XKB_KEY_Hangul_J_PieubSios","","",null,null],[17,"XKB_KEY_Hangul_J_Sios","","",null,null],[17,"XKB_KEY_Hangul_J_SsangSios","","",null,null],[17,"XKB_KEY_Hangul_J_Ieung","","",null,null],[17,"XKB_KEY_Hangul_J_Jieuj","","",null,null],[17,"XKB_KEY_Hangul_J_Cieuc","","",null,null],[17,"XKB_KEY_Hangul_J_Khieuq","","",null,null],[17,"XKB_KEY_Hangul_J_Tieut","","",null,null],[17,"XKB_KEY_Hangul_J_Phieuf","","",null,null],[17,"XKB_KEY_Hangul_J_Hieuh","","",null,null],[17,"XKB_KEY_Hangul_RieulYeorinHieuh","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumMieum","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumPieub","","",null,null],[17,"XKB_KEY_Hangul_PanSios","","",null,null],[17,"XKB_KEY_Hangul_KkogjiDalrinIeung","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumPhieuf","","",null,null],[17,"XKB_KEY_Hangul_YeorinHieuh","","",null,null],[17,"XKB_KEY_Hangul_AraeA","","",null,null],[17,"XKB_KEY_Hangul_AraeAE","","",null,null],[17,"XKB_KEY_Hangul_J_PanSios","","",null,null],[17,"XKB_KEY_Hangul_J_KkogjiDalrinIeung","","",null,null],[17,"XKB_KEY_Hangul_J_YeorinHieuh","","",null,null],[17,"XKB_KEY_Korean_Won","","",null,null],[17,"XKB_KEY_Armenian_ligature_ew","","",null,null],[17,"XKB_KEY_Armenian_full_stop","","",null,null],[17,"XKB_KEY_Armenian_verjaket","","",null,null],[17,"XKB_KEY_Armenian_separation_mark","","",null,null],[17,"XKB_KEY_Armenian_but","","",null,null],[17,"XKB_KEY_Armenian_hyphen","","",null,null],[17,"XKB_KEY_Armenian_yentamna","","",null,null],[17,"XKB_KEY_Armenian_exclam","","",null,null],[17,"XKB_KEY_Armenian_amanak","","",null,null],[17,"XKB_KEY_Armenian_accent","","",null,null],[17,"XKB_KEY_Armenian_shesht","","",null,null],[17,"XKB_KEY_Armenian_question","","",null,null],[17,"XKB_KEY_Armenian_paruyk","","",null,null],[17,"XKB_KEY_Armenian_AYB","","",null,null],[17,"XKB_KEY_Armenian_ayb","","",null,null],[17,"XKB_KEY_Armenian_BEN","","",null,null],[17,"XKB_KEY_Armenian_ben","","",null,null],[17,"XKB_KEY_Armenian_GIM","","",null,null],[17,"XKB_KEY_Armenian_gim","","",null,null],[17,"XKB_KEY_Armenian_DA","","",null,null],[17,"XKB_KEY_Armenian_da","","",null,null],[17,"XKB_KEY_Armenian_YECH","","",null,null],[17,"XKB_KEY_Armenian_yech","","",null,null],[17,"XKB_KEY_Armenian_ZA","","",null,null],[17,"XKB_KEY_Armenian_za","","",null,null],[17,"XKB_KEY_Armenian_E","","",null,null],[17,"XKB_KEY_Armenian_e","","",null,null],[17,"XKB_KEY_Armenian_AT","","",null,null],[17,"XKB_KEY_Armenian_at","","",null,null],[17,"XKB_KEY_Armenian_TO","","",null,null],[17,"XKB_KEY_Armenian_to","","",null,null],[17,"XKB_KEY_Armenian_ZHE","","",null,null],[17,"XKB_KEY_Armenian_zhe","","",null,null],[17,"XKB_KEY_Armenian_INI","","",null,null],[17,"XKB_KEY_Armenian_ini","","",null,null],[17,"XKB_KEY_Armenian_LYUN","","",null,null],[17,"XKB_KEY_Armenian_lyun","","",null,null],[17,"XKB_KEY_Armenian_KHE","","",null,null],[17,"XKB_KEY_Armenian_khe","","",null,null],[17,"XKB_KEY_Armenian_TSA","","",null,null],[17,"XKB_KEY_Armenian_tsa","","",null,null],[17,"XKB_KEY_Armenian_KEN","","",null,null],[17,"XKB_KEY_Armenian_ken","","",null,null],[17,"XKB_KEY_Armenian_HO","","",null,null],[17,"XKB_KEY_Armenian_ho","","",null,null],[17,"XKB_KEY_Armenian_DZA","","",null,null],[17,"XKB_KEY_Armenian_dza","","",null,null],[17,"XKB_KEY_Armenian_GHAT","","",null,null],[17,"XKB_KEY_Armenian_ghat","","",null,null],[17,"XKB_KEY_Armenian_TCHE","","",null,null],[17,"XKB_KEY_Armenian_tche","","",null,null],[17,"XKB_KEY_Armenian_MEN","","",null,null],[17,"XKB_KEY_Armenian_men","","",null,null],[17,"XKB_KEY_Armenian_HI","","",null,null],[17,"XKB_KEY_Armenian_hi","","",null,null],[17,"XKB_KEY_Armenian_NU","","",null,null],[17,"XKB_KEY_Armenian_nu","","",null,null],[17,"XKB_KEY_Armenian_SHA","","",null,null],[17,"XKB_KEY_Armenian_sha","","",null,null],[17,"XKB_KEY_Armenian_VO","","",null,null],[17,"XKB_KEY_Armenian_vo","","",null,null],[17,"XKB_KEY_Armenian_CHA","","",null,null],[17,"XKB_KEY_Armenian_cha","","",null,null],[17,"XKB_KEY_Armenian_PE","","",null,null],[17,"XKB_KEY_Armenian_pe","","",null,null],[17,"XKB_KEY_Armenian_JE","","",null,null],[17,"XKB_KEY_Armenian_je","","",null,null],[17,"XKB_KEY_Armenian_RA","","",null,null],[17,"XKB_KEY_Armenian_ra","","",null,null],[17,"XKB_KEY_Armenian_SE","","",null,null],[17,"XKB_KEY_Armenian_se","","",null,null],[17,"XKB_KEY_Armenian_VEV","","",null,null],[17,"XKB_KEY_Armenian_vev","","",null,null],[17,"XKB_KEY_Armenian_TYUN","","",null,null],[17,"XKB_KEY_Armenian_tyun","","",null,null],[17,"XKB_KEY_Armenian_RE","","",null,null],[17,"XKB_KEY_Armenian_re","","",null,null],[17,"XKB_KEY_Armenian_TSO","","",null,null],[17,"XKB_KEY_Armenian_tso","","",null,null],[17,"XKB_KEY_Armenian_VYUN","","",null,null],[17,"XKB_KEY_Armenian_vyun","","",null,null],[17,"XKB_KEY_Armenian_PYUR","","",null,null],[17,"XKB_KEY_Armenian_pyur","","",null,null],[17,"XKB_KEY_Armenian_KE","","",null,null],[17,"XKB_KEY_Armenian_ke","","",null,null],[17,"XKB_KEY_Armenian_O","","",null,null],[17,"XKB_KEY_Armenian_o","","",null,null],[17,"XKB_KEY_Armenian_FE","","",null,null],[17,"XKB_KEY_Armenian_fe","","",null,null],[17,"XKB_KEY_Armenian_apostrophe","","",null,null],[17,"XKB_KEY_Georgian_an","","",null,null],[17,"XKB_KEY_Georgian_ban","","",null,null],[17,"XKB_KEY_Georgian_gan","","",null,null],[17,"XKB_KEY_Georgian_don","","",null,null],[17,"XKB_KEY_Georgian_en","","",null,null],[17,"XKB_KEY_Georgian_vin","","",null,null],[17,"XKB_KEY_Georgian_zen","","",null,null],[17,"XKB_KEY_Georgian_tan","","",null,null],[17,"XKB_KEY_Georgian_in","","",null,null],[17,"XKB_KEY_Georgian_kan","","",null,null],[17,"XKB_KEY_Georgian_las","","",null,null],[17,"XKB_KEY_Georgian_man","","",null,null],[17,"XKB_KEY_Georgian_nar","","",null,null],[17,"XKB_KEY_Georgian_on","","",null,null],[17,"XKB_KEY_Georgian_par","","",null,null],[17,"XKB_KEY_Georgian_zhar","","",null,null],[17,"XKB_KEY_Georgian_rae","","",null,null],[17,"XKB_KEY_Georgian_san","","",null,null],[17,"XKB_KEY_Georgian_tar","","",null,null],[17,"XKB_KEY_Georgian_un","","",null,null],[17,"XKB_KEY_Georgian_phar","","",null,null],[17,"XKB_KEY_Georgian_khar","","",null,null],[17,"XKB_KEY_Georgian_ghan","","",null,null],[17,"XKB_KEY_Georgian_qar","","",null,null],[17,"XKB_KEY_Georgian_shin","","",null,null],[17,"XKB_KEY_Georgian_chin","","",null,null],[17,"XKB_KEY_Georgian_can","","",null,null],[17,"XKB_KEY_Georgian_jil","","",null,null],[17,"XKB_KEY_Georgian_cil","","",null,null],[17,"XKB_KEY_Georgian_char","","",null,null],[17,"XKB_KEY_Georgian_xan","","",null,null],[17,"XKB_KEY_Georgian_jhan","","",null,null],[17,"XKB_KEY_Georgian_hae","","",null,null],[17,"XKB_KEY_Georgian_he","","",null,null],[17,"XKB_KEY_Georgian_hie","","",null,null],[17,"XKB_KEY_Georgian_we","","",null,null],[17,"XKB_KEY_Georgian_har","","",null,null],[17,"XKB_KEY_Georgian_hoe","","",null,null],[17,"XKB_KEY_Georgian_fi","","",null,null],[17,"XKB_KEY_Xabovedot","","",null,null],[17,"XKB_KEY_Ibreve","","",null,null],[17,"XKB_KEY_Zstroke","","",null,null],[17,"XKB_KEY_Gcaron","","",null,null],[17,"XKB_KEY_Ocaron","","",null,null],[17,"XKB_KEY_Obarred","","",null,null],[17,"XKB_KEY_xabovedot","","",null,null],[17,"XKB_KEY_ibreve","","",null,null],[17,"XKB_KEY_zstroke","","",null,null],[17,"XKB_KEY_gcaron","","",null,null],[17,"XKB_KEY_ocaron","","",null,null],[17,"XKB_KEY_obarred","","",null,null],[17,"XKB_KEY_SCHWA","","",null,null],[17,"XKB_KEY_schwa","","",null,null],[17,"XKB_KEY_EZH","","",null,null],[17,"XKB_KEY_ezh","","",null,null],[17,"XKB_KEY_Lbelowdot","","",null,null],[17,"XKB_KEY_lbelowdot","","",null,null],[17,"XKB_KEY_Abelowdot","","",null,null],[17,"XKB_KEY_abelowdot","","",null,null],[17,"XKB_KEY_Ahook","","",null,null],[17,"XKB_KEY_ahook","","",null,null],[17,"XKB_KEY_Acircumflexacute","","",null,null],[17,"XKB_KEY_acircumflexacute","","",null,null],[17,"XKB_KEY_Acircumflexgrave","","",null,null],[17,"XKB_KEY_acircumflexgrave","","",null,null],[17,"XKB_KEY_Acircumflexhook","","",null,null],[17,"XKB_KEY_acircumflexhook","","",null,null],[17,"XKB_KEY_Acircumflextilde","","",null,null],[17,"XKB_KEY_acircumflextilde","","",null,null],[17,"XKB_KEY_Acircumflexbelowdot","","",null,null],[17,"XKB_KEY_acircumflexbelowdot","","",null,null],[17,"XKB_KEY_Abreveacute","","",null,null],[17,"XKB_KEY_abreveacute","","",null,null],[17,"XKB_KEY_Abrevegrave","","",null,null],[17,"XKB_KEY_abrevegrave","","",null,null],[17,"XKB_KEY_Abrevehook","","",null,null],[17,"XKB_KEY_abrevehook","","",null,null],[17,"XKB_KEY_Abrevetilde","","",null,null],[17,"XKB_KEY_abrevetilde","","",null,null],[17,"XKB_KEY_Abrevebelowdot","","",null,null],[17,"XKB_KEY_abrevebelowdot","","",null,null],[17,"XKB_KEY_Ebelowdot","","",null,null],[17,"XKB_KEY_ebelowdot","","",null,null],[17,"XKB_KEY_Ehook","","",null,null],[17,"XKB_KEY_ehook","","",null,null],[17,"XKB_KEY_Etilde","","",null,null],[17,"XKB_KEY_etilde","","",null,null],[17,"XKB_KEY_Ecircumflexacute","","",null,null],[17,"XKB_KEY_ecircumflexacute","","",null,null],[17,"XKB_KEY_Ecircumflexgrave","","",null,null],[17,"XKB_KEY_ecircumflexgrave","","",null,null],[17,"XKB_KEY_Ecircumflexhook","","",null,null],[17,"XKB_KEY_ecircumflexhook","","",null,null],[17,"XKB_KEY_Ecircumflextilde","","",null,null],[17,"XKB_KEY_ecircumflextilde","","",null,null],[17,"XKB_KEY_Ecircumflexbelowdot","","",null,null],[17,"XKB_KEY_ecircumflexbelowdot","","",null,null],[17,"XKB_KEY_Ihook","","",null,null],[17,"XKB_KEY_ihook","","",null,null],[17,"XKB_KEY_Ibelowdot","","",null,null],[17,"XKB_KEY_ibelowdot","","",null,null],[17,"XKB_KEY_Obelowdot","","",null,null],[17,"XKB_KEY_obelowdot","","",null,null],[17,"XKB_KEY_Ohook","","",null,null],[17,"XKB_KEY_ohook","","",null,null],[17,"XKB_KEY_Ocircumflexacute","","",null,null],[17,"XKB_KEY_ocircumflexacute","","",null,null],[17,"XKB_KEY_Ocircumflexgrave","","",null,null],[17,"XKB_KEY_ocircumflexgrave","","",null,null],[17,"XKB_KEY_Ocircumflexhook","","",null,null],[17,"XKB_KEY_ocircumflexhook","","",null,null],[17,"XKB_KEY_Ocircumflextilde","","",null,null],[17,"XKB_KEY_ocircumflextilde","","",null,null],[17,"XKB_KEY_Ocircumflexbelowdot","","",null,null],[17,"XKB_KEY_ocircumflexbelowdot","","",null,null],[17,"XKB_KEY_Ohornacute","","",null,null],[17,"XKB_KEY_ohornacute","","",null,null],[17,"XKB_KEY_Ohorngrave","","",null,null],[17,"XKB_KEY_ohorngrave","","",null,null],[17,"XKB_KEY_Ohornhook","","",null,null],[17,"XKB_KEY_ohornhook","","",null,null],[17,"XKB_KEY_Ohorntilde","","",null,null],[17,"XKB_KEY_ohorntilde","","",null,null],[17,"XKB_KEY_Ohornbelowdot","","",null,null],[17,"XKB_KEY_ohornbelowdot","","",null,null],[17,"XKB_KEY_Ubelowdot","","",null,null],[17,"XKB_KEY_ubelowdot","","",null,null],[17,"XKB_KEY_Uhook","","",null,null],[17,"XKB_KEY_uhook","","",null,null],[17,"XKB_KEY_Uhornacute","","",null,null],[17,"XKB_KEY_uhornacute","","",null,null],[17,"XKB_KEY_Uhorngrave","","",null,null],[17,"XKB_KEY_uhorngrave","","",null,null],[17,"XKB_KEY_Uhornhook","","",null,null],[17,"XKB_KEY_uhornhook","","",null,null],[17,"XKB_KEY_Uhorntilde","","",null,null],[17,"XKB_KEY_uhorntilde","","",null,null],[17,"XKB_KEY_Uhornbelowdot","","",null,null],[17,"XKB_KEY_uhornbelowdot","","",null,null],[17,"XKB_KEY_Ybelowdot","","",null,null],[17,"XKB_KEY_ybelowdot","","",null,null],[17,"XKB_KEY_Yhook","","",null,null],[17,"XKB_KEY_yhook","","",null,null],[17,"XKB_KEY_Ytilde","","",null,null],[17,"XKB_KEY_ytilde","","",null,null],[17,"XKB_KEY_Ohorn","","",null,null],[17,"XKB_KEY_ohorn","","",null,null],[17,"XKB_KEY_Uhorn","","",null,null],[17,"XKB_KEY_uhorn","","",null,null],[17,"XKB_KEY_EcuSign","","",null,null],[17,"XKB_KEY_ColonSign","","",null,null],[17,"XKB_KEY_CruzeiroSign","","",null,null],[17,"XKB_KEY_FFrancSign","","",null,null],[17,"XKB_KEY_LiraSign","","",null,null],[17,"XKB_KEY_MillSign","","",null,null],[17,"XKB_KEY_NairaSign","","",null,null],[17,"XKB_KEY_PesetaSign","","",null,null],[17,"XKB_KEY_RupeeSign","","",null,null],[17,"XKB_KEY_WonSign","","",null,null],[17,"XKB_KEY_NewSheqelSign","","",null,null],[17,"XKB_KEY_DongSign","","",null,null],[17,"XKB_KEY_EuroSign","","",null,null],[17,"XKB_KEY_zerosuperior","","",null,null],[17,"XKB_KEY_foursuperior","","",null,null],[17,"XKB_KEY_fivesuperior","","",null,null],[17,"XKB_KEY_sixsuperior","","",null,null],[17,"XKB_KEY_sevensuperior","","",null,null],[17,"XKB_KEY_eightsuperior","","",null,null],[17,"XKB_KEY_ninesuperior","","",null,null],[17,"XKB_KEY_zerosubscript","","",null,null],[17,"XKB_KEY_onesubscript","","",null,null],[17,"XKB_KEY_twosubscript","","",null,null],[17,"XKB_KEY_threesubscript","","",null,null],[17,"XKB_KEY_foursubscript","","",null,null],[17,"XKB_KEY_fivesubscript","","",null,null],[17,"XKB_KEY_sixsubscript","","",null,null],[17,"XKB_KEY_sevensubscript","","",null,null],[17,"XKB_KEY_eightsubscript","","",null,null],[17,"XKB_KEY_ninesubscript","","",null,null],[17,"XKB_KEY_partdifferential","","",null,null],[17,"XKB_KEY_emptyset","","",null,null],[17,"XKB_KEY_elementof","","",null,null],[17,"XKB_KEY_notelementof","","",null,null],[17,"XKB_KEY_containsas","","",null,null],[17,"XKB_KEY_squareroot","","",null,null],[17,"XKB_KEY_cuberoot","","",null,null],[17,"XKB_KEY_fourthroot","","",null,null],[17,"XKB_KEY_dintegral","","",null,null],[17,"XKB_KEY_tintegral","","",null,null],[17,"XKB_KEY_because","","",null,null],[17,"XKB_KEY_approxeq","","",null,null],[17,"XKB_KEY_notapproxeq","","",null,null],[17,"XKB_KEY_notidentical","","",null,null],[17,"XKB_KEY_stricteq","","",null,null],[17,"XKB_KEY_braille_dot_1","","",null,null],[17,"XKB_KEY_braille_dot_2","","",null,null],[17,"XKB_KEY_braille_dot_3","","",null,null],[17,"XKB_KEY_braille_dot_4","","",null,null],[17,"XKB_KEY_braille_dot_5","","",null,null],[17,"XKB_KEY_braille_dot_6","","",null,null],[17,"XKB_KEY_braille_dot_7","","",null,null],[17,"XKB_KEY_braille_dot_8","","",null,null],[17,"XKB_KEY_braille_dot_9","","",null,null],[17,"XKB_KEY_braille_dot_10","","",null,null],[17,"XKB_KEY_braille_blank","","",null,null],[17,"XKB_KEY_braille_dots_1","","",null,null],[17,"XKB_KEY_braille_dots_2","","",null,null],[17,"XKB_KEY_braille_dots_12","","",null,null],[17,"XKB_KEY_braille_dots_3","","",null,null],[17,"XKB_KEY_braille_dots_13","","",null,null],[17,"XKB_KEY_braille_dots_23","","",null,null],[17,"XKB_KEY_braille_dots_123","","",null,null],[17,"XKB_KEY_braille_dots_4","","",null,null],[17,"XKB_KEY_braille_dots_14","","",null,null],[17,"XKB_KEY_braille_dots_24","","",null,null],[17,"XKB_KEY_braille_dots_124","","",null,null],[17,"XKB_KEY_braille_dots_34","","",null,null],[17,"XKB_KEY_braille_dots_134","","",null,null],[17,"XKB_KEY_braille_dots_234","","",null,null],[17,"XKB_KEY_braille_dots_1234","","",null,null],[17,"XKB_KEY_braille_dots_5","","",null,null],[17,"XKB_KEY_braille_dots_15","","",null,null],[17,"XKB_KEY_braille_dots_25","","",null,null],[17,"XKB_KEY_braille_dots_125","","",null,null],[17,"XKB_KEY_braille_dots_35","","",null,null],[17,"XKB_KEY_braille_dots_135","","",null,null],[17,"XKB_KEY_braille_dots_235","","",null,null],[17,"XKB_KEY_braille_dots_1235","","",null,null],[17,"XKB_KEY_braille_dots_45","","",null,null],[17,"XKB_KEY_braille_dots_145","","",null,null],[17,"XKB_KEY_braille_dots_245","","",null,null],[17,"XKB_KEY_braille_dots_1245","","",null,null],[17,"XKB_KEY_braille_dots_345","","",null,null],[17,"XKB_KEY_braille_dots_1345","","",null,null],[17,"XKB_KEY_braille_dots_2345","","",null,null],[17,"XKB_KEY_braille_dots_12345","","",null,null],[17,"XKB_KEY_braille_dots_6","","",null,null],[17,"XKB_KEY_braille_dots_16","","",null,null],[17,"XKB_KEY_braille_dots_26","","",null,null],[17,"XKB_KEY_braille_dots_126","","",null,null],[17,"XKB_KEY_braille_dots_36","","",null,null],[17,"XKB_KEY_braille_dots_136","","",null,null],[17,"XKB_KEY_braille_dots_236","","",null,null],[17,"XKB_KEY_braille_dots_1236","","",null,null],[17,"XKB_KEY_braille_dots_46","","",null,null],[17,"XKB_KEY_braille_dots_146","","",null,null],[17,"XKB_KEY_braille_dots_246","","",null,null],[17,"XKB_KEY_braille_dots_1246","","",null,null],[17,"XKB_KEY_braille_dots_346","","",null,null],[17,"XKB_KEY_braille_dots_1346","","",null,null],[17,"XKB_KEY_braille_dots_2346","","",null,null],[17,"XKB_KEY_braille_dots_12346","","",null,null],[17,"XKB_KEY_braille_dots_56","","",null,null],[17,"XKB_KEY_braille_dots_156","","",null,null],[17,"XKB_KEY_braille_dots_256","","",null,null],[17,"XKB_KEY_braille_dots_1256","","",null,null],[17,"XKB_KEY_braille_dots_356","","",null,null],[17,"XKB_KEY_braille_dots_1356","","",null,null],[17,"XKB_KEY_braille_dots_2356","","",null,null],[17,"XKB_KEY_braille_dots_12356","","",null,null],[17,"XKB_KEY_braille_dots_456","","",null,null],[17,"XKB_KEY_braille_dots_1456","","",null,null],[17,"XKB_KEY_braille_dots_2456","","",null,null],[17,"XKB_KEY_braille_dots_12456","","",null,null],[17,"XKB_KEY_braille_dots_3456","","",null,null],[17,"XKB_KEY_braille_dots_13456","","",null,null],[17,"XKB_KEY_braille_dots_23456","","",null,null],[17,"XKB_KEY_braille_dots_123456","","",null,null],[17,"XKB_KEY_braille_dots_7","","",null,null],[17,"XKB_KEY_braille_dots_17","","",null,null],[17,"XKB_KEY_braille_dots_27","","",null,null],[17,"XKB_KEY_braille_dots_127","","",null,null],[17,"XKB_KEY_braille_dots_37","","",null,null],[17,"XKB_KEY_braille_dots_137","","",null,null],[17,"XKB_KEY_braille_dots_237","","",null,null],[17,"XKB_KEY_braille_dots_1237","","",null,null],[17,"XKB_KEY_braille_dots_47","","",null,null],[17,"XKB_KEY_braille_dots_147","","",null,null],[17,"XKB_KEY_braille_dots_247","","",null,null],[17,"XKB_KEY_braille_dots_1247","","",null,null],[17,"XKB_KEY_braille_dots_347","","",null,null],[17,"XKB_KEY_braille_dots_1347","","",null,null],[17,"XKB_KEY_braille_dots_2347","","",null,null],[17,"XKB_KEY_braille_dots_12347","","",null,null],[17,"XKB_KEY_braille_dots_57","","",null,null],[17,"XKB_KEY_braille_dots_157","","",null,null],[17,"XKB_KEY_braille_dots_257","","",null,null],[17,"XKB_KEY_braille_dots_1257","","",null,null],[17,"XKB_KEY_braille_dots_357","","",null,null],[17,"XKB_KEY_braille_dots_1357","","",null,null],[17,"XKB_KEY_braille_dots_2357","","",null,null],[17,"XKB_KEY_braille_dots_12357","","",null,null],[17,"XKB_KEY_braille_dots_457","","",null,null],[17,"XKB_KEY_braille_dots_1457","","",null,null],[17,"XKB_KEY_braille_dots_2457","","",null,null],[17,"XKB_KEY_braille_dots_12457","","",null,null],[17,"XKB_KEY_braille_dots_3457","","",null,null],[17,"XKB_KEY_braille_dots_13457","","",null,null],[17,"XKB_KEY_braille_dots_23457","","",null,null],[17,"XKB_KEY_braille_dots_123457","","",null,null],[17,"XKB_KEY_braille_dots_67","","",null,null],[17,"XKB_KEY_braille_dots_167","","",null,null],[17,"XKB_KEY_braille_dots_267","","",null,null],[17,"XKB_KEY_braille_dots_1267","","",null,null],[17,"XKB_KEY_braille_dots_367","","",null,null],[17,"XKB_KEY_braille_dots_1367","","",null,null],[17,"XKB_KEY_braille_dots_2367","","",null,null],[17,"XKB_KEY_braille_dots_12367","","",null,null],[17,"XKB_KEY_braille_dots_467","","",null,null],[17,"XKB_KEY_braille_dots_1467","","",null,null],[17,"XKB_KEY_braille_dots_2467","","",null,null],[17,"XKB_KEY_braille_dots_12467","","",null,null],[17,"XKB_KEY_braille_dots_3467","","",null,null],[17,"XKB_KEY_braille_dots_13467","","",null,null],[17,"XKB_KEY_braille_dots_23467","","",null,null],[17,"XKB_KEY_braille_dots_123467","","",null,null],[17,"XKB_KEY_braille_dots_567","","",null,null],[17,"XKB_KEY_braille_dots_1567","","",null,null],[17,"XKB_KEY_braille_dots_2567","","",null,null],[17,"XKB_KEY_braille_dots_12567","","",null,null],[17,"XKB_KEY_braille_dots_3567","","",null,null],[17,"XKB_KEY_braille_dots_13567","","",null,null],[17,"XKB_KEY_braille_dots_23567","","",null,null],[17,"XKB_KEY_braille_dots_123567","","",null,null],[17,"XKB_KEY_braille_dots_4567","","",null,null],[17,"XKB_KEY_braille_dots_14567","","",null,null],[17,"XKB_KEY_braille_dots_24567","","",null,null],[17,"XKB_KEY_braille_dots_124567","","",null,null],[17,"XKB_KEY_braille_dots_34567","","",null,null],[17,"XKB_KEY_braille_dots_134567","","",null,null],[17,"XKB_KEY_braille_dots_234567","","",null,null],[17,"XKB_KEY_braille_dots_1234567","","",null,null],[17,"XKB_KEY_braille_dots_8","","",null,null],[17,"XKB_KEY_braille_dots_18","","",null,null],[17,"XKB_KEY_braille_dots_28","","",null,null],[17,"XKB_KEY_braille_dots_128","","",null,null],[17,"XKB_KEY_braille_dots_38","","",null,null],[17,"XKB_KEY_braille_dots_138","","",null,null],[17,"XKB_KEY_braille_dots_238","","",null,null],[17,"XKB_KEY_braille_dots_1238","","",null,null],[17,"XKB_KEY_braille_dots_48","","",null,null],[17,"XKB_KEY_braille_dots_148","","",null,null],[17,"XKB_KEY_braille_dots_248","","",null,null],[17,"XKB_KEY_braille_dots_1248","","",null,null],[17,"XKB_KEY_braille_dots_348","","",null,null],[17,"XKB_KEY_braille_dots_1348","","",null,null],[17,"XKB_KEY_braille_dots_2348","","",null,null],[17,"XKB_KEY_braille_dots_12348","","",null,null],[17,"XKB_KEY_braille_dots_58","","",null,null],[17,"XKB_KEY_braille_dots_158","","",null,null],[17,"XKB_KEY_braille_dots_258","","",null,null],[17,"XKB_KEY_braille_dots_1258","","",null,null],[17,"XKB_KEY_braille_dots_358","","",null,null],[17,"XKB_KEY_braille_dots_1358","","",null,null],[17,"XKB_KEY_braille_dots_2358","","",null,null],[17,"XKB_KEY_braille_dots_12358","","",null,null],[17,"XKB_KEY_braille_dots_458","","",null,null],[17,"XKB_KEY_braille_dots_1458","","",null,null],[17,"XKB_KEY_braille_dots_2458","","",null,null],[17,"XKB_KEY_braille_dots_12458","","",null,null],[17,"XKB_KEY_braille_dots_3458","","",null,null],[17,"XKB_KEY_braille_dots_13458","","",null,null],[17,"XKB_KEY_braille_dots_23458","","",null,null],[17,"XKB_KEY_braille_dots_123458","","",null,null],[17,"XKB_KEY_braille_dots_68","","",null,null],[17,"XKB_KEY_braille_dots_168","","",null,null],[17,"XKB_KEY_braille_dots_268","","",null,null],[17,"XKB_KEY_braille_dots_1268","","",null,null],[17,"XKB_KEY_braille_dots_368","","",null,null],[17,"XKB_KEY_braille_dots_1368","","",null,null],[17,"XKB_KEY_braille_dots_2368","","",null,null],[17,"XKB_KEY_braille_dots_12368","","",null,null],[17,"XKB_KEY_braille_dots_468","","",null,null],[17,"XKB_KEY_braille_dots_1468","","",null,null],[17,"XKB_KEY_braille_dots_2468","","",null,null],[17,"XKB_KEY_braille_dots_12468","","",null,null],[17,"XKB_KEY_braille_dots_3468","","",null,null],[17,"XKB_KEY_braille_dots_13468","","",null,null],[17,"XKB_KEY_braille_dots_23468","","",null,null],[17,"XKB_KEY_braille_dots_123468","","",null,null],[17,"XKB_KEY_braille_dots_568","","",null,null],[17,"XKB_KEY_braille_dots_1568","","",null,null],[17,"XKB_KEY_braille_dots_2568","","",null,null],[17,"XKB_KEY_braille_dots_12568","","",null,null],[17,"XKB_KEY_braille_dots_3568","","",null,null],[17,"XKB_KEY_braille_dots_13568","","",null,null],[17,"XKB_KEY_braille_dots_23568","","",null,null],[17,"XKB_KEY_braille_dots_123568","","",null,null],[17,"XKB_KEY_braille_dots_4568","","",null,null],[17,"XKB_KEY_braille_dots_14568","","",null,null],[17,"XKB_KEY_braille_dots_24568","","",null,null],[17,"XKB_KEY_braille_dots_124568","","",null,null],[17,"XKB_KEY_braille_dots_34568","","",null,null],[17,"XKB_KEY_braille_dots_134568","","",null,null],[17,"XKB_KEY_braille_dots_234568","","",null,null],[17,"XKB_KEY_braille_dots_1234568","","",null,null],[17,"XKB_KEY_braille_dots_78","","",null,null],[17,"XKB_KEY_braille_dots_178","","",null,null],[17,"XKB_KEY_braille_dots_278","","",null,null],[17,"XKB_KEY_braille_dots_1278","","",null,null],[17,"XKB_KEY_braille_dots_378","","",null,null],[17,"XKB_KEY_braille_dots_1378","","",null,null],[17,"XKB_KEY_braille_dots_2378","","",null,null],[17,"XKB_KEY_braille_dots_12378","","",null,null],[17,"XKB_KEY_braille_dots_478","","",null,null],[17,"XKB_KEY_braille_dots_1478","","",null,null],[17,"XKB_KEY_braille_dots_2478","","",null,null],[17,"XKB_KEY_braille_dots_12478","","",null,null],[17,"XKB_KEY_braille_dots_3478","","",null,null],[17,"XKB_KEY_braille_dots_13478","","",null,null],[17,"XKB_KEY_braille_dots_23478","","",null,null],[17,"XKB_KEY_braille_dots_123478","","",null,null],[17,"XKB_KEY_braille_dots_578","","",null,null],[17,"XKB_KEY_braille_dots_1578","","",null,null],[17,"XKB_KEY_braille_dots_2578","","",null,null],[17,"XKB_KEY_braille_dots_12578","","",null,null],[17,"XKB_KEY_braille_dots_3578","","",null,null],[17,"XKB_KEY_braille_dots_13578","","",null,null],[17,"XKB_KEY_braille_dots_23578","","",null,null],[17,"XKB_KEY_braille_dots_123578","","",null,null],[17,"XKB_KEY_braille_dots_4578","","",null,null],[17,"XKB_KEY_braille_dots_14578","","",null,null],[17,"XKB_KEY_braille_dots_24578","","",null,null],[17,"XKB_KEY_braille_dots_124578","","",null,null],[17,"XKB_KEY_braille_dots_34578","","",null,null],[17,"XKB_KEY_braille_dots_134578","","",null,null],[17,"XKB_KEY_braille_dots_234578","","",null,null],[17,"XKB_KEY_braille_dots_1234578","","",null,null],[17,"XKB_KEY_braille_dots_678","","",null,null],[17,"XKB_KEY_braille_dots_1678","","",null,null],[17,"XKB_KEY_braille_dots_2678","","",null,null],[17,"XKB_KEY_braille_dots_12678","","",null,null],[17,"XKB_KEY_braille_dots_3678","","",null,null],[17,"XKB_KEY_braille_dots_13678","","",null,null],[17,"XKB_KEY_braille_dots_23678","","",null,null],[17,"XKB_KEY_braille_dots_123678","","",null,null],[17,"XKB_KEY_braille_dots_4678","","",null,null],[17,"XKB_KEY_braille_dots_14678","","",null,null],[17,"XKB_KEY_braille_dots_24678","","",null,null],[17,"XKB_KEY_braille_dots_124678","","",null,null],[17,"XKB_KEY_braille_dots_34678","","",null,null],[17,"XKB_KEY_braille_dots_134678","","",null,null],[17,"XKB_KEY_braille_dots_234678","","",null,null],[17,"XKB_KEY_braille_dots_1234678","","",null,null],[17,"XKB_KEY_braille_dots_5678","","",null,null],[17,"XKB_KEY_braille_dots_15678","","",null,null],[17,"XKB_KEY_braille_dots_25678","","",null,null],[17,"XKB_KEY_braille_dots_125678","","",null,null],[17,"XKB_KEY_braille_dots_35678","","",null,null],[17,"XKB_KEY_braille_dots_135678","","",null,null],[17,"XKB_KEY_braille_dots_235678","","",null,null],[17,"XKB_KEY_braille_dots_1235678","","",null,null],[17,"XKB_KEY_braille_dots_45678","","",null,null],[17,"XKB_KEY_braille_dots_145678","","",null,null],[17,"XKB_KEY_braille_dots_245678","","",null,null],[17,"XKB_KEY_braille_dots_1245678","","",null,null],[17,"XKB_KEY_braille_dots_345678","","",null,null],[17,"XKB_KEY_braille_dots_1345678","","",null,null],[17,"XKB_KEY_braille_dots_2345678","","",null,null],[17,"XKB_KEY_braille_dots_12345678","","",null,null],[17,"XKB_KEY_Sinh_ng","","",null,null],[17,"XKB_KEY_Sinh_h2","","",null,null],[17,"XKB_KEY_Sinh_a","","",null,null],[17,"XKB_KEY_Sinh_aa","","",null,null],[17,"XKB_KEY_Sinh_ae","","",null,null],[17,"XKB_KEY_Sinh_aee","","",null,null],[17,"XKB_KEY_Sinh_i","","",null,null],[17,"XKB_KEY_Sinh_ii","","",null,null],[17,"XKB_KEY_Sinh_u","","",null,null],[17,"XKB_KEY_Sinh_uu","","",null,null],[17,"XKB_KEY_Sinh_ri","","",null,null],[17,"XKB_KEY_Sinh_rii","","",null,null],[17,"XKB_KEY_Sinh_lu","","",null,null],[17,"XKB_KEY_Sinh_luu","","",null,null],[17,"XKB_KEY_Sinh_e","","",null,null],[17,"XKB_KEY_Sinh_ee","","",null,null],[17,"XKB_KEY_Sinh_ai","","",null,null],[17,"XKB_KEY_Sinh_o","","",null,null],[17,"XKB_KEY_Sinh_oo","","",null,null],[17,"XKB_KEY_Sinh_au","","",null,null],[17,"XKB_KEY_Sinh_ka","","",null,null],[17,"XKB_KEY_Sinh_kha","","",null,null],[17,"XKB_KEY_Sinh_ga","","",null,null],[17,"XKB_KEY_Sinh_gha","","",null,null],[17,"XKB_KEY_Sinh_ng2","","",null,null],[17,"XKB_KEY_Sinh_nga","","",null,null],[17,"XKB_KEY_Sinh_ca","","",null,null],[17,"XKB_KEY_Sinh_cha","","",null,null],[17,"XKB_KEY_Sinh_ja","","",null,null],[17,"XKB_KEY_Sinh_jha","","",null,null],[17,"XKB_KEY_Sinh_nya","","",null,null],[17,"XKB_KEY_Sinh_jnya","","",null,null],[17,"XKB_KEY_Sinh_nja","","",null,null],[17,"XKB_KEY_Sinh_tta","","",null,null],[17,"XKB_KEY_Sinh_ttha","","",null,null],[17,"XKB_KEY_Sinh_dda","","",null,null],[17,"XKB_KEY_Sinh_ddha","","",null,null],[17,"XKB_KEY_Sinh_nna","","",null,null],[17,"XKB_KEY_Sinh_ndda","","",null,null],[17,"XKB_KEY_Sinh_tha","","",null,null],[17,"XKB_KEY_Sinh_thha","","",null,null],[17,"XKB_KEY_Sinh_dha","","",null,null],[17,"XKB_KEY_Sinh_dhha","","",null,null],[17,"XKB_KEY_Sinh_na","","",null,null],[17,"XKB_KEY_Sinh_ndha","","",null,null],[17,"XKB_KEY_Sinh_pa","","",null,null],[17,"XKB_KEY_Sinh_pha","","",null,null],[17,"XKB_KEY_Sinh_ba","","",null,null],[17,"XKB_KEY_Sinh_bha","","",null,null],[17,"XKB_KEY_Sinh_ma","","",null,null],[17,"XKB_KEY_Sinh_mba","","",null,null],[17,"XKB_KEY_Sinh_ya","","",null,null],[17,"XKB_KEY_Sinh_ra","","",null,null],[17,"XKB_KEY_Sinh_la","","",null,null],[17,"XKB_KEY_Sinh_va","","",null,null],[17,"XKB_KEY_Sinh_sha","","",null,null],[17,"XKB_KEY_Sinh_ssha","","",null,null],[17,"XKB_KEY_Sinh_sa","","",null,null],[17,"XKB_KEY_Sinh_ha","","",null,null],[17,"XKB_KEY_Sinh_lla","","",null,null],[17,"XKB_KEY_Sinh_fa","","",null,null],[17,"XKB_KEY_Sinh_al","","",null,null],[17,"XKB_KEY_Sinh_aa2","","",null,null],[17,"XKB_KEY_Sinh_ae2","","",null,null],[17,"XKB_KEY_Sinh_aee2","","",null,null],[17,"XKB_KEY_Sinh_i2","","",null,null],[17,"XKB_KEY_Sinh_ii2","","",null,null],[17,"XKB_KEY_Sinh_u2","","",null,null],[17,"XKB_KEY_Sinh_uu2","","",null,null],[17,"XKB_KEY_Sinh_ru2","","",null,null],[17,"XKB_KEY_Sinh_e2","","",null,null],[17,"XKB_KEY_Sinh_ee2","","",null,null],[17,"XKB_KEY_Sinh_ai2","","",null,null],[17,"XKB_KEY_Sinh_o2","","",null,null],[17,"XKB_KEY_Sinh_oo2","","",null,null],[17,"XKB_KEY_Sinh_au2","","",null,null],[17,"XKB_KEY_Sinh_lu2","","",null,null],[17,"XKB_KEY_Sinh_ruu2","","",null,null],[17,"XKB_KEY_Sinh_luu2","","",null,null],[17,"XKB_KEY_Sinh_kunddaliya","","",null,null],[17,"XKB_KEY_XF86ModeLock","","",null,null],[17,"XKB_KEY_XF86MonBrightnessUp","","",null,null],[17,"XKB_KEY_XF86MonBrightnessDown","","",null,null],[17,"XKB_KEY_XF86KbdLightOnOff","","",null,null],[17,"XKB_KEY_XF86KbdBrightnessUp","","",null,null],[17,"XKB_KEY_XF86KbdBrightnessDown","","",null,null],[17,"XKB_KEY_XF86Standby","","",null,null],[17,"XKB_KEY_XF86AudioLowerVolume","","",null,null],[17,"XKB_KEY_XF86AudioMute","","",null,null],[17,"XKB_KEY_XF86AudioRaiseVolume","","",null,null],[17,"XKB_KEY_XF86AudioPlay","","",null,null],[17,"XKB_KEY_XF86AudioStop","","",null,null],[17,"XKB_KEY_XF86AudioPrev","","",null,null],[17,"XKB_KEY_XF86AudioNext","","",null,null],[17,"XKB_KEY_XF86HomePage","","",null,null],[17,"XKB_KEY_XF86Mail","","",null,null],[17,"XKB_KEY_XF86Start","","",null,null],[17,"XKB_KEY_XF86Search","","",null,null],[17,"XKB_KEY_XF86AudioRecord","","",null,null],[17,"XKB_KEY_XF86Calculator","","",null,null],[17,"XKB_KEY_XF86Memo","","",null,null],[17,"XKB_KEY_XF86ToDoList","","",null,null],[17,"XKB_KEY_XF86Calendar","","",null,null],[17,"XKB_KEY_XF86PowerDown","","",null,null],[17,"XKB_KEY_XF86ContrastAdjust","","",null,null],[17,"XKB_KEY_XF86RockerUp","","",null,null],[17,"XKB_KEY_XF86RockerDown","","",null,null],[17,"XKB_KEY_XF86RockerEnter","","",null,null],[17,"XKB_KEY_XF86Back","","",null,null],[17,"XKB_KEY_XF86Forward","","",null,null],[17,"XKB_KEY_XF86Stop","","",null,null],[17,"XKB_KEY_XF86Refresh","","",null,null],[17,"XKB_KEY_XF86PowerOff","","",null,null],[17,"XKB_KEY_XF86WakeUp","","",null,null],[17,"XKB_KEY_XF86Eject","","",null,null],[17,"XKB_KEY_XF86ScreenSaver","","",null,null],[17,"XKB_KEY_XF86WWW","","",null,null],[17,"XKB_KEY_XF86Sleep","","",null,null],[17,"XKB_KEY_XF86Favorites","","",null,null],[17,"XKB_KEY_XF86AudioPause","","",null,null],[17,"XKB_KEY_XF86AudioMedia","","",null,null],[17,"XKB_KEY_XF86MyComputer","","",null,null],[17,"XKB_KEY_XF86VendorHome","","",null,null],[17,"XKB_KEY_XF86LightBulb","","",null,null],[17,"XKB_KEY_XF86Shop","","",null,null],[17,"XKB_KEY_XF86History","","",null,null],[17,"XKB_KEY_XF86OpenURL","","",null,null],[17,"XKB_KEY_XF86AddFavorite","","",null,null],[17,"XKB_KEY_XF86HotLinks","","",null,null],[17,"XKB_KEY_XF86BrightnessAdjust","","",null,null],[17,"XKB_KEY_XF86Finance","","",null,null],[17,"XKB_KEY_XF86Community","","",null,null],[17,"XKB_KEY_XF86AudioRewind","","",null,null],[17,"XKB_KEY_XF86BackForward","","",null,null],[17,"XKB_KEY_XF86Launch0","","",null,null],[17,"XKB_KEY_XF86Launch1","","",null,null],[17,"XKB_KEY_XF86Launch2","","",null,null],[17,"XKB_KEY_XF86Launch3","","",null,null],[17,"XKB_KEY_XF86Launch4","","",null,null],[17,"XKB_KEY_XF86Launch5","","",null,null],[17,"XKB_KEY_XF86Launch6","","",null,null],[17,"XKB_KEY_XF86Launch7","","",null,null],[17,"XKB_KEY_XF86Launch8","","",null,null],[17,"XKB_KEY_XF86Launch9","","",null,null],[17,"XKB_KEY_XF86LaunchA","","",null,null],[17,"XKB_KEY_XF86LaunchB","","",null,null],[17,"XKB_KEY_XF86LaunchC","","",null,null],[17,"XKB_KEY_XF86LaunchD","","",null,null],[17,"XKB_KEY_XF86LaunchE","","",null,null],[17,"XKB_KEY_XF86LaunchF","","",null,null],[17,"XKB_KEY_XF86ApplicationLeft","","",null,null],[17,"XKB_KEY_XF86ApplicationRight","","",null,null],[17,"XKB_KEY_XF86Book","","",null,null],[17,"XKB_KEY_XF86CD","","",null,null],[17,"XKB_KEY_XF86Calculater","","",null,null],[17,"XKB_KEY_XF86Clear","","",null,null],[17,"XKB_KEY_XF86Close","","",null,null],[17,"XKB_KEY_XF86Copy","","",null,null],[17,"XKB_KEY_XF86Cut","","",null,null],[17,"XKB_KEY_XF86Display","","",null,null],[17,"XKB_KEY_XF86DOS","","",null,null],[17,"XKB_KEY_XF86Documents","","",null,null],[17,"XKB_KEY_XF86Excel","","",null,null],[17,"XKB_KEY_XF86Explorer","","",null,null],[17,"XKB_KEY_XF86Game","","",null,null],[17,"XKB_KEY_XF86Go","","",null,null],[17,"XKB_KEY_XF86iTouch","","",null,null],[17,"XKB_KEY_XF86LogOff","","",null,null],[17,"XKB_KEY_XF86Market","","",null,null],[17,"XKB_KEY_XF86Meeting","","",null,null],[17,"XKB_KEY_XF86MenuKB","","",null,null],[17,"XKB_KEY_XF86MenuPB","","",null,null],[17,"XKB_KEY_XF86MySites","","",null,null],[17,"XKB_KEY_XF86New","","",null,null],[17,"XKB_KEY_XF86News","","",null,null],[17,"XKB_KEY_XF86OfficeHome","","",null,null],[17,"XKB_KEY_XF86Open","","",null,null],[17,"XKB_KEY_XF86Option","","",null,null],[17,"XKB_KEY_XF86Paste","","",null,null],[17,"XKB_KEY_XF86Phone","","",null,null],[17,"XKB_KEY_XF86Q","","",null,null],[17,"XKB_KEY_XF86Reply","","",null,null],[17,"XKB_KEY_XF86Reload","","",null,null],[17,"XKB_KEY_XF86RotateWindows","","",null,null],[17,"XKB_KEY_XF86RotationPB","","",null,null],[17,"XKB_KEY_XF86RotationKB","","",null,null],[17,"XKB_KEY_XF86Save","","",null,null],[17,"XKB_KEY_XF86ScrollUp","","",null,null],[17,"XKB_KEY_XF86ScrollDown","","",null,null],[17,"XKB_KEY_XF86ScrollClick","","",null,null],[17,"XKB_KEY_XF86Send","","",null,null],[17,"XKB_KEY_XF86Spell","","",null,null],[17,"XKB_KEY_XF86SplitScreen","","",null,null],[17,"XKB_KEY_XF86Support","","",null,null],[17,"XKB_KEY_XF86TaskPane","","",null,null],[17,"XKB_KEY_XF86Terminal","","",null,null],[17,"XKB_KEY_XF86Tools","","",null,null],[17,"XKB_KEY_XF86Travel","","",null,null],[17,"XKB_KEY_XF86UserPB","","",null,null],[17,"XKB_KEY_XF86User1KB","","",null,null],[17,"XKB_KEY_XF86User2KB","","",null,null],[17,"XKB_KEY_XF86Video","","",null,null],[17,"XKB_KEY_XF86WheelButton","","",null,null],[17,"XKB_KEY_XF86Word","","",null,null],[17,"XKB_KEY_XF86Xfer","","",null,null],[17,"XKB_KEY_XF86ZoomIn","","",null,null],[17,"XKB_KEY_XF86ZoomOut","","",null,null],[17,"XKB_KEY_XF86Away","","",null,null],[17,"XKB_KEY_XF86Messenger","","",null,null],[17,"XKB_KEY_XF86WebCam","","",null,null],[17,"XKB_KEY_XF86MailForward","","",null,null],[17,"XKB_KEY_XF86Pictures","","",null,null],[17,"XKB_KEY_XF86Music","","",null,null],[17,"XKB_KEY_XF86Battery","","",null,null],[17,"XKB_KEY_XF86Bluetooth","","",null,null],[17,"XKB_KEY_XF86WLAN","","",null,null],[17,"XKB_KEY_XF86UWB","","",null,null],[17,"XKB_KEY_XF86AudioForward","","",null,null],[17,"XKB_KEY_XF86AudioRepeat","","",null,null],[17,"XKB_KEY_XF86AudioRandomPlay","","",null,null],[17,"XKB_KEY_XF86Subtitle","","",null,null],[17,"XKB_KEY_XF86AudioCycleTrack","","",null,null],[17,"XKB_KEY_XF86CycleAngle","","",null,null],[17,"XKB_KEY_XF86FrameBack","","",null,null],[17,"XKB_KEY_XF86FrameForward","","",null,null],[17,"XKB_KEY_XF86Time","","",null,null],[17,"XKB_KEY_XF86Select","","",null,null],[17,"XKB_KEY_XF86View","","",null,null],[17,"XKB_KEY_XF86TopMenu","","",null,null],[17,"XKB_KEY_XF86Red","","",null,null],[17,"XKB_KEY_XF86Green","","",null,null],[17,"XKB_KEY_XF86Yellow","","",null,null],[17,"XKB_KEY_XF86Blue","","",null,null],[17,"XKB_KEY_XF86Suspend","","",null,null],[17,"XKB_KEY_XF86Hibernate","","",null,null],[17,"XKB_KEY_XF86TouchpadToggle","","",null,null],[17,"XKB_KEY_XF86TouchpadOn","","",null,null],[17,"XKB_KEY_XF86TouchpadOff","","",null,null],[17,"XKB_KEY_XF86AudioMicMute","","",null,null],[17,"XKB_KEY_XF86Switch_VT_1","","",null,null],[17,"XKB_KEY_XF86Switch_VT_2","","",null,null],[17,"XKB_KEY_XF86Switch_VT_3","","",null,null],[17,"XKB_KEY_XF86Switch_VT_4","","",null,null],[17,"XKB_KEY_XF86Switch_VT_5","","",null,null],[17,"XKB_KEY_XF86Switch_VT_6","","",null,null],[17,"XKB_KEY_XF86Switch_VT_7","","",null,null],[17,"XKB_KEY_XF86Switch_VT_8","","",null,null],[17,"XKB_KEY_XF86Switch_VT_9","","",null,null],[17,"XKB_KEY_XF86Switch_VT_10","","",null,null],[17,"XKB_KEY_XF86Switch_VT_11","","",null,null],[17,"XKB_KEY_XF86Switch_VT_12","","",null,null],[17,"XKB_KEY_XF86Ungrab","","",null,null],[17,"XKB_KEY_XF86ClearGrab","","",null,null],[17,"XKB_KEY_XF86Next_VMode","","",null,null],[17,"XKB_KEY_XF86Prev_VMode","","",null,null],[17,"XKB_KEY_XF86LogWindowTree","","",null,null],[17,"XKB_KEY_XF86LogGrabInfo","","",null,null],[17,"XKB_KEY_SunFA_Grave","","",null,null],[17,"XKB_KEY_SunFA_Circum","","",null,null],[17,"XKB_KEY_SunFA_Tilde","","",null,null],[17,"XKB_KEY_SunFA_Acute","","",null,null],[17,"XKB_KEY_SunFA_Diaeresis","","",null,null],[17,"XKB_KEY_SunFA_Cedilla","","",null,null],[17,"XKB_KEY_SunF36","","",null,null],[17,"XKB_KEY_SunF37","","",null,null],[17,"XKB_KEY_SunSys_Req","","",null,null],[17,"XKB_KEY_SunPrint_Screen","","",null,null],[17,"XKB_KEY_SunCompose","","",null,null],[17,"XKB_KEY_SunAltGraph","","",null,null],[17,"XKB_KEY_SunPageUp","","",null,null],[17,"XKB_KEY_SunPageDown","","",null,null],[17,"XKB_KEY_SunUndo","","",null,null],[17,"XKB_KEY_SunAgain","","",null,null],[17,"XKB_KEY_SunFind","","",null,null],[17,"XKB_KEY_SunStop","","",null,null],[17,"XKB_KEY_SunProps","","",null,null],[17,"XKB_KEY_SunFront","","",null,null],[17,"XKB_KEY_SunCopy","","",null,null],[17,"XKB_KEY_SunOpen","","",null,null],[17,"XKB_KEY_SunPaste","","",null,null],[17,"XKB_KEY_SunCut","","",null,null],[17,"XKB_KEY_SunPowerSwitch","","",null,null],[17,"XKB_KEY_SunAudioLowerVolume","","",null,null],[17,"XKB_KEY_SunAudioMute","","",null,null],[17,"XKB_KEY_SunAudioRaiseVolume","","",null,null],[17,"XKB_KEY_SunVideoDegauss","","",null,null],[17,"XKB_KEY_SunVideoLowerBrightness","","",null,null],[17,"XKB_KEY_SunVideoRaiseBrightness","","",null,null],[17,"XKB_KEY_SunPowerSwitchShift","","",null,null],[17,"XKB_KEY_Dring_accent","","",null,null],[17,"XKB_KEY_Dcircumflex_accent","","",null,null],[17,"XKB_KEY_Dcedilla_accent","","",null,null],[17,"XKB_KEY_Dacute_accent","","",null,null],[17,"XKB_KEY_Dgrave_accent","","",null,null],[17,"XKB_KEY_Dtilde","","",null,null],[17,"XKB_KEY_Ddiaeresis","","",null,null],[17,"XKB_KEY_DRemove","","",null,null],[17,"XKB_KEY_hpClearLine","","",null,null],[17,"XKB_KEY_hpInsertLine","","",null,null],[17,"XKB_KEY_hpDeleteLine","","",null,null],[17,"XKB_KEY_hpInsertChar","","",null,null],[17,"XKB_KEY_hpDeleteChar","","",null,null],[17,"XKB_KEY_hpBackTab","","",null,null],[17,"XKB_KEY_hpKP_BackTab","","",null,null],[17,"XKB_KEY_hpModelock1","","",null,null],[17,"XKB_KEY_hpModelock2","","",null,null],[17,"XKB_KEY_hpReset","","",null,null],[17,"XKB_KEY_hpSystem","","",null,null],[17,"XKB_KEY_hpUser","","",null,null],[17,"XKB_KEY_hpmute_acute","","",null,null],[17,"XKB_KEY_hpmute_grave","","",null,null],[17,"XKB_KEY_hpmute_asciicircum","","",null,null],[17,"XKB_KEY_hpmute_diaeresis","","",null,null],[17,"XKB_KEY_hpmute_asciitilde","","",null,null],[17,"XKB_KEY_hplira","","",null,null],[17,"XKB_KEY_hpguilder","","",null,null],[17,"XKB_KEY_hpYdiaeresis","","",null,null],[17,"XKB_KEY_hpIO","","",null,null],[17,"XKB_KEY_hplongminus","","",null,null],[17,"XKB_KEY_hpblock","","",null,null],[17,"XKB_KEY_osfCopy","","",null,null],[17,"XKB_KEY_osfCut","","",null,null],[17,"XKB_KEY_osfPaste","","",null,null],[17,"XKB_KEY_osfBackTab","","",null,null],[17,"XKB_KEY_osfBackSpace","","",null,null],[17,"XKB_KEY_osfClear","","",null,null],[17,"XKB_KEY_osfEscape","","",null,null],[17,"XKB_KEY_osfAddMode","","",null,null],[17,"XKB_KEY_osfPrimaryPaste","","",null,null],[17,"XKB_KEY_osfQuickPaste","","",null,null],[17,"XKB_KEY_osfPageLeft","","",null,null],[17,"XKB_KEY_osfPageUp","","",null,null],[17,"XKB_KEY_osfPageDown","","",null,null],[17,"XKB_KEY_osfPageRight","","",null,null],[17,"XKB_KEY_osfActivate","","",null,null],[17,"XKB_KEY_osfMenuBar","","",null,null],[17,"XKB_KEY_osfLeft","","",null,null],[17,"XKB_KEY_osfUp","","",null,null],[17,"XKB_KEY_osfRight","","",null,null],[17,"XKB_KEY_osfDown","","",null,null],[17,"XKB_KEY_osfEndLine","","",null,null],[17,"XKB_KEY_osfBeginLine","","",null,null],[17,"XKB_KEY_osfEndData","","",null,null],[17,"XKB_KEY_osfBeginData","","",null,null],[17,"XKB_KEY_osfPrevMenu","","",null,null],[17,"XKB_KEY_osfNextMenu","","",null,null],[17,"XKB_KEY_osfPrevField","","",null,null],[17,"XKB_KEY_osfNextField","","",null,null],[17,"XKB_KEY_osfSelect","","",null,null],[17,"XKB_KEY_osfInsert","","",null,null],[17,"XKB_KEY_osfUndo","","",null,null],[17,"XKB_KEY_osfMenu","","",null,null],[17,"XKB_KEY_osfCancel","","",null,null],[17,"XKB_KEY_osfHelp","","",null,null],[17,"XKB_KEY_osfSelectAll","","",null,null],[17,"XKB_KEY_osfDeselectAll","","",null,null],[17,"XKB_KEY_osfReselect","","",null,null],[17,"XKB_KEY_osfExtend","","",null,null],[17,"XKB_KEY_osfRestore","","",null,null],[17,"XKB_KEY_osfDelete","","",null,null],[17,"XKB_KEY_Reset","","",null,null],[17,"XKB_KEY_System","","",null,null],[17,"XKB_KEY_User","","",null,null],[17,"XKB_KEY_ClearLine","","",null,null],[17,"XKB_KEY_InsertLine","","",null,null],[17,"XKB_KEY_DeleteLine","","",null,null],[17,"XKB_KEY_InsertChar","","",null,null],[17,"XKB_KEY_DeleteChar","","",null,null],[17,"XKB_KEY_BackTab","","",null,null],[17,"XKB_KEY_KP_BackTab","","",null,null],[17,"XKB_KEY_Ext16bit_L","","",null,null],[17,"XKB_KEY_Ext16bit_R","","",null,null],[17,"XKB_KEY_mute_acute","","",null,null],[17,"XKB_KEY_mute_grave","","",null,null],[17,"XKB_KEY_mute_asciicircum","","",null,null],[17,"XKB_KEY_mute_diaeresis","","",null,null],[17,"XKB_KEY_mute_asciitilde","","",null,null],[17,"XKB_KEY_lira","","",null,null],[17,"XKB_KEY_guilder","","",null,null],[17,"XKB_KEY_IO","","",null,null],[17,"XKB_KEY_longminus","","",null,null],[17,"XKB_KEY_block","","",null,null]],"paths":[[3,"KeyEvent"],[4,"MappedKeyboardEvent"],[4,"MappedKeyboardError"],[4,"Option"],[3,"MappedKeyboard"]]};
searchIndex["tempfile"] = {"doc":"Securely create and manage temporary files. Temporary files created by this create are\nautomatically deleted.","items":[[3,"NamedTempFile","tempfile","A named temporary file.",null,null],[3,"NamedTempFileOptions","","Create a new temporary file with custom parameters.",null,null],[5,"tempfile","","Create an unnamed temporary file.",null,{"inputs":[],"output":{"name":"result"}}],[5,"tempfile_in","","Create an unnamed temporary file in the specified directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"namedtempfile"}],"output":{"name":"file"}}],[11,"as_mut","","",0,{"inputs":[{"name":"namedtempfile"}],"output":{"name":"file"}}],[11,"fmt","","",0,{"inputs":[{"name":"namedtempfile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","std::fs","Attempts to open a file in read-only mode.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",1,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"deref","tempfile","",0,{"inputs":[{"name":"namedtempfile"}],"output":{"name":"file"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"namedtempfile"}],"output":{"name":"file"}}],[11,"from","std::io::error","",2,{"inputs":[{"name":"persisterror"}],"output":{"name":"error"}}],[11,"from","tempfile","",0,{"inputs":[{"name":"persisterror"}],"output":{"name":"namedtempfile"}}],[11,"new","","Create a new temporary file.",0,{"inputs":[],"output":{"name":"result"}}],[11,"new_in","","Create a new temporary file in the specified directory.",0,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"path","","Get the temporary file&#39;s path.",0,{"inputs":[{"name":"namedtempfile"}],"output":{"name":"path"}}],[11,"close","","Close and remove the temporary file.",0,{"inputs":[{"name":"namedtempfile"}],"output":{"name":"result"}}],[11,"persist","","Persist the temporary file at the target path.",0,{"inputs":[{"name":"namedtempfile"},{"name":"p"}],"output":{"name":"result"}}],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",0,{"inputs":[{"name":"namedtempfile"},{"name":"p"}],"output":{"name":"result"}}],[11,"reopen","","Reopen the temporary file.",0,{"inputs":[{"name":"namedtempfile"}],"output":{"name":"result"}}],[11,"from","std::fs","",1,{"inputs":[{"name":"namedtempfile"}],"output":{"name":"file"}}],[11,"drop","tempfile","",0,{"inputs":[{"name":"namedtempfile"}],"output":null}],[11,"read","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"namedtempfile"}],"output":{"name":"result"}}],[11,"seek","","",0,{"inputs":[{"name":"namedtempfile"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"namedtempfile"}],"output":{"name":"rawfd"}}],[11,"eq","","",3,{"inputs":[{"name":"namedtempfileoptions"},{"name":"namedtempfileoptions"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"namedtempfileoptions"},{"name":"namedtempfileoptions"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"namedtempfileoptions"}],"output":{"name":"namedtempfileoptions"}}],[11,"fmt","","",3,{"inputs":[{"name":"namedtempfileoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new NamedTempFileOptions",3,{"inputs":[],"output":{"name":"self"}}],[11,"prefix","","Set a custom filename prefix.",3,{"inputs":[{"name":"namedtempfileoptions"},{"name":"str"}],"output":{"name":"self"}}],[11,"suffix","","Set a custom filename suffix.",3,{"inputs":[{"name":"namedtempfileoptions"},{"name":"str"}],"output":{"name":"self"}}],[11,"rand_bytes","","Set the number of random bytes.",3,{"inputs":[{"name":"namedtempfileoptions"},{"name":"usize"}],"output":{"name":"self"}}],[11,"create","","Create the named temporary file.",3,{"inputs":[{"name":"namedtempfileoptions"}],"output":{"name":"result"}}],[11,"create_in","","Create the named temporary file in the specified directory.",3,{"inputs":[{"name":"namedtempfileoptions"},{"name":"p"}],"output":{"name":"result"}}]],"paths":[[3,"NamedTempFile"],[3,"File"],[3,"Error"],[3,"NamedTempFileOptions"]]};
searchIndex["inflate"] = {"doc":"","items":[[3,"InflateStream","inflate","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"from_zlib","","",0,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"update","","",0,null]],"paths":[[3,"InflateStream"]]};
searchIndex["deque"] = {"doc":"A (mostly) lock-free concurrent work-stealing deque","items":[[3,"Worker","deque","Worker half of the work-stealing deque. This worker has exclusive access to\none side of the deque, and uses `push` and `pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the\nopposite end of the deque from the worker, and they only have access to the\n`steal` method.",null,null],[4,"Stolen","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",0,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more\ndata.",0,null],[13,"Data","","The stealer has successfully stolen some data.",0,null],[5,"new","","Allocates a new work-stealing deque.",null,null],[11,"clone","","",1,{"inputs":[{"name":"stealer"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"stolen"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"stolen"},{"name":"stolen"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"stolen"},{"name":"stolen"}],"output":{"name":"bool"}}],[11,"push","","Pushes data onto the front of this work queue.",2,{"inputs":[{"name":"worker"},{"name":"t"}],"output":null}],[11,"pop","","Pops data off the front of the work queue, returning `None` on an empty\nqueue.",2,{"inputs":[{"name":"worker"}],"output":{"name":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker&#39;s end)",1,{"inputs":[{"name":"stealer"}],"output":{"name":"stolen"}}]],"paths":[[4,"Stolen"],[3,"Stealer"],[3,"Worker"]]};
searchIndex["gl"] = {"doc":"# Usage","items":[[3,"FnPtr","gl","",null,null],[5,"ActiveShaderProgram","","",null,null],[5,"ActiveTexture","","Fallbacks: ActiveTextureARB",null,null],[5,"AttachShader","","Fallbacks: AttachObjectARB",null,null],[5,"BeginConditionalRender","","Fallbacks: BeginConditionalRenderNV",null,null],[5,"BeginQuery","","Fallbacks: BeginQueryARB",null,null],[5,"BeginQueryIndexed","","",null,null],[5,"BeginTransformFeedback","","Fallbacks: BeginTransformFeedbackEXT, BeginTransformFeedbackNV",null,null],[5,"BindAttribLocation","","Fallbacks: BindAttribLocationARB",null,null],[5,"BindBuffer","","Fallbacks: BindBufferARB",null,null],[5,"BindBufferBase","","Fallbacks: BindBufferBaseEXT, BindBufferBaseNV",null,null],[5,"BindBufferRange","","Fallbacks: BindBufferRangeEXT, BindBufferRangeNV",null,null],[5,"BindBuffersBase","","",null,null],[5,"BindBuffersRange","","",null,null],[5,"BindFragDataLocation","","Fallbacks: BindFragDataLocationEXT",null,null],[5,"BindFragDataLocationIndexed","","",null,null],[5,"BindFramebuffer","","",null,null],[5,"BindImageTexture","","",null,null],[5,"BindImageTextures","","",null,null],[5,"BindProgramPipeline","","",null,null],[5,"BindRenderbuffer","","",null,null],[5,"BindSampler","","",null,null],[5,"BindSamplers","","",null,null],[5,"BindTexture","","Fallbacks: BindTextureEXT",null,null],[5,"BindTextureUnit","","",null,null],[5,"BindTextures","","",null,null],[5,"BindTransformFeedback","","",null,null],[5,"BindVertexArray","","Fallbacks: BindVertexArrayOES",null,null],[5,"BindVertexBuffer","","",null,null],[5,"BindVertexBuffers","","",null,null],[5,"BlendColor","","Fallbacks: BlendColorEXT",null,null],[5,"BlendEquation","","Fallbacks: BlendEquationEXT",null,null],[5,"BlendEquationSeparate","","Fallbacks: BlendEquationSeparateEXT",null,null],[5,"BlendEquationSeparatei","","Fallbacks: BlendEquationSeparateIndexedAMD, BlendEquationSeparateiARB, BlendEquationSeparateiEXT, BlendEquationSeparateiOES",null,null],[5,"BlendEquationi","","Fallbacks: BlendEquationIndexedAMD, BlendEquationiARB, BlendEquationiEXT, BlendEquationiOES",null,null],[5,"BlendFunc","","",null,null],[5,"BlendFuncSeparate","","Fallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR",null,null],[5,"BlendFuncSeparatei","","Fallbacks: BlendFuncSeparateIndexedAMD, BlendFuncSeparateiARB, BlendFuncSeparateiEXT, BlendFuncSeparateiOES",null,null],[5,"BlendFunci","","Fallbacks: BlendFuncIndexedAMD, BlendFunciARB, BlendFunciEXT, BlendFunciOES",null,null],[5,"BlitFramebuffer","","Fallbacks: BlitFramebufferEXT, BlitFramebufferNV",null,null],[5,"BlitNamedFramebuffer","","",null,null],[5,"BufferData","","Fallbacks: BufferDataARB",null,null],[5,"BufferStorage","","Fallbacks: BufferStorageEXT",null,null],[5,"BufferSubData","","Fallbacks: BufferSubDataARB",null,null],[5,"CheckFramebufferStatus","","Fallbacks: CheckFramebufferStatusEXT",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glenum"}}],[5,"CheckNamedFramebufferStatus","","",null,{"inputs":[{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glenum"}}],[5,"ClampColor","","Fallbacks: ClampColorARB",null,null],[5,"Clear","","",null,null],[5,"ClearBufferData","","",null,null],[5,"ClearBufferSubData","","",null,null],[5,"ClearBufferfi","","",null,null],[5,"ClearBufferfv","","",null,null],[5,"ClearBufferiv","","",null,null],[5,"ClearBufferuiv","","",null,null],[5,"ClearColor","","",null,null],[5,"ClearDepth","","",null,null],[5,"ClearDepthf","","Fallbacks: ClearDepthfOES",null,null],[5,"ClearNamedBufferData","","",null,null],[5,"ClearNamedBufferSubData","","",null,null],[5,"ClearNamedFramebufferfi","","",null,null],[5,"ClearNamedFramebufferfv","","",null,null],[5,"ClearNamedFramebufferiv","","",null,null],[5,"ClearNamedFramebufferuiv","","",null,null],[5,"ClearStencil","","",null,null],[5,"ClearTexImage","","",null,null],[5,"ClearTexSubImage","","",null,null],[5,"ClientWaitSync","","Fallbacks: ClientWaitSyncAPPLE",null,{"inputs":[{"name":"glsync"},{"name":"glbitfield"},{"name":"gluint64"}],"output":{"name":"glenum"}}],[5,"ClipControl","","",null,null],[5,"ColorMask","","",null,null],[5,"ColorMaski","","Fallbacks: ColorMaskIndexedEXT, ColorMaskiEXT, ColorMaskiOES",null,null],[5,"ColorP3ui","","",null,null],[5,"ColorP3uiv","","",null,null],[5,"ColorP4ui","","",null,null],[5,"ColorP4uiv","","",null,null],[5,"CompileShader","","Fallbacks: CompileShaderARB",null,null],[5,"CompressedTexImage1D","","Fallbacks: CompressedTexImage1DARB",null,null],[5,"CompressedTexImage2D","","Fallbacks: CompressedTexImage2DARB",null,null],[5,"CompressedTexImage3D","","Fallbacks: CompressedTexImage3DARB, CompressedTexImage3DOES",null,null],[5,"CompressedTexSubImage1D","","Fallbacks: CompressedTexSubImage1DARB",null,null],[5,"CompressedTexSubImage2D","","Fallbacks: CompressedTexSubImage2DARB",null,null],[5,"CompressedTexSubImage3D","","Fallbacks: CompressedTexSubImage3DARB, CompressedTexSubImage3DOES",null,null],[5,"CompressedTextureSubImage1D","","",null,null],[5,"CompressedTextureSubImage2D","","",null,null],[5,"CompressedTextureSubImage3D","","",null,null],[5,"CopyBufferSubData","","Fallbacks: CopyBufferSubDataNV",null,null],[5,"CopyImageSubData","","Fallbacks: CopyImageSubDataEXT, CopyImageSubDataOES",null,null],[5,"CopyNamedBufferSubData","","",null,null],[5,"CopyTexImage1D","","Fallbacks: CopyTexImage1DEXT",null,null],[5,"CopyTexImage2D","","Fallbacks: CopyTexImage2DEXT",null,null],[5,"CopyTexSubImage1D","","Fallbacks: CopyTexSubImage1DEXT",null,null],[5,"CopyTexSubImage2D","","Fallbacks: CopyTexSubImage2DEXT",null,null],[5,"CopyTexSubImage3D","","Fallbacks: CopyTexSubImage3DEXT, CopyTexSubImage3DOES",null,null],[5,"CopyTextureSubImage1D","","",null,null],[5,"CopyTextureSubImage2D","","",null,null],[5,"CopyTextureSubImage3D","","",null,null],[5,"CreateBuffers","","",null,null],[5,"CreateFramebuffers","","",null,null],[5,"CreateProgram","","Fallbacks: CreateProgramObjectARB",null,{"inputs":[],"output":{"name":"gluint"}}],[5,"CreateProgramPipelines","","",null,null],[5,"CreateQueries","","",null,null],[5,"CreateRenderbuffers","","",null,null],[5,"CreateSamplers","","",null,null],[5,"CreateShader","","Fallbacks: CreateShaderObjectARB",null,{"inputs":[{"name":"glenum"}],"output":{"name":"gluint"}}],[5,"CreateShaderProgramv","","",null,null],[5,"CreateTextures","","",null,null],[5,"CreateTransformFeedbacks","","",null,null],[5,"CreateVertexArrays","","",null,null],[5,"CullFace","","",null,null],[5,"DebugMessageCallback","","Fallbacks: DebugMessageCallbackARB, DebugMessageCallbackKHR",null,null],[5,"DebugMessageControl","","Fallbacks: DebugMessageControlARB, DebugMessageControlKHR",null,null],[5,"DebugMessageInsert","","Fallbacks: DebugMessageInsertARB, DebugMessageInsertKHR",null,null],[5,"DeleteBuffers","","Fallbacks: DeleteBuffersARB",null,null],[5,"DeleteFramebuffers","","Fallbacks: DeleteFramebuffersEXT",null,null],[5,"DeleteProgram","","",null,null],[5,"DeleteProgramPipelines","","",null,null],[5,"DeleteQueries","","Fallbacks: DeleteQueriesARB",null,null],[5,"DeleteRenderbuffers","","Fallbacks: DeleteRenderbuffersEXT",null,null],[5,"DeleteSamplers","","",null,null],[5,"DeleteShader","","",null,null],[5,"DeleteSync","","Fallbacks: DeleteSyncAPPLE",null,null],[5,"DeleteTextures","","",null,null],[5,"DeleteTransformFeedbacks","","Fallbacks: DeleteTransformFeedbacksNV",null,null],[5,"DeleteVertexArrays","","Fallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES",null,null],[5,"DepthFunc","","",null,null],[5,"DepthMask","","",null,null],[5,"DepthRange","","",null,null],[5,"DepthRangeArrayv","","",null,null],[5,"DepthRangeIndexed","","",null,null],[5,"DepthRangef","","Fallbacks: DepthRangefOES",null,null],[5,"DetachShader","","Fallbacks: DetachObjectARB",null,null],[5,"Disable","","",null,null],[5,"DisableVertexArrayAttrib","","",null,null],[5,"DisableVertexAttribArray","","Fallbacks: DisableVertexAttribArrayARB",null,null],[5,"Disablei","","Fallbacks: DisableIndexedEXT, DisableiEXT, DisableiNV, DisableiOES",null,null],[5,"DispatchCompute","","",null,null],[5,"DispatchComputeIndirect","","",null,null],[5,"DrawArrays","","Fallbacks: DrawArraysEXT",null,null],[5,"DrawArraysIndirect","","",null,null],[5,"DrawArraysInstanced","","Fallbacks: DrawArraysInstancedANGLE, DrawArraysInstancedARB, DrawArraysInstancedEXT, DrawArraysInstancedNV",null,null],[5,"DrawArraysInstancedBaseInstance","","Fallbacks: DrawArraysInstancedBaseInstanceEXT",null,null],[5,"DrawBuffer","","",null,null],[5,"DrawBuffers","","Fallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT",null,null],[5,"DrawElements","","",null,null],[5,"DrawElementsBaseVertex","","Fallbacks: DrawElementsBaseVertexEXT, DrawElementsBaseVertexOES",null,null],[5,"DrawElementsIndirect","","",null,null],[5,"DrawElementsInstanced","","Fallbacks: DrawElementsInstancedANGLE, DrawElementsInstancedARB, DrawElementsInstancedEXT, DrawElementsInstancedNV",null,null],[5,"DrawElementsInstancedBaseInstance","","Fallbacks: DrawElementsInstancedBaseInstanceEXT",null,null],[5,"DrawElementsInstancedBaseVertex","","Fallbacks: DrawElementsInstancedBaseVertexEXT, DrawElementsInstancedBaseVertexOES",null,null],[5,"DrawElementsInstancedBaseVertexBaseInstance","","Fallbacks: DrawElementsInstancedBaseVertexBaseInstanceEXT",null,null],[5,"DrawRangeElements","","Fallbacks: DrawRangeElementsEXT",null,null],[5,"DrawRangeElementsBaseVertex","","Fallbacks: DrawRangeElementsBaseVertexEXT, DrawRangeElementsBaseVertexOES",null,null],[5,"DrawTransformFeedback","","Fallbacks: DrawTransformFeedbackNV",null,null],[5,"DrawTransformFeedbackInstanced","","",null,null],[5,"DrawTransformFeedbackStream","","",null,null],[5,"DrawTransformFeedbackStreamInstanced","","",null,null],[5,"Enable","","",null,null],[5,"EnableVertexArrayAttrib","","",null,null],[5,"EnableVertexAttribArray","","Fallbacks: EnableVertexAttribArrayARB",null,null],[5,"Enablei","","Fallbacks: EnableIndexedEXT, EnableiEXT, EnableiNV, EnableiOES",null,null],[5,"EndConditionalRender","","Fallbacks: EndConditionalRenderNV, EndConditionalRenderNVX",null,null],[5,"EndQuery","","Fallbacks: EndQueryARB",null,null],[5,"EndQueryIndexed","","",null,null],[5,"EndTransformFeedback","","Fallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV",null,null],[5,"FenceSync","","Fallbacks: FenceSyncAPPLE",null,{"inputs":[{"name":"glenum"},{"name":"glbitfield"}],"output":{"name":"glsync"}}],[5,"Finish","","",null,null],[5,"Flush","","",null,null],[5,"FlushMappedBufferRange","","Fallbacks: FlushMappedBufferRangeAPPLE, FlushMappedBufferRangeEXT",null,null],[5,"FlushMappedNamedBufferRange","","",null,null],[5,"FramebufferParameteri","","",null,null],[5,"FramebufferRenderbuffer","","Fallbacks: FramebufferRenderbufferEXT",null,null],[5,"FramebufferTexture","","Fallbacks: FramebufferTextureARB, FramebufferTextureEXT, FramebufferTextureOES",null,null],[5,"FramebufferTexture1D","","Fallbacks: FramebufferTexture1DEXT",null,null],[5,"FramebufferTexture2D","","Fallbacks: FramebufferTexture2DEXT",null,null],[5,"FramebufferTexture3D","","Fallbacks: FramebufferTexture3DEXT, FramebufferTexture3DOES",null,null],[5,"FramebufferTextureLayer","","Fallbacks: FramebufferTextureLayerARB, FramebufferTextureLayerEXT",null,null],[5,"FrontFace","","",null,null],[5,"GenBuffers","","Fallbacks: GenBuffersARB",null,null],[5,"GenFramebuffers","","Fallbacks: GenFramebuffersEXT",null,null],[5,"GenProgramPipelines","","",null,null],[5,"GenQueries","","Fallbacks: GenQueriesARB",null,null],[5,"GenRenderbuffers","","Fallbacks: GenRenderbuffersEXT",null,null],[5,"GenSamplers","","",null,null],[5,"GenTextures","","",null,null],[5,"GenTransformFeedbacks","","Fallbacks: GenTransformFeedbacksNV",null,null],[5,"GenVertexArrays","","Fallbacks: GenVertexArraysAPPLE, GenVertexArraysOES",null,null],[5,"GenerateMipmap","","Fallbacks: GenerateMipmapEXT",null,null],[5,"GenerateTextureMipmap","","",null,null],[5,"GetActiveAtomicCounterBufferiv","","",null,null],[5,"GetActiveAttrib","","Fallbacks: GetActiveAttribARB",null,null],[5,"GetActiveSubroutineName","","",null,null],[5,"GetActiveSubroutineUniformName","","",null,null],[5,"GetActiveSubroutineUniformiv","","",null,null],[5,"GetActiveUniform","","Fallbacks: GetActiveUniformARB",null,null],[5,"GetActiveUniformBlockName","","",null,null],[5,"GetActiveUniformBlockiv","","",null,null],[5,"GetActiveUniformName","","",null,null],[5,"GetActiveUniformsiv","","",null,null],[5,"GetAttachedShaders","","",null,null],[5,"GetAttribLocation","","Fallbacks: GetAttribLocationARB",null,null],[5,"GetBooleani_v","","Fallbacks: GetBooleanIndexedvEXT",null,null],[5,"GetBooleanv","","",null,null],[5,"GetBufferParameteri64v","","",null,null],[5,"GetBufferParameteriv","","Fallbacks: GetBufferParameterivARB",null,null],[5,"GetBufferPointerv","","Fallbacks: GetBufferPointervARB, GetBufferPointervOES",null,null],[5,"GetBufferSubData","","Fallbacks: GetBufferSubDataARB",null,null],[5,"GetCompressedTexImage","","Fallbacks: GetCompressedTexImageARB",null,null],[5,"GetCompressedTextureImage","","",null,null],[5,"GetCompressedTextureSubImage","","",null,null],[5,"GetDebugMessageLog","","Fallbacks: GetDebugMessageLogARB, GetDebugMessageLogKHR",null,null],[5,"GetDoublei_v","","Fallbacks: GetDoubleIndexedvEXT, GetDoublei_vEXT",null,null],[5,"GetDoublev","","",null,null],[5,"GetError","","",null,{"inputs":[],"output":{"name":"glenum"}}],[5,"GetFloati_v","","Fallbacks: GetFloatIndexedvEXT, GetFloati_vEXT, GetFloati_vNV",null,null],[5,"GetFloatv","","",null,null],[5,"GetFragDataIndex","","",null,null],[5,"GetFragDataLocation","","Fallbacks: GetFragDataLocationEXT",null,null],[5,"GetFramebufferAttachmentParameteriv","","Fallbacks: GetFramebufferAttachmentParameterivEXT",null,null],[5,"GetFramebufferParameteriv","","",null,null],[5,"GetGraphicsResetStatus","","Fallbacks: GetGraphicsResetStatusKHR",null,{"inputs":[],"output":{"name":"glenum"}}],[5,"GetInteger64i_v","","",null,null],[5,"GetInteger64v","","Fallbacks: GetInteger64vAPPLE",null,null],[5,"GetIntegeri_v","","Fallbacks: GetIntegerIndexedvEXT",null,null],[5,"GetIntegerv","","",null,null],[5,"GetInternalformati64v","","",null,null],[5,"GetInternalformativ","","",null,null],[5,"GetMultisamplefv","","Fallbacks: GetMultisamplefvNV",null,null],[5,"GetNamedBufferParameteri64v","","",null,null],[5,"GetNamedBufferParameteriv","","",null,null],[5,"GetNamedBufferPointerv","","",null,null],[5,"GetNamedBufferSubData","","",null,null],[5,"GetNamedFramebufferAttachmentParameteriv","","",null,null],[5,"GetNamedFramebufferParameteriv","","",null,null],[5,"GetNamedRenderbufferParameteriv","","",null,null],[5,"GetObjectLabel","","Fallbacks: GetObjectLabelKHR",null,null],[5,"GetObjectPtrLabel","","Fallbacks: GetObjectPtrLabelKHR",null,null],[5,"GetProgramBinary","","Fallbacks: GetProgramBinaryOES",null,null],[5,"GetProgramInfoLog","","",null,null],[5,"GetProgramInterfaceiv","","",null,null],[5,"GetProgramPipelineInfoLog","","",null,null],[5,"GetProgramPipelineiv","","",null,null],[5,"GetProgramResourceIndex","","",null,null],[5,"GetProgramResourceLocation","","",null,null],[5,"GetProgramResourceLocationIndex","","",null,null],[5,"GetProgramResourceName","","",null,null],[5,"GetProgramResourceiv","","",null,null],[5,"GetProgramStageiv","","",null,null],[5,"GetProgramiv","","",null,null],[5,"GetQueryBufferObjecti64v","","",null,null],[5,"GetQueryBufferObjectiv","","",null,null],[5,"GetQueryBufferObjectui64v","","",null,null],[5,"GetQueryBufferObjectuiv","","",null,null],[5,"GetQueryIndexediv","","",null,null],[5,"GetQueryObjecti64v","","Fallbacks: GetQueryObjecti64vEXT",null,null],[5,"GetQueryObjectiv","","Fallbacks: GetQueryObjectivARB, GetQueryObjectivEXT",null,null],[5,"GetQueryObjectui64v","","Fallbacks: GetQueryObjectui64vEXT",null,null],[5,"GetQueryObjectuiv","","Fallbacks: GetQueryObjectuivARB",null,null],[5,"GetQueryiv","","Fallbacks: GetQueryivARB",null,null],[5,"GetRenderbufferParameteriv","","Fallbacks: GetRenderbufferParameterivEXT",null,null],[5,"GetSamplerParameterIiv","","Fallbacks: GetSamplerParameterIivEXT, GetSamplerParameterIivOES",null,null],[5,"GetSamplerParameterIuiv","","Fallbacks: GetSamplerParameterIuivEXT, GetSamplerParameterIuivOES",null,null],[5,"GetSamplerParameterfv","","",null,null],[5,"GetSamplerParameteriv","","",null,null],[5,"GetShaderInfoLog","","",null,null],[5,"GetShaderPrecisionFormat","","",null,null],[5,"GetShaderSource","","Fallbacks: GetShaderSourceARB",null,null],[5,"GetShaderiv","","",null,null],[5,"GetString","","",null,null],[5,"GetStringi","","",null,null],[5,"GetSubroutineIndex","","",null,null],[5,"GetSubroutineUniformLocation","","",null,null],[5,"GetSynciv","","Fallbacks: GetSyncivAPPLE",null,null],[5,"GetTexImage","","",null,null],[5,"GetTexLevelParameterfv","","",null,null],[5,"GetTexLevelParameteriv","","",null,null],[5,"GetTexParameterIiv","","Fallbacks: GetTexParameterIivEXT, GetTexParameterIivOES",null,null],[5,"GetTexParameterIuiv","","Fallbacks: GetTexParameterIuivEXT, GetTexParameterIuivOES",null,null],[5,"GetTexParameterfv","","",null,null],[5,"GetTexParameteriv","","",null,null],[5,"GetTextureImage","","",null,null],[5,"GetTextureLevelParameterfv","","",null,null],[5,"GetTextureLevelParameteriv","","",null,null],[5,"GetTextureParameterIiv","","",null,null],[5,"GetTextureParameterIuiv","","",null,null],[5,"GetTextureParameterfv","","",null,null],[5,"GetTextureParameteriv","","",null,null],[5,"GetTextureSubImage","","",null,null],[5,"GetTransformFeedbackVarying","","Fallbacks: GetTransformFeedbackVaryingEXT",null,null],[5,"GetTransformFeedbacki64_v","","",null,null],[5,"GetTransformFeedbacki_v","","",null,null],[5,"GetTransformFeedbackiv","","",null,null],[5,"GetUniformBlockIndex","","",null,null],[5,"GetUniformIndices","","",null,null],[5,"GetUniformLocation","","Fallbacks: GetUniformLocationARB",null,null],[5,"GetUniformSubroutineuiv","","",null,null],[5,"GetUniformdv","","",null,null],[5,"GetUniformfv","","Fallbacks: GetUniformfvARB",null,null],[5,"GetUniformiv","","Fallbacks: GetUniformivARB",null,null],[5,"GetUniformuiv","","Fallbacks: GetUniformuivEXT",null,null],[5,"GetVertexArrayIndexed64iv","","",null,null],[5,"GetVertexArrayIndexediv","","",null,null],[5,"GetVertexArrayiv","","",null,null],[5,"GetVertexAttribIiv","","Fallbacks: GetVertexAttribIivEXT",null,null],[5,"GetVertexAttribIuiv","","Fallbacks: GetVertexAttribIuivEXT",null,null],[5,"GetVertexAttribLdv","","Fallbacks: GetVertexAttribLdvEXT",null,null],[5,"GetVertexAttribPointerv","","Fallbacks: GetVertexAttribPointervARB, GetVertexAttribPointervNV",null,null],[5,"GetVertexAttribdv","","Fallbacks: GetVertexAttribdvARB, GetVertexAttribdvNV",null,null],[5,"GetVertexAttribfv","","Fallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV",null,null],[5,"GetVertexAttribiv","","Fallbacks: GetVertexAttribivARB, GetVertexAttribivNV",null,null],[5,"GetnColorTable","","",null,null],[5,"GetnCompressedTexImage","","",null,null],[5,"GetnConvolutionFilter","","",null,null],[5,"GetnHistogram","","",null,null],[5,"GetnMapdv","","",null,null],[5,"GetnMapfv","","",null,null],[5,"GetnMapiv","","",null,null],[5,"GetnMinmax","","",null,null],[5,"GetnPixelMapfv","","",null,null],[5,"GetnPixelMapuiv","","",null,null],[5,"GetnPixelMapusv","","",null,null],[5,"GetnPolygonStipple","","",null,null],[5,"GetnSeparableFilter","","",null,null],[5,"GetnTexImage","","",null,null],[5,"GetnUniformdv","","",null,null],[5,"GetnUniformfv","","Fallbacks: GetnUniformfvKHR",null,null],[5,"GetnUniformiv","","Fallbacks: GetnUniformivKHR",null,null],[5,"GetnUniformuiv","","Fallbacks: GetnUniformuivKHR",null,null],[5,"Hint","","",null,null],[5,"InvalidateBufferData","","",null,null],[5,"InvalidateBufferSubData","","",null,null],[5,"InvalidateFramebuffer","","",null,null],[5,"InvalidateNamedFramebufferData","","",null,null],[5,"InvalidateNamedFramebufferSubData","","",null,null],[5,"InvalidateSubFramebuffer","","",null,null],[5,"InvalidateTexImage","","",null,null],[5,"InvalidateTexSubImage","","",null,null],[5,"IsBuffer","","Fallbacks: IsBufferARB",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsEnabled","","",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glboolean"}}],[5,"IsEnabledi","","Fallbacks: IsEnabledIndexedEXT, IsEnablediEXT, IsEnablediNV, IsEnablediOES",null,{"inputs":[{"name":"glenum"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsFramebuffer","","Fallbacks: IsFramebufferEXT",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsProgram","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsProgramPipeline","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsQuery","","Fallbacks: IsQueryARB",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsRenderbuffer","","Fallbacks: IsRenderbufferEXT",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsSampler","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsShader","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsSync","","Fallbacks: IsSyncAPPLE",null,{"inputs":[{"name":"glsync"}],"output":{"name":"glboolean"}}],[5,"IsTexture","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsTransformFeedback","","Fallbacks: IsTransformFeedbackNV",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsVertexArray","","Fallbacks: IsVertexArrayAPPLE, IsVertexArrayOES",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"LineWidth","","",null,null],[5,"LinkProgram","","Fallbacks: LinkProgramARB",null,null],[5,"LogicOp","","",null,null],[5,"MapBuffer","","Fallbacks: MapBufferARB, MapBufferOES",null,null],[5,"MapBufferRange","","Fallbacks: MapBufferRangeEXT",null,null],[5,"MapNamedBuffer","","",null,null],[5,"MapNamedBufferRange","","",null,null],[5,"MemoryBarrier","","Fallbacks: MemoryBarrierEXT",null,null],[5,"MemoryBarrierByRegion","","",null,null],[5,"MinSampleShading","","Fallbacks: MinSampleShadingARB, MinSampleShadingOES",null,null],[5,"MultiDrawArrays","","Fallbacks: MultiDrawArraysEXT",null,null],[5,"MultiDrawArraysIndirect","","Fallbacks: MultiDrawArraysIndirectAMD, MultiDrawArraysIndirectEXT",null,null],[5,"MultiDrawElements","","Fallbacks: MultiDrawElementsEXT",null,null],[5,"MultiDrawElementsBaseVertex","","Fallbacks: MultiDrawElementsBaseVertexEXT, MultiDrawElementsBaseVertexOES",null,null],[5,"MultiDrawElementsIndirect","","Fallbacks: MultiDrawElementsIndirectAMD, MultiDrawElementsIndirectEXT",null,null],[5,"MultiTexCoordP1ui","","",null,null],[5,"MultiTexCoordP1uiv","","",null,null],[5,"MultiTexCoordP2ui","","",null,null],[5,"MultiTexCoordP2uiv","","",null,null],[5,"MultiTexCoordP3ui","","",null,null],[5,"MultiTexCoordP3uiv","","",null,null],[5,"MultiTexCoordP4ui","","",null,null],[5,"MultiTexCoordP4uiv","","",null,null],[5,"NamedBufferData","","",null,null],[5,"NamedBufferStorage","","Fallbacks: NamedBufferStorageEXT",null,null],[5,"NamedBufferSubData","","Fallbacks: NamedBufferSubDataEXT",null,null],[5,"NamedFramebufferDrawBuffer","","",null,null],[5,"NamedFramebufferDrawBuffers","","",null,null],[5,"NamedFramebufferParameteri","","",null,null],[5,"NamedFramebufferReadBuffer","","",null,null],[5,"NamedFramebufferRenderbuffer","","",null,null],[5,"NamedFramebufferTexture","","",null,null],[5,"NamedFramebufferTextureLayer","","",null,null],[5,"NamedRenderbufferStorage","","",null,null],[5,"NamedRenderbufferStorageMultisample","","",null,null],[5,"NormalP3ui","","",null,null],[5,"NormalP3uiv","","",null,null],[5,"ObjectLabel","","Fallbacks: ObjectLabelKHR",null,null],[5,"ObjectPtrLabel","","Fallbacks: ObjectPtrLabelKHR",null,null],[5,"PatchParameterfv","","",null,null],[5,"PatchParameteri","","Fallbacks: PatchParameteriEXT, PatchParameteriOES",null,null],[5,"PauseTransformFeedback","","Fallbacks: PauseTransformFeedbackNV",null,null],[5,"PixelStoref","","",null,null],[5,"PixelStorei","","",null,null],[5,"PointParameterf","","Fallbacks: PointParameterfARB, PointParameterfEXT, PointParameterfSGIS",null,null],[5,"PointParameterfv","","Fallbacks: PointParameterfvARB, PointParameterfvEXT, PointParameterfvSGIS",null,null],[5,"PointParameteri","","Fallbacks: PointParameteriNV",null,null],[5,"PointParameteriv","","Fallbacks: PointParameterivNV",null,null],[5,"PointSize","","",null,null],[5,"PolygonMode","","Fallbacks: PolygonModeNV",null,null],[5,"PolygonOffset","","",null,null],[5,"PopDebugGroup","","Fallbacks: PopDebugGroupKHR",null,null],[5,"PrimitiveRestartIndex","","",null,null],[5,"ProgramBinary","","Fallbacks: ProgramBinaryOES",null,null],[5,"ProgramParameteri","","Fallbacks: ProgramParameteriARB, ProgramParameteriEXT",null,null],[5,"ProgramUniform1d","","",null,null],[5,"ProgramUniform1dv","","",null,null],[5,"ProgramUniform1f","","Fallbacks: ProgramUniform1fEXT",null,null],[5,"ProgramUniform1fv","","Fallbacks: ProgramUniform1fvEXT",null,null],[5,"ProgramUniform1i","","Fallbacks: ProgramUniform1iEXT",null,null],[5,"ProgramUniform1iv","","Fallbacks: ProgramUniform1ivEXT",null,null],[5,"ProgramUniform1ui","","Fallbacks: ProgramUniform1uiEXT",null,null],[5,"ProgramUniform1uiv","","Fallbacks: ProgramUniform1uivEXT",null,null],[5,"ProgramUniform2d","","",null,null],[5,"ProgramUniform2dv","","",null,null],[5,"ProgramUniform2f","","Fallbacks: ProgramUniform2fEXT",null,null],[5,"ProgramUniform2fv","","Fallbacks: ProgramUniform2fvEXT",null,null],[5,"ProgramUniform2i","","Fallbacks: ProgramUniform2iEXT",null,null],[5,"ProgramUniform2iv","","Fallbacks: ProgramUniform2ivEXT",null,null],[5,"ProgramUniform2ui","","Fallbacks: ProgramUniform2uiEXT",null,null],[5,"ProgramUniform2uiv","","Fallbacks: ProgramUniform2uivEXT",null,null],[5,"ProgramUniform3d","","",null,null],[5,"ProgramUniform3dv","","",null,null],[5,"ProgramUniform3f","","Fallbacks: ProgramUniform3fEXT",null,null],[5,"ProgramUniform3fv","","Fallbacks: ProgramUniform3fvEXT",null,null],[5,"ProgramUniform3i","","Fallbacks: ProgramUniform3iEXT",null,null],[5,"ProgramUniform3iv","","Fallbacks: ProgramUniform3ivEXT",null,null],[5,"ProgramUniform3ui","","Fallbacks: ProgramUniform3uiEXT",null,null],[5,"ProgramUniform3uiv","","Fallbacks: ProgramUniform3uivEXT",null,null],[5,"ProgramUniform4d","","",null,null],[5,"ProgramUniform4dv","","",null,null],[5,"ProgramUniform4f","","Fallbacks: ProgramUniform4fEXT",null,null],[5,"ProgramUniform4fv","","Fallbacks: ProgramUniform4fvEXT",null,null],[5,"ProgramUniform4i","","Fallbacks: ProgramUniform4iEXT",null,null],[5,"ProgramUniform4iv","","Fallbacks: ProgramUniform4ivEXT",null,null],[5,"ProgramUniform4ui","","Fallbacks: ProgramUniform4uiEXT",null,null],[5,"ProgramUniform4uiv","","Fallbacks: ProgramUniform4uivEXT",null,null],[5,"ProgramUniformMatrix2dv","","",null,null],[5,"ProgramUniformMatrix2fv","","Fallbacks: ProgramUniformMatrix2fvEXT",null,null],[5,"ProgramUniformMatrix2x3dv","","",null,null],[5,"ProgramUniformMatrix2x3fv","","Fallbacks: ProgramUniformMatrix2x3fvEXT",null,null],[5,"ProgramUniformMatrix2x4dv","","",null,null],[5,"ProgramUniformMatrix2x4fv","","Fallbacks: ProgramUniformMatrix2x4fvEXT",null,null],[5,"ProgramUniformMatrix3dv","","",null,null],[5,"ProgramUniformMatrix3fv","","Fallbacks: ProgramUniformMatrix3fvEXT",null,null],[5,"ProgramUniformMatrix3x2dv","","",null,null],[5,"ProgramUniformMatrix3x2fv","","Fallbacks: ProgramUniformMatrix3x2fvEXT",null,null],[5,"ProgramUniformMatrix3x4dv","","",null,null],[5,"ProgramUniformMatrix3x4fv","","Fallbacks: ProgramUniformMatrix3x4fvEXT",null,null],[5,"ProgramUniformMatrix4dv","","",null,null],[5,"ProgramUniformMatrix4fv","","Fallbacks: ProgramUniformMatrix4fvEXT",null,null],[5,"ProgramUniformMatrix4x2dv","","",null,null],[5,"ProgramUniformMatrix4x2fv","","Fallbacks: ProgramUniformMatrix4x2fvEXT",null,null],[5,"ProgramUniformMatrix4x3dv","","",null,null],[5,"ProgramUniformMatrix4x3fv","","Fallbacks: ProgramUniformMatrix4x3fvEXT",null,null],[5,"ProvokingVertex","","Fallbacks: ProvokingVertexEXT",null,null],[5,"PushDebugGroup","","Fallbacks: PushDebugGroupKHR",null,null],[5,"QueryCounter","","Fallbacks: QueryCounterEXT",null,null],[5,"ReadBuffer","","",null,null],[5,"ReadPixels","","",null,null],[5,"ReadnPixels","","Fallbacks: ReadnPixelsARB, ReadnPixelsEXT, ReadnPixelsKHR",null,null],[5,"ReleaseShaderCompiler","","",null,null],[5,"RenderbufferStorage","","Fallbacks: RenderbufferStorageEXT",null,null],[5,"RenderbufferStorageMultisample","","Fallbacks: RenderbufferStorageMultisampleEXT, RenderbufferStorageMultisampleNV",null,null],[5,"ResumeTransformFeedback","","Fallbacks: ResumeTransformFeedbackNV",null,null],[5,"SampleCoverage","","Fallbacks: SampleCoverageARB",null,null],[5,"SampleMaski","","",null,null],[5,"SamplerParameterIiv","","Fallbacks: SamplerParameterIivEXT, SamplerParameterIivOES",null,null],[5,"SamplerParameterIuiv","","Fallbacks: SamplerParameterIuivEXT, SamplerParameterIuivOES",null,null],[5,"SamplerParameterf","","",null,null],[5,"SamplerParameterfv","","",null,null],[5,"SamplerParameteri","","",null,null],[5,"SamplerParameteriv","","",null,null],[5,"Scissor","","",null,null],[5,"ScissorArrayv","","Fallbacks: ScissorArrayvNV",null,null],[5,"ScissorIndexed","","Fallbacks: ScissorIndexedNV",null,null],[5,"ScissorIndexedv","","Fallbacks: ScissorIndexedvNV",null,null],[5,"SecondaryColorP3ui","","",null,null],[5,"SecondaryColorP3uiv","","",null,null],[5,"ShaderBinary","","",null,null],[5,"ShaderSource","","Fallbacks: ShaderSourceARB",null,null],[5,"ShaderStorageBlockBinding","","",null,null],[5,"StencilFunc","","",null,null],[5,"StencilFuncSeparate","","",null,null],[5,"StencilMask","","",null,null],[5,"StencilMaskSeparate","","",null,null],[5,"StencilOp","","",null,null],[5,"StencilOpSeparate","","Fallbacks: StencilOpSeparateATI",null,null],[5,"TexBuffer","","Fallbacks: TexBufferARB, TexBufferEXT, TexBufferOES",null,null],[5,"TexBufferRange","","Fallbacks: TexBufferRangeEXT, TexBufferRangeOES",null,null],[5,"TexCoordP1ui","","",null,null],[5,"TexCoordP1uiv","","",null,null],[5,"TexCoordP2ui","","",null,null],[5,"TexCoordP2uiv","","",null,null],[5,"TexCoordP3ui","","",null,null],[5,"TexCoordP3uiv","","",null,null],[5,"TexCoordP4ui","","",null,null],[5,"TexCoordP4uiv","","",null,null],[5,"TexImage1D","","",null,null],[5,"TexImage2D","","",null,null],[5,"TexImage2DMultisample","","",null,null],[5,"TexImage3D","","Fallbacks: TexImage3DEXT, TexImage3DOES",null,null],[5,"TexImage3DMultisample","","",null,null],[5,"TexParameterIiv","","Fallbacks: TexParameterIivEXT, TexParameterIivOES",null,null],[5,"TexParameterIuiv","","Fallbacks: TexParameterIuivEXT, TexParameterIuivOES",null,null],[5,"TexParameterf","","",null,null],[5,"TexParameterfv","","",null,null],[5,"TexParameteri","","",null,null],[5,"TexParameteriv","","",null,null],[5,"TexStorage1D","","Fallbacks: TexStorage1DEXT",null,null],[5,"TexStorage2D","","Fallbacks: TexStorage2DEXT",null,null],[5,"TexStorage2DMultisample","","",null,null],[5,"TexStorage3D","","Fallbacks: TexStorage3DEXT",null,null],[5,"TexStorage3DMultisample","","Fallbacks: TexStorage3DMultisampleOES",null,null],[5,"TexSubImage1D","","Fallbacks: TexSubImage1DEXT",null,null],[5,"TexSubImage2D","","Fallbacks: TexSubImage2DEXT",null,null],[5,"TexSubImage3D","","Fallbacks: TexSubImage3DEXT, TexSubImage3DOES",null,null],[5,"TextureBarrier","","",null,null],[5,"TextureBuffer","","",null,null],[5,"TextureBufferRange","","",null,null],[5,"TextureParameterIiv","","",null,null],[5,"TextureParameterIuiv","","",null,null],[5,"TextureParameterf","","",null,null],[5,"TextureParameterfv","","",null,null],[5,"TextureParameteri","","",null,null],[5,"TextureParameteriv","","",null,null],[5,"TextureStorage1D","","",null,null],[5,"TextureStorage2D","","",null,null],[5,"TextureStorage2DMultisample","","",null,null],[5,"TextureStorage3D","","",null,null],[5,"TextureStorage3DMultisample","","",null,null],[5,"TextureSubImage1D","","",null,null],[5,"TextureSubImage2D","","",null,null],[5,"TextureSubImage3D","","",null,null],[5,"TextureView","","Fallbacks: TextureViewEXT, TextureViewOES",null,null],[5,"TransformFeedbackBufferBase","","",null,null],[5,"TransformFeedbackBufferRange","","",null,null],[5,"TransformFeedbackVaryings","","Fallbacks: TransformFeedbackVaryingsEXT",null,null],[5,"Uniform1d","","",null,null],[5,"Uniform1dv","","",null,null],[5,"Uniform1f","","Fallbacks: Uniform1fARB",null,null],[5,"Uniform1fv","","Fallbacks: Uniform1fvARB",null,null],[5,"Uniform1i","","Fallbacks: Uniform1iARB",null,null],[5,"Uniform1iv","","Fallbacks: Uniform1ivARB",null,null],[5,"Uniform1ui","","Fallbacks: Uniform1uiEXT",null,null],[5,"Uniform1uiv","","Fallbacks: Uniform1uivEXT",null,null],[5,"Uniform2d","","",null,null],[5,"Uniform2dv","","",null,null],[5,"Uniform2f","","Fallbacks: Uniform2fARB",null,null],[5,"Uniform2fv","","Fallbacks: Uniform2fvARB",null,null],[5,"Uniform2i","","Fallbacks: Uniform2iARB",null,null],[5,"Uniform2iv","","Fallbacks: Uniform2ivARB",null,null],[5,"Uniform2ui","","Fallbacks: Uniform2uiEXT",null,null],[5,"Uniform2uiv","","Fallbacks: Uniform2uivEXT",null,null],[5,"Uniform3d","","",null,null],[5,"Uniform3dv","","",null,null],[5,"Uniform3f","","Fallbacks: Uniform3fARB",null,null],[5,"Uniform3fv","","Fallbacks: Uniform3fvARB",null,null],[5,"Uniform3i","","Fallbacks: Uniform3iARB",null,null],[5,"Uniform3iv","","Fallbacks: Uniform3ivARB",null,null],[5,"Uniform3ui","","Fallbacks: Uniform3uiEXT",null,null],[5,"Uniform3uiv","","Fallbacks: Uniform3uivEXT",null,null],[5,"Uniform4d","","",null,null],[5,"Uniform4dv","","",null,null],[5,"Uniform4f","","Fallbacks: Uniform4fARB",null,null],[5,"Uniform4fv","","Fallbacks: Uniform4fvARB",null,null],[5,"Uniform4i","","Fallbacks: Uniform4iARB",null,null],[5,"Uniform4iv","","Fallbacks: Uniform4ivARB",null,null],[5,"Uniform4ui","","Fallbacks: Uniform4uiEXT",null,null],[5,"Uniform4uiv","","Fallbacks: Uniform4uivEXT",null,null],[5,"UniformBlockBinding","","",null,null],[5,"UniformMatrix2dv","","",null,null],[5,"UniformMatrix2fv","","Fallbacks: UniformMatrix2fvARB",null,null],[5,"UniformMatrix2x3dv","","",null,null],[5,"UniformMatrix2x3fv","","Fallbacks: UniformMatrix2x3fvNV",null,null],[5,"UniformMatrix2x4dv","","",null,null],[5,"UniformMatrix2x4fv","","Fallbacks: UniformMatrix2x4fvNV",null,null],[5,"UniformMatrix3dv","","",null,null],[5,"UniformMatrix3fv","","Fallbacks: UniformMatrix3fvARB",null,null],[5,"UniformMatrix3x2dv","","",null,null],[5,"UniformMatrix3x2fv","","Fallbacks: UniformMatrix3x2fvNV",null,null],[5,"UniformMatrix3x4dv","","",null,null],[5,"UniformMatrix3x4fv","","Fallbacks: UniformMatrix3x4fvNV",null,null],[5,"UniformMatrix4dv","","",null,null],[5,"UniformMatrix4fv","","Fallbacks: UniformMatrix4fvARB",null,null],[5,"UniformMatrix4x2dv","","",null,null],[5,"UniformMatrix4x2fv","","Fallbacks: UniformMatrix4x2fvNV",null,null],[5,"UniformMatrix4x3dv","","",null,null],[5,"UniformMatrix4x3fv","","Fallbacks: UniformMatrix4x3fvNV",null,null],[5,"UniformSubroutinesuiv","","",null,null],[5,"UnmapBuffer","","Fallbacks: UnmapBufferARB, UnmapBufferOES",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glboolean"}}],[5,"UnmapNamedBuffer","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"UseProgram","","Fallbacks: UseProgramObjectARB",null,null],[5,"UseProgramStages","","",null,null],[5,"ValidateProgram","","Fallbacks: ValidateProgramARB",null,null],[5,"ValidateProgramPipeline","","",null,null],[5,"VertexArrayAttribBinding","","",null,null],[5,"VertexArrayAttribFormat","","",null,null],[5,"VertexArrayAttribIFormat","","",null,null],[5,"VertexArrayAttribLFormat","","",null,null],[5,"VertexArrayBindingDivisor","","",null,null],[5,"VertexArrayElementBuffer","","",null,null],[5,"VertexArrayVertexBuffer","","",null,null],[5,"VertexArrayVertexBuffers","","",null,null],[5,"VertexAttrib1d","","Fallbacks: VertexAttrib1dARB, VertexAttrib1dNV",null,null],[5,"VertexAttrib1dv","","Fallbacks: VertexAttrib1dvARB, VertexAttrib1dvNV",null,null],[5,"VertexAttrib1f","","Fallbacks: VertexAttrib1fARB, VertexAttrib1fNV",null,null],[5,"VertexAttrib1fv","","Fallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV",null,null],[5,"VertexAttrib1s","","Fallbacks: VertexAttrib1sARB, VertexAttrib1sNV",null,null],[5,"VertexAttrib1sv","","Fallbacks: VertexAttrib1svARB, VertexAttrib1svNV",null,null],[5,"VertexAttrib2d","","Fallbacks: VertexAttrib2dARB, VertexAttrib2dNV",null,null],[5,"VertexAttrib2dv","","Fallbacks: VertexAttrib2dvARB, VertexAttrib2dvNV",null,null],[5,"VertexAttrib2f","","Fallbacks: VertexAttrib2fARB, VertexAttrib2fNV",null,null],[5,"VertexAttrib2fv","","Fallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV",null,null],[5,"VertexAttrib2s","","Fallbacks: VertexAttrib2sARB, VertexAttrib2sNV",null,null],[5,"VertexAttrib2sv","","Fallbacks: VertexAttrib2svARB, VertexAttrib2svNV",null,null],[5,"VertexAttrib3d","","Fallbacks: VertexAttrib3dARB, VertexAttrib3dNV",null,null],[5,"VertexAttrib3dv","","Fallbacks: VertexAttrib3dvARB, VertexAttrib3dvNV",null,null],[5,"VertexAttrib3f","","Fallbacks: VertexAttrib3fARB, VertexAttrib3fNV",null,null],[5,"VertexAttrib3fv","","Fallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV",null,null],[5,"VertexAttrib3s","","Fallbacks: VertexAttrib3sARB, VertexAttrib3sNV",null,null],[5,"VertexAttrib3sv","","Fallbacks: VertexAttrib3svARB, VertexAttrib3svNV",null,null],[5,"VertexAttrib4Nbv","","Fallbacks: VertexAttrib4NbvARB",null,null],[5,"VertexAttrib4Niv","","Fallbacks: VertexAttrib4NivARB",null,null],[5,"VertexAttrib4Nsv","","Fallbacks: VertexAttrib4NsvARB",null,null],[5,"VertexAttrib4Nub","","Fallbacks: VertexAttrib4NubARB, VertexAttrib4ubNV",null,null],[5,"VertexAttrib4Nubv","","Fallbacks: VertexAttrib4NubvARB, VertexAttrib4ubvNV",null,null],[5,"VertexAttrib4Nuiv","","Fallbacks: VertexAttrib4NuivARB",null,null],[5,"VertexAttrib4Nusv","","Fallbacks: VertexAttrib4NusvARB",null,null],[5,"VertexAttrib4bv","","Fallbacks: VertexAttrib4bvARB",null,null],[5,"VertexAttrib4d","","Fallbacks: VertexAttrib4dARB, VertexAttrib4dNV",null,null],[5,"VertexAttrib4dv","","Fallbacks: VertexAttrib4dvARB, VertexAttrib4dvNV",null,null],[5,"VertexAttrib4f","","Fallbacks: VertexAttrib4fARB, VertexAttrib4fNV",null,null],[5,"VertexAttrib4fv","","Fallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV",null,null],[5,"VertexAttrib4iv","","Fallbacks: VertexAttrib4ivARB",null,null],[5,"VertexAttrib4s","","Fallbacks: VertexAttrib4sARB, VertexAttrib4sNV",null,null],[5,"VertexAttrib4sv","","Fallbacks: VertexAttrib4svARB, VertexAttrib4svNV",null,null],[5,"VertexAttrib4ubv","","Fallbacks: VertexAttrib4ubvARB",null,null],[5,"VertexAttrib4uiv","","Fallbacks: VertexAttrib4uivARB",null,null],[5,"VertexAttrib4usv","","Fallbacks: VertexAttrib4usvARB",null,null],[5,"VertexAttribBinding","","",null,null],[5,"VertexAttribDivisor","","Fallbacks: VertexAttribDivisorANGLE, VertexAttribDivisorARB, VertexAttribDivisorEXT, VertexAttribDivisorNV",null,null],[5,"VertexAttribFormat","","",null,null],[5,"VertexAttribI1i","","Fallbacks: VertexAttribI1iEXT",null,null],[5,"VertexAttribI1iv","","Fallbacks: VertexAttribI1ivEXT",null,null],[5,"VertexAttribI1ui","","Fallbacks: VertexAttribI1uiEXT",null,null],[5,"VertexAttribI1uiv","","Fallbacks: VertexAttribI1uivEXT",null,null],[5,"VertexAttribI2i","","Fallbacks: VertexAttribI2iEXT",null,null],[5,"VertexAttribI2iv","","Fallbacks: VertexAttribI2ivEXT",null,null],[5,"VertexAttribI2ui","","Fallbacks: VertexAttribI2uiEXT",null,null],[5,"VertexAttribI2uiv","","Fallbacks: VertexAttribI2uivEXT",null,null],[5,"VertexAttribI3i","","Fallbacks: VertexAttribI3iEXT",null,null],[5,"VertexAttribI3iv","","Fallbacks: VertexAttribI3ivEXT",null,null],[5,"VertexAttribI3ui","","Fallbacks: VertexAttribI3uiEXT",null,null],[5,"VertexAttribI3uiv","","Fallbacks: VertexAttribI3uivEXT",null,null],[5,"VertexAttribI4bv","","Fallbacks: VertexAttribI4bvEXT",null,null],[5,"VertexAttribI4i","","Fallbacks: VertexAttribI4iEXT",null,null],[5,"VertexAttribI4iv","","Fallbacks: VertexAttribI4ivEXT",null,null],[5,"VertexAttribI4sv","","Fallbacks: VertexAttribI4svEXT",null,null],[5,"VertexAttribI4ubv","","Fallbacks: VertexAttribI4ubvEXT",null,null],[5,"VertexAttribI4ui","","Fallbacks: VertexAttribI4uiEXT",null,null],[5,"VertexAttribI4uiv","","Fallbacks: VertexAttribI4uivEXT",null,null],[5,"VertexAttribI4usv","","Fallbacks: VertexAttribI4usvEXT",null,null],[5,"VertexAttribIFormat","","",null,null],[5,"VertexAttribIPointer","","Fallbacks: VertexAttribIPointerEXT",null,null],[5,"VertexAttribL1d","","Fallbacks: VertexAttribL1dEXT",null,null],[5,"VertexAttribL1dv","","Fallbacks: VertexAttribL1dvEXT",null,null],[5,"VertexAttribL2d","","Fallbacks: VertexAttribL2dEXT",null,null],[5,"VertexAttribL2dv","","Fallbacks: VertexAttribL2dvEXT",null,null],[5,"VertexAttribL3d","","Fallbacks: VertexAttribL3dEXT",null,null],[5,"VertexAttribL3dv","","Fallbacks: VertexAttribL3dvEXT",null,null],[5,"VertexAttribL4d","","Fallbacks: VertexAttribL4dEXT",null,null],[5,"VertexAttribL4dv","","Fallbacks: VertexAttribL4dvEXT",null,null],[5,"VertexAttribLFormat","","",null,null],[5,"VertexAttribLPointer","","Fallbacks: VertexAttribLPointerEXT",null,null],[5,"VertexAttribP1ui","","",null,null],[5,"VertexAttribP1uiv","","",null,null],[5,"VertexAttribP2ui","","",null,null],[5,"VertexAttribP2uiv","","",null,null],[5,"VertexAttribP3ui","","",null,null],[5,"VertexAttribP3uiv","","",null,null],[5,"VertexAttribP4ui","","",null,null],[5,"VertexAttribP4uiv","","",null,null],[5,"VertexAttribPointer","","Fallbacks: VertexAttribPointerARB",null,null],[5,"VertexBindingDivisor","","",null,null],[5,"VertexP2ui","","",null,null],[5,"VertexP2uiv","","",null,null],[5,"VertexP3ui","","",null,null],[5,"VertexP3uiv","","",null,null],[5,"VertexP4ui","","",null,null],[5,"VertexP4uiv","","",null,null],[5,"Viewport","","",null,null],[5,"ViewportArrayv","","Fallbacks: ViewportArrayvNV",null,null],[5,"ViewportIndexedf","","Fallbacks: ViewportIndexedfNV",null,null],[5,"ViewportIndexedfv","","Fallbacks: ViewportIndexedfvNV",null,null],[5,"WaitSync","","Fallbacks: WaitSyncAPPLE",null,null],[5,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the\nuse of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.\n~~~ignore\ngl::load_with(|s| glfw.get_proc_address(s));\n~~~",null,{"inputs":[{"name":"f"}],"output":null}],[0,"types","","",null,null],[4,"__GLsync","gl::types","",null,null],[4,"_cl_context","","",null,null],[4,"_cl_event","","",null,null],[6,"GLenum","","",null,null],[6,"GLboolean","","",null,null],[6,"GLbitfield","","",null,null],[6,"GLvoid","","",null,null],[6,"GLbyte","","",null,null],[6,"GLshort","","",null,null],[6,"GLint","","",null,null],[6,"GLclampx","","",null,null],[6,"GLubyte","","",null,null],[6,"GLushort","","",null,null],[6,"GLuint","","",null,null],[6,"GLsizei","","",null,null],[6,"GLfloat","","",null,null],[6,"GLclampf","","",null,null],[6,"GLdouble","","",null,null],[6,"GLclampd","","",null,null],[6,"GLeglImageOES","","",null,null],[6,"GLchar","","",null,null],[6,"GLcharARB","","",null,null],[6,"GLhandleARB","","",null,null],[6,"GLhalfARB","","",null,null],[6,"GLhalf","","",null,null],[6,"GLfixed","","",null,null],[6,"GLintptr","","",null,null],[6,"GLsizeiptr","","",null,null],[6,"GLint64","","",null,null],[6,"GLuint64","","",null,null],[6,"GLintptrARB","","",null,null],[6,"GLsizeiptrARB","","",null,null],[6,"GLint64EXT","","",null,null],[6,"GLuint64EXT","","",null,null],[6,"GLsync","","",null,null],[6,"GLDEBUGPROC","","",null,null],[6,"GLDEBUGPROCARB","","",null,null],[6,"GLDEBUGPROCKHR","","",null,null],[6,"GLDEBUGPROCAMD","","",null,null],[6,"GLhalfNV","","",null,null],[6,"GLvdpauSurfaceNV","","",null,null],[0,"ActiveShaderProgram","gl","",null,null],[5,"is_loaded","gl::ActiveShaderProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ActiveTexture","gl","",null,null],[5,"is_loaded","gl::ActiveTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"AttachShader","gl","",null,null],[5,"is_loaded","gl::AttachShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BeginConditionalRender","gl","",null,null],[5,"is_loaded","gl::BeginConditionalRender","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BeginQuery","gl","",null,null],[5,"is_loaded","gl::BeginQuery","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BeginQueryIndexed","gl","",null,null],[5,"is_loaded","gl::BeginQueryIndexed","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BeginTransformFeedback","gl","",null,null],[5,"is_loaded","gl::BeginTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindAttribLocation","gl","",null,null],[5,"is_loaded","gl::BindAttribLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindBuffer","gl","",null,null],[5,"is_loaded","gl::BindBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindBufferBase","gl","",null,null],[5,"is_loaded","gl::BindBufferBase","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindBufferRange","gl","",null,null],[5,"is_loaded","gl::BindBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindBuffersBase","gl","",null,null],[5,"is_loaded","gl::BindBuffersBase","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindBuffersRange","gl","",null,null],[5,"is_loaded","gl::BindBuffersRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindFragDataLocation","gl","",null,null],[5,"is_loaded","gl::BindFragDataLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindFragDataLocationIndexed","gl","",null,null],[5,"is_loaded","gl::BindFragDataLocationIndexed","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindFramebuffer","gl","",null,null],[5,"is_loaded","gl::BindFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindImageTexture","gl","",null,null],[5,"is_loaded","gl::BindImageTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindImageTextures","gl","",null,null],[5,"is_loaded","gl::BindImageTextures","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindProgramPipeline","gl","",null,null],[5,"is_loaded","gl::BindProgramPipeline","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindRenderbuffer","gl","",null,null],[5,"is_loaded","gl::BindRenderbuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindSampler","gl","",null,null],[5,"is_loaded","gl::BindSampler","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindSamplers","gl","",null,null],[5,"is_loaded","gl::BindSamplers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindTexture","gl","",null,null],[5,"is_loaded","gl::BindTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindTextureUnit","gl","",null,null],[5,"is_loaded","gl::BindTextureUnit","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindTextures","gl","",null,null],[5,"is_loaded","gl::BindTextures","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindTransformFeedback","gl","",null,null],[5,"is_loaded","gl::BindTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindVertexArray","gl","",null,null],[5,"is_loaded","gl::BindVertexArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindVertexBuffer","gl","",null,null],[5,"is_loaded","gl::BindVertexBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindVertexBuffers","gl","",null,null],[5,"is_loaded","gl::BindVertexBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendColor","gl","",null,null],[5,"is_loaded","gl::BlendColor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendEquation","gl","",null,null],[5,"is_loaded","gl::BlendEquation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendEquationSeparate","gl","",null,null],[5,"is_loaded","gl::BlendEquationSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendEquationSeparatei","gl","",null,null],[5,"is_loaded","gl::BlendEquationSeparatei","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendEquationi","gl","",null,null],[5,"is_loaded","gl::BlendEquationi","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendFunc","gl","",null,null],[5,"is_loaded","gl::BlendFunc","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendFuncSeparate","gl","",null,null],[5,"is_loaded","gl::BlendFuncSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendFuncSeparatei","gl","",null,null],[5,"is_loaded","gl::BlendFuncSeparatei","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendFunci","gl","",null,null],[5,"is_loaded","gl::BlendFunci","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlitFramebuffer","gl","",null,null],[5,"is_loaded","gl::BlitFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlitNamedFramebuffer","gl","",null,null],[5,"is_loaded","gl::BlitNamedFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BufferData","gl","",null,null],[5,"is_loaded","gl::BufferData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BufferStorage","gl","",null,null],[5,"is_loaded","gl::BufferStorage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BufferSubData","gl","",null,null],[5,"is_loaded","gl::BufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CheckFramebufferStatus","gl","",null,null],[5,"is_loaded","gl::CheckFramebufferStatus","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CheckNamedFramebufferStatus","gl","",null,null],[5,"is_loaded","gl::CheckNamedFramebufferStatus","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClampColor","gl","",null,null],[5,"is_loaded","gl::ClampColor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Clear","gl","",null,null],[5,"is_loaded","gl::Clear","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferData","gl","",null,null],[5,"is_loaded","gl::ClearBufferData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferSubData","gl","",null,null],[5,"is_loaded","gl::ClearBufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferfi","gl","",null,null],[5,"is_loaded","gl::ClearBufferfi","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferfv","gl","",null,null],[5,"is_loaded","gl::ClearBufferfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferiv","gl","",null,null],[5,"is_loaded","gl::ClearBufferiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferuiv","gl","",null,null],[5,"is_loaded","gl::ClearBufferuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearColor","gl","",null,null],[5,"is_loaded","gl::ClearColor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearDepth","gl","",null,null],[5,"is_loaded","gl::ClearDepth","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearDepthf","gl","",null,null],[5,"is_loaded","gl::ClearDepthf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearNamedBufferData","gl","",null,null],[5,"is_loaded","gl::ClearNamedBufferData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearNamedBufferSubData","gl","",null,null],[5,"is_loaded","gl::ClearNamedBufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearNamedFramebufferfi","gl","",null,null],[5,"is_loaded","gl::ClearNamedFramebufferfi","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearNamedFramebufferfv","gl","",null,null],[5,"is_loaded","gl::ClearNamedFramebufferfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearNamedFramebufferiv","gl","",null,null],[5,"is_loaded","gl::ClearNamedFramebufferiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearNamedFramebufferuiv","gl","",null,null],[5,"is_loaded","gl::ClearNamedFramebufferuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearStencil","gl","",null,null],[5,"is_loaded","gl::ClearStencil","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearTexImage","gl","",null,null],[5,"is_loaded","gl::ClearTexImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearTexSubImage","gl","",null,null],[5,"is_loaded","gl::ClearTexSubImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClientWaitSync","gl","",null,null],[5,"is_loaded","gl::ClientWaitSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClipControl","gl","",null,null],[5,"is_loaded","gl::ClipControl","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorMask","gl","",null,null],[5,"is_loaded","gl::ColorMask","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorMaski","gl","",null,null],[5,"is_loaded","gl::ColorMaski","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorP3ui","gl","",null,null],[5,"is_loaded","gl::ColorP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorP3uiv","gl","",null,null],[5,"is_loaded","gl::ColorP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorP4ui","gl","",null,null],[5,"is_loaded","gl::ColorP4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorP4uiv","gl","",null,null],[5,"is_loaded","gl::ColorP4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompileShader","gl","",null,null],[5,"is_loaded","gl::CompileShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexImage1D","gl","",null,null],[5,"is_loaded","gl::CompressedTexImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexImage2D","gl","",null,null],[5,"is_loaded","gl::CompressedTexImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexImage3D","gl","",null,null],[5,"is_loaded","gl::CompressedTexImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexSubImage1D","gl","",null,null],[5,"is_loaded","gl::CompressedTexSubImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexSubImage2D","gl","",null,null],[5,"is_loaded","gl::CompressedTexSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexSubImage3D","gl","",null,null],[5,"is_loaded","gl::CompressedTexSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTextureSubImage1D","gl","",null,null],[5,"is_loaded","gl::CompressedTextureSubImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTextureSubImage2D","gl","",null,null],[5,"is_loaded","gl::CompressedTextureSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTextureSubImage3D","gl","",null,null],[5,"is_loaded","gl::CompressedTextureSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyBufferSubData","gl","",null,null],[5,"is_loaded","gl::CopyBufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyImageSubData","gl","",null,null],[5,"is_loaded","gl::CopyImageSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyNamedBufferSubData","gl","",null,null],[5,"is_loaded","gl::CopyNamedBufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexImage1D","gl","",null,null],[5,"is_loaded","gl::CopyTexImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexImage2D","gl","",null,null],[5,"is_loaded","gl::CopyTexImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexSubImage1D","gl","",null,null],[5,"is_loaded","gl::CopyTexSubImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexSubImage2D","gl","",null,null],[5,"is_loaded","gl::CopyTexSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexSubImage3D","gl","",null,null],[5,"is_loaded","gl::CopyTexSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTextureSubImage1D","gl","",null,null],[5,"is_loaded","gl::CopyTextureSubImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTextureSubImage2D","gl","",null,null],[5,"is_loaded","gl::CopyTextureSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTextureSubImage3D","gl","",null,null],[5,"is_loaded","gl::CopyTextureSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateBuffers","gl","",null,null],[5,"is_loaded","gl::CreateBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateFramebuffers","gl","",null,null],[5,"is_loaded","gl::CreateFramebuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateProgram","gl","",null,null],[5,"is_loaded","gl::CreateProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateProgramPipelines","gl","",null,null],[5,"is_loaded","gl::CreateProgramPipelines","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateQueries","gl","",null,null],[5,"is_loaded","gl::CreateQueries","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateRenderbuffers","gl","",null,null],[5,"is_loaded","gl::CreateRenderbuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateSamplers","gl","",null,null],[5,"is_loaded","gl::CreateSamplers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateShader","gl","",null,null],[5,"is_loaded","gl::CreateShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateShaderProgramv","gl","",null,null],[5,"is_loaded","gl::CreateShaderProgramv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateTextures","gl","",null,null],[5,"is_loaded","gl::CreateTextures","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateTransformFeedbacks","gl","",null,null],[5,"is_loaded","gl::CreateTransformFeedbacks","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateVertexArrays","gl","",null,null],[5,"is_loaded","gl::CreateVertexArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CullFace","gl","",null,null],[5,"is_loaded","gl::CullFace","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DebugMessageCallback","gl","",null,null],[5,"is_loaded","gl::DebugMessageCallback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DebugMessageControl","gl","",null,null],[5,"is_loaded","gl::DebugMessageControl","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DebugMessageInsert","gl","",null,null],[5,"is_loaded","gl::DebugMessageInsert","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteBuffers","gl","",null,null],[5,"is_loaded","gl::DeleteBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteFramebuffers","gl","",null,null],[5,"is_loaded","gl::DeleteFramebuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteProgram","gl","",null,null],[5,"is_loaded","gl::DeleteProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteProgramPipelines","gl","",null,null],[5,"is_loaded","gl::DeleteProgramPipelines","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteQueries","gl","",null,null],[5,"is_loaded","gl::DeleteQueries","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteRenderbuffers","gl","",null,null],[5,"is_loaded","gl::DeleteRenderbuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteSamplers","gl","",null,null],[5,"is_loaded","gl::DeleteSamplers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteShader","gl","",null,null],[5,"is_loaded","gl::DeleteShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteSync","gl","",null,null],[5,"is_loaded","gl::DeleteSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteTextures","gl","",null,null],[5,"is_loaded","gl::DeleteTextures","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteTransformFeedbacks","gl","",null,null],[5,"is_loaded","gl::DeleteTransformFeedbacks","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteVertexArrays","gl","",null,null],[5,"is_loaded","gl::DeleteVertexArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthFunc","gl","",null,null],[5,"is_loaded","gl::DepthFunc","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthMask","gl","",null,null],[5,"is_loaded","gl::DepthMask","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthRange","gl","",null,null],[5,"is_loaded","gl::DepthRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthRangeArrayv","gl","",null,null],[5,"is_loaded","gl::DepthRangeArrayv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthRangeIndexed","gl","",null,null],[5,"is_loaded","gl::DepthRangeIndexed","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthRangef","gl","",null,null],[5,"is_loaded","gl::DepthRangef","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DetachShader","gl","",null,null],[5,"is_loaded","gl::DetachShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Disable","gl","",null,null],[5,"is_loaded","gl::Disable","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DisableVertexArrayAttrib","gl","",null,null],[5,"is_loaded","gl::DisableVertexArrayAttrib","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DisableVertexAttribArray","gl","",null,null],[5,"is_loaded","gl::DisableVertexAttribArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Disablei","gl","",null,null],[5,"is_loaded","gl::Disablei","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DispatchCompute","gl","",null,null],[5,"is_loaded","gl::DispatchCompute","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DispatchComputeIndirect","gl","",null,null],[5,"is_loaded","gl::DispatchComputeIndirect","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawArrays","gl","",null,null],[5,"is_loaded","gl::DrawArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawArraysIndirect","gl","",null,null],[5,"is_loaded","gl::DrawArraysIndirect","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawArraysInstanced","gl","",null,null],[5,"is_loaded","gl::DrawArraysInstanced","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawArraysInstancedBaseInstance","gl","",null,null],[5,"is_loaded","gl::DrawArraysInstancedBaseInstance","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawBuffer","gl","",null,null],[5,"is_loaded","gl::DrawBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawBuffers","gl","",null,null],[5,"is_loaded","gl::DrawBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElements","gl","",null,null],[5,"is_loaded","gl::DrawElements","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElementsBaseVertex","gl","",null,null],[5,"is_loaded","gl::DrawElementsBaseVertex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElementsIndirect","gl","",null,null],[5,"is_loaded","gl::DrawElementsIndirect","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElementsInstanced","gl","",null,null],[5,"is_loaded","gl::DrawElementsInstanced","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElementsInstancedBaseInstance","gl","",null,null],[5,"is_loaded","gl::DrawElementsInstancedBaseInstance","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElementsInstancedBaseVertex","gl","",null,null],[5,"is_loaded","gl::DrawElementsInstancedBaseVertex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElementsInstancedBaseVertexBaseInstance","gl","",null,null],[5,"is_loaded","gl::DrawElementsInstancedBaseVertexBaseInstance","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawRangeElements","gl","",null,null],[5,"is_loaded","gl::DrawRangeElements","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawRangeElementsBaseVertex","gl","",null,null],[5,"is_loaded","gl::DrawRangeElementsBaseVertex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawTransformFeedback","gl","",null,null],[5,"is_loaded","gl::DrawTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawTransformFeedbackInstanced","gl","",null,null],[5,"is_loaded","gl::DrawTransformFeedbackInstanced","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawTransformFeedbackStream","gl","",null,null],[5,"is_loaded","gl::DrawTransformFeedbackStream","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawTransformFeedbackStreamInstanced","gl","",null,null],[5,"is_loaded","gl::DrawTransformFeedbackStreamInstanced","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Enable","gl","",null,null],[5,"is_loaded","gl::Enable","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EnableVertexArrayAttrib","gl","",null,null],[5,"is_loaded","gl::EnableVertexArrayAttrib","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EnableVertexAttribArray","gl","",null,null],[5,"is_loaded","gl::EnableVertexAttribArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Enablei","gl","",null,null],[5,"is_loaded","gl::Enablei","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EndConditionalRender","gl","",null,null],[5,"is_loaded","gl::EndConditionalRender","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EndQuery","gl","",null,null],[5,"is_loaded","gl::EndQuery","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EndQueryIndexed","gl","",null,null],[5,"is_loaded","gl::EndQueryIndexed","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EndTransformFeedback","gl","",null,null],[5,"is_loaded","gl::EndTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FenceSync","gl","",null,null],[5,"is_loaded","gl::FenceSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Finish","gl","",null,null],[5,"is_loaded","gl::Finish","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Flush","gl","",null,null],[5,"is_loaded","gl::Flush","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FlushMappedBufferRange","gl","",null,null],[5,"is_loaded","gl::FlushMappedBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FlushMappedNamedBufferRange","gl","",null,null],[5,"is_loaded","gl::FlushMappedNamedBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferParameteri","gl","",null,null],[5,"is_loaded","gl::FramebufferParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferRenderbuffer","gl","",null,null],[5,"is_loaded","gl::FramebufferRenderbuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTexture","gl","",null,null],[5,"is_loaded","gl::FramebufferTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTexture1D","gl","",null,null],[5,"is_loaded","gl::FramebufferTexture1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTexture2D","gl","",null,null],[5,"is_loaded","gl::FramebufferTexture2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTexture3D","gl","",null,null],[5,"is_loaded","gl::FramebufferTexture3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTextureLayer","gl","",null,null],[5,"is_loaded","gl::FramebufferTextureLayer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FrontFace","gl","",null,null],[5,"is_loaded","gl::FrontFace","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenBuffers","gl","",null,null],[5,"is_loaded","gl::GenBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenFramebuffers","gl","",null,null],[5,"is_loaded","gl::GenFramebuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenProgramPipelines","gl","",null,null],[5,"is_loaded","gl::GenProgramPipelines","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenQueries","gl","",null,null],[5,"is_loaded","gl::GenQueries","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenRenderbuffers","gl","",null,null],[5,"is_loaded","gl::GenRenderbuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenSamplers","gl","",null,null],[5,"is_loaded","gl::GenSamplers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenTextures","gl","",null,null],[5,"is_loaded","gl::GenTextures","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenTransformFeedbacks","gl","",null,null],[5,"is_loaded","gl::GenTransformFeedbacks","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenVertexArrays","gl","",null,null],[5,"is_loaded","gl::GenVertexArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenerateMipmap","gl","",null,null],[5,"is_loaded","gl::GenerateMipmap","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenerateTextureMipmap","gl","",null,null],[5,"is_loaded","gl::GenerateTextureMipmap","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveAtomicCounterBufferiv","gl","",null,null],[5,"is_loaded","gl::GetActiveAtomicCounterBufferiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveAttrib","gl","",null,null],[5,"is_loaded","gl::GetActiveAttrib","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveSubroutineName","gl","",null,null],[5,"is_loaded","gl::GetActiveSubroutineName","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveSubroutineUniformName","gl","",null,null],[5,"is_loaded","gl::GetActiveSubroutineUniformName","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveSubroutineUniformiv","gl","",null,null],[5,"is_loaded","gl::GetActiveSubroutineUniformiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniform","gl","",null,null],[5,"is_loaded","gl::GetActiveUniform","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniformBlockName","gl","",null,null],[5,"is_loaded","gl::GetActiveUniformBlockName","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniformBlockiv","gl","",null,null],[5,"is_loaded","gl::GetActiveUniformBlockiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniformName","gl","",null,null],[5,"is_loaded","gl::GetActiveUniformName","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniformsiv","gl","",null,null],[5,"is_loaded","gl::GetActiveUniformsiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetAttachedShaders","gl","",null,null],[5,"is_loaded","gl::GetAttachedShaders","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetAttribLocation","gl","",null,null],[5,"is_loaded","gl::GetAttribLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBooleani_v","gl","",null,null],[5,"is_loaded","gl::GetBooleani_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBooleanv","gl","",null,null],[5,"is_loaded","gl::GetBooleanv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBufferParameteri64v","gl","",null,null],[5,"is_loaded","gl::GetBufferParameteri64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBufferParameteriv","gl","",null,null],[5,"is_loaded","gl::GetBufferParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBufferPointerv","gl","",null,null],[5,"is_loaded","gl::GetBufferPointerv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBufferSubData","gl","",null,null],[5,"is_loaded","gl::GetBufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetCompressedTexImage","gl","",null,null],[5,"is_loaded","gl::GetCompressedTexImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetCompressedTextureImage","gl","",null,null],[5,"is_loaded","gl::GetCompressedTextureImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetCompressedTextureSubImage","gl","",null,null],[5,"is_loaded","gl::GetCompressedTextureSubImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetDebugMessageLog","gl","",null,null],[5,"is_loaded","gl::GetDebugMessageLog","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetDoublei_v","gl","",null,null],[5,"is_loaded","gl::GetDoublei_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetDoublev","gl","",null,null],[5,"is_loaded","gl::GetDoublev","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetError","gl","",null,null],[5,"is_loaded","gl::GetError","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFloati_v","gl","",null,null],[5,"is_loaded","gl::GetFloati_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFloatv","gl","",null,null],[5,"is_loaded","gl::GetFloatv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFragDataIndex","gl","",null,null],[5,"is_loaded","gl::GetFragDataIndex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFragDataLocation","gl","",null,null],[5,"is_loaded","gl::GetFragDataLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFramebufferAttachmentParameteriv","gl","",null,null],[5,"is_loaded","gl::GetFramebufferAttachmentParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFramebufferParameteriv","gl","",null,null],[5,"is_loaded","gl::GetFramebufferParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetGraphicsResetStatus","gl","",null,null],[5,"is_loaded","gl::GetGraphicsResetStatus","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetInteger64i_v","gl","",null,null],[5,"is_loaded","gl::GetInteger64i_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetInteger64v","gl","",null,null],[5,"is_loaded","gl::GetInteger64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetIntegeri_v","gl","",null,null],[5,"is_loaded","gl::GetIntegeri_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetIntegerv","gl","",null,null],[5,"is_loaded","gl::GetIntegerv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetInternalformati64v","gl","",null,null],[5,"is_loaded","gl::GetInternalformati64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetInternalformativ","gl","",null,null],[5,"is_loaded","gl::GetInternalformativ","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetMultisamplefv","gl","",null,null],[5,"is_loaded","gl::GetMultisamplefv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetNamedBufferParameteri64v","gl","",null,null],[5,"is_loaded","gl::GetNamedBufferParameteri64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetNamedBufferParameteriv","gl","",null,null],[5,"is_loaded","gl::GetNamedBufferParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetNamedBufferPointerv","gl","",null,null],[5,"is_loaded","gl::GetNamedBufferPointerv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetNamedBufferSubData","gl","",null,null],[5,"is_loaded","gl::GetNamedBufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetNamedFramebufferAttachmentParameteriv","gl","",null,null],[5,"is_loaded","gl::GetNamedFramebufferAttachmentParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetNamedFramebufferParameteriv","gl","",null,null],[5,"is_loaded","gl::GetNamedFramebufferParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetNamedRenderbufferParameteriv","gl","",null,null],[5,"is_loaded","gl::GetNamedRenderbufferParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetObjectLabel","gl","",null,null],[5,"is_loaded","gl::GetObjectLabel","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetObjectPtrLabel","gl","",null,null],[5,"is_loaded","gl::GetObjectPtrLabel","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramBinary","gl","",null,null],[5,"is_loaded","gl::GetProgramBinary","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramInfoLog","gl","",null,null],[5,"is_loaded","gl::GetProgramInfoLog","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramInterfaceiv","gl","",null,null],[5,"is_loaded","gl::GetProgramInterfaceiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramPipelineInfoLog","gl","",null,null],[5,"is_loaded","gl::GetProgramPipelineInfoLog","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramPipelineiv","gl","",null,null],[5,"is_loaded","gl::GetProgramPipelineiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramResourceIndex","gl","",null,null],[5,"is_loaded","gl::GetProgramResourceIndex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramResourceLocation","gl","",null,null],[5,"is_loaded","gl::GetProgramResourceLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramResourceLocationIndex","gl","",null,null],[5,"is_loaded","gl::GetProgramResourceLocationIndex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramResourceName","gl","",null,null],[5,"is_loaded","gl::GetProgramResourceName","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramResourceiv","gl","",null,null],[5,"is_loaded","gl::GetProgramResourceiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramStageiv","gl","",null,null],[5,"is_loaded","gl::GetProgramStageiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramiv","gl","",null,null],[5,"is_loaded","gl::GetProgramiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryBufferObjecti64v","gl","",null,null],[5,"is_loaded","gl::GetQueryBufferObjecti64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryBufferObjectiv","gl","",null,null],[5,"is_loaded","gl::GetQueryBufferObjectiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryBufferObjectui64v","gl","",null,null],[5,"is_loaded","gl::GetQueryBufferObjectui64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryBufferObjectuiv","gl","",null,null],[5,"is_loaded","gl::GetQueryBufferObjectuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryIndexediv","gl","",null,null],[5,"is_loaded","gl::GetQueryIndexediv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryObjecti64v","gl","",null,null],[5,"is_loaded","gl::GetQueryObjecti64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryObjectiv","gl","",null,null],[5,"is_loaded","gl::GetQueryObjectiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryObjectui64v","gl","",null,null],[5,"is_loaded","gl::GetQueryObjectui64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryObjectuiv","gl","",null,null],[5,"is_loaded","gl::GetQueryObjectuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryiv","gl","",null,null],[5,"is_loaded","gl::GetQueryiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetRenderbufferParameteriv","gl","",null,null],[5,"is_loaded","gl::GetRenderbufferParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSamplerParameterIiv","gl","",null,null],[5,"is_loaded","gl::GetSamplerParameterIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSamplerParameterIuiv","gl","",null,null],[5,"is_loaded","gl::GetSamplerParameterIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSamplerParameterfv","gl","",null,null],[5,"is_loaded","gl::GetSamplerParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSamplerParameteriv","gl","",null,null],[5,"is_loaded","gl::GetSamplerParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetShaderInfoLog","gl","",null,null],[5,"is_loaded","gl::GetShaderInfoLog","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetShaderPrecisionFormat","gl","",null,null],[5,"is_loaded","gl::GetShaderPrecisionFormat","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetShaderSource","gl","",null,null],[5,"is_loaded","gl::GetShaderSource","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetShaderiv","gl","",null,null],[5,"is_loaded","gl::GetShaderiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetString","gl","",null,null],[5,"is_loaded","gl::GetString","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetStringi","gl","",null,null],[5,"is_loaded","gl::GetStringi","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSubroutineIndex","gl","",null,null],[5,"is_loaded","gl::GetSubroutineIndex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSubroutineUniformLocation","gl","",null,null],[5,"is_loaded","gl::GetSubroutineUniformLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSynciv","gl","",null,null],[5,"is_loaded","gl::GetSynciv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexImage","gl","",null,null],[5,"is_loaded","gl::GetTexImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexLevelParameterfv","gl","",null,null],[5,"is_loaded","gl::GetTexLevelParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexLevelParameteriv","gl","",null,null],[5,"is_loaded","gl::GetTexLevelParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexParameterIiv","gl","",null,null],[5,"is_loaded","gl::GetTexParameterIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexParameterIuiv","gl","",null,null],[5,"is_loaded","gl::GetTexParameterIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexParameterfv","gl","",null,null],[5,"is_loaded","gl::GetTexParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexParameteriv","gl","",null,null],[5,"is_loaded","gl::GetTexParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTextureImage","gl","",null,null],[5,"is_loaded","gl::GetTextureImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTextureLevelParameterfv","gl","",null,null],[5,"is_loaded","gl::GetTextureLevelParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTextureLevelParameteriv","gl","",null,null],[5,"is_loaded","gl::GetTextureLevelParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTextureParameterIiv","gl","",null,null],[5,"is_loaded","gl::GetTextureParameterIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTextureParameterIuiv","gl","",null,null],[5,"is_loaded","gl::GetTextureParameterIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTextureParameterfv","gl","",null,null],[5,"is_loaded","gl::GetTextureParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTextureParameteriv","gl","",null,null],[5,"is_loaded","gl::GetTextureParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTextureSubImage","gl","",null,null],[5,"is_loaded","gl::GetTextureSubImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTransformFeedbackVarying","gl","",null,null],[5,"is_loaded","gl::GetTransformFeedbackVarying","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTransformFeedbacki64_v","gl","",null,null],[5,"is_loaded","gl::GetTransformFeedbacki64_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTransformFeedbacki_v","gl","",null,null],[5,"is_loaded","gl::GetTransformFeedbacki_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTransformFeedbackiv","gl","",null,null],[5,"is_loaded","gl::GetTransformFeedbackiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformBlockIndex","gl","",null,null],[5,"is_loaded","gl::GetUniformBlockIndex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformIndices","gl","",null,null],[5,"is_loaded","gl::GetUniformIndices","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformLocation","gl","",null,null],[5,"is_loaded","gl::GetUniformLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformSubroutineuiv","gl","",null,null],[5,"is_loaded","gl::GetUniformSubroutineuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformdv","gl","",null,null],[5,"is_loaded","gl::GetUniformdv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformfv","gl","",null,null],[5,"is_loaded","gl::GetUniformfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformiv","gl","",null,null],[5,"is_loaded","gl::GetUniformiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformuiv","gl","",null,null],[5,"is_loaded","gl::GetUniformuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexArrayIndexed64iv","gl","",null,null],[5,"is_loaded","gl::GetVertexArrayIndexed64iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexArrayIndexediv","gl","",null,null],[5,"is_loaded","gl::GetVertexArrayIndexediv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexArrayiv","gl","",null,null],[5,"is_loaded","gl::GetVertexArrayiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribIiv","gl","",null,null],[5,"is_loaded","gl::GetVertexAttribIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribIuiv","gl","",null,null],[5,"is_loaded","gl::GetVertexAttribIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribLdv","gl","",null,null],[5,"is_loaded","gl::GetVertexAttribLdv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribPointerv","gl","",null,null],[5,"is_loaded","gl::GetVertexAttribPointerv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribdv","gl","",null,null],[5,"is_loaded","gl::GetVertexAttribdv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribfv","gl","",null,null],[5,"is_loaded","gl::GetVertexAttribfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribiv","gl","",null,null],[5,"is_loaded","gl::GetVertexAttribiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnColorTable","gl","",null,null],[5,"is_loaded","gl::GetnColorTable","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnCompressedTexImage","gl","",null,null],[5,"is_loaded","gl::GetnCompressedTexImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnConvolutionFilter","gl","",null,null],[5,"is_loaded","gl::GetnConvolutionFilter","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnHistogram","gl","",null,null],[5,"is_loaded","gl::GetnHistogram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnMapdv","gl","",null,null],[5,"is_loaded","gl::GetnMapdv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnMapfv","gl","",null,null],[5,"is_loaded","gl::GetnMapfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnMapiv","gl","",null,null],[5,"is_loaded","gl::GetnMapiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnMinmax","gl","",null,null],[5,"is_loaded","gl::GetnMinmax","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnPixelMapfv","gl","",null,null],[5,"is_loaded","gl::GetnPixelMapfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnPixelMapuiv","gl","",null,null],[5,"is_loaded","gl::GetnPixelMapuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnPixelMapusv","gl","",null,null],[5,"is_loaded","gl::GetnPixelMapusv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnPolygonStipple","gl","",null,null],[5,"is_loaded","gl::GetnPolygonStipple","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnSeparableFilter","gl","",null,null],[5,"is_loaded","gl::GetnSeparableFilter","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnTexImage","gl","",null,null],[5,"is_loaded","gl::GetnTexImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnUniformdv","gl","",null,null],[5,"is_loaded","gl::GetnUniformdv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnUniformfv","gl","",null,null],[5,"is_loaded","gl::GetnUniformfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnUniformiv","gl","",null,null],[5,"is_loaded","gl::GetnUniformiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetnUniformuiv","gl","",null,null],[5,"is_loaded","gl::GetnUniformuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Hint","gl","",null,null],[5,"is_loaded","gl::Hint","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"InvalidateBufferData","gl","",null,null],[5,"is_loaded","gl::InvalidateBufferData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"InvalidateBufferSubData","gl","",null,null],[5,"is_loaded","gl::InvalidateBufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"InvalidateFramebuffer","gl","",null,null],[5,"is_loaded","gl::InvalidateFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"InvalidateNamedFramebufferData","gl","",null,null],[5,"is_loaded","gl::InvalidateNamedFramebufferData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"InvalidateNamedFramebufferSubData","gl","",null,null],[5,"is_loaded","gl::InvalidateNamedFramebufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"InvalidateSubFramebuffer","gl","",null,null],[5,"is_loaded","gl::InvalidateSubFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"InvalidateTexImage","gl","",null,null],[5,"is_loaded","gl::InvalidateTexImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"InvalidateTexSubImage","gl","",null,null],[5,"is_loaded","gl::InvalidateTexSubImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsBuffer","gl","",null,null],[5,"is_loaded","gl::IsBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsEnabled","gl","",null,null],[5,"is_loaded","gl::IsEnabled","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsEnabledi","gl","",null,null],[5,"is_loaded","gl::IsEnabledi","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsFramebuffer","gl","",null,null],[5,"is_loaded","gl::IsFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsProgram","gl","",null,null],[5,"is_loaded","gl::IsProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsProgramPipeline","gl","",null,null],[5,"is_loaded","gl::IsProgramPipeline","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsQuery","gl","",null,null],[5,"is_loaded","gl::IsQuery","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsRenderbuffer","gl","",null,null],[5,"is_loaded","gl::IsRenderbuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsSampler","gl","",null,null],[5,"is_loaded","gl::IsSampler","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsShader","gl","",null,null],[5,"is_loaded","gl::IsShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsSync","gl","",null,null],[5,"is_loaded","gl::IsSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsTexture","gl","",null,null],[5,"is_loaded","gl::IsTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsTransformFeedback","gl","",null,null],[5,"is_loaded","gl::IsTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsVertexArray","gl","",null,null],[5,"is_loaded","gl::IsVertexArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"LineWidth","gl","",null,null],[5,"is_loaded","gl::LineWidth","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"LinkProgram","gl","",null,null],[5,"is_loaded","gl::LinkProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"LogicOp","gl","",null,null],[5,"is_loaded","gl::LogicOp","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MapBuffer","gl","",null,null],[5,"is_loaded","gl::MapBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MapBufferRange","gl","",null,null],[5,"is_loaded","gl::MapBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MapNamedBuffer","gl","",null,null],[5,"is_loaded","gl::MapNamedBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MapNamedBufferRange","gl","",null,null],[5,"is_loaded","gl::MapNamedBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MemoryBarrier","gl","",null,null],[5,"is_loaded","gl::MemoryBarrier","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MemoryBarrierByRegion","gl","",null,null],[5,"is_loaded","gl::MemoryBarrierByRegion","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MinSampleShading","gl","",null,null],[5,"is_loaded","gl::MinSampleShading","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiDrawArrays","gl","",null,null],[5,"is_loaded","gl::MultiDrawArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiDrawArraysIndirect","gl","",null,null],[5,"is_loaded","gl::MultiDrawArraysIndirect","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiDrawElements","gl","",null,null],[5,"is_loaded","gl::MultiDrawElements","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiDrawElementsBaseVertex","gl","",null,null],[5,"is_loaded","gl::MultiDrawElementsBaseVertex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiDrawElementsIndirect","gl","",null,null],[5,"is_loaded","gl::MultiDrawElementsIndirect","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP1ui","gl","",null,null],[5,"is_loaded","gl::MultiTexCoordP1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP1uiv","gl","",null,null],[5,"is_loaded","gl::MultiTexCoordP1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP2ui","gl","",null,null],[5,"is_loaded","gl::MultiTexCoordP2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP2uiv","gl","",null,null],[5,"is_loaded","gl::MultiTexCoordP2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP3ui","gl","",null,null],[5,"is_loaded","gl::MultiTexCoordP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP3uiv","gl","",null,null],[5,"is_loaded","gl::MultiTexCoordP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP4ui","gl","",null,null],[5,"is_loaded","gl::MultiTexCoordP4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP4uiv","gl","",null,null],[5,"is_loaded","gl::MultiTexCoordP4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedBufferData","gl","",null,null],[5,"is_loaded","gl::NamedBufferData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedBufferStorage","gl","",null,null],[5,"is_loaded","gl::NamedBufferStorage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedBufferSubData","gl","",null,null],[5,"is_loaded","gl::NamedBufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedFramebufferDrawBuffer","gl","",null,null],[5,"is_loaded","gl::NamedFramebufferDrawBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedFramebufferDrawBuffers","gl","",null,null],[5,"is_loaded","gl::NamedFramebufferDrawBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedFramebufferParameteri","gl","",null,null],[5,"is_loaded","gl::NamedFramebufferParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedFramebufferReadBuffer","gl","",null,null],[5,"is_loaded","gl::NamedFramebufferReadBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedFramebufferRenderbuffer","gl","",null,null],[5,"is_loaded","gl::NamedFramebufferRenderbuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedFramebufferTexture","gl","",null,null],[5,"is_loaded","gl::NamedFramebufferTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedFramebufferTextureLayer","gl","",null,null],[5,"is_loaded","gl::NamedFramebufferTextureLayer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedRenderbufferStorage","gl","",null,null],[5,"is_loaded","gl::NamedRenderbufferStorage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NamedRenderbufferStorageMultisample","gl","",null,null],[5,"is_loaded","gl::NamedRenderbufferStorageMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NormalP3ui","gl","",null,null],[5,"is_loaded","gl::NormalP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NormalP3uiv","gl","",null,null],[5,"is_loaded","gl::NormalP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ObjectLabel","gl","",null,null],[5,"is_loaded","gl::ObjectLabel","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ObjectPtrLabel","gl","",null,null],[5,"is_loaded","gl::ObjectPtrLabel","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PatchParameterfv","gl","",null,null],[5,"is_loaded","gl::PatchParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PatchParameteri","gl","",null,null],[5,"is_loaded","gl::PatchParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PauseTransformFeedback","gl","",null,null],[5,"is_loaded","gl::PauseTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PixelStoref","gl","",null,null],[5,"is_loaded","gl::PixelStoref","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PixelStorei","gl","",null,null],[5,"is_loaded","gl::PixelStorei","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PointParameterf","gl","",null,null],[5,"is_loaded","gl::PointParameterf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PointParameterfv","gl","",null,null],[5,"is_loaded","gl::PointParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PointParameteri","gl","",null,null],[5,"is_loaded","gl::PointParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PointParameteriv","gl","",null,null],[5,"is_loaded","gl::PointParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PointSize","gl","",null,null],[5,"is_loaded","gl::PointSize","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PolygonMode","gl","",null,null],[5,"is_loaded","gl::PolygonMode","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PolygonOffset","gl","",null,null],[5,"is_loaded","gl::PolygonOffset","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PopDebugGroup","gl","",null,null],[5,"is_loaded","gl::PopDebugGroup","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PrimitiveRestartIndex","gl","",null,null],[5,"is_loaded","gl::PrimitiveRestartIndex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramBinary","gl","",null,null],[5,"is_loaded","gl::ProgramBinary","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramParameteri","gl","",null,null],[5,"is_loaded","gl::ProgramParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1d","gl","",null,null],[5,"is_loaded","gl::ProgramUniform1d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform1dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1f","gl","",null,null],[5,"is_loaded","gl::ProgramUniform1f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform1fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1i","gl","",null,null],[5,"is_loaded","gl::ProgramUniform1i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1iv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform1iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1ui","gl","",null,null],[5,"is_loaded","gl::ProgramUniform1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform1uiv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2d","gl","",null,null],[5,"is_loaded","gl::ProgramUniform2d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform2dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2f","gl","",null,null],[5,"is_loaded","gl::ProgramUniform2f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2i","gl","",null,null],[5,"is_loaded","gl::ProgramUniform2i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2iv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform2iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2ui","gl","",null,null],[5,"is_loaded","gl::ProgramUniform2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform2uiv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3d","gl","",null,null],[5,"is_loaded","gl::ProgramUniform3d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform3dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3f","gl","",null,null],[5,"is_loaded","gl::ProgramUniform3f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3i","gl","",null,null],[5,"is_loaded","gl::ProgramUniform3i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3iv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform3iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3ui","gl","",null,null],[5,"is_loaded","gl::ProgramUniform3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform3uiv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4d","gl","",null,null],[5,"is_loaded","gl::ProgramUniform4d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform4dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4f","gl","",null,null],[5,"is_loaded","gl::ProgramUniform4f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4i","gl","",null,null],[5,"is_loaded","gl::ProgramUniform4i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4iv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform4iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4ui","gl","",null,null],[5,"is_loaded","gl::ProgramUniform4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniform4uiv","gl","",null,null],[5,"is_loaded","gl::ProgramUniform4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix2dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix2dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix2fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix2x3dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix2x3dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix2x3fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix2x3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix2x4dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix2x4dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix2x4fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix2x4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix3dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix3dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix3fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix3x2dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix3x2dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix3x2fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix3x2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix3x4dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix3x4dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix3x4fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix3x4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix4dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix4dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix4fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix4x2dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix4x2dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix4x2fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix4x2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix4x3dv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix4x3dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProgramUniformMatrix4x3fv","gl","",null,null],[5,"is_loaded","gl::ProgramUniformMatrix4x3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProvokingVertex","gl","",null,null],[5,"is_loaded","gl::ProvokingVertex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PushDebugGroup","gl","",null,null],[5,"is_loaded","gl::PushDebugGroup","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"QueryCounter","gl","",null,null],[5,"is_loaded","gl::QueryCounter","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ReadBuffer","gl","",null,null],[5,"is_loaded","gl::ReadBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ReadPixels","gl","",null,null],[5,"is_loaded","gl::ReadPixels","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ReadnPixels","gl","",null,null],[5,"is_loaded","gl::ReadnPixels","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ReleaseShaderCompiler","gl","",null,null],[5,"is_loaded","gl::ReleaseShaderCompiler","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"RenderbufferStorage","gl","",null,null],[5,"is_loaded","gl::RenderbufferStorage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"RenderbufferStorageMultisample","gl","",null,null],[5,"is_loaded","gl::RenderbufferStorageMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ResumeTransformFeedback","gl","",null,null],[5,"is_loaded","gl::ResumeTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SampleCoverage","gl","",null,null],[5,"is_loaded","gl::SampleCoverage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SampleMaski","gl","",null,null],[5,"is_loaded","gl::SampleMaski","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameterIiv","gl","",null,null],[5,"is_loaded","gl::SamplerParameterIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameterIuiv","gl","",null,null],[5,"is_loaded","gl::SamplerParameterIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameterf","gl","",null,null],[5,"is_loaded","gl::SamplerParameterf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameterfv","gl","",null,null],[5,"is_loaded","gl::SamplerParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameteri","gl","",null,null],[5,"is_loaded","gl::SamplerParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameteriv","gl","",null,null],[5,"is_loaded","gl::SamplerParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Scissor","gl","",null,null],[5,"is_loaded","gl::Scissor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ScissorArrayv","gl","",null,null],[5,"is_loaded","gl::ScissorArrayv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ScissorIndexed","gl","",null,null],[5,"is_loaded","gl::ScissorIndexed","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ScissorIndexedv","gl","",null,null],[5,"is_loaded","gl::ScissorIndexedv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SecondaryColorP3ui","gl","",null,null],[5,"is_loaded","gl::SecondaryColorP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SecondaryColorP3uiv","gl","",null,null],[5,"is_loaded","gl::SecondaryColorP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ShaderBinary","gl","",null,null],[5,"is_loaded","gl::ShaderBinary","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ShaderSource","gl","",null,null],[5,"is_loaded","gl::ShaderSource","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ShaderStorageBlockBinding","gl","",null,null],[5,"is_loaded","gl::ShaderStorageBlockBinding","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilFunc","gl","",null,null],[5,"is_loaded","gl::StencilFunc","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilFuncSeparate","gl","",null,null],[5,"is_loaded","gl::StencilFuncSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilMask","gl","",null,null],[5,"is_loaded","gl::StencilMask","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilMaskSeparate","gl","",null,null],[5,"is_loaded","gl::StencilMaskSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilOp","gl","",null,null],[5,"is_loaded","gl::StencilOp","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilOpSeparate","gl","",null,null],[5,"is_loaded","gl::StencilOpSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexBuffer","gl","",null,null],[5,"is_loaded","gl::TexBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexBufferRange","gl","",null,null],[5,"is_loaded","gl::TexBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP1ui","gl","",null,null],[5,"is_loaded","gl::TexCoordP1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP1uiv","gl","",null,null],[5,"is_loaded","gl::TexCoordP1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP2ui","gl","",null,null],[5,"is_loaded","gl::TexCoordP2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP2uiv","gl","",null,null],[5,"is_loaded","gl::TexCoordP2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP3ui","gl","",null,null],[5,"is_loaded","gl::TexCoordP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP3uiv","gl","",null,null],[5,"is_loaded","gl::TexCoordP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP4ui","gl","",null,null],[5,"is_loaded","gl::TexCoordP4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP4uiv","gl","",null,null],[5,"is_loaded","gl::TexCoordP4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage1D","gl","",null,null],[5,"is_loaded","gl::TexImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage2D","gl","",null,null],[5,"is_loaded","gl::TexImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage2DMultisample","gl","",null,null],[5,"is_loaded","gl::TexImage2DMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage3D","gl","",null,null],[5,"is_loaded","gl::TexImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage3DMultisample","gl","",null,null],[5,"is_loaded","gl::TexImage3DMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameterIiv","gl","",null,null],[5,"is_loaded","gl::TexParameterIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameterIuiv","gl","",null,null],[5,"is_loaded","gl::TexParameterIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameterf","gl","",null,null],[5,"is_loaded","gl::TexParameterf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameterfv","gl","",null,null],[5,"is_loaded","gl::TexParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameteri","gl","",null,null],[5,"is_loaded","gl::TexParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameteriv","gl","",null,null],[5,"is_loaded","gl::TexParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexStorage1D","gl","",null,null],[5,"is_loaded","gl::TexStorage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexStorage2D","gl","",null,null],[5,"is_loaded","gl::TexStorage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexStorage2DMultisample","gl","",null,null],[5,"is_loaded","gl::TexStorage2DMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexStorage3D","gl","",null,null],[5,"is_loaded","gl::TexStorage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexStorage3DMultisample","gl","",null,null],[5,"is_loaded","gl::TexStorage3DMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexSubImage1D","gl","",null,null],[5,"is_loaded","gl::TexSubImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexSubImage2D","gl","",null,null],[5,"is_loaded","gl::TexSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexSubImage3D","gl","",null,null],[5,"is_loaded","gl::TexSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureBarrier","gl","",null,null],[5,"is_loaded","gl::TextureBarrier","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureBuffer","gl","",null,null],[5,"is_loaded","gl::TextureBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureBufferRange","gl","",null,null],[5,"is_loaded","gl::TextureBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureParameterIiv","gl","",null,null],[5,"is_loaded","gl::TextureParameterIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureParameterIuiv","gl","",null,null],[5,"is_loaded","gl::TextureParameterIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureParameterf","gl","",null,null],[5,"is_loaded","gl::TextureParameterf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureParameterfv","gl","",null,null],[5,"is_loaded","gl::TextureParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureParameteri","gl","",null,null],[5,"is_loaded","gl::TextureParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureParameteriv","gl","",null,null],[5,"is_loaded","gl::TextureParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureStorage1D","gl","",null,null],[5,"is_loaded","gl::TextureStorage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureStorage2D","gl","",null,null],[5,"is_loaded","gl::TextureStorage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureStorage2DMultisample","gl","",null,null],[5,"is_loaded","gl::TextureStorage2DMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureStorage3D","gl","",null,null],[5,"is_loaded","gl::TextureStorage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureStorage3DMultisample","gl","",null,null],[5,"is_loaded","gl::TextureStorage3DMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureSubImage1D","gl","",null,null],[5,"is_loaded","gl::TextureSubImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureSubImage2D","gl","",null,null],[5,"is_loaded","gl::TextureSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureSubImage3D","gl","",null,null],[5,"is_loaded","gl::TextureSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TextureView","gl","",null,null],[5,"is_loaded","gl::TextureView","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TransformFeedbackBufferBase","gl","",null,null],[5,"is_loaded","gl::TransformFeedbackBufferBase","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TransformFeedbackBufferRange","gl","",null,null],[5,"is_loaded","gl::TransformFeedbackBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TransformFeedbackVaryings","gl","",null,null],[5,"is_loaded","gl::TransformFeedbackVaryings","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1d","gl","",null,null],[5,"is_loaded","gl::Uniform1d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1dv","gl","",null,null],[5,"is_loaded","gl::Uniform1dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1f","gl","",null,null],[5,"is_loaded","gl::Uniform1f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1fv","gl","",null,null],[5,"is_loaded","gl::Uniform1fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1i","gl","",null,null],[5,"is_loaded","gl::Uniform1i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1iv","gl","",null,null],[5,"is_loaded","gl::Uniform1iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1ui","gl","",null,null],[5,"is_loaded","gl::Uniform1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1uiv","gl","",null,null],[5,"is_loaded","gl::Uniform1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2d","gl","",null,null],[5,"is_loaded","gl::Uniform2d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2dv","gl","",null,null],[5,"is_loaded","gl::Uniform2dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2f","gl","",null,null],[5,"is_loaded","gl::Uniform2f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2fv","gl","",null,null],[5,"is_loaded","gl::Uniform2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2i","gl","",null,null],[5,"is_loaded","gl::Uniform2i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2iv","gl","",null,null],[5,"is_loaded","gl::Uniform2iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2ui","gl","",null,null],[5,"is_loaded","gl::Uniform2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2uiv","gl","",null,null],[5,"is_loaded","gl::Uniform2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3d","gl","",null,null],[5,"is_loaded","gl::Uniform3d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3dv","gl","",null,null],[5,"is_loaded","gl::Uniform3dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3f","gl","",null,null],[5,"is_loaded","gl::Uniform3f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3fv","gl","",null,null],[5,"is_loaded","gl::Uniform3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3i","gl","",null,null],[5,"is_loaded","gl::Uniform3i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3iv","gl","",null,null],[5,"is_loaded","gl::Uniform3iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3ui","gl","",null,null],[5,"is_loaded","gl::Uniform3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3uiv","gl","",null,null],[5,"is_loaded","gl::Uniform3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4d","gl","",null,null],[5,"is_loaded","gl::Uniform4d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4dv","gl","",null,null],[5,"is_loaded","gl::Uniform4dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4f","gl","",null,null],[5,"is_loaded","gl::Uniform4f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4fv","gl","",null,null],[5,"is_loaded","gl::Uniform4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4i","gl","",null,null],[5,"is_loaded","gl::Uniform4i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4iv","gl","",null,null],[5,"is_loaded","gl::Uniform4iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4ui","gl","",null,null],[5,"is_loaded","gl::Uniform4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4uiv","gl","",null,null],[5,"is_loaded","gl::Uniform4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformBlockBinding","gl","",null,null],[5,"is_loaded","gl::UniformBlockBinding","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2dv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix2dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2fv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2x3dv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix2x3dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2x3fv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix2x3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2x4dv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix2x4dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2x4fv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix2x4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3dv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix3dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3fv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3x2dv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix3x2dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3x2fv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix3x2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3x4dv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix3x4dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3x4fv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix3x4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4dv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix4dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4fv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4x2dv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix4x2dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4x2fv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix4x2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4x3dv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix4x3dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4x3fv","gl","",null,null],[5,"is_loaded","gl::UniformMatrix4x3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformSubroutinesuiv","gl","",null,null],[5,"is_loaded","gl::UniformSubroutinesuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UnmapBuffer","gl","",null,null],[5,"is_loaded","gl::UnmapBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UnmapNamedBuffer","gl","",null,null],[5,"is_loaded","gl::UnmapNamedBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UseProgram","gl","",null,null],[5,"is_loaded","gl::UseProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UseProgramStages","gl","",null,null],[5,"is_loaded","gl::UseProgramStages","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ValidateProgram","gl","",null,null],[5,"is_loaded","gl::ValidateProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ValidateProgramPipeline","gl","",null,null],[5,"is_loaded","gl::ValidateProgramPipeline","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexArrayAttribBinding","gl","",null,null],[5,"is_loaded","gl::VertexArrayAttribBinding","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexArrayAttribFormat","gl","",null,null],[5,"is_loaded","gl::VertexArrayAttribFormat","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexArrayAttribIFormat","gl","",null,null],[5,"is_loaded","gl::VertexArrayAttribIFormat","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexArrayAttribLFormat","gl","",null,null],[5,"is_loaded","gl::VertexArrayAttribLFormat","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexArrayBindingDivisor","gl","",null,null],[5,"is_loaded","gl::VertexArrayBindingDivisor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexArrayElementBuffer","gl","",null,null],[5,"is_loaded","gl::VertexArrayElementBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexArrayVertexBuffer","gl","",null,null],[5,"is_loaded","gl::VertexArrayVertexBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexArrayVertexBuffers","gl","",null,null],[5,"is_loaded","gl::VertexArrayVertexBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1d","gl","",null,null],[5,"is_loaded","gl::VertexAttrib1d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1dv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib1dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1f","gl","",null,null],[5,"is_loaded","gl::VertexAttrib1f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1fv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib1fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1s","gl","",null,null],[5,"is_loaded","gl::VertexAttrib1s","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1sv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib1sv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2d","gl","",null,null],[5,"is_loaded","gl::VertexAttrib2d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2dv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib2dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2f","gl","",null,null],[5,"is_loaded","gl::VertexAttrib2f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2fv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2s","gl","",null,null],[5,"is_loaded","gl::VertexAttrib2s","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2sv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib2sv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3d","gl","",null,null],[5,"is_loaded","gl::VertexAttrib3d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3dv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib3dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3f","gl","",null,null],[5,"is_loaded","gl::VertexAttrib3f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3fv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3s","gl","",null,null],[5,"is_loaded","gl::VertexAttrib3s","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3sv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib3sv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nbv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4Nbv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Niv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4Niv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nsv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4Nsv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nub","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4Nub","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nubv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4Nubv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nuiv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4Nuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nusv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4Nusv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4bv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4bv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4d","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4dv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4f","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4fv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4iv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4s","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4s","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4sv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4sv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4ubv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4ubv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4uiv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4usv","gl","",null,null],[5,"is_loaded","gl::VertexAttrib4usv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribBinding","gl","",null,null],[5,"is_loaded","gl::VertexAttribBinding","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribDivisor","gl","",null,null],[5,"is_loaded","gl::VertexAttribDivisor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribFormat","gl","",null,null],[5,"is_loaded","gl::VertexAttribFormat","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI1i","gl","",null,null],[5,"is_loaded","gl::VertexAttribI1i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI1iv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI1iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI1ui","gl","",null,null],[5,"is_loaded","gl::VertexAttribI1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI1uiv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI2i","gl","",null,null],[5,"is_loaded","gl::VertexAttribI2i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI2iv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI2iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI2ui","gl","",null,null],[5,"is_loaded","gl::VertexAttribI2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI2uiv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI3i","gl","",null,null],[5,"is_loaded","gl::VertexAttribI3i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI3iv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI3iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI3ui","gl","",null,null],[5,"is_loaded","gl::VertexAttribI3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI3uiv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4bv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI4bv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4i","gl","",null,null],[5,"is_loaded","gl::VertexAttribI4i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4iv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI4iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4sv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI4sv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4ubv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI4ubv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4ui","gl","",null,null],[5,"is_loaded","gl::VertexAttribI4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4uiv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4usv","gl","",null,null],[5,"is_loaded","gl::VertexAttribI4usv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribIFormat","gl","",null,null],[5,"is_loaded","gl::VertexAttribIFormat","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribIPointer","gl","",null,null],[5,"is_loaded","gl::VertexAttribIPointer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribL1d","gl","",null,null],[5,"is_loaded","gl::VertexAttribL1d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribL1dv","gl","",null,null],[5,"is_loaded","gl::VertexAttribL1dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribL2d","gl","",null,null],[5,"is_loaded","gl::VertexAttribL2d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribL2dv","gl","",null,null],[5,"is_loaded","gl::VertexAttribL2dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribL3d","gl","",null,null],[5,"is_loaded","gl::VertexAttribL3d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribL3dv","gl","",null,null],[5,"is_loaded","gl::VertexAttribL3dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribL4d","gl","",null,null],[5,"is_loaded","gl::VertexAttribL4d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribL4dv","gl","",null,null],[5,"is_loaded","gl::VertexAttribL4dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribLFormat","gl","",null,null],[5,"is_loaded","gl::VertexAttribLFormat","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribLPointer","gl","",null,null],[5,"is_loaded","gl::VertexAttribLPointer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP1ui","gl","",null,null],[5,"is_loaded","gl::VertexAttribP1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP1uiv","gl","",null,null],[5,"is_loaded","gl::VertexAttribP1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP2ui","gl","",null,null],[5,"is_loaded","gl::VertexAttribP2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP2uiv","gl","",null,null],[5,"is_loaded","gl::VertexAttribP2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP3ui","gl","",null,null],[5,"is_loaded","gl::VertexAttribP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP3uiv","gl","",null,null],[5,"is_loaded","gl::VertexAttribP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP4ui","gl","",null,null],[5,"is_loaded","gl::VertexAttribP4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP4uiv","gl","",null,null],[5,"is_loaded","gl::VertexAttribP4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribPointer","gl","",null,null],[5,"is_loaded","gl::VertexAttribPointer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexBindingDivisor","gl","",null,null],[5,"is_loaded","gl::VertexBindingDivisor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP2ui","gl","",null,null],[5,"is_loaded","gl::VertexP2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP2uiv","gl","",null,null],[5,"is_loaded","gl::VertexP2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP3ui","gl","",null,null],[5,"is_loaded","gl::VertexP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP3uiv","gl","",null,null],[5,"is_loaded","gl::VertexP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP4ui","gl","",null,null],[5,"is_loaded","gl::VertexP4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP4uiv","gl","",null,null],[5,"is_loaded","gl::VertexP4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Viewport","gl","",null,null],[5,"is_loaded","gl::Viewport","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ViewportArrayv","gl","",null,null],[5,"is_loaded","gl::ViewportArrayv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ViewportIndexedf","gl","",null,null],[5,"is_loaded","gl::ViewportIndexedf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ViewportIndexedfv","gl","",null,null],[5,"is_loaded","gl::ViewportIndexedfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"WaitSync","gl","",null,null],[5,"is_loaded","gl::WaitSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[17,"DEPTH_BUFFER_BIT","gl","",null,null],[17,"STENCIL_BUFFER_BIT","","",null,null],[17,"COLOR_BUFFER_BIT","","",null,null],[17,"CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT","","",null,null],[17,"CONTEXT_FLAG_DEBUG_BIT","","",null,null],[17,"CONTEXT_FLAG_ROBUST_ACCESS_BIT","","",null,null],[17,"CONTEXT_CORE_PROFILE_BIT","","",null,null],[17,"CONTEXT_COMPATIBILITY_PROFILE_BIT","","",null,null],[17,"MAP_READ_BIT","","",null,null],[17,"MAP_WRITE_BIT","","",null,null],[17,"MAP_INVALIDATE_RANGE_BIT","","",null,null],[17,"MAP_INVALIDATE_BUFFER_BIT","","",null,null],[17,"MAP_FLUSH_EXPLICIT_BIT","","",null,null],[17,"MAP_UNSYNCHRONIZED_BIT","","",null,null],[17,"MAP_PERSISTENT_BIT","","",null,null],[17,"MAP_COHERENT_BIT","","",null,null],[17,"DYNAMIC_STORAGE_BIT","","",null,null],[17,"CLIENT_STORAGE_BIT","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_BARRIER_BIT","","",null,null],[17,"ELEMENT_ARRAY_BARRIER_BIT","","",null,null],[17,"UNIFORM_BARRIER_BIT","","",null,null],[17,"TEXTURE_FETCH_BARRIER_BIT","","",null,null],[17,"SHADER_IMAGE_ACCESS_BARRIER_BIT","","",null,null],[17,"COMMAND_BARRIER_BIT","","",null,null],[17,"PIXEL_BUFFER_BARRIER_BIT","","",null,null],[17,"TEXTURE_UPDATE_BARRIER_BIT","","",null,null],[17,"BUFFER_UPDATE_BARRIER_BIT","","",null,null],[17,"FRAMEBUFFER_BARRIER_BIT","","",null,null],[17,"TRANSFORM_FEEDBACK_BARRIER_BIT","","",null,null],[17,"ATOMIC_COUNTER_BARRIER_BIT","","",null,null],[17,"SHADER_STORAGE_BARRIER_BIT","","",null,null],[17,"CLIENT_MAPPED_BUFFER_BARRIER_BIT","","",null,null],[17,"QUERY_BUFFER_BARRIER_BIT","","",null,null],[17,"ALL_BARRIER_BITS","","",null,null],[17,"SYNC_FLUSH_COMMANDS_BIT","","",null,null],[17,"VERTEX_SHADER_BIT","","",null,null],[17,"FRAGMENT_SHADER_BIT","","",null,null],[17,"GEOMETRY_SHADER_BIT","","",null,null],[17,"TESS_CONTROL_SHADER_BIT","","",null,null],[17,"TESS_EVALUATION_SHADER_BIT","","",null,null],[17,"COMPUTE_SHADER_BIT","","",null,null],[17,"ALL_SHADER_BITS","","",null,null],[17,"FALSE","","",null,null],[17,"NO_ERROR","","",null,null],[17,"ZERO","","",null,null],[17,"NONE","","",null,null],[17,"TRUE","","",null,null],[17,"ONE","","",null,null],[17,"INVALID_INDEX","","",null,null],[17,"TIMEOUT_IGNORED","","",null,null],[17,"POINTS","","",null,null],[17,"LINES","","",null,null],[17,"LINE_LOOP","","",null,null],[17,"LINE_STRIP","","",null,null],[17,"TRIANGLES","","",null,null],[17,"TRIANGLE_STRIP","","",null,null],[17,"TRIANGLE_FAN","","",null,null],[17,"LINES_ADJACENCY","","",null,null],[17,"LINE_STRIP_ADJACENCY","","",null,null],[17,"TRIANGLES_ADJACENCY","","",null,null],[17,"TRIANGLE_STRIP_ADJACENCY","","",null,null],[17,"PATCHES","","",null,null],[17,"NEVER","","",null,null],[17,"LESS","","",null,null],[17,"EQUAL","","",null,null],[17,"LEQUAL","","",null,null],[17,"GREATER","","",null,null],[17,"NOTEQUAL","","",null,null],[17,"GEQUAL","","",null,null],[17,"ALWAYS","","",null,null],[17,"SRC_COLOR","","",null,null],[17,"ONE_MINUS_SRC_COLOR","","",null,null],[17,"SRC_ALPHA","","",null,null],[17,"ONE_MINUS_SRC_ALPHA","","",null,null],[17,"DST_ALPHA","","",null,null],[17,"ONE_MINUS_DST_ALPHA","","",null,null],[17,"DST_COLOR","","",null,null],[17,"ONE_MINUS_DST_COLOR","","",null,null],[17,"SRC_ALPHA_SATURATE","","",null,null],[17,"FRONT_LEFT","","",null,null],[17,"FRONT_RIGHT","","",null,null],[17,"BACK_LEFT","","",null,null],[17,"BACK_RIGHT","","",null,null],[17,"FRONT","","",null,null],[17,"BACK","","",null,null],[17,"LEFT","","",null,null],[17,"RIGHT","","",null,null],[17,"FRONT_AND_BACK","","",null,null],[17,"INVALID_ENUM","","",null,null],[17,"INVALID_VALUE","","",null,null],[17,"INVALID_OPERATION","","",null,null],[17,"OUT_OF_MEMORY","","",null,null],[17,"INVALID_FRAMEBUFFER_OPERATION","","",null,null],[17,"CONTEXT_LOST","","",null,null],[17,"CW","","",null,null],[17,"CCW","","",null,null],[17,"POINT_SIZE","","",null,null],[17,"POINT_SIZE_RANGE","","",null,null],[17,"SMOOTH_POINT_SIZE_RANGE","","",null,null],[17,"POINT_SIZE_GRANULARITY","","",null,null],[17,"SMOOTH_POINT_SIZE_GRANULARITY","","",null,null],[17,"LINE_SMOOTH","","",null,null],[17,"LINE_WIDTH","","",null,null],[17,"LINE_WIDTH_RANGE","","",null,null],[17,"SMOOTH_LINE_WIDTH_RANGE","","",null,null],[17,"LINE_WIDTH_GRANULARITY","","",null,null],[17,"SMOOTH_LINE_WIDTH_GRANULARITY","","",null,null],[17,"POLYGON_MODE","","",null,null],[17,"POLYGON_SMOOTH","","",null,null],[17,"CULL_FACE","","",null,null],[17,"CULL_FACE_MODE","","",null,null],[17,"FRONT_FACE","","",null,null],[17,"DEPTH_RANGE","","",null,null],[17,"DEPTH_TEST","","",null,null],[17,"DEPTH_WRITEMASK","","",null,null],[17,"DEPTH_CLEAR_VALUE","","",null,null],[17,"DEPTH_FUNC","","",null,null],[17,"STENCIL_TEST","","",null,null],[17,"STENCIL_CLEAR_VALUE","","",null,null],[17,"STENCIL_FUNC","","",null,null],[17,"STENCIL_VALUE_MASK","","",null,null],[17,"STENCIL_FAIL","","",null,null],[17,"STENCIL_PASS_DEPTH_FAIL","","",null,null],[17,"STENCIL_PASS_DEPTH_PASS","","",null,null],[17,"STENCIL_REF","","",null,null],[17,"STENCIL_WRITEMASK","","",null,null],[17,"VIEWPORT","","",null,null],[17,"DITHER","","",null,null],[17,"BLEND_DST","","",null,null],[17,"BLEND_SRC","","",null,null],[17,"BLEND","","",null,null],[17,"LOGIC_OP_MODE","","",null,null],[17,"COLOR_LOGIC_OP","","",null,null],[17,"DRAW_BUFFER","","",null,null],[17,"READ_BUFFER","","",null,null],[17,"SCISSOR_BOX","","",null,null],[17,"SCISSOR_TEST","","",null,null],[17,"COLOR_CLEAR_VALUE","","",null,null],[17,"COLOR_WRITEMASK","","",null,null],[17,"DOUBLEBUFFER","","",null,null],[17,"STEREO","","",null,null],[17,"LINE_SMOOTH_HINT","","",null,null],[17,"POLYGON_SMOOTH_HINT","","",null,null],[17,"UNPACK_SWAP_BYTES","","",null,null],[17,"UNPACK_LSB_FIRST","","",null,null],[17,"UNPACK_ROW_LENGTH","","",null,null],[17,"UNPACK_SKIP_ROWS","","",null,null],[17,"UNPACK_SKIP_PIXELS","","",null,null],[17,"UNPACK_ALIGNMENT","","",null,null],[17,"PACK_SWAP_BYTES","","",null,null],[17,"PACK_LSB_FIRST","","",null,null],[17,"PACK_ROW_LENGTH","","",null,null],[17,"PACK_SKIP_ROWS","","",null,null],[17,"PACK_SKIP_PIXELS","","",null,null],[17,"PACK_ALIGNMENT","","",null,null],[17,"MAX_CLIP_DISTANCES","","",null,null],[17,"MAX_TEXTURE_SIZE","","",null,null],[17,"MAX_VIEWPORT_DIMS","","",null,null],[17,"SUBPIXEL_BITS","","",null,null],[17,"TEXTURE_1D","","",null,null],[17,"TEXTURE_2D","","",null,null],[17,"TEXTURE_WIDTH","","",null,null],[17,"TEXTURE_HEIGHT","","",null,null],[17,"TEXTURE_INTERNAL_FORMAT","","",null,null],[17,"TEXTURE_BORDER_COLOR","","",null,null],[17,"TEXTURE_TARGET","","",null,null],[17,"DONT_CARE","","",null,null],[17,"FASTEST","","",null,null],[17,"NICEST","","",null,null],[17,"BYTE","","",null,null],[17,"UNSIGNED_BYTE","","",null,null],[17,"SHORT","","",null,null],[17,"UNSIGNED_SHORT","","",null,null],[17,"INT","","",null,null],[17,"UNSIGNED_INT","","",null,null],[17,"FLOAT","","",null,null],[17,"DOUBLE","","",null,null],[17,"HALF_FLOAT","","",null,null],[17,"FIXED","","",null,null],[17,"CLEAR","","",null,null],[17,"AND","","",null,null],[17,"AND_REVERSE","","",null,null],[17,"COPY","","",null,null],[17,"AND_INVERTED","","",null,null],[17,"NOOP","","",null,null],[17,"XOR","","",null,null],[17,"OR","","",null,null],[17,"NOR","","",null,null],[17,"EQUIV","","",null,null],[17,"INVERT","","",null,null],[17,"OR_REVERSE","","",null,null],[17,"COPY_INVERTED","","",null,null],[17,"OR_INVERTED","","",null,null],[17,"NAND","","",null,null],[17,"SET","","",null,null],[17,"TEXTURE","","",null,null],[17,"COLOR","","",null,null],[17,"DEPTH","","",null,null],[17,"STENCIL","","",null,null],[17,"STENCIL_INDEX","","",null,null],[17,"DEPTH_COMPONENT","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"RGB","","",null,null],[17,"RGBA","","",null,null],[17,"POINT","","",null,null],[17,"LINE","","",null,null],[17,"FILL","","",null,null],[17,"KEEP","","",null,null],[17,"REPLACE","","",null,null],[17,"INCR","","",null,null],[17,"DECR","","",null,null],[17,"VENDOR","","",null,null],[17,"RENDERER","","",null,null],[17,"VERSION","","",null,null],[17,"EXTENSIONS","","",null,null],[17,"NEAREST","","",null,null],[17,"LINEAR","","",null,null],[17,"NEAREST_MIPMAP_NEAREST","","",null,null],[17,"LINEAR_MIPMAP_NEAREST","","",null,null],[17,"NEAREST_MIPMAP_LINEAR","","",null,null],[17,"LINEAR_MIPMAP_LINEAR","","",null,null],[17,"TEXTURE_MAG_FILTER","","",null,null],[17,"TEXTURE_MIN_FILTER","","",null,null],[17,"TEXTURE_WRAP_S","","",null,null],[17,"TEXTURE_WRAP_T","","",null,null],[17,"REPEAT","","",null,null],[17,"POLYGON_OFFSET_UNITS","","",null,null],[17,"POLYGON_OFFSET_POINT","","",null,null],[17,"POLYGON_OFFSET_LINE","","",null,null],[17,"R3_G3_B2","","",null,null],[17,"CLIP_DISTANCE0","","",null,null],[17,"CLIP_DISTANCE1","","",null,null],[17,"CLIP_DISTANCE2","","",null,null],[17,"CLIP_DISTANCE3","","",null,null],[17,"CLIP_DISTANCE4","","",null,null],[17,"CLIP_DISTANCE5","","",null,null],[17,"CLIP_DISTANCE6","","",null,null],[17,"CLIP_DISTANCE7","","",null,null],[17,"CONSTANT_COLOR","","",null,null],[17,"ONE_MINUS_CONSTANT_COLOR","","",null,null],[17,"CONSTANT_ALPHA","","",null,null],[17,"ONE_MINUS_CONSTANT_ALPHA","","",null,null],[17,"FUNC_ADD","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[17,"BLEND_EQUATION_RGB","","",null,null],[17,"FUNC_SUBTRACT","","",null,null],[17,"FUNC_REVERSE_SUBTRACT","","",null,null],[17,"UNSIGNED_BYTE_3_3_2","","",null,null],[17,"UNSIGNED_SHORT_4_4_4_4","","",null,null],[17,"UNSIGNED_SHORT_5_5_5_1","","",null,null],[17,"UNSIGNED_INT_8_8_8_8","","",null,null],[17,"UNSIGNED_INT_10_10_10_2","","",null,null],[17,"POLYGON_OFFSET_FILL","","",null,null],[17,"POLYGON_OFFSET_FACTOR","","",null,null],[17,"RGB4","","",null,null],[17,"RGB5","","",null,null],[17,"RGB8","","",null,null],[17,"RGB10","","",null,null],[17,"RGB12","","",null,null],[17,"RGB16","","",null,null],[17,"RGBA2","","",null,null],[17,"RGBA4","","",null,null],[17,"RGB5_A1","","",null,null],[17,"RGBA8","","",null,null],[17,"RGB10_A2","","",null,null],[17,"RGBA12","","",null,null],[17,"RGBA16","","",null,null],[17,"TEXTURE_RED_SIZE","","",null,null],[17,"TEXTURE_GREEN_SIZE","","",null,null],[17,"TEXTURE_BLUE_SIZE","","",null,null],[17,"TEXTURE_ALPHA_SIZE","","",null,null],[17,"PROXY_TEXTURE_1D","","",null,null],[17,"PROXY_TEXTURE_2D","","",null,null],[17,"TEXTURE_BINDING_1D","","",null,null],[17,"TEXTURE_BINDING_2D","","",null,null],[17,"TEXTURE_BINDING_3D","","",null,null],[17,"PACK_SKIP_IMAGES","","",null,null],[17,"PACK_IMAGE_HEIGHT","","",null,null],[17,"UNPACK_SKIP_IMAGES","","",null,null],[17,"UNPACK_IMAGE_HEIGHT","","",null,null],[17,"TEXTURE_3D","","",null,null],[17,"PROXY_TEXTURE_3D","","",null,null],[17,"TEXTURE_DEPTH","","",null,null],[17,"TEXTURE_WRAP_R","","",null,null],[17,"MAX_3D_TEXTURE_SIZE","","",null,null],[17,"MULTISAMPLE","","",null,null],[17,"SAMPLE_ALPHA_TO_COVERAGE","","",null,null],[17,"SAMPLE_ALPHA_TO_ONE","","",null,null],[17,"SAMPLE_COVERAGE","","",null,null],[17,"SAMPLE_BUFFERS","","",null,null],[17,"SAMPLES","","",null,null],[17,"SAMPLE_COVERAGE_VALUE","","",null,null],[17,"SAMPLE_COVERAGE_INVERT","","",null,null],[17,"BLEND_DST_RGB","","",null,null],[17,"BLEND_SRC_RGB","","",null,null],[17,"BLEND_DST_ALPHA","","",null,null],[17,"BLEND_SRC_ALPHA","","",null,null],[17,"BGR","","",null,null],[17,"BGRA","","",null,null],[17,"MAX_ELEMENTS_VERTICES","","",null,null],[17,"MAX_ELEMENTS_INDICES","","",null,null],[17,"POINT_FADE_THRESHOLD_SIZE","","",null,null],[17,"CLAMP_TO_BORDER","","",null,null],[17,"CLAMP_TO_EDGE","","",null,null],[17,"TEXTURE_MIN_LOD","","",null,null],[17,"TEXTURE_MAX_LOD","","",null,null],[17,"TEXTURE_BASE_LEVEL","","",null,null],[17,"TEXTURE_MAX_LEVEL","","",null,null],[17,"DEPTH_COMPONENT16","","",null,null],[17,"DEPTH_COMPONENT24","","",null,null],[17,"DEPTH_COMPONENT32","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_RED_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","","",null,null],[17,"FRAMEBUFFER_DEFAULT","","",null,null],[17,"FRAMEBUFFER_UNDEFINED","","",null,null],[17,"DEPTH_STENCIL_ATTACHMENT","","",null,null],[17,"MAJOR_VERSION","","",null,null],[17,"MINOR_VERSION","","",null,null],[17,"NUM_EXTENSIONS","","",null,null],[17,"CONTEXT_FLAGS","","",null,null],[17,"BUFFER_IMMUTABLE_STORAGE","","",null,null],[17,"BUFFER_STORAGE_FLAGS","","",null,null],[17,"PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED","","",null,null],[17,"INDEX","","",null,null],[17,"COMPRESSED_RED","","",null,null],[17,"COMPRESSED_RG","","",null,null],[17,"RG","","",null,null],[17,"RG_INTEGER","","",null,null],[17,"R8","","",null,null],[17,"R16","","",null,null],[17,"RG8","","",null,null],[17,"RG16","","",null,null],[17,"R16F","","",null,null],[17,"R32F","","",null,null],[17,"RG16F","","",null,null],[17,"RG32F","","",null,null],[17,"R8I","","",null,null],[17,"R8UI","","",null,null],[17,"R16I","","",null,null],[17,"R16UI","","",null,null],[17,"R32I","","",null,null],[17,"R32UI","","",null,null],[17,"RG8I","","",null,null],[17,"RG8UI","","",null,null],[17,"RG16I","","",null,null],[17,"RG16UI","","",null,null],[17,"RG32I","","",null,null],[17,"RG32UI","","",null,null],[17,"DEBUG_OUTPUT_SYNCHRONOUS","","",null,null],[17,"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH","","",null,null],[17,"DEBUG_CALLBACK_FUNCTION","","",null,null],[17,"DEBUG_CALLBACK_USER_PARAM","","",null,null],[17,"DEBUG_SOURCE_API","","",null,null],[17,"DEBUG_SOURCE_WINDOW_SYSTEM","","",null,null],[17,"DEBUG_SOURCE_SHADER_COMPILER","","",null,null],[17,"DEBUG_SOURCE_THIRD_PARTY","","",null,null],[17,"DEBUG_SOURCE_APPLICATION","","",null,null],[17,"DEBUG_SOURCE_OTHER","","",null,null],[17,"DEBUG_TYPE_ERROR","","",null,null],[17,"DEBUG_TYPE_DEPRECATED_BEHAVIOR","","",null,null],[17,"DEBUG_TYPE_UNDEFINED_BEHAVIOR","","",null,null],[17,"DEBUG_TYPE_PORTABILITY","","",null,null],[17,"DEBUG_TYPE_PERFORMANCE","","",null,null],[17,"DEBUG_TYPE_OTHER","","",null,null],[17,"LOSE_CONTEXT_ON_RESET","","",null,null],[17,"GUILTY_CONTEXT_RESET","","",null,null],[17,"INNOCENT_CONTEXT_RESET","","",null,null],[17,"UNKNOWN_CONTEXT_RESET","","",null,null],[17,"RESET_NOTIFICATION_STRATEGY","","",null,null],[17,"PROGRAM_BINARY_RETRIEVABLE_HINT","","",null,null],[17,"PROGRAM_SEPARABLE","","",null,null],[17,"ACTIVE_PROGRAM","","",null,null],[17,"PROGRAM_PIPELINE_BINDING","","",null,null],[17,"MAX_VIEWPORTS","","",null,null],[17,"VIEWPORT_SUBPIXEL_BITS","","",null,null],[17,"VIEWPORT_BOUNDS_RANGE","","",null,null],[17,"LAYER_PROVOKING_VERTEX","","",null,null],[17,"VIEWPORT_INDEX_PROVOKING_VERTEX","","",null,null],[17,"UNDEFINED_VERTEX","","",null,null],[17,"NO_RESET_NOTIFICATION","","",null,null],[17,"MAX_COMPUTE_SHARED_MEMORY_SIZE","","",null,null],[17,"MAX_COMPUTE_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"MAX_COMPUTE_ATOMIC_COUNTERS","","",null,null],[17,"MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS","","",null,null],[17,"COMPUTE_WORK_GROUP_SIZE","","",null,null],[17,"DEBUG_TYPE_MARKER","","",null,null],[17,"DEBUG_TYPE_PUSH_GROUP","","",null,null],[17,"DEBUG_TYPE_POP_GROUP","","",null,null],[17,"DEBUG_SEVERITY_NOTIFICATION","","",null,null],[17,"MAX_DEBUG_GROUP_STACK_DEPTH","","",null,null],[17,"DEBUG_GROUP_STACK_DEPTH","","",null,null],[17,"MAX_UNIFORM_LOCATIONS","","",null,null],[17,"INTERNALFORMAT_SUPPORTED","","",null,null],[17,"INTERNALFORMAT_PREFERRED","","",null,null],[17,"INTERNALFORMAT_RED_SIZE","","",null,null],[17,"INTERNALFORMAT_GREEN_SIZE","","",null,null],[17,"INTERNALFORMAT_BLUE_SIZE","","",null,null],[17,"INTERNALFORMAT_ALPHA_SIZE","","",null,null],[17,"INTERNALFORMAT_DEPTH_SIZE","","",null,null],[17,"INTERNALFORMAT_STENCIL_SIZE","","",null,null],[17,"INTERNALFORMAT_SHARED_SIZE","","",null,null],[17,"INTERNALFORMAT_RED_TYPE","","",null,null],[17,"INTERNALFORMAT_GREEN_TYPE","","",null,null],[17,"INTERNALFORMAT_BLUE_TYPE","","",null,null],[17,"INTERNALFORMAT_ALPHA_TYPE","","",null,null],[17,"INTERNALFORMAT_DEPTH_TYPE","","",null,null],[17,"INTERNALFORMAT_STENCIL_TYPE","","",null,null],[17,"MAX_WIDTH","","",null,null],[17,"MAX_HEIGHT","","",null,null],[17,"MAX_DEPTH","","",null,null],[17,"MAX_LAYERS","","",null,null],[17,"MAX_COMBINED_DIMENSIONS","","",null,null],[17,"COLOR_COMPONENTS","","",null,null],[17,"DEPTH_COMPONENTS","","",null,null],[17,"STENCIL_COMPONENTS","","",null,null],[17,"COLOR_RENDERABLE","","",null,null],[17,"DEPTH_RENDERABLE","","",null,null],[17,"STENCIL_RENDERABLE","","",null,null],[17,"FRAMEBUFFER_RENDERABLE","","",null,null],[17,"FRAMEBUFFER_RENDERABLE_LAYERED","","",null,null],[17,"FRAMEBUFFER_BLEND","","",null,null],[17,"READ_PIXELS","","",null,null],[17,"READ_PIXELS_FORMAT","","",null,null],[17,"READ_PIXELS_TYPE","","",null,null],[17,"TEXTURE_IMAGE_FORMAT","","",null,null],[17,"TEXTURE_IMAGE_TYPE","","",null,null],[17,"GET_TEXTURE_IMAGE_FORMAT","","",null,null],[17,"GET_TEXTURE_IMAGE_TYPE","","",null,null],[17,"MIPMAP","","",null,null],[17,"MANUAL_GENERATE_MIPMAP","","",null,null],[17,"AUTO_GENERATE_MIPMAP","","",null,null],[17,"COLOR_ENCODING","","",null,null],[17,"SRGB_READ","","",null,null],[17,"SRGB_WRITE","","",null,null],[17,"FILTER","","",null,null],[17,"VERTEX_TEXTURE","","",null,null],[17,"TESS_CONTROL_TEXTURE","","",null,null],[17,"TESS_EVALUATION_TEXTURE","","",null,null],[17,"GEOMETRY_TEXTURE","","",null,null],[17,"FRAGMENT_TEXTURE","","",null,null],[17,"COMPUTE_TEXTURE","","",null,null],[17,"TEXTURE_SHADOW","","",null,null],[17,"TEXTURE_GATHER","","",null,null],[17,"TEXTURE_GATHER_SHADOW","","",null,null],[17,"SHADER_IMAGE_LOAD","","",null,null],[17,"SHADER_IMAGE_STORE","","",null,null],[17,"SHADER_IMAGE_ATOMIC","","",null,null],[17,"IMAGE_TEXEL_SIZE","","",null,null],[17,"IMAGE_COMPATIBILITY_CLASS","","",null,null],[17,"IMAGE_PIXEL_FORMAT","","",null,null],[17,"IMAGE_PIXEL_TYPE","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE","","",null,null],[17,"TEXTURE_COMPRESSED_BLOCK_WIDTH","","",null,null],[17,"TEXTURE_COMPRESSED_BLOCK_HEIGHT","","",null,null],[17,"TEXTURE_COMPRESSED_BLOCK_SIZE","","",null,null],[17,"CLEAR_BUFFER","","",null,null],[17,"TEXTURE_VIEW","","",null,null],[17,"VIEW_COMPATIBILITY_CLASS","","",null,null],[17,"FULL_SUPPORT","","",null,null],[17,"CAVEAT_SUPPORT","","",null,null],[17,"IMAGE_CLASS_4_X_32","","",null,null],[17,"IMAGE_CLASS_2_X_32","","",null,null],[17,"IMAGE_CLASS_1_X_32","","",null,null],[17,"IMAGE_CLASS_4_X_16","","",null,null],[17,"IMAGE_CLASS_2_X_16","","",null,null],[17,"IMAGE_CLASS_1_X_16","","",null,null],[17,"IMAGE_CLASS_4_X_8","","",null,null],[17,"IMAGE_CLASS_2_X_8","","",null,null],[17,"IMAGE_CLASS_1_X_8","","",null,null],[17,"IMAGE_CLASS_11_11_10","","",null,null],[17,"IMAGE_CLASS_10_10_10_2","","",null,null],[17,"VIEW_CLASS_128_BITS","","",null,null],[17,"VIEW_CLASS_96_BITS","","",null,null],[17,"VIEW_CLASS_64_BITS","","",null,null],[17,"VIEW_CLASS_48_BITS","","",null,null],[17,"VIEW_CLASS_32_BITS","","",null,null],[17,"VIEW_CLASS_24_BITS","","",null,null],[17,"VIEW_CLASS_16_BITS","","",null,null],[17,"VIEW_CLASS_8_BITS","","",null,null],[17,"VIEW_CLASS_S3TC_DXT1_RGB","","",null,null],[17,"VIEW_CLASS_S3TC_DXT1_RGBA","","",null,null],[17,"VIEW_CLASS_S3TC_DXT3_RGBA","","",null,null],[17,"VIEW_CLASS_S3TC_DXT5_RGBA","","",null,null],[17,"VIEW_CLASS_RGTC1_RED","","",null,null],[17,"VIEW_CLASS_RGTC2_RG","","",null,null],[17,"VIEW_CLASS_BPTC_UNORM","","",null,null],[17,"VIEW_CLASS_BPTC_FLOAT","","",null,null],[17,"VERTEX_ATTRIB_BINDING","","",null,null],[17,"VERTEX_ATTRIB_RELATIVE_OFFSET","","",null,null],[17,"VERTEX_BINDING_DIVISOR","","",null,null],[17,"VERTEX_BINDING_OFFSET","","",null,null],[17,"VERTEX_BINDING_STRIDE","","",null,null],[17,"MAX_VERTEX_ATTRIB_RELATIVE_OFFSET","","",null,null],[17,"MAX_VERTEX_ATTRIB_BINDINGS","","",null,null],[17,"TEXTURE_VIEW_MIN_LEVEL","","",null,null],[17,"TEXTURE_VIEW_NUM_LEVELS","","",null,null],[17,"TEXTURE_VIEW_MIN_LAYER","","",null,null],[17,"TEXTURE_VIEW_NUM_LAYERS","","",null,null],[17,"TEXTURE_IMMUTABLE_LEVELS","","",null,null],[17,"BUFFER","","",null,null],[17,"SHADER","","",null,null],[17,"PROGRAM","","",null,null],[17,"QUERY","","",null,null],[17,"PROGRAM_PIPELINE","","",null,null],[17,"MAX_VERTEX_ATTRIB_STRIDE","","",null,null],[17,"SAMPLER","","",null,null],[17,"DISPLAY_LIST","","",null,null],[17,"MAX_LABEL_LENGTH","","",null,null],[17,"NUM_SHADING_LANGUAGE_VERSIONS","","",null,null],[17,"QUERY_TARGET","","",null,null],[17,"MAX_CULL_DISTANCES","","",null,null],[17,"MAX_COMBINED_CLIP_AND_CULL_DISTANCES","","",null,null],[17,"CONTEXT_RELEASE_BEHAVIOR","","",null,null],[17,"CONTEXT_RELEASE_BEHAVIOR_FLUSH","","",null,null],[17,"UNSIGNED_BYTE_2_3_3_REV","","",null,null],[17,"UNSIGNED_SHORT_5_6_5","","",null,null],[17,"UNSIGNED_SHORT_5_6_5_REV","","",null,null],[17,"UNSIGNED_SHORT_4_4_4_4_REV","","",null,null],[17,"UNSIGNED_SHORT_1_5_5_5_REV","","",null,null],[17,"UNSIGNED_INT_8_8_8_8_REV","","",null,null],[17,"UNSIGNED_INT_2_10_10_10_REV","","",null,null],[17,"MIRRORED_REPEAT","","",null,null],[17,"ALIASED_LINE_WIDTH_RANGE","","",null,null],[17,"TEXTURE0","","",null,null],[17,"TEXTURE1","","",null,null],[17,"TEXTURE2","","",null,null],[17,"TEXTURE3","","",null,null],[17,"TEXTURE4","","",null,null],[17,"TEXTURE5","","",null,null],[17,"TEXTURE6","","",null,null],[17,"TEXTURE7","","",null,null],[17,"TEXTURE8","","",null,null],[17,"TEXTURE9","","",null,null],[17,"TEXTURE10","","",null,null],[17,"TEXTURE11","","",null,null],[17,"TEXTURE12","","",null,null],[17,"TEXTURE13","","",null,null],[17,"TEXTURE14","","",null,null],[17,"TEXTURE15","","",null,null],[17,"TEXTURE16","","",null,null],[17,"TEXTURE17","","",null,null],[17,"TEXTURE18","","",null,null],[17,"TEXTURE19","","",null,null],[17,"TEXTURE20","","",null,null],[17,"TEXTURE21","","",null,null],[17,"TEXTURE22","","",null,null],[17,"TEXTURE23","","",null,null],[17,"TEXTURE24","","",null,null],[17,"TEXTURE25","","",null,null],[17,"TEXTURE26","","",null,null],[17,"TEXTURE27","","",null,null],[17,"TEXTURE28","","",null,null],[17,"TEXTURE29","","",null,null],[17,"TEXTURE30","","",null,null],[17,"TEXTURE31","","",null,null],[17,"ACTIVE_TEXTURE","","",null,null],[17,"MAX_RENDERBUFFER_SIZE","","",null,null],[17,"COMPRESSED_RGB","","",null,null],[17,"COMPRESSED_RGBA","","",null,null],[17,"TEXTURE_COMPRESSION_HINT","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER","","",null,null],[17,"TEXTURE_RECTANGLE","","",null,null],[17,"TEXTURE_BINDING_RECTANGLE","","",null,null],[17,"PROXY_TEXTURE_RECTANGLE","","",null,null],[17,"MAX_RECTANGLE_TEXTURE_SIZE","","",null,null],[17,"DEPTH_STENCIL","","",null,null],[17,"UNSIGNED_INT_24_8","","",null,null],[17,"MAX_TEXTURE_LOD_BIAS","","",null,null],[17,"TEXTURE_LOD_BIAS","","",null,null],[17,"INCR_WRAP","","",null,null],[17,"DECR_WRAP","","",null,null],[17,"TEXTURE_CUBE_MAP","","",null,null],[17,"TEXTURE_BINDING_CUBE_MAP","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_X","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_X","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Y","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Y","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Z","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Z","","",null,null],[17,"PROXY_TEXTURE_CUBE_MAP","","",null,null],[17,"MAX_CUBE_MAP_TEXTURE_SIZE","","",null,null],[17,"SRC1_ALPHA","","",null,null],[17,"VERTEX_ARRAY_BINDING","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_ENABLED","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_SIZE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_STRIDE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_TYPE","","",null,null],[17,"CURRENT_VERTEX_ATTRIB","","",null,null],[17,"VERTEX_PROGRAM_POINT_SIZE","","",null,null],[17,"PROGRAM_POINT_SIZE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_POINTER","","",null,null],[17,"DEPTH_CLAMP","","",null,null],[17,"TEXTURE_COMPRESSED_IMAGE_SIZE","","",null,null],[17,"TEXTURE_COMPRESSED","","",null,null],[17,"NUM_COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"PROGRAM_BINARY_LENGTH","","",null,null],[17,"MIRROR_CLAMP_TO_EDGE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_LONG","","",null,null],[17,"BUFFER_SIZE","","",null,null],[17,"BUFFER_USAGE","","",null,null],[17,"NUM_PROGRAM_BINARY_FORMATS","","",null,null],[17,"PROGRAM_BINARY_FORMATS","","",null,null],[17,"STENCIL_BACK_FUNC","","",null,null],[17,"STENCIL_BACK_FAIL","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_FAIL","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_PASS","","",null,null],[17,"RGBA32F","","",null,null],[17,"RGB32F","","",null,null],[17,"RGBA16F","","",null,null],[17,"RGB16F","","",null,null],[17,"MAX_DRAW_BUFFERS","","",null,null],[17,"DRAW_BUFFER0","","",null,null],[17,"DRAW_BUFFER1","","",null,null],[17,"DRAW_BUFFER2","","",null,null],[17,"DRAW_BUFFER3","","",null,null],[17,"DRAW_BUFFER4","","",null,null],[17,"DRAW_BUFFER5","","",null,null],[17,"DRAW_BUFFER6","","",null,null],[17,"DRAW_BUFFER7","","",null,null],[17,"DRAW_BUFFER8","","",null,null],[17,"DRAW_BUFFER9","","",null,null],[17,"DRAW_BUFFER10","","",null,null],[17,"DRAW_BUFFER11","","",null,null],[17,"DRAW_BUFFER12","","",null,null],[17,"DRAW_BUFFER13","","",null,null],[17,"DRAW_BUFFER14","","",null,null],[17,"DRAW_BUFFER15","","",null,null],[17,"BLEND_EQUATION_ALPHA","","",null,null],[17,"TEXTURE_DEPTH_SIZE","","",null,null],[17,"TEXTURE_COMPARE_MODE","","",null,null],[17,"TEXTURE_COMPARE_FUNC","","",null,null],[17,"COMPARE_REF_TO_TEXTURE","","",null,null],[17,"TEXTURE_CUBE_MAP_SEAMLESS","","",null,null],[17,"QUERY_COUNTER_BITS","","",null,null],[17,"CURRENT_QUERY","","",null,null],[17,"QUERY_RESULT","","",null,null],[17,"QUERY_RESULT_AVAILABLE","","",null,null],[17,"MAX_VERTEX_ATTRIBS","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_NORMALIZED","","",null,null],[17,"MAX_TESS_CONTROL_INPUT_COMPONENTS","","",null,null],[17,"MAX_TESS_EVALUATION_INPUT_COMPONENTS","","",null,null],[17,"MAX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"GEOMETRY_SHADER_INVOCATIONS","","",null,null],[17,"ARRAY_BUFFER","","",null,null],[17,"ELEMENT_ARRAY_BUFFER","","",null,null],[17,"ARRAY_BUFFER_BINDING","","",null,null],[17,"ELEMENT_ARRAY_BUFFER_BINDING","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","","",null,null],[17,"READ_ONLY","","",null,null],[17,"WRITE_ONLY","","",null,null],[17,"READ_WRITE","","",null,null],[17,"BUFFER_ACCESS","","",null,null],[17,"BUFFER_MAPPED","","",null,null],[17,"BUFFER_MAP_POINTER","","",null,null],[17,"TIME_ELAPSED","","",null,null],[17,"STREAM_DRAW","","",null,null],[17,"STREAM_READ","","",null,null],[17,"STREAM_COPY","","",null,null],[17,"STATIC_DRAW","","",null,null],[17,"STATIC_READ","","",null,null],[17,"STATIC_COPY","","",null,null],[17,"DYNAMIC_DRAW","","",null,null],[17,"DYNAMIC_READ","","",null,null],[17,"DYNAMIC_COPY","","",null,null],[17,"PIXEL_PACK_BUFFER","","",null,null],[17,"PIXEL_UNPACK_BUFFER","","",null,null],[17,"PIXEL_PACK_BUFFER_BINDING","","",null,null],[17,"PIXEL_UNPACK_BUFFER_BINDING","","",null,null],[17,"DEPTH24_STENCIL8","","",null,null],[17,"TEXTURE_STENCIL_SIZE","","",null,null],[17,"SRC1_COLOR","","",null,null],[17,"ONE_MINUS_SRC1_COLOR","","",null,null],[17,"ONE_MINUS_SRC1_ALPHA","","",null,null],[17,"MAX_DUAL_SOURCE_DRAW_BUFFERS","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_INTEGER","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_DIVISOR","","",null,null],[17,"MAX_ARRAY_TEXTURE_LAYERS","","",null,null],[17,"MIN_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"MAX_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"SAMPLES_PASSED","","",null,null],[17,"GEOMETRY_VERTICES_OUT","","",null,null],[17,"GEOMETRY_INPUT_TYPE","","",null,null],[17,"GEOMETRY_OUTPUT_TYPE","","",null,null],[17,"SAMPLER_BINDING","","",null,null],[17,"CLAMP_READ_COLOR","","",null,null],[17,"FIXED_ONLY","","",null,null],[17,"UNIFORM_BUFFER","","",null,null],[17,"UNIFORM_BUFFER_BINDING","","",null,null],[17,"UNIFORM_BUFFER_START","","",null,null],[17,"UNIFORM_BUFFER_SIZE","","",null,null],[17,"MAX_VERTEX_UNIFORM_BLOCKS","","",null,null],[17,"MAX_GEOMETRY_UNIFORM_BLOCKS","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_BLOCKS","","",null,null],[17,"MAX_COMBINED_UNIFORM_BLOCKS","","",null,null],[17,"MAX_UNIFORM_BUFFER_BINDINGS","","",null,null],[17,"MAX_UNIFORM_BLOCK_SIZE","","",null,null],[17,"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"UNIFORM_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH","","",null,null],[17,"ACTIVE_UNIFORM_BLOCKS","","",null,null],[17,"UNIFORM_TYPE","","",null,null],[17,"UNIFORM_SIZE","","",null,null],[17,"UNIFORM_NAME_LENGTH","","",null,null],[17,"UNIFORM_BLOCK_INDEX","","",null,null],[17,"UNIFORM_OFFSET","","",null,null],[17,"UNIFORM_ARRAY_STRIDE","","",null,null],[17,"UNIFORM_MATRIX_STRIDE","","",null,null],[17,"UNIFORM_IS_ROW_MAJOR","","",null,null],[17,"UNIFORM_BLOCK_BINDING","","",null,null],[17,"UNIFORM_BLOCK_DATA_SIZE","","",null,null],[17,"UNIFORM_BLOCK_NAME_LENGTH","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORMS","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"FRAGMENT_SHADER","","",null,null],[17,"VERTEX_SHADER","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_VARYING_FLOATS","","",null,null],[17,"MAX_VARYING_COMPONENTS","","",null,null],[17,"MAX_VERTEX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"MAX_COMBINED_TEXTURE_IMAGE_UNITS","","",null,null],[17,"SHADER_TYPE","","",null,null],[17,"FLOAT_VEC2","","",null,null],[17,"FLOAT_VEC3","","",null,null],[17,"FLOAT_VEC4","","",null,null],[17,"INT_VEC2","","",null,null],[17,"INT_VEC3","","",null,null],[17,"INT_VEC4","","",null,null],[17,"BOOL","","",null,null],[17,"BOOL_VEC2","","",null,null],[17,"BOOL_VEC3","","",null,null],[17,"BOOL_VEC4","","",null,null],[17,"FLOAT_MAT2","","",null,null],[17,"FLOAT_MAT3","","",null,null],[17,"FLOAT_MAT4","","",null,null],[17,"SAMPLER_1D","","",null,null],[17,"SAMPLER_2D","","",null,null],[17,"SAMPLER_3D","","",null,null],[17,"SAMPLER_CUBE","","",null,null],[17,"SAMPLER_1D_SHADOW","","",null,null],[17,"SAMPLER_2D_SHADOW","","",null,null],[17,"SAMPLER_2D_RECT","","",null,null],[17,"SAMPLER_2D_RECT_SHADOW","","",null,null],[17,"FLOAT_MAT2x3","","",null,null],[17,"FLOAT_MAT2x4","","",null,null],[17,"FLOAT_MAT3x2","","",null,null],[17,"FLOAT_MAT3x4","","",null,null],[17,"FLOAT_MAT4x2","","",null,null],[17,"FLOAT_MAT4x3","","",null,null],[17,"DELETE_STATUS","","",null,null],[17,"COMPILE_STATUS","","",null,null],[17,"LINK_STATUS","","",null,null],[17,"VALIDATE_STATUS","","",null,null],[17,"INFO_LOG_LENGTH","","",null,null],[17,"ATTACHED_SHADERS","","",null,null],[17,"ACTIVE_UNIFORMS","","",null,null],[17,"ACTIVE_UNIFORM_MAX_LENGTH","","",null,null],[17,"SHADER_SOURCE_LENGTH","","",null,null],[17,"ACTIVE_ATTRIBUTES","","",null,null],[17,"ACTIVE_ATTRIBUTE_MAX_LENGTH","","",null,null],[17,"FRAGMENT_SHADER_DERIVATIVE_HINT","","",null,null],[17,"SHADING_LANGUAGE_VERSION","","",null,null],[17,"CURRENT_PROGRAM","","",null,null],[17,"IMPLEMENTATION_COLOR_READ_TYPE","","",null,null],[17,"IMPLEMENTATION_COLOR_READ_FORMAT","","",null,null],[17,"TEXTURE_RED_TYPE","","",null,null],[17,"TEXTURE_GREEN_TYPE","","",null,null],[17,"TEXTURE_BLUE_TYPE","","",null,null],[17,"TEXTURE_ALPHA_TYPE","","",null,null],[17,"TEXTURE_DEPTH_TYPE","","",null,null],[17,"UNSIGNED_NORMALIZED","","",null,null],[17,"TEXTURE_1D_ARRAY","","",null,null],[17,"PROXY_TEXTURE_1D_ARRAY","","",null,null],[17,"TEXTURE_2D_ARRAY","","",null,null],[17,"PROXY_TEXTURE_2D_ARRAY","","",null,null],[17,"TEXTURE_BINDING_1D_ARRAY","","",null,null],[17,"TEXTURE_BINDING_2D_ARRAY","","",null,null],[17,"MAX_GEOMETRY_TEXTURE_IMAGE_UNITS","","",null,null],[17,"TEXTURE_BUFFER","","",null,null],[17,"TEXTURE_BUFFER_BINDING","","",null,null],[17,"MAX_TEXTURE_BUFFER_SIZE","","",null,null],[17,"TEXTURE_BINDING_BUFFER","","",null,null],[17,"TEXTURE_BUFFER_DATA_STORE_BINDING","","",null,null],[17,"ANY_SAMPLES_PASSED","","",null,null],[17,"SAMPLE_SHADING","","",null,null],[17,"MIN_SAMPLE_SHADING_VALUE","","",null,null],[17,"R11F_G11F_B10F","","",null,null],[17,"UNSIGNED_INT_10F_11F_11F_REV","","",null,null],[17,"RGB9_E5","","",null,null],[17,"UNSIGNED_INT_5_9_9_9_REV","","",null,null],[17,"TEXTURE_SHARED_SIZE","","",null,null],[17,"SRGB","","",null,null],[17,"SRGB8","","",null,null],[17,"SRGB_ALPHA","","",null,null],[17,"SRGB8_ALPHA8","","",null,null],[17,"COMPRESSED_SRGB","","",null,null],[17,"COMPRESSED_SRGB_ALPHA","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_MODE","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYINGS","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_START","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_SIZE","","",null,null],[17,"PRIMITIVES_GENERATED","","",null,null],[17,"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","","",null,null],[17,"RASTERIZER_DISCARD","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","","",null,null],[17,"INTERLEAVED_ATTRIBS","","",null,null],[17,"SEPARATE_ATTRIBS","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_BINDING","","",null,null],[17,"POINT_SPRITE_COORD_ORIGIN","","",null,null],[17,"LOWER_LEFT","","",null,null],[17,"UPPER_LEFT","","",null,null],[17,"STENCIL_BACK_REF","","",null,null],[17,"STENCIL_BACK_VALUE_MASK","","",null,null],[17,"STENCIL_BACK_WRITEMASK","","",null,null],[17,"DRAW_FRAMEBUFFER_BINDING","","",null,null],[17,"FRAMEBUFFER_BINDING","","",null,null],[17,"RENDERBUFFER_BINDING","","",null,null],[17,"READ_FRAMEBUFFER","","",null,null],[17,"DRAW_FRAMEBUFFER","","",null,null],[17,"READ_FRAMEBUFFER_BINDING","","",null,null],[17,"RENDERBUFFER_SAMPLES","","",null,null],[17,"DEPTH_COMPONENT32F","","",null,null],[17,"DEPTH32F_STENCIL8","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","","",null,null],[17,"FRAMEBUFFER_COMPLETE","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_READ_BUFFER","","",null,null],[17,"FRAMEBUFFER_UNSUPPORTED","","",null,null],[17,"MAX_COLOR_ATTACHMENTS","","",null,null],[17,"COLOR_ATTACHMENT0","","",null,null],[17,"COLOR_ATTACHMENT1","","",null,null],[17,"COLOR_ATTACHMENT2","","",null,null],[17,"COLOR_ATTACHMENT3","","",null,null],[17,"COLOR_ATTACHMENT4","","",null,null],[17,"COLOR_ATTACHMENT5","","",null,null],[17,"COLOR_ATTACHMENT6","","",null,null],[17,"COLOR_ATTACHMENT7","","",null,null],[17,"COLOR_ATTACHMENT8","","",null,null],[17,"COLOR_ATTACHMENT9","","",null,null],[17,"COLOR_ATTACHMENT10","","",null,null],[17,"COLOR_ATTACHMENT11","","",null,null],[17,"COLOR_ATTACHMENT12","","",null,null],[17,"COLOR_ATTACHMENT13","","",null,null],[17,"COLOR_ATTACHMENT14","","",null,null],[17,"COLOR_ATTACHMENT15","","",null,null],[17,"COLOR_ATTACHMENT16","","",null,null],[17,"COLOR_ATTACHMENT17","","",null,null],[17,"COLOR_ATTACHMENT18","","",null,null],[17,"COLOR_ATTACHMENT19","","",null,null],[17,"COLOR_ATTACHMENT20","","",null,null],[17,"COLOR_ATTACHMENT21","","",null,null],[17,"COLOR_ATTACHMENT22","","",null,null],[17,"COLOR_ATTACHMENT23","","",null,null],[17,"COLOR_ATTACHMENT24","","",null,null],[17,"COLOR_ATTACHMENT25","","",null,null],[17,"COLOR_ATTACHMENT26","","",null,null],[17,"COLOR_ATTACHMENT27","","",null,null],[17,"COLOR_ATTACHMENT28","","",null,null],[17,"COLOR_ATTACHMENT29","","",null,null],[17,"COLOR_ATTACHMENT30","","",null,null],[17,"COLOR_ATTACHMENT31","","",null,null],[17,"DEPTH_ATTACHMENT","","",null,null],[17,"STENCIL_ATTACHMENT","","",null,null],[17,"FRAMEBUFFER","","",null,null],[17,"RENDERBUFFER","","",null,null],[17,"RENDERBUFFER_WIDTH","","",null,null],[17,"RENDERBUFFER_HEIGHT","","",null,null],[17,"RENDERBUFFER_INTERNAL_FORMAT","","",null,null],[17,"STENCIL_INDEX1","","",null,null],[17,"STENCIL_INDEX4","","",null,null],[17,"STENCIL_INDEX8","","",null,null],[17,"STENCIL_INDEX16","","",null,null],[17,"RENDERBUFFER_RED_SIZE","","",null,null],[17,"RENDERBUFFER_GREEN_SIZE","","",null,null],[17,"RENDERBUFFER_BLUE_SIZE","","",null,null],[17,"RENDERBUFFER_ALPHA_SIZE","","",null,null],[17,"RENDERBUFFER_DEPTH_SIZE","","",null,null],[17,"RENDERBUFFER_STENCIL_SIZE","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","","",null,null],[17,"MAX_SAMPLES","","",null,null],[17,"RGB565","","",null,null],[17,"PRIMITIVE_RESTART_FIXED_INDEX","","",null,null],[17,"ANY_SAMPLES_PASSED_CONSERVATIVE","","",null,null],[17,"MAX_ELEMENT_INDEX","","",null,null],[17,"RGBA32UI","","",null,null],[17,"RGB32UI","","",null,null],[17,"RGBA16UI","","",null,null],[17,"RGB16UI","","",null,null],[17,"RGBA8UI","","",null,null],[17,"RGB8UI","","",null,null],[17,"RGBA32I","","",null,null],[17,"RGB32I","","",null,null],[17,"RGBA16I","","",null,null],[17,"RGB16I","","",null,null],[17,"RGBA8I","","",null,null],[17,"RGB8I","","",null,null],[17,"RED_INTEGER","","",null,null],[17,"GREEN_INTEGER","","",null,null],[17,"BLUE_INTEGER","","",null,null],[17,"RGB_INTEGER","","",null,null],[17,"RGBA_INTEGER","","",null,null],[17,"BGR_INTEGER","","",null,null],[17,"BGRA_INTEGER","","",null,null],[17,"INT_2_10_10_10_REV","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_LAYERED","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS","","",null,null],[17,"FLOAT_32_UNSIGNED_INT_24_8_REV","","",null,null],[17,"FRAMEBUFFER_SRGB","","",null,null],[17,"COMPRESSED_RED_RGTC1","","",null,null],[17,"COMPRESSED_SIGNED_RED_RGTC1","","",null,null],[17,"COMPRESSED_RG_RGTC2","","",null,null],[17,"COMPRESSED_SIGNED_RG_RGTC2","","",null,null],[17,"SAMPLER_1D_ARRAY","","",null,null],[17,"SAMPLER_2D_ARRAY","","",null,null],[17,"SAMPLER_BUFFER","","",null,null],[17,"SAMPLER_1D_ARRAY_SHADOW","","",null,null],[17,"SAMPLER_2D_ARRAY_SHADOW","","",null,null],[17,"SAMPLER_CUBE_SHADOW","","",null,null],[17,"UNSIGNED_INT_VEC2","","",null,null],[17,"UNSIGNED_INT_VEC3","","",null,null],[17,"UNSIGNED_INT_VEC4","","",null,null],[17,"INT_SAMPLER_1D","","",null,null],[17,"INT_SAMPLER_2D","","",null,null],[17,"INT_SAMPLER_3D","","",null,null],[17,"INT_SAMPLER_CUBE","","",null,null],[17,"INT_SAMPLER_2D_RECT","","",null,null],[17,"INT_SAMPLER_1D_ARRAY","","",null,null],[17,"INT_SAMPLER_2D_ARRAY","","",null,null],[17,"INT_SAMPLER_BUFFER","","",null,null],[17,"UNSIGNED_INT_SAMPLER_1D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_3D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_CUBE","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_RECT","","",null,null],[17,"UNSIGNED_INT_SAMPLER_1D_ARRAY","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_ARRAY","","",null,null],[17,"UNSIGNED_INT_SAMPLER_BUFFER","","",null,null],[17,"GEOMETRY_SHADER","","",null,null],[17,"MAX_GEOMETRY_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_GEOMETRY_OUTPUT_VERTICES","","",null,null],[17,"MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS","","",null,null],[17,"ACTIVE_SUBROUTINES","","",null,null],[17,"ACTIVE_SUBROUTINE_UNIFORMS","","",null,null],[17,"MAX_SUBROUTINES","","",null,null],[17,"MAX_SUBROUTINE_UNIFORM_LOCATIONS","","",null,null],[17,"LOW_FLOAT","","",null,null],[17,"MEDIUM_FLOAT","","",null,null],[17,"HIGH_FLOAT","","",null,null],[17,"LOW_INT","","",null,null],[17,"MEDIUM_INT","","",null,null],[17,"HIGH_INT","","",null,null],[17,"SHADER_BINARY_FORMATS","","",null,null],[17,"NUM_SHADER_BINARY_FORMATS","","",null,null],[17,"SHADER_COMPILER","","",null,null],[17,"MAX_VERTEX_UNIFORM_VECTORS","","",null,null],[17,"MAX_VARYING_VECTORS","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_VECTORS","","",null,null],[17,"QUERY_WAIT","","",null,null],[17,"QUERY_NO_WAIT","","",null,null],[17,"QUERY_BY_REGION_WAIT","","",null,null],[17,"QUERY_BY_REGION_NO_WAIT","","",null,null],[17,"QUERY_WAIT_INVERTED","","",null,null],[17,"QUERY_NO_WAIT_INVERTED","","",null,null],[17,"QUERY_BY_REGION_WAIT_INVERTED","","",null,null],[17,"QUERY_BY_REGION_NO_WAIT_INVERTED","","",null,null],[17,"MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS","","",null,null],[17,"TRANSFORM_FEEDBACK","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_PAUSED","","",null,null],[17,"TRANSFORM_FEEDBACK_PAUSED","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_ACTIVE","","",null,null],[17,"TRANSFORM_FEEDBACK_ACTIVE","","",null,null],[17,"TRANSFORM_FEEDBACK_BINDING","","",null,null],[17,"TIMESTAMP","","",null,null],[17,"TEXTURE_SWIZZLE_R","","",null,null],[17,"TEXTURE_SWIZZLE_G","","",null,null],[17,"TEXTURE_SWIZZLE_B","","",null,null],[17,"TEXTURE_SWIZZLE_A","","",null,null],[17,"TEXTURE_SWIZZLE_RGBA","","",null,null],[17,"ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS","","",null,null],[17,"ACTIVE_SUBROUTINE_MAX_LENGTH","","",null,null],[17,"ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH","","",null,null],[17,"NUM_COMPATIBLE_SUBROUTINES","","",null,null],[17,"COMPATIBLE_SUBROUTINES","","",null,null],[17,"QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION","","",null,null],[17,"FIRST_VERTEX_CONVENTION","","",null,null],[17,"LAST_VERTEX_CONVENTION","","",null,null],[17,"PROVOKING_VERTEX","","",null,null],[17,"SAMPLE_POSITION","","",null,null],[17,"SAMPLE_MASK","","",null,null],[17,"SAMPLE_MASK_VALUE","","",null,null],[17,"MAX_SAMPLE_MASK_WORDS","","",null,null],[17,"MAX_GEOMETRY_SHADER_INVOCATIONS","","",null,null],[17,"MIN_FRAGMENT_INTERPOLATION_OFFSET","","",null,null],[17,"MAX_FRAGMENT_INTERPOLATION_OFFSET","","",null,null],[17,"FRAGMENT_INTERPOLATION_OFFSET_BITS","","",null,null],[17,"MIN_PROGRAM_TEXTURE_GATHER_OFFSET","","",null,null],[17,"MAX_PROGRAM_TEXTURE_GATHER_OFFSET","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_BUFFERS","","",null,null],[17,"MAX_VERTEX_STREAMS","","",null,null],[17,"PATCH_VERTICES","","",null,null],[17,"PATCH_DEFAULT_INNER_LEVEL","","",null,null],[17,"PATCH_DEFAULT_OUTER_LEVEL","","",null,null],[17,"TESS_CONTROL_OUTPUT_VERTICES","","",null,null],[17,"TESS_GEN_MODE","","",null,null],[17,"TESS_GEN_SPACING","","",null,null],[17,"TESS_GEN_VERTEX_ORDER","","",null,null],[17,"TESS_GEN_POINT_MODE","","",null,null],[17,"ISOLINES","","",null,null],[17,"FRACTIONAL_ODD","","",null,null],[17,"FRACTIONAL_EVEN","","",null,null],[17,"MAX_PATCH_VERTICES","","",null,null],[17,"MAX_TESS_GEN_LEVEL","","",null,null],[17,"MAX_TESS_CONTROL_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_TESS_EVALUATION_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS","","",null,null],[17,"MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS","","",null,null],[17,"MAX_TESS_CONTROL_OUTPUT_COMPONENTS","","",null,null],[17,"MAX_TESS_PATCH_COMPONENTS","","",null,null],[17,"MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS","","",null,null],[17,"MAX_TESS_EVALUATION_OUTPUT_COMPONENTS","","",null,null],[17,"TESS_EVALUATION_SHADER","","",null,null],[17,"TESS_CONTROL_SHADER","","",null,null],[17,"MAX_TESS_CONTROL_UNIFORM_BLOCKS","","",null,null],[17,"MAX_TESS_EVALUATION_UNIFORM_BLOCKS","","",null,null],[17,"COMPRESSED_RGBA_BPTC_UNORM","","",null,null],[17,"COMPRESSED_SRGB_ALPHA_BPTC_UNORM","","",null,null],[17,"COMPRESSED_RGB_BPTC_SIGNED_FLOAT","","",null,null],[17,"COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT","","",null,null],[17,"COPY_READ_BUFFER","","",null,null],[17,"COPY_READ_BUFFER_BINDING","","",null,null],[17,"COPY_WRITE_BUFFER","","",null,null],[17,"COPY_WRITE_BUFFER_BINDING","","",null,null],[17,"MAX_IMAGE_UNITS","","",null,null],[17,"MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS","","",null,null],[17,"MAX_COMBINED_SHADER_OUTPUT_RESOURCES","","",null,null],[17,"IMAGE_BINDING_NAME","","",null,null],[17,"IMAGE_BINDING_LEVEL","","",null,null],[17,"IMAGE_BINDING_LAYERED","","",null,null],[17,"IMAGE_BINDING_LAYER","","",null,null],[17,"IMAGE_BINDING_ACCESS","","",null,null],[17,"DRAW_INDIRECT_BUFFER","","",null,null],[17,"DRAW_INDIRECT_BUFFER_BINDING","","",null,null],[17,"DOUBLE_MAT2","","",null,null],[17,"DOUBLE_MAT3","","",null,null],[17,"DOUBLE_MAT4","","",null,null],[17,"DOUBLE_MAT2x3","","",null,null],[17,"DOUBLE_MAT2x4","","",null,null],[17,"DOUBLE_MAT3x2","","",null,null],[17,"DOUBLE_MAT3x4","","",null,null],[17,"DOUBLE_MAT4x2","","",null,null],[17,"DOUBLE_MAT4x3","","",null,null],[17,"VERTEX_BINDING_BUFFER","","",null,null],[17,"R8_SNORM","","",null,null],[17,"RG8_SNORM","","",null,null],[17,"RGB8_SNORM","","",null,null],[17,"RGBA8_SNORM","","",null,null],[17,"R16_SNORM","","",null,null],[17,"RG16_SNORM","","",null,null],[17,"RGB16_SNORM","","",null,null],[17,"RGBA16_SNORM","","",null,null],[17,"SIGNED_NORMALIZED","","",null,null],[17,"PRIMITIVE_RESTART","","",null,null],[17,"PRIMITIVE_RESTART_INDEX","","",null,null],[17,"DOUBLE_VEC2","","",null,null],[17,"DOUBLE_VEC3","","",null,null],[17,"DOUBLE_VEC4","","",null,null],[17,"TEXTURE_CUBE_MAP_ARRAY","","",null,null],[17,"TEXTURE_BINDING_CUBE_MAP_ARRAY","","",null,null],[17,"PROXY_TEXTURE_CUBE_MAP_ARRAY","","",null,null],[17,"SAMPLER_CUBE_MAP_ARRAY","","",null,null],[17,"SAMPLER_CUBE_MAP_ARRAY_SHADOW","","",null,null],[17,"INT_SAMPLER_CUBE_MAP_ARRAY","","",null,null],[17,"UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY","","",null,null],[17,"IMAGE_1D","","",null,null],[17,"IMAGE_2D","","",null,null],[17,"IMAGE_3D","","",null,null],[17,"IMAGE_2D_RECT","","",null,null],[17,"IMAGE_CUBE","","",null,null],[17,"IMAGE_BUFFER","","",null,null],[17,"IMAGE_1D_ARRAY","","",null,null],[17,"IMAGE_2D_ARRAY","","",null,null],[17,"IMAGE_CUBE_MAP_ARRAY","","",null,null],[17,"IMAGE_2D_MULTISAMPLE","","",null,null],[17,"IMAGE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"INT_IMAGE_1D","","",null,null],[17,"INT_IMAGE_2D","","",null,null],[17,"INT_IMAGE_3D","","",null,null],[17,"INT_IMAGE_2D_RECT","","",null,null],[17,"INT_IMAGE_CUBE","","",null,null],[17,"INT_IMAGE_BUFFER","","",null,null],[17,"INT_IMAGE_1D_ARRAY","","",null,null],[17,"INT_IMAGE_2D_ARRAY","","",null,null],[17,"INT_IMAGE_CUBE_MAP_ARRAY","","",null,null],[17,"INT_IMAGE_2D_MULTISAMPLE","","",null,null],[17,"INT_IMAGE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"UNSIGNED_INT_IMAGE_1D","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D","","",null,null],[17,"UNSIGNED_INT_IMAGE_3D","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_RECT","","",null,null],[17,"UNSIGNED_INT_IMAGE_CUBE","","",null,null],[17,"UNSIGNED_INT_IMAGE_BUFFER","","",null,null],[17,"UNSIGNED_INT_IMAGE_1D_ARRAY","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_ARRAY","","",null,null],[17,"UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_MULTISAMPLE","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"MAX_IMAGE_SAMPLES","","",null,null],[17,"IMAGE_BINDING_FORMAT","","",null,null],[17,"RGB10_A2UI","","",null,null],[17,"MIN_MAP_BUFFER_ALIGNMENT","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_TYPE","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_BY_SIZE","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_BY_CLASS","","",null,null],[17,"MAX_VERTEX_IMAGE_UNIFORMS","","",null,null],[17,"MAX_TESS_CONTROL_IMAGE_UNIFORMS","","",null,null],[17,"MAX_TESS_EVALUATION_IMAGE_UNIFORMS","","",null,null],[17,"MAX_GEOMETRY_IMAGE_UNIFORMS","","",null,null],[17,"MAX_FRAGMENT_IMAGE_UNIFORMS","","",null,null],[17,"MAX_COMBINED_IMAGE_UNIFORMS","","",null,null],[17,"SHADER_STORAGE_BUFFER","","",null,null],[17,"SHADER_STORAGE_BUFFER_BINDING","","",null,null],[17,"SHADER_STORAGE_BUFFER_START","","",null,null],[17,"SHADER_STORAGE_BUFFER_SIZE","","",null,null],[17,"MAX_VERTEX_SHADER_STORAGE_BLOCKS","","",null,null],[17,"MAX_GEOMETRY_SHADER_STORAGE_BLOCKS","","",null,null],[17,"MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS","","",null,null],[17,"MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS","","",null,null],[17,"MAX_FRAGMENT_SHADER_STORAGE_BLOCKS","","",null,null],[17,"MAX_COMPUTE_SHADER_STORAGE_BLOCKS","","",null,null],[17,"MAX_COMBINED_SHADER_STORAGE_BLOCKS","","",null,null],[17,"MAX_SHADER_STORAGE_BUFFER_BINDINGS","","",null,null],[17,"MAX_SHADER_STORAGE_BLOCK_SIZE","","",null,null],[17,"SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"DEPTH_STENCIL_TEXTURE_MODE","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_INVOCATIONS","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER","","",null,null],[17,"DISPATCH_INDIRECT_BUFFER","","",null,null],[17,"DISPATCH_INDIRECT_BUFFER_BINDING","","",null,null],[17,"TEXTURE_2D_MULTISAMPLE","","",null,null],[17,"PROXY_TEXTURE_2D_MULTISAMPLE","","",null,null],[17,"TEXTURE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"TEXTURE_BINDING_2D_MULTISAMPLE","","",null,null],[17,"TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"TEXTURE_SAMPLES","","",null,null],[17,"TEXTURE_FIXED_SAMPLE_LOCATIONS","","",null,null],[17,"SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"MAX_COLOR_TEXTURE_SAMPLES","","",null,null],[17,"MAX_DEPTH_TEXTURE_SAMPLES","","",null,null],[17,"MAX_INTEGER_SAMPLES","","",null,null],[17,"MAX_SERVER_WAIT_TIMEOUT","","",null,null],[17,"OBJECT_TYPE","","",null,null],[17,"SYNC_CONDITION","","",null,null],[17,"SYNC_STATUS","","",null,null],[17,"SYNC_FLAGS","","",null,null],[17,"SYNC_FENCE","","",null,null],[17,"SYNC_GPU_COMMANDS_COMPLETE","","",null,null],[17,"UNSIGNALED","","",null,null],[17,"SIGNALED","","",null,null],[17,"ALREADY_SIGNALED","","",null,null],[17,"TIMEOUT_EXPIRED","","",null,null],[17,"CONDITION_SATISFIED","","",null,null],[17,"WAIT_FAILED","","",null,null],[17,"BUFFER_ACCESS_FLAGS","","",null,null],[17,"BUFFER_MAP_LENGTH","","",null,null],[17,"BUFFER_MAP_OFFSET","","",null,null],[17,"MAX_VERTEX_OUTPUT_COMPONENTS","","",null,null],[17,"MAX_GEOMETRY_INPUT_COMPONENTS","","",null,null],[17,"MAX_GEOMETRY_OUTPUT_COMPONENTS","","",null,null],[17,"MAX_FRAGMENT_INPUT_COMPONENTS","","",null,null],[17,"CONTEXT_PROFILE_MASK","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_WIDTH","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_HEIGHT","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_DEPTH","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_SIZE","","",null,null],[17,"PACK_COMPRESSED_BLOCK_WIDTH","","",null,null],[17,"PACK_COMPRESSED_BLOCK_HEIGHT","","",null,null],[17,"PACK_COMPRESSED_BLOCK_DEPTH","","",null,null],[17,"PACK_COMPRESSED_BLOCK_SIZE","","",null,null],[17,"TEXTURE_IMMUTABLE_FORMAT","","",null,null],[17,"MAX_DEBUG_MESSAGE_LENGTH","","",null,null],[17,"MAX_DEBUG_LOGGED_MESSAGES","","",null,null],[17,"DEBUG_LOGGED_MESSAGES","","",null,null],[17,"DEBUG_SEVERITY_HIGH","","",null,null],[17,"DEBUG_SEVERITY_MEDIUM","","",null,null],[17,"DEBUG_SEVERITY_LOW","","",null,null],[17,"QUERY_BUFFER","","",null,null],[17,"QUERY_BUFFER_BINDING","","",null,null],[17,"QUERY_RESULT_NO_WAIT","","",null,null],[17,"TEXTURE_BUFFER_OFFSET","","",null,null],[17,"TEXTURE_BUFFER_SIZE","","",null,null],[17,"TEXTURE_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"COMPUTE_SHADER","","",null,null],[17,"MAX_COMPUTE_UNIFORM_BLOCKS","","",null,null],[17,"MAX_COMPUTE_TEXTURE_IMAGE_UNITS","","",null,null],[17,"MAX_COMPUTE_IMAGE_UNIFORMS","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_COUNT","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_SIZE","","",null,null],[17,"COMPRESSED_R11_EAC","","",null,null],[17,"COMPRESSED_SIGNED_R11_EAC","","",null,null],[17,"COMPRESSED_RG11_EAC","","",null,null],[17,"COMPRESSED_SIGNED_RG11_EAC","","",null,null],[17,"COMPRESSED_RGB8_ETC2","","",null,null],[17,"COMPRESSED_SRGB8_ETC2","","",null,null],[17,"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",null,null],[17,"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",null,null],[17,"COMPRESSED_RGBA8_ETC2_EAC","","",null,null],[17,"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","","",null,null],[17,"ATOMIC_COUNTER_BUFFER","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_BINDING","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_START","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_SIZE","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_DATA_SIZE","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"MAX_VERTEX_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"MAX_COMBINED_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"MAX_VERTEX_ATOMIC_COUNTERS","","",null,null],[17,"MAX_TESS_CONTROL_ATOMIC_COUNTERS","","",null,null],[17,"MAX_TESS_EVALUATION_ATOMIC_COUNTERS","","",null,null],[17,"MAX_GEOMETRY_ATOMIC_COUNTERS","","",null,null],[17,"MAX_FRAGMENT_ATOMIC_COUNTERS","","",null,null],[17,"MAX_COMBINED_ATOMIC_COUNTERS","","",null,null],[17,"MAX_ATOMIC_COUNTER_BUFFER_SIZE","","",null,null],[17,"ACTIVE_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX","","",null,null],[17,"UNSIGNED_INT_ATOMIC_COUNTER","","",null,null],[17,"MAX_ATOMIC_COUNTER_BUFFER_BINDINGS","","",null,null],[17,"DEBUG_OUTPUT","","",null,null],[17,"UNIFORM","","",null,null],[17,"UNIFORM_BLOCK","","",null,null],[17,"PROGRAM_INPUT","","",null,null],[17,"PROGRAM_OUTPUT","","",null,null],[17,"BUFFER_VARIABLE","","",null,null],[17,"SHADER_STORAGE_BLOCK","","",null,null],[17,"IS_PER_PATCH","","",null,null],[17,"VERTEX_SUBROUTINE","","",null,null],[17,"TESS_CONTROL_SUBROUTINE","","",null,null],[17,"TESS_EVALUATION_SUBROUTINE","","",null,null],[17,"GEOMETRY_SUBROUTINE","","",null,null],[17,"FRAGMENT_SUBROUTINE","","",null,null],[17,"COMPUTE_SUBROUTINE","","",null,null],[17,"VERTEX_SUBROUTINE_UNIFORM","","",null,null],[17,"TESS_CONTROL_SUBROUTINE_UNIFORM","","",null,null],[17,"TESS_EVALUATION_SUBROUTINE_UNIFORM","","",null,null],[17,"GEOMETRY_SUBROUTINE_UNIFORM","","",null,null],[17,"FRAGMENT_SUBROUTINE_UNIFORM","","",null,null],[17,"COMPUTE_SUBROUTINE_UNIFORM","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYING","","",null,null],[17,"ACTIVE_RESOURCES","","",null,null],[17,"MAX_NAME_LENGTH","","",null,null],[17,"MAX_NUM_ACTIVE_VARIABLES","","",null,null],[17,"MAX_NUM_COMPATIBLE_SUBROUTINES","","",null,null],[17,"NAME_LENGTH","","",null,null],[17,"TYPE","","",null,null],[17,"ARRAY_SIZE","","",null,null],[17,"OFFSET","","",null,null],[17,"BLOCK_INDEX","","",null,null],[17,"ARRAY_STRIDE","","",null,null],[17,"MATRIX_STRIDE","","",null,null],[17,"IS_ROW_MAJOR","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_INDEX","","",null,null],[17,"BUFFER_BINDING","","",null,null],[17,"BUFFER_DATA_SIZE","","",null,null],[17,"NUM_ACTIVE_VARIABLES","","",null,null],[17,"ACTIVE_VARIABLES","","",null,null],[17,"REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"REFERENCED_BY_TESS_CONTROL_SHADER","","",null,null],[17,"REFERENCED_BY_TESS_EVALUATION_SHADER","","",null,null],[17,"REFERENCED_BY_GEOMETRY_SHADER","","",null,null],[17,"REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"REFERENCED_BY_COMPUTE_SHADER","","",null,null],[17,"TOP_LEVEL_ARRAY_SIZE","","",null,null],[17,"TOP_LEVEL_ARRAY_STRIDE","","",null,null],[17,"LOCATION","","",null,null],[17,"LOCATION_INDEX","","",null,null],[17,"FRAMEBUFFER_DEFAULT_WIDTH","","",null,null],[17,"FRAMEBUFFER_DEFAULT_HEIGHT","","",null,null],[17,"FRAMEBUFFER_DEFAULT_LAYERS","","",null,null],[17,"FRAMEBUFFER_DEFAULT_SAMPLES","","",null,null],[17,"FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS","","",null,null],[17,"MAX_FRAMEBUFFER_WIDTH","","",null,null],[17,"MAX_FRAMEBUFFER_HEIGHT","","",null,null],[17,"MAX_FRAMEBUFFER_LAYERS","","",null,null],[17,"MAX_FRAMEBUFFER_SAMPLES","","",null,null],[17,"LOCATION_COMPONENT","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_INDEX","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_STRIDE","","",null,null],[17,"CLIP_ORIGIN","","",null,null],[17,"CLIP_DEPTH_MODE","","",null,null],[17,"NEGATIVE_ONE_TO_ONE","","",null,null],[17,"ZERO_TO_ONE","","",null,null],[17,"CLEAR_TEXTURE","","",null,null],[17,"NUM_SAMPLE_COUNTS","","",null,null],[11,"new","","Creates a `FnPtr` from a load attempt.",0,null]],"paths":[[3,"FnPtr"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["gif"] = {"doc":"# GIF en- and decoding library [![Build Status](https://travis-ci.org/PistonDevelopers/image-gif.svg?branch=master)](https://travis-ci.org/PistonDevelopers/image-gif)","items":[[3,"Frame","gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",0,null],[12,"dispose","","Disposal method.",0,null],[12,"transparent","","Transparent index (if available).",0,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",0,null],[12,"top","","Offset from the top border of the canvas.",0,null],[12,"left","","Offset from the left border of the canvas.",0,null],[12,"width","","Width of the frame.",0,null],[12,"height","","Height of the frame.",0,null],[12,"interlaced","","True if the image is interlaced.",0,null],[12,"palette","","Frame local color palette if available.",0,null],[12,"buffer","","Buffer containing the image data.\nOnly indices unless configured differently.",0,null],[3,"StreamingDecoder","","GIF decoder which supports streaming",null,null],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means\nthat there is no memory limit set.",null,null],[12,"0","","",1,null],[3,"Reader","","GIF decoder",null,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[4,"Block","","Known GIF block types",null,null],[13,"Image","","Image block.",2,null],[13,"Extension","","Extension block.",2,null],[13,"Trailer","","Image trailer.",2,null],[4,"Extension","","Known GIF extensions",null,null],[13,"Text","","Text extension.",3,null],[13,"Control","","Control extension.",3,null],[13,"Comment","","Comment extension.",3,null],[13,"Application","","Application extension.",3,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",4,null],[13,"Keep","","Do not dispose.",4,null],[13,"Background","","Restore to background color.",4,null],[13,"Previous","","Restore to previous.",4,null],[4,"Decoded","","Indicates whether a certain object has been decoded",null,null],[13,"Nothing","","Decoded nothing.",5,null],[13,"GlobalPalette","","Global palette.",5,null],[13,"BackgroundColor","","Index of the background color in the global palette.",5,null],[13,"Trailer","","Decoded the image trailer.",5,null],[13,"BlockStart","","The start of a block.",5,null],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",5,null],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",5,null],[13,"Frame","","Decoded all information of the next frame.\nThe returned frame does **not** any image data.",5,null],[13,"Data","","Decoded some data of the current frame.",5,null],[13,"DataEnd","","No more data available the current frame.",5,null],[4,"DecodingError","","Decoding error.",null,null],[13,"Format","","Returned if the image is found to be malformed.",6,null],[13,"Internal","","Internal (logic) error.",6,null],[13,"Io","","Wraps `std::io::Error`.",6,null],[4,"ColorOutput","","Output mode for the image data",null,null],[13,"RGBA","","The decoder expands the image data to 32bit RGBA.\nThis affects:",7,null],[13,"Indexed","","The decoder returns the raw indexed data.",7,null],[4,"Extensions","","Configures how extensions should be handled",null,null],[13,"Save","","Saves all extention data",8,null],[13,"Skip","","Skips the data of unknown extensions\nand extracts the data from known ones",8,null],[4,"ExtensionData","","Extension data.",null,null],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",9,null],[12,"flags","gif::ExtensionData","Flags.",9,null],[12,"delay","","Frame delay.",9,null],[12,"trns","","Transparent index.",9,null],[13,"Repetitions","gif","Sets the number of repetitions",9,null],[4,"Repeat","","Number of repetitions",null,null],[13,"Finite","","Finite number of repetitions",10,null],[13,"Infinite","","Infinite number of repetitions",10,null],[11,"clone","","",4,{"inputs":[{"name":"disposalmethod"}],"output":{"name":"disposalmethod"}}],[11,"fmt","","",4,{"inputs":[{"name":"disposalmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",4,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"fmt","","",2,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",2,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"extension"}],"output":{"name":"extension"}}],[11,"fmt","","",3,{"inputs":[{"name":"extension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option&lt;Self&gt;`",3,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",0,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"frame"}}],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,null],[11,"fmt","","",6,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"extensions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"extensions"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"set_param","","",8,{"inputs":[{"name":"extensions"},{"name":"streamingdecoder"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"streamingdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new streaming decoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder.",11,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",11,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",11,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"frame"}}],[11,"current_frame","","Current frame info as a ref.",11,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"frame"}}],[11,"width","","Width of the image",11,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",11,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"u16"}}],[11,"fmt","","",7,{"inputs":[{"name":"coloroutput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"coloroutput"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"set_param","","",7,{"inputs":[{"name":"coloroutput"},{"name":"decoder"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"memorylimit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",1,{"inputs":[{"name":"memorylimit"},{"name":"decoder"}],"output":null}],[11,"new","","Creates a new decoder builder",12,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"next_frame_info","","Returns the next frame info",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"read_next_frame","","Reads the next frame from the image.",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer until the buffer has been\nfilled completely.",13,null],[11,"buffer_size","","Output buffer size",13,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"line_length","","Line length of the current frame",13,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"global_palette","","The global color palette",13,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[11,"width","","Width of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"u16"}}],[11,"bg_color","","Index of the background color in the global palette",13,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[11,"set_param","","",10,{"inputs":[{"name":"repeat"},{"name":"encoder"}],"output":{"name":"result"}}],[11,"new_control_ext","","Constructor for control extension data.",9,{"inputs":[{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"name":"option"}],"output":{"name":"extensiondata"}}],[11,"new","","Creates a new encoder.",14,null],[11,"write_global_palette","","Writes the global color palette.",14,null],[11,"write_frame","","Writes a frame to the image.",14,{"inputs":[{"name":"encoder"},{"name":"frame"}],"output":{"name":"result"}}],[11,"write_extension","","Writes an extension to the image.",14,{"inputs":[{"name":"encoder"},{"name":"extensiondata"}],"output":{"name":"result"}}],[11,"write_raw_extension","","Writes a raw extension to the image.",14,null],[11,"drop","","",14,{"inputs":[{"name":"encoder"}],"output":null}],[8,"SetParameter","","Implemented for objects that have parameters.",null,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null],[8,"Parameter","","Configuration parameter trait.",null,null],[16,"Result","","Result type of `set_param`.",16,null],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,{"inputs":[{"name":"parameter"},{"name":"object"}],"output":{"name":"result"}}],[11,"set","","Sets `value` as a parameter of `self`.",15,null]],"paths":[[3,"Frame"],[3,"MemoryLimit"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex["wayland_client"] = {"doc":"","items":[[3,"EventIterator","wayland_client","",null,null],[3,"ProxyId","","",null,null],[4,"Event","","",null,null],[13,"Wayland","","",0,null],[5,"is_available","","Checks if the wayland lib is available",null,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"eventiterator"}}],[11,"drop","","",1,{"inputs":[{"name":"eventiterator"}],"output":null}],[11,"next","","",1,{"inputs":[{"name":"eventiterator"}],"output":{"name":"option"}}],[0,"egl","","",null,null],[3,"WlEglSurface","wayland_client::egl","",null,null],[5,"is_available","","Checks if the wayland-egl lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[11,"new","","",2,{"inputs":[{"name":"wlsurface"},{"name":"i32"},{"name":"i32"}],"output":{"name":"wleglsurface"}}],[11,"destroy","","",2,{"inputs":[{"name":"wleglsurface"}],"output":{"name":"wlsurface"}}],[11,"get_size","","",2,null],[11,"resize","","",2,{"inputs":[{"name":"wleglsurface"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"egl_surface_ptr","","",2,null],[11,"egl_surfaceptr","","DEPRECATED",2,null],[11,"drop","","",2,{"inputs":[{"name":"wleglsurface"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"wleglsurface"}],"output":{"name":"wlsurface"}}],[0,"cursor","wayland_client","",null,null],[3,"CursorTheme","wayland_client::cursor","Represents a cursor theme loaded from the system.",null,null],[3,"Cursor","","A cursor from a theme. Can contain several images if animated.",null,null],[3,"CursorImageBuffer","","A buffer containing a cursor image.",null,null],[5,"is_available","","Checks if the wayland-cursor lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_theme","","Attempts to load a cursor theme from given name.",null,{"inputs":[{"name":"option"},{"name":"u32"},{"name":"wlshm"}],"output":{"name":"cursortheme"}}],[11,"get_cursor","","Retrieve a cursor from the theme.",3,{"inputs":[{"name":"cursortheme"},{"name":"str"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"cursortheme"}],"output":null}],[11,"name","","Retrieve the name of this cursor.",4,{"inputs":[{"name":"cursor"}],"output":{"name":"string"}}],[11,"image_count","","Retrieve the number of images contained in this\nanimated cursor",4,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"frame","","Retrieve the image number of cursor animation.",4,{"inputs":[{"name":"cursor"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"frame_and_duration","","Retrieve the image number and its duration.",4,null],[11,"frame_buffer","","Retrieve a `CursorImageBuffer` containing the given image of an animation.",4,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":{"name":"option"}}],[11,"frame_info","","Retrive the metadate associated with given frame of the animation.",4,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":{"name":"option"}}],[11,"deref","","",5,{"inputs":[{"name":"cursorimagebuffer"}],"output":{"name":"wlbuffer"}}],[11,"drop","","",5,{"inputs":[{"name":"cursorimagebuffer"}],"output":null}],[0,"wayland","wayland_client","",null,null],[3,"WlCallback","wayland_client::wayland","callback object",null,null],[3,"WlDisplay","","core global object",null,null],[3,"WlRegistry","","global registry object",null,null],[3,"ReadEventsGuard","","A guard over a read intention.",null,null],[4,"WlCallbackEvent","","",null,null],[13,"Done","","done event",6,null],[4,"WlDisplayEvent","","",null,null],[13,"Error","","fatal error event",7,null],[13,"DeleteId","","acknowledge object ID deletion",7,null],[4,"WlRegistryEvent","","",null,null],[13,"Global","","announce global object",8,null],[13,"GlobalRemove","","announce removal of global object",8,null],[4,"WaylandProtocolEvent","","An event generated by the protocol wayland.",null,null],[13,"WlDisplay","","",9,null],[13,"WlRegistry","","",9,null],[13,"WlCallback","","",9,null],[13,"WlShm","","",9,null],[13,"WlBuffer","","",9,null],[13,"WlDataOffer","","",9,null],[13,"WlDataSource","","",9,null],[13,"WlDataDevice","","",9,null],[13,"WlShellSurface","","",9,null],[13,"WlSurface","","",9,null],[13,"WlSeat","","",9,null],[13,"WlPointer","","",9,null],[13,"WlKeyboard","","",9,null],[13,"WlTouch","","",9,null],[13,"WlOutput","","",9,null],[5,"get_display","","",null,{"inputs":[],"output":{"name":"option"}}],[0,"compositor","","",null,null],[3,"WlCompositor","wayland_client::wayland::compositor","the compositor singleton",null,null],[3,"WlRegion","","region interface",null,null],[3,"WlSurface","","an onscreen surface",null,null],[4,"WlSurfaceEvent","","",null,null],[13,"Enter","","surface enters an output",10,null],[13,"Leave","","surface leaves an output",10,null],[0,"data_device","wayland_client::wayland","",null,null],[3,"WlDataDevice","wayland_client::wayland::data_device","data transfer device",null,null],[3,"WlDataDeviceManager","","data transfer interface",null,null],[3,"WlDataOffer","","offer to transfer data",null,null],[3,"WlDataSource","","offer to transfer data",null,null],[4,"WlDataDeviceEvent","","",null,null],[13,"DataOffer","","introduce a new wl_data_offer",11,null],[13,"Enter","","initiate drag-and-drop session",11,null],[13,"Leave","","end drag-and-drop session",11,null],[13,"Motion","","drag-and-drop session motion",11,null],[13,"Drop","","end drag-and-drag session successfully",11,null],[13,"Selection","","advertise new selection",11,null],[4,"WlDataOfferEvent","","",null,null],[13,"Offer","","advertise offered mime type",12,null],[4,"WlDataSourceEvent","","",null,null],[13,"Target","","a target accepts an offered mime type",13,null],[13,"Send","","send the data",13,null],[13,"Cancelled","","selection was cancelled",13,null],[0,"output","wayland_client::wayland","",null,null],[3,"WlOutput","wayland_client::wayland::output","compositor output region",null,null],[4,"WlOutputEvent","","",null,null],[13,"Geometry","","properties of the output",14,null],[13,"Mode","","advertise available modes for the output",14,null],[13,"Done","","sent all information about output",14,null],[13,"Scale","","output scaling properties",14,null],[4,"WlOutputSubpixel","","subpixel geometry information",null,null],[13,"Unknown","","",15,null],[13,"None","","",15,null],[13,"HorizontalRgb","","",15,null],[13,"HorizontalBgr","","",15,null],[13,"VerticalRgb","","",15,null],[13,"VerticalBgr","","",15,null],[4,"WlOutputTransform","","transform from framebuffer to output",null,null],[13,"Normal","","",16,null],[13,"T90","","",16,null],[13,"T180","","",16,null],[13,"T270","","",16,null],[13,"Flipped","","",16,null],[13,"Flipped90","","",16,null],[13,"Flipped180","","",16,null],[13,"Flipped270","","",16,null],[0,"WlOutputMode","","mode information",null,null],[3,"WlOutputMode","wayland_client::wayland::output::WlOutputMode","",null,null],[17,"Current","","indicates this is the current mode",null,null],[17,"Preferred","","indicates this is the preferred mode",null,null],[11,"hash","","",17,null],[11,"cmp","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"eq","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",17,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"all","","Returns the set containing all flags.",17,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",17,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",17,{"inputs":[{"name":"u32"}],"output":{"name":"wloutputmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",17,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",17,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"not","","Returns the complement of this set of flags.",17,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"from_iter","","",17,{"inputs":[{"name":"t"}],"output":{"name":"wloutputmode"}}],[0,"seat","wayland_client::wayland","",null,null],[3,"WlKeyboard","wayland_client::wayland::seat","keyboard input device",null,null],[3,"WlPointer","","pointer input device",null,null],[3,"WlSeat","","group of input devices",null,null],[3,"WlTouch","","touchscreen input device",null,null],[4,"WlKeyboardEvent","","",null,null],[13,"Keymap","","keyboard mapping",18,null],[13,"Enter","","enter event",18,null],[13,"Leave","","leave event",18,null],[13,"Key","","key event",18,null],[13,"Modifiers","","modifier and group state",18,null],[13,"RepeatInfo","","repeat rate and delay",18,null],[4,"WlPointerEvent","","",null,null],[13,"Enter","","enter event",19,null],[13,"Leave","","leave event",19,null],[13,"Motion","","pointer motion event",19,null],[13,"Button","","pointer button event",19,null],[13,"Axis","","axis event",19,null],[4,"WlSeatEvent","","",null,null],[13,"Capabilities","","seat capabilities changed",20,null],[13,"Name","","unique identifier for this seat",20,null],[4,"WlTouchEvent","","",null,null],[13,"Down","","touch down event and beginning of a touch sequence",21,null],[13,"Up","","end of a touch event sequence",21,null],[13,"Motion","","update of touch point coordinates",21,null],[13,"Frame","","end of touch frame event",21,null],[13,"Cancel","","touch session cancelled",21,null],[4,"WlKeyboardKeyState","","physical key state",null,null],[13,"Released","","key is not pressed",22,null],[13,"Pressed","","key is pressed",22,null],[4,"WlKeyboardKeymapFormat","","keyboard mapping format",null,null],[13,"NoKeymap","","no keymap; client must understand how to interpret the raw keycode",23,null],[13,"XkbV1","","libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode",23,null],[4,"WlPointerAxis","","axis types",null,null],[13,"VerticalScroll","","",24,null],[13,"HorizontalScroll","","",24,null],[4,"WlPointerButtonState","","physical button state",null,null],[13,"Released","","The button is not pressed",25,null],[13,"Pressed","","The button is pressed",25,null],[0,"WlSeatCapability","","seat capability bitmask",null,null],[3,"WlSeatCapability","wayland_client::wayland::seat::WlSeatCapability","",null,null],[17,"Pointer","","The seat has pointer devices",null,null],[17,"Keyboard","","The seat has one or more keyboards",null,null],[17,"Touch","","The seat has touch devices",null,null],[11,"hash","","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"eq","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",26,{"inputs":[{"name":"u32"}],"output":{"name":"wlseatcapability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"from_iter","","",26,{"inputs":[{"name":"t"}],"output":{"name":"wlseatcapability"}}],[0,"shell","wayland_client::wayland","",null,null],[3,"WlShell","wayland_client::wayland::shell","create desktop-style surfaces",null,null],[3,"WlShellSurface","","desktop-style metadata interface",null,null],[4,"WlShellSurfaceEvent","","",null,null],[13,"Ping","","ping client",27,null],[13,"Configure","","suggest resize",27,null],[13,"PopupDone","","popup interaction is done",27,null],[4,"WlShellSurfaceFullscreenMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",28,null],[13,"Scale","","scale, preserve the surface&#39;s aspect ratio and center on output",28,null],[13,"Driver","","switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch",28,null],[13,"Fill","","no upscaling, center on output and add black borders to compensate size mismatch",28,null],[0,"WlShellSurfaceResize","","edge values for resizing",null,null],[3,"WlShellSurfaceResize","wayland_client::wayland::shell::WlShellSurfaceResize","",null,null],[17,"None","","",null,null],[17,"Top","","",null,null],[17,"Bottom","","",null,null],[17,"Left","","",null,null],[17,"TopLeft","","",null,null],[17,"BottomLeft","","",null,null],[17,"Right","","",null,null],[17,"TopRight","","",null,null],[17,"BottomRight","","",null,null],[11,"hash","","",29,null],[11,"cmp","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"eq","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",29,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"all","","Returns the set containing all flags.",29,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",29,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",29,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"not","","Returns the complement of this set of flags.",29,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"from_iter","","",29,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfaceresize"}}],[0,"WlShellSurfaceTransient","wayland_client::wayland::shell","details of transient behaviour",null,null],[3,"WlShellSurfaceTransient","wayland_client::wayland::shell::WlShellSurfaceTransient","",null,null],[17,"Inactive","","do not set keyboard focus",null,null],[11,"hash","","",30,null],[11,"cmp","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"eq","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",30,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"all","","Returns the set containing all flags.",30,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",30,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",30,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",30,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",30,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",30,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"sub","","Returns the set difference of the two sets of flags.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"not","","Returns the complement of this set of flags.",30,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"from_iter","","",30,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfacetransient"}}],[0,"shm","wayland_client::wayland","",null,null],[3,"WlBuffer","wayland_client::wayland::shm","content for a wl_surface",null,null],[3,"WlShm","","shared memory support",null,null],[3,"WlShmPool","","a shared memory pool",null,null],[4,"WlBufferEvent","","",null,null],[13,"Release","","compositor releases buffer",31,null],[4,"WlShmEvent","","",null,null],[13,"Format","","pixel format description",32,null],[4,"WlShmFormat","","pixel formats",null,null],[13,"Argb8888","","32-bit ARGB format",33,null],[13,"Xrgb8888","","32-bit RGB format",33,null],[13,"C8","","",33,null],[13,"Rgb332","","",33,null],[13,"Bgr233","","",33,null],[13,"Xrgb4444","","",33,null],[13,"Xbgr4444","","",33,null],[13,"Rgbx4444","","",33,null],[13,"Bgrx4444","","",33,null],[13,"Argb4444","","",33,null],[13,"Abgr4444","","",33,null],[13,"Rgba4444","","",33,null],[13,"Bgra4444","","",33,null],[13,"Xrgb1555","","",33,null],[13,"Xbgr1555","","",33,null],[13,"Rgbx5551","","",33,null],[13,"Bgrx5551","","",33,null],[13,"Argb1555","","",33,null],[13,"Abgr1555","","",33,null],[13,"Rgba5551","","",33,null],[13,"Bgra5551","","",33,null],[13,"Rgb565","","",33,null],[13,"Bgr565","","",33,null],[13,"Rgb888","","",33,null],[13,"Bgr888","","",33,null],[13,"Xbgr8888","","",33,null],[13,"Rgbx8888","","",33,null],[13,"Bgrx8888","","",33,null],[13,"Abgr8888","","",33,null],[13,"Rgba8888","","",33,null],[13,"Bgra8888","","",33,null],[13,"Xrgb2101010","","",33,null],[13,"Xbgr2101010","","",33,null],[13,"Rgbx1010102","","",33,null],[13,"Bgrx1010102","","",33,null],[13,"Argb2101010","","",33,null],[13,"Abgr2101010","","",33,null],[13,"Rgba1010102","","",33,null],[13,"Bgra1010102","","",33,null],[13,"Yuyv","","",33,null],[13,"Yvyu","","",33,null],[13,"Uyvy","","",33,null],[13,"Vyuy","","",33,null],[13,"Ayuv","","",33,null],[13,"Nv12","","",33,null],[13,"Nv21","","",33,null],[13,"Nv16","","",33,null],[13,"Nv61","","",33,null],[13,"Yuv410","","",33,null],[13,"Yvu410","","",33,null],[13,"Yuv411","","",33,null],[13,"Yvu411","","",33,null],[13,"Yuv420","","",33,null],[13,"Yvu420","","",33,null],[13,"Yuv422","","",33,null],[13,"Yvu422","","",33,null],[13,"Yuv444","","",33,null],[13,"Yvu444","","",33,null],[0,"subcompositor","wayland_client::wayland","",null,null],[3,"WlSubcompositor","wayland_client::wayland::subcompositor","sub-surface compositing",null,null],[3,"WlSubsurface","","sub-surface interface to a wl_surface",null,null],[11,"sync_roundtrip","wayland_client::wayland","Synchronous roundtrip",34,{"inputs":[{"name":"wldisplay"}],"output":{"name":"result"}}],[11,"dispatch","","Blocking dispatch",34,{"inputs":[{"name":"wldisplay"}],"output":{"name":"result"}}],[11,"dispatch_pending","","Non-blocking dispatch",34,{"inputs":[{"name":"wldisplay"}],"output":{"name":"result"}}],[11,"prepare_read","","Prepare an conccurent read",34,{"inputs":[{"name":"wldisplay"}],"output":{"name":"option"}}],[11,"flush","","Non-blocking write to the server",34,{"inputs":[{"name":"wldisplay"}],"output":{"name":"result"}}],[11,"drop","","",34,{"inputs":[{"name":"wldisplay"}],"output":null}],[11,"read_events","","Read events",35,{"inputs":[{"name":"readeventsguard"}],"output":{"name":"result"}}],[11,"cancel","","Cancel the read",35,{"inputs":[{"name":"readeventsguard"}],"output":null}],[11,"drop","","",35,{"inputs":[{"name":"readeventsguard"}],"output":null}],[8,"Proxy","wayland_client","",null,null],[10,"ptr","","",36,null],[10,"interface","","",36,null],[10,"interface_name","","The internal name of this interface, as advertized by the registry if it is a global.",36,{"inputs":[],"output":{"name":"str"}}],[10,"version","","The maximum version of this interface handled by the library.",36,{"inputs":[],"output":{"name":"u32"}}],[10,"id","","Get the id of this proxy",36,{"inputs":[{"name":"proxy"}],"output":{"name":"proxyid"}}],[10,"from_ptr","","Creates a proxy from a fresh ptr",36,null],[10,"from_ptr_no_own","","Creates a proxy from a ptr that is managed elsewhere",36,null],[10,"set_evt_iterator","","Set the event iterator associated to this proxy",36,{"inputs":[{"name":"proxy"},{"name":"eventiterator"}],"output":null}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"proxyid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"proxyid"},{"name":"proxyid"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"proxyid"},{"name":"proxyid"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"proxyid"}],"output":{"name":"proxyid"}}],[14,"wayland_env!","","This macro allows you to create a simple wayland environment handler.",null,null],[11,"hash","wayland_client::wayland::shell::WlShellSurfaceResize","",29,null],[11,"cmp","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"eq","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",29,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"all","","Returns the set containing all flags.",29,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",29,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",29,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"not","","Returns the complement of this set of flags.",29,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"from_iter","","",29,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"hash","wayland_client::wayland::shell::WlShellSurfaceTransient","",30,null],[11,"cmp","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"eq","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",30,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"all","","Returns the set containing all flags.",30,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",30,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",30,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",30,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",30,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",30,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"sub","","Returns the set difference of the two sets of flags.",30,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"not","","Returns the complement of this set of flags.",30,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"from_iter","","",30,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"hash","wayland_client::wayland::seat::WlSeatCapability","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"eq","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"wlseatcapability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",26,{"inputs":[{"name":"u32"}],"output":{"name":"wlseatcapability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"from_iter","","",26,{"inputs":[{"name":"t"}],"output":{"name":"wlseatcapability"}}],[11,"hash","wayland_client::wayland::output::WlOutputMode","",17,null],[11,"cmp","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"eq","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"wloutputmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",17,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"all","","Returns the set containing all flags.",17,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",17,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",17,{"inputs":[{"name":"u32"}],"output":{"name":"wloutputmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",17,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",17,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",17,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"not","","Returns the complement of this set of flags.",17,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"from_iter","","",17,{"inputs":[{"name":"t"}],"output":{"name":"wloutputmode"}}],[11,"fmt","wayland_client::wayland","",9,{"inputs":[{"name":"waylandprotocolevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ptr","","",34,null],[11,"interface","","",34,null],[11,"interface_name","","",34,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",34,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",34,{"inputs":[{"name":"wldisplay"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",34,null],[11,"from_ptr_no_own","","",34,null],[11,"set_evt_iterator","","",34,{"inputs":[{"name":"wldisplay"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"wldisplay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"wldisplayevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sync","","asynchronous roundtrip",34,{"inputs":[{"name":"wldisplay"}],"output":{"name":"wlcallback"}}],[11,"get_registry","","get global registry object",34,{"inputs":[{"name":"wldisplay"}],"output":{"name":"wlregistry"}}],[11,"ptr","","",38,null],[11,"interface","","",38,null],[11,"interface_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",38,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",38,{"inputs":[{"name":"wlregistry"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",38,null],[11,"from_ptr_no_own","","",38,null],[11,"set_evt_iterator","","",38,{"inputs":[{"name":"wlregistry"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"wlregistry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"wlregistryevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","bind an object to the display",38,{"inputs":[{"name":"wlregistry"},{"name":"u32"},{"name":"u32"}],"output":{"name":"t"}}],[11,"drop","","",38,{"inputs":[{"name":"wlregistry"}],"output":null}],[11,"ptr","","",39,null],[11,"interface","","",39,null],[11,"interface_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",39,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",39,{"inputs":[{"name":"wlcallback"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",39,null],[11,"from_ptr_no_own","","",39,null],[11,"set_evt_iterator","","",39,{"inputs":[{"name":"wlcallback"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",39,{"inputs":[{"name":"wlcallback"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"wlcallbackevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",39,{"inputs":[{"name":"wlcallback"}],"output":null}],[11,"ptr","wayland_client::wayland::compositor","",40,null],[11,"interface","","",40,null],[11,"interface_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",40,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",40,{"inputs":[{"name":"wlcompositor"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",40,null],[11,"from_ptr_no_own","","",40,null],[11,"set_evt_iterator","","",40,{"inputs":[{"name":"wlcompositor"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",40,{"inputs":[{"name":"wlcompositor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_surface","","create new surface",40,{"inputs":[{"name":"wlcompositor"}],"output":{"name":"wlsurface"}}],[11,"create_region","","create new region",40,{"inputs":[{"name":"wlcompositor"}],"output":{"name":"wlregion"}}],[11,"drop","","",40,{"inputs":[{"name":"wlcompositor"}],"output":null}],[11,"ptr","wayland_client::wayland::shm","",41,null],[11,"interface","","",41,null],[11,"interface_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",41,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",41,{"inputs":[{"name":"wlshmpool"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",41,null],[11,"from_ptr_no_own","","",41,null],[11,"set_evt_iterator","","",41,{"inputs":[{"name":"wlshmpool"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",41,{"inputs":[{"name":"wlshmpool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_buffer","","create a buffer from the pool",41,{"inputs":[{"name":"wlshmpool"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":{"name":"wlbuffer"}}],[11,"destroy","","destroy the pool",41,{"inputs":[{"name":"wlshmpool"}],"output":null}],[11,"resize","","change the size of the pool mapping",41,{"inputs":[{"name":"wlshmpool"},{"name":"i32"}],"output":null}],[11,"drop","","",41,{"inputs":[{"name":"wlshmpool"}],"output":null}],[11,"ptr","","",42,null],[11,"interface","","",42,null],[11,"interface_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",42,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",42,{"inputs":[{"name":"wlshm"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",42,null],[11,"from_ptr_no_own","","",42,null],[11,"set_evt_iterator","","",42,{"inputs":[{"name":"wlshm"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",42,{"inputs":[{"name":"wlshm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"wlshmformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"wlshmevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_pool","","create a shm pool",42,{"inputs":[{"name":"wlshm"},{"name":"rawfd"},{"name":"i32"}],"output":{"name":"wlshmpool"}}],[11,"drop","","",42,{"inputs":[{"name":"wlshm"}],"output":null}],[11,"ptr","","",43,null],[11,"interface","","",43,null],[11,"interface_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",43,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",43,{"inputs":[{"name":"wlbuffer"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",43,null],[11,"from_ptr_no_own","","",43,null],[11,"set_evt_iterator","","",43,{"inputs":[{"name":"wlbuffer"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",43,{"inputs":[{"name":"wlbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"wlbufferevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","destroy a buffer",43,{"inputs":[{"name":"wlbuffer"}],"output":null}],[11,"drop","","",43,{"inputs":[{"name":"wlbuffer"}],"output":null}],[11,"ptr","wayland_client::wayland::data_device","",44,null],[11,"interface","","",44,null],[11,"interface_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",44,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",44,{"inputs":[{"name":"wldataoffer"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",44,null],[11,"from_ptr_no_own","","",44,null],[11,"set_evt_iterator","","",44,{"inputs":[{"name":"wldataoffer"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",44,{"inputs":[{"name":"wldataoffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"wldataofferevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"accept","","accept one of the offered mime types",44,{"inputs":[{"name":"wldataoffer"},{"name":"u32"},{"name":"option"}],"output":null}],[11,"receive","","request that the data is transferred",44,{"inputs":[{"name":"wldataoffer"},{"name":"string"},{"name":"rawfd"}],"output":null}],[11,"destroy","","destroy data offer",44,{"inputs":[{"name":"wldataoffer"}],"output":null}],[11,"drop","","",44,{"inputs":[{"name":"wldataoffer"}],"output":null}],[11,"ptr","","",45,null],[11,"interface","","",45,null],[11,"interface_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",45,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",45,{"inputs":[{"name":"wldatasource"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",45,null],[11,"from_ptr_no_own","","",45,null],[11,"set_evt_iterator","","",45,{"inputs":[{"name":"wldatasource"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",45,{"inputs":[{"name":"wldatasource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"wldatasourceevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"offer","","add an offered mime type",45,{"inputs":[{"name":"wldatasource"},{"name":"string"}],"output":null}],[11,"destroy","","destroy the data source",45,{"inputs":[{"name":"wldatasource"}],"output":null}],[11,"drop","","",45,{"inputs":[{"name":"wldatasource"}],"output":null}],[11,"ptr","","",46,null],[11,"interface","","",46,null],[11,"interface_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",46,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",46,{"inputs":[{"name":"wldatadevice"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",46,null],[11,"from_ptr_no_own","","",46,null],[11,"set_evt_iterator","","",46,{"inputs":[{"name":"wldatadevice"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"wldatadevice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"wldatadeviceevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_drag","","start drag-and-drop operation",46,{"inputs":[{"name":"wldatadevice"},{"name":"option"},{"name":"wlsurface"},{"name":"option"},{"name":"u32"}],"output":null}],[11,"set_selection","","copy data to the selection",46,{"inputs":[{"name":"wldatadevice"},{"name":"option"},{"name":"u32"}],"output":null}],[11,"release","","destroy data device",46,{"inputs":[{"name":"wldatadevice"}],"output":null}],[11,"drop","","",46,{"inputs":[{"name":"wldatadevice"}],"output":null}],[11,"ptr","","",47,null],[11,"interface","","",47,null],[11,"interface_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",47,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",47,{"inputs":[{"name":"wldatadevicemanager"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",47,null],[11,"from_ptr_no_own","","",47,null],[11,"set_evt_iterator","","",47,{"inputs":[{"name":"wldatadevicemanager"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",47,{"inputs":[{"name":"wldatadevicemanager"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_data_source","","create a new data source",47,{"inputs":[{"name":"wldatadevicemanager"}],"output":{"name":"wldatasource"}}],[11,"get_data_device","","create a new data device",47,{"inputs":[{"name":"wldatadevicemanager"},{"name":"wlseat"}],"output":{"name":"wldatadevice"}}],[11,"drop","","",47,{"inputs":[{"name":"wldatadevicemanager"}],"output":null}],[11,"ptr","wayland_client::wayland::shell","",48,null],[11,"interface","","",48,null],[11,"interface_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",48,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",48,{"inputs":[{"name":"wlshell"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",48,null],[11,"from_ptr_no_own","","",48,null],[11,"set_evt_iterator","","",48,{"inputs":[{"name":"wlshell"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",48,{"inputs":[{"name":"wlshell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_shell_surface","","create a shell surface from a surface",48,{"inputs":[{"name":"wlshell"},{"name":"wlsurface"}],"output":{"name":"wlshellsurface"}}],[11,"drop","","",48,{"inputs":[{"name":"wlshell"}],"output":null}],[11,"ptr","","",49,null],[11,"interface","","",49,null],[11,"interface_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",49,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",49,{"inputs":[{"name":"wlshellsurface"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",49,null],[11,"from_ptr_no_own","","",49,null],[11,"set_evt_iterator","","",49,{"inputs":[{"name":"wlshellsurface"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",49,{"inputs":[{"name":"wlshellsurface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"wlshellsurfacefullscreenmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"wlshellsurfaceevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pong","","respond to a ping event",49,{"inputs":[{"name":"wlshellsurface"},{"name":"u32"}],"output":null}],[11,"move_","","start an interactive move",49,{"inputs":[{"name":"wlshellsurface"},{"name":"wlseat"},{"name":"u32"}],"output":null}],[11,"resize","","start an interactive resize",49,{"inputs":[{"name":"wlshellsurface"},{"name":"wlseat"},{"name":"u32"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"set_toplevel","","make the surface a toplevel surface",49,{"inputs":[{"name":"wlshellsurface"}],"output":null}],[11,"set_transient","","make the surface a transient surface",49,{"inputs":[{"name":"wlshellsurface"},{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"set_fullscreen","","make the surface a fullscreen surface",49,{"inputs":[{"name":"wlshellsurface"},{"name":"wlshellsurfacefullscreenmethod"},{"name":"u32"},{"name":"option"}],"output":null}],[11,"set_popup","","make the surface a popup surface",49,{"inputs":[{"name":"wlshellsurface"},{"name":"wlseat"},{"name":"u32"},{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"set_maximized","","make the surface a maximized surface",49,{"inputs":[{"name":"wlshellsurface"},{"name":"option"}],"output":null}],[11,"set_title","","set surface title",49,{"inputs":[{"name":"wlshellsurface"},{"name":"string"}],"output":null}],[11,"set_class","","set surface class",49,{"inputs":[{"name":"wlshellsurface"},{"name":"string"}],"output":null}],[11,"drop","","",49,{"inputs":[{"name":"wlshellsurface"}],"output":null}],[11,"ptr","wayland_client::wayland::compositor","",50,null],[11,"interface","","",50,null],[11,"interface_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",50,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",50,{"inputs":[{"name":"wlsurface"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",50,null],[11,"from_ptr_no_own","","",50,null],[11,"set_evt_iterator","","",50,{"inputs":[{"name":"wlsurface"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",50,{"inputs":[{"name":"wlsurface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"wlsurfaceevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","delete surface",50,{"inputs":[{"name":"wlsurface"}],"output":null}],[11,"attach","","set the surface contents",50,{"inputs":[{"name":"wlsurface"},{"name":"option"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"damage","","mark part of the surface damaged",50,{"inputs":[{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"frame","","request a frame throttling hint",50,{"inputs":[{"name":"wlsurface"}],"output":{"name":"wlcallback"}}],[11,"set_opaque_region","","set opaque region",50,{"inputs":[{"name":"wlsurface"},{"name":"option"}],"output":null}],[11,"set_input_region","","set input region",50,{"inputs":[{"name":"wlsurface"},{"name":"option"}],"output":null}],[11,"commit","","commit pending surface state",50,{"inputs":[{"name":"wlsurface"}],"output":null}],[11,"set_buffer_transform","","sets the buffer transformation",50,{"inputs":[{"name":"wlsurface"},{"name":"i32"}],"output":null}],[11,"set_buffer_scale","","sets the buffer scaling factor",50,{"inputs":[{"name":"wlsurface"},{"name":"i32"}],"output":null}],[11,"drop","","",50,{"inputs":[{"name":"wlsurface"}],"output":null}],[11,"ptr","wayland_client::wayland::seat","",51,null],[11,"interface","","",51,null],[11,"interface_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",51,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",51,{"inputs":[{"name":"wlseat"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",51,null],[11,"from_ptr_no_own","","",51,null],[11,"set_evt_iterator","","",51,{"inputs":[{"name":"wlseat"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",51,{"inputs":[{"name":"wlseat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"wlseatevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_pointer","","return pointer object",51,{"inputs":[{"name":"wlseat"}],"output":{"name":"wlpointer"}}],[11,"get_keyboard","","return keyboard object",51,{"inputs":[{"name":"wlseat"}],"output":{"name":"wlkeyboard"}}],[11,"get_touch","","return touch object",51,{"inputs":[{"name":"wlseat"}],"output":{"name":"wltouch"}}],[11,"release","","release the seat object",51,{"inputs":[{"name":"wlseat"}],"output":null}],[11,"drop","","",51,{"inputs":[{"name":"wlseat"}],"output":null}],[11,"ptr","","",52,null],[11,"interface","","",52,null],[11,"interface_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",52,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",52,{"inputs":[{"name":"wlpointer"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",52,null],[11,"from_ptr_no_own","","",52,null],[11,"set_evt_iterator","","",52,{"inputs":[{"name":"wlpointer"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"wlpointer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"wlpointerbuttonstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"wlpointeraxis"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"wlpointerevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_cursor","","set the pointer surface",52,{"inputs":[{"name":"wlpointer"},{"name":"u32"},{"name":"option"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"release","","release the pointer object",52,{"inputs":[{"name":"wlpointer"}],"output":null}],[11,"drop","","",52,{"inputs":[{"name":"wlpointer"}],"output":null}],[11,"ptr","","",53,null],[11,"interface","","",53,null],[11,"interface_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",53,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",53,{"inputs":[{"name":"wlkeyboard"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",53,null],[11,"from_ptr_no_own","","",53,null],[11,"set_evt_iterator","","",53,{"inputs":[{"name":"wlkeyboard"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",53,{"inputs":[{"name":"wlkeyboard"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"wlkeyboardkeymapformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"wlkeyboardkeystate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"wlkeyboardevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"release","","release the keyboard object",53,{"inputs":[{"name":"wlkeyboard"}],"output":null}],[11,"drop","","",53,{"inputs":[{"name":"wlkeyboard"}],"output":null}],[11,"ptr","","",54,null],[11,"interface","","",54,null],[11,"interface_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",54,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",54,{"inputs":[{"name":"wltouch"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",54,null],[11,"from_ptr_no_own","","",54,null],[11,"set_evt_iterator","","",54,{"inputs":[{"name":"wltouch"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",54,{"inputs":[{"name":"wltouch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"wltouchevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"release","","release the touch object",54,{"inputs":[{"name":"wltouch"}],"output":null}],[11,"drop","","",54,{"inputs":[{"name":"wltouch"}],"output":null}],[11,"ptr","wayland_client::wayland::output","",55,null],[11,"interface","","",55,null],[11,"interface_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",55,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",55,{"inputs":[{"name":"wloutput"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",55,null],[11,"from_ptr_no_own","","",55,null],[11,"set_evt_iterator","","",55,{"inputs":[{"name":"wloutput"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",55,{"inputs":[{"name":"wloutput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"wloutputsubpixel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"wloutputtransform"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"wloutputevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",55,{"inputs":[{"name":"wloutput"}],"output":null}],[11,"ptr","wayland_client::wayland::compositor","",56,null],[11,"interface","","",56,null],[11,"interface_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",56,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",56,{"inputs":[{"name":"wlregion"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",56,null],[11,"from_ptr_no_own","","",56,null],[11,"set_evt_iterator","","",56,{"inputs":[{"name":"wlregion"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",56,{"inputs":[{"name":"wlregion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","destroy region",56,{"inputs":[{"name":"wlregion"}],"output":null}],[11,"add","","add rectangle to region",56,{"inputs":[{"name":"wlregion"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"subtract","","subtract rectangle from region",56,{"inputs":[{"name":"wlregion"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"drop","","",56,{"inputs":[{"name":"wlregion"}],"output":null}],[11,"ptr","wayland_client::wayland::subcompositor","",57,null],[11,"interface","","",57,null],[11,"interface_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",57,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",57,{"inputs":[{"name":"wlsubcompositor"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",57,null],[11,"from_ptr_no_own","","",57,null],[11,"set_evt_iterator","","",57,{"inputs":[{"name":"wlsubcompositor"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"wlsubcompositor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","unbind from the subcompositor interface",57,{"inputs":[{"name":"wlsubcompositor"}],"output":null}],[11,"get_subsurface","","give a surface the role sub-surface",57,{"inputs":[{"name":"wlsubcompositor"},{"name":"wlsurface"},{"name":"wlsurface"}],"output":{"name":"wlsubsurface"}}],[11,"drop","","",57,{"inputs":[{"name":"wlsubcompositor"}],"output":null}],[11,"ptr","","",58,null],[11,"interface","","",58,null],[11,"interface_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",58,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",58,{"inputs":[{"name":"wlsubsurface"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",58,null],[11,"from_ptr_no_own","","",58,null],[11,"set_evt_iterator","","",58,{"inputs":[{"name":"wlsubsurface"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"wlsubsurface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","remove sub-surface interface",58,{"inputs":[{"name":"wlsubsurface"}],"output":null}],[11,"set_position","","reposition the sub-surface",58,{"inputs":[{"name":"wlsubsurface"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"place_above","","restack the sub-surface",58,{"inputs":[{"name":"wlsubsurface"},{"name":"wlsurface"}],"output":null}],[11,"place_below","","restack the sub-surface",58,{"inputs":[{"name":"wlsubsurface"},{"name":"wlsurface"}],"output":null}],[11,"set_sync","","set sub-surface to synchronized mode",58,{"inputs":[{"name":"wlsubsurface"}],"output":null}],[11,"set_desync","","set sub-surface to desynchronized mode",58,{"inputs":[{"name":"wlsubsurface"}],"output":null}],[11,"drop","","",58,{"inputs":[{"name":"wlsubsurface"}],"output":null}]],"paths":[[4,"Event"],[3,"EventIterator"],[3,"WlEglSurface"],[3,"CursorTheme"],[3,"Cursor"],[3,"CursorImageBuffer"],[4,"WlCallbackEvent"],[4,"WlDisplayEvent"],[4,"WlRegistryEvent"],[4,"WaylandProtocolEvent"],[4,"WlSurfaceEvent"],[4,"WlDataDeviceEvent"],[4,"WlDataOfferEvent"],[4,"WlDataSourceEvent"],[4,"WlOutputEvent"],[4,"WlOutputSubpixel"],[4,"WlOutputTransform"],[3,"WlOutputMode"],[4,"WlKeyboardEvent"],[4,"WlPointerEvent"],[4,"WlSeatEvent"],[4,"WlTouchEvent"],[4,"WlKeyboardKeyState"],[4,"WlKeyboardKeymapFormat"],[4,"WlPointerAxis"],[4,"WlPointerButtonState"],[3,"WlSeatCapability"],[4,"WlShellSurfaceEvent"],[4,"WlShellSurfaceFullscreenMethod"],[3,"WlShellSurfaceResize"],[3,"WlShellSurfaceTransient"],[4,"WlBufferEvent"],[4,"WlShmEvent"],[4,"WlShmFormat"],[3,"WlDisplay"],[3,"ReadEventsGuard"],[8,"Proxy"],[3,"ProxyId"],[3,"WlRegistry"],[3,"WlCallback"],[3,"WlCompositor"],[3,"WlShmPool"],[3,"WlShm"],[3,"WlBuffer"],[3,"WlDataOffer"],[3,"WlDataSource"],[3,"WlDataDevice"],[3,"WlDataDeviceManager"],[3,"WlShell"],[3,"WlShellSurface"],[3,"WlSurface"],[3,"WlSeat"],[3,"WlPointer"],[3,"WlKeyboard"],[3,"WlTouch"],[3,"WlOutput"],[3,"WlRegion"],[3,"WlSubcompositor"],[3,"WlSubsurface"]]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of\nbytes was not a valid input stream of bytes.",null,null],[4,"Status","","Possible status results of compressing some data or successfully\ndecompressing a block of data.",null,null],[13,"Ok","","Indicates success.",0,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output\nbuffers being empty.",0,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have\nbeen written. Decompression/compression should not be called again.",0,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or\ndecompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions,\nthis indicates that the underlying stream to decide how much data to\naccumulate before producing output in order to maximize compression.",1,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is\naligned on a byte boundary so that the decompressor can get all input\ndata available so far.",1,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is\nnot aligned to a byte boundary.",1,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the\noutput is not aligned on a byte boundary and up to seven vits of the\ncurrent block are held to be written as the next byte after the next\ndeflate block is completed.",1,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is\nreset so decompression can restart from this point if previous\ncompressed data has been damaged or if random access is desired.",1,null],[13,"Finish","","Pending input is processed and pending output is flushed.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in\nthis enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data\nslightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"new","","Create a new blank builder with no header by default.",3,{"inputs":[],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",3,{"inputs":[{"name":"gzbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",3,{"inputs":[{"name":"gzbuilder"},{"name":"vec"}],"output":{"name":"builder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",3,null],[11,"comment","","Configure the `comment` field in the gzip header.",3,null],[11,"write","","Consume this builder, creating a writer encoder in the process.",3,{"inputs":[{"name":"gzbuilder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",3,{"inputs":[{"name":"gzbuilder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"filename","","Returns the `filename` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"mtime","","Returns the `mtime` field of this gzip stream&#39;s header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"u32"}}],[11,"fmt","","",5,{"inputs":[{"name":"dataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new object ready for compressing data that it&#39;s given.",6,{"inputs":[{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis compression object.",6,{"inputs":[{"name":"compress"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis compression object.",6,{"inputs":[{"name":"compress"}],"output":{"name":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",6,{"inputs":[{"name":"compress"}],"output":null}],[11,"compress","","Compresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",6,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming\nonly as much input as needed and writing as much output as possible.",6,null],[11,"new","","Creates a new object ready for decompressing data that it&#39;s given.",7,{"inputs":[{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis decompression object.",7,{"inputs":[{"name":"decompress"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis decompression object.",7,{"inputs":[{"name":"decompress"}],"output":{"name":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",7,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector\nspecified by `output`.",7,null],[11,"description","","",5,{"inputs":[{"name":"dataerror"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"dataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","","Types which operate over `Reader` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[0,"write","flate2","Types which operate over `Writer` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"result"}}],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"deflatedecoder"}}],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",9,{"inputs":[{"name":"flatewriteext"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",9,{"inputs":[{"name":"flatewriteext"}],"output":{"name":"deflatedecoder"}}],[11,"clone","","",2,{"inputs":[{"name":"compression"}],"output":{"name":"compression"}}],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",10,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",10,{"inputs":[{"name":"deflateencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",10,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"result"}}],[11,"write","","",10,null],[11,"flush","","",10,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"result"}}],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",11,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",11,{"inputs":[{"name":"deflateencoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",11,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"r"}}],[11,"read","","",11,null],[11,"new","","Creates a new decoder which will decompress data read from the given\nstream.",12,{"inputs":[{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",12,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",12,{"inputs":[{"name":"deflatedecoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",13,{"inputs":[{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",13,{"inputs":[{"name":"deflatedecoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",14,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the\nencoding is done.",14,{"inputs":[{"name":"gzencoder"}],"output":{"name":"result"}}],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"gzencoder"}],"output":{"name":"result"}}],[11,"drop","","",14,{"inputs":[{"name":"gzencoder"}],"output":null}],[11,"new","flate2::read","Creates a new encoder which will use the given compression level.",15,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",15,{"inputs":[{"name":"gzencoder"}],"output":{"name":"r"}}],[11,"read","","",15,null],[11,"new","","Creates a new decoder from the given reader, immediately parsing the\ngzip header.",16,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",16,{"inputs":[{"name":"gzdecoder"}],"output":{"name":"header"}}],[11,"read","","",16,null],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",17,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",17,{"inputs":[{"name":"zlibencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",17,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",18,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",18,{"inputs":[{"name":"zlibencoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",18,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"new","","Creates a new decoder which will decompress data read from the given\nstream.",19,{"inputs":[{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",19,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",19,{"inputs":[{"name":"zlibdecoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"read","","",19,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",20,{"inputs":[{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",20,{"inputs":[{"name":"zlibdecoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"result"}}]],"paths":[[4,"Status"],[4,"Flush"],[4,"Compression"],[3,"GzBuilder"],[3,"GzHeader"],[3,"DataError"],[3,"Compress"],[3,"Decompress"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"ZlibEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibDecoder"]]};
searchIndex["osmesa_sys"] = {"doc":"","items":[[3,"OsMesa","osmesa_sys","Symbols loaded from a shared library.",null,null],[12,"OSMesaColorClamp","","",0,null],[12,"OSMesaCreateContext","","",0,null],[12,"OSMesaCreateContextExt","","",0,null],[12,"OSMesaDestroyContext","","",0,null],[12,"OSMesaGetColorBuffer","","",0,null],[12,"OSMesaGetCurrentContext","","",0,null],[12,"OSMesaGetDepthBuffer","","",0,null],[12,"OSMesaGetIntegerv","","",0,null],[12,"OSMesaGetProcAddress","","",0,null],[12,"OSMesaMakeCurrent","","",0,null],[12,"OSMesaPixelStore","","",0,null],[3,"osmesa_context","","",null,null],[5,"OSMesaColorClamp","","",null,null],[5,"OSMesaCreateContext","","",null,{"inputs":[{"name":"c_uint"},{"name":"osmesacontext"}],"output":{"name":"osmesacontext"}}],[5,"OSMesaCreateContextExt","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_int"},{"name":"c_int"},{"name":"c_int"},{"name":"osmesacontext"}],"output":{"name":"osmesacontext"}}],[5,"OSMesaDestroyContext","","",null,null],[5,"OSMesaGetColorBuffer","","",null,null],[5,"OSMesaGetCurrentContext","","",null,{"inputs":[],"output":{"name":"osmesacontext"}}],[5,"OSMesaGetDepthBuffer","","",null,null],[5,"OSMesaGetIntegerv","","",null,null],[5,"OSMesaGetProcAddress","","",null,null],[5,"OSMesaMakeCurrent","","",null,null],[5,"OSMesaPixelStore","","",null,null],[6,"OSMesaContext","","",null,null],[6,"OSMESAproc","","",null,null],[17,"OSMESA_BGRA","","",null,null],[17,"OSMESA_ARGB","","",null,null],[17,"OSMESA_BGR","","",null,null],[17,"OSMESA_RGB_565","","",null,null],[17,"OSMESA_COLOR_INDEX","","",null,null],[17,"OSMESA_RGB","","",null,null],[17,"OSMESA_RGBA","","",null,null],[17,"OSMESA_WIDTH","","",null,null],[17,"OSMESA_HEIGHT","","",null,null],[17,"OSMESA_FORMAT","","",null,null],[17,"OSMESA_TYPE","","",null,null],[17,"OSMESA_MAX_WIDTH","","",null,null],[17,"OSMESA_MAX_HEIGHT","","",null,null],[17,"OSMESA_ROW_LENGTH","","",null,null],[17,"OSMESA_Y_UP","","",null,null],[11,"open","","Tries to open the dynamic library.",0,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"try_loading","","Try loading the static symbols linked to this library.",0,{"inputs":[],"output":{"name":"result"}}]],"paths":[[3,"OsMesa"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["shared_library"] = {"doc":"","items":[[4,"LoadingError","shared_library","Error that can happen while loading the shared library.",null,null],[13,"LibraryNotFound","","",0,null],[12,"descr","shared_library::LoadingError","",0,null],[13,"SymbolNotFound","shared_library","One of the symbols could not be found in the library.",0,null],[12,"symbol","shared_library::LoadingError","The symbol.",0,null],[0,"dynamic_library","shared_library","Dynamic library facilities.",null,null],[3,"DynamicLibrary","shared_library::dynamic_library","",null,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",1,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"drop","shared_library::dynamic_library","",2,{"inputs":[{"name":"dynamiclibrary"}],"output":null}],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",2,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process&#39;s search path for dynamic libraries",2,{"inputs":[{"name":"path"}],"output":null}],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",2,null],[11,"envvar","","Returns the environment variable for this process&#39;s dynamic library\nsearch path",2,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",2,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Access the value at the symbol of the dynamic library",2,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","shared_library","",0,{"inputs":[{"name":"loadingerror"}],"output":{"name":"loadingerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"loadingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"shared_library!","","",null,null]],"paths":[[4,"LoadingError"],[3,"Mutex"],[3,"DynamicLibrary"]]};
searchIndex["memmap"] = {"doc":"A cross-platform Rust API for memory maps.","items":[[3,"MmapOptions","memmap","",null,null],[12,"stack","","Indicates that the memory map should be suitable for a stack.",0,null],[3,"Mmap","","A memory-mapped buffer.",null,null],[3,"MmapView","","A view of a memory map.",null,null],[3,"MmapViewSync","","A thread-safe view of a memory map.",null,null],[4,"Protection","","Memory map protection.",null,null],[13,"Read","","A read-only memory map. Writes to the memory map will result in a panic.",1,null],[13,"ReadWrite","","A read-write memory map. Writes to the memory map will be reflected in\nthe file after a call to `Mmap::flush` or after the `Mmap` is dropped.",1,null],[13,"ReadCopy","","A read, copy-on-write memory map. Writes to the memory map will not be\ncarried through to the underlying file. It is unspecified whether\nchanges made to the file after the memory map is created will be\nvisible.",1,null],[11,"eq","","",1,{"inputs":[{"name":"protection"},{"name":"protection"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"protection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"protection"}],"output":{"name":"protection"}}],[11,"write","","Returns `true` if the `Protection` is writable.",1,{"inputs":[{"name":"protection"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"mmapoptions"},{"name":"mmapoptions"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"mmapoptions"},{"name":"mmapoptions"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"mmapoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"mmapoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"mmapoptions"}],"output":{"name":"mmapoptions"}}],[11,"open","","Opens a file-backed memory map.",2,{"inputs":[{"name":"file"},{"name":"protection"}],"output":{"name":"result"}}],[11,"open_path","","Opens a file-backed memory map.",2,{"inputs":[{"name":"p"},{"name":"protection"}],"output":{"name":"result"}}],[11,"open_with_offset","","Opens a file-backed memory map with the specified offset and length.",2,{"inputs":[{"name":"file"},{"name":"protection"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"anonymous","","Opens an anonymous memory map.",2,{"inputs":[{"name":"usize"},{"name":"protection"}],"output":{"name":"result"}}],[11,"anonymous_with_options","","Opens an anonymous memory map with the provided options.",2,{"inputs":[{"name":"usize"},{"name":"protection"},{"name":"mmapoptions"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"mmap"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"mmap"}],"output":{"name":"result"}}],[11,"flush_range","","Flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"mmap"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush_async_range","","Asynchronously flushes outstanding memory map modifications in the range\nto disk.",2,{"inputs":[{"name":"mmap"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map.",2,{"inputs":[{"name":"mmap"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a pointer to the mapped memory.",2,null],[11,"mut_ptr","","Returns a pointer to the mapped memory.",2,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",2,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",2,null],[11,"into_view","","Creates a splittable mmap view from the mmap.",2,{"inputs":[{"name":"mmap"}],"output":{"name":"mmapview"}}],[11,"into_view_sync","","Creates a thread-safe splittable mmap view from the mmap.",2,{"inputs":[{"name":"mmap"}],"output":{"name":"mmapviewsync"}}],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",3,{"inputs":[{"name":"mmapview"},{"name":"usize"}],"output":{"name":"result"}}],[11,"restrict","","Restricts the range of the view to the provided offset and length.",3,{"inputs":[{"name":"mmapview"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding view modifications to disk.",3,{"inputs":[{"name":"mmapview"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to\ndisk.",3,{"inputs":[{"name":"mmapview"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map view.",3,{"inputs":[{"name":"mmapview"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a shared pointer to the mapped memory.",3,null],[11,"mut_ptr","","Returns a mutable pointer to the mapped memory.",3,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",3,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",3,null],[11,"clone","","Clones the view of the memory map.",3,{"inputs":[{"name":"mmapview"}],"output":{"name":"mmapview"}}],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",4,{"inputs":[{"name":"mmapviewsync"},{"name":"usize"}],"output":{"name":"result"}}],[11,"restrict","","Restricts the range of this view to the provided offset and length.",4,{"inputs":[{"name":"mmapviewsync"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding view modifications to disk.",4,{"inputs":[{"name":"mmapviewsync"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to disk.",4,{"inputs":[{"name":"mmapviewsync"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map view.",4,{"inputs":[{"name":"mmapviewsync"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a shared pointer to the mapped memory.",4,null],[11,"mut_ptr","","Returns a mutable pointer to the mapped memory.",4,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",4,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",4,null],[11,"clone","","Clones the view of the memory map.",4,{"inputs":[{"name":"mmapviewsync"}],"output":{"name":"mmapviewsync"}}]],"paths":[[3,"MmapOptions"],[4,"Protection"],[3,"Mmap"],[3,"MmapView"],[3,"MmapViewSync"]]};
searchIndex["dylib"] = {"doc":"Dynamic library facilities.","items":[[3,"DynamicLibrary","dylib","",null,null],[11,"drop","","",0,{"inputs":[{"name":"dynamiclibrary"}],"output":null}],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",0,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process&#39;s search path for dynamic libraries",0,{"inputs":[{"name":"path"}],"output":null}],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",0,null],[11,"envvar","","Returns the environment variable for this process&#39;s dynamic library\nsearch path",0,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",0,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Access the value at the symbol of the dynamic library",0,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"DynamicLibrary"]]};
searchIndex["fs2"] = {"doc":"","items":[[5,"lock_contended_error","fs2","Returns the error that a call to a try lock method on a contended file will\nreturn.",null,{"inputs":[],"output":{"name":"error"}}],[5,"free_space","","Returns the number of free bytes in the file system containing the provided\npath.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"available_space","","Returns the available space in bytes to non-priveleged users in the file\nsystem containing the provided path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"total_space","","Returns the total space in bytes in the file system containing the provided\npath.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"allocation_granularity","","Returns the filesystem&#39;s disk space allocation granularity in bytes.\nThe provided path may be for any file in the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[8,"FileExt","","Extension trait for `File` providing duplication and locking methods.",null,null],[10,"duplicate","","Returns a duplicate instance of the file.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"allocated_size","","Returns the amount of physical space allocated for a file.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"allocate","","Ensures that at least `len` bytes of disk space are allocated for the\nfile, and the file size is at least `len` bytes. After a successful call\nto `allocate`, subsequent writes to the file within the specified length\nare guaranteed not to fail because of lack of disk space.",0,{"inputs":[{"name":"fileext"},{"name":"u64"}],"output":{"name":"result"}}],[10,"lock_shared","","Locks the file for shared usage, blocking if the file is currently\nlocked exclusively.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"lock_exclusive","","Locks the file for exclusive usage, blocking if the file is currently\nlocked.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"try_lock_shared","","Locks the file for shared usage, or returns a an error if the file is\ncurrently locked (see `lock_contended_error`).",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"try_lock_exclusive","","Locks the file for shared usage, or returns a an error if the file is\ncurrently locked (see `lock_contended_error`).",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[10,"unlock","","Unlocks the file.",0,{"inputs":[{"name":"fileext"}],"output":{"name":"result"}}],[11,"duplicate","std::fs","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"allocated_size","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"allocate","","",1,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"lock_shared","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"lock_exclusive","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"try_lock_shared","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"try_lock_exclusive","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"unlock","","",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}]],"paths":[[8,"FileExt"],[3,"File"]]};
searchIndex["gfx_gl"] = {"doc":"An OpenGL loader generated by [gl-rs](https://github.com/bjz/gl-rs).","items":[[3,"FnPtr","gfx_gl","",null,null],[3,"Gl","","",null,null],[12,"GetString","","",0,null],[12,"GetProgramBinary","","Fallbacks: GetProgramBinaryOES",0,null],[12,"ProgramUniformMatrix2fv","","Fallbacks: ProgramUniformMatrix2fvEXT",0,null],[12,"GetSamplerParameterIiv","","Fallbacks: GetSamplerParameterIivEXT, GetSamplerParameterIivOES",0,null],[12,"GetTexParameteriv","","",0,null],[12,"GetActiveUniformBlockName","","",0,null],[12,"UniformMatrix4x3fv","","Fallbacks: UniformMatrix4x3fvNV",0,null],[12,"FlushMappedBufferRange","","Fallbacks: FlushMappedBufferRangeAPPLE, FlushMappedBufferRangeEXT",0,null],[12,"VertexP2uiv","","",0,null],[12,"ShaderBinary","","",0,null],[12,"DrawTransformFeedbackStream","","",0,null],[12,"SamplerParameterIiv","","Fallbacks: SamplerParameterIivEXT, SamplerParameterIivOES",0,null],[12,"VertexAttribI3uiv","","Fallbacks: VertexAttribI3uivEXT",0,null],[12,"NamedFramebufferReadBuffer","","",0,null],[12,"BindTransformFeedback","","",0,null],[12,"ColorMask","","",0,null],[12,"ProgramUniformMatrix2x3dv","","",0,null],[12,"GetNamedBufferParameteriv","","",0,null],[12,"GetBufferParameteriv","","Fallbacks: GetBufferParameterivARB",0,null],[12,"GetUniformiv","","Fallbacks: GetUniformivARB",0,null],[12,"DeleteFramebuffers","","Fallbacks: DeleteFramebuffersEXT",0,null],[12,"ProgramUniform1iv","","Fallbacks: ProgramUniform1ivEXT",0,null],[12,"VertexAttribI1uiv","","Fallbacks: VertexAttribI1uivEXT",0,null],[12,"StencilOp","","",0,null],[12,"VertexAttrib1f","","Fallbacks: VertexAttrib1fARB, VertexAttrib1fNV",0,null],[12,"TexImage2D","","",0,null],[12,"GetProgramResourceLocationIndex","","",0,null],[12,"TextureSubImage3D","","",0,null],[12,"CompressedTexSubImage2D","","Fallbacks: CompressedTexSubImage2DARB",0,null],[12,"PrimitiveRestartIndex","","",0,null],[12,"VertexAttrib4s","","Fallbacks: VertexAttrib4sARB, VertexAttrib4sNV",0,null],[12,"TextureParameterf","","",0,null],[12,"VertexAttribI3i","","Fallbacks: VertexAttribI3iEXT",0,null],[12,"GetTransformFeedbackiv","","",0,null],[12,"UniformMatrix4x2fv","","Fallbacks: UniformMatrix4x2fvNV",0,null],[12,"DispatchComputeIndirect","","",0,null],[12,"GetVertexAttribfv","","Fallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV",0,null],[12,"TextureStorage3DMultisample","","",0,null],[12,"ColorMaski","","Fallbacks: ColorMaskIndexedEXT, ColorMaskiEXT, ColorMaskiOES",0,null],[12,"ProgramUniformMatrix3dv","","",0,null],[12,"ProgramUniformMatrix3fv","","Fallbacks: ProgramUniformMatrix3fvEXT",0,null],[12,"NamedBufferData","","",0,null],[12,"GetTextureLevelParameterfv","","",0,null],[12,"Flush","","",0,null],[12,"GetVertexArrayIndexed64iv","","",0,null],[12,"DrawArrays","","Fallbacks: DrawArraysEXT",0,null],[12,"TexBuffer","","Fallbacks: TexBufferARB, TexBufferEXT, TexBufferOES",0,null],[12,"Uniform2fv","","Fallbacks: Uniform2fvARB",0,null],[12,"Uniform3d","","",0,null],[12,"DrawArraysInstanced","","Fallbacks: DrawArraysInstancedANGLE, DrawArraysInstancedARB, DrawArraysInstancedEXT, DrawArraysInstancedNV",0,null],[12,"CopyTexSubImage2D","","Fallbacks: CopyTexSubImage2DEXT",0,null],[12,"Uniform2i","","Fallbacks: Uniform2iARB",0,null],[12,"CopyTexSubImage3D","","Fallbacks: CopyTexSubImage3DEXT, CopyTexSubImage3DOES",0,null],[12,"Uniform3iv","","Fallbacks: Uniform3ivARB",0,null],[12,"BindBufferRange","","Fallbacks: BindBufferRangeEXT, BindBufferRangeNV",0,null],[12,"UniformMatrix3x4dv","","",0,null],[12,"GetActiveAttrib","","Fallbacks: GetActiveAttribARB",0,null],[12,"VertexAttribI4sv","","Fallbacks: VertexAttribI4svEXT",0,null],[12,"VertexAttrib4Nsv","","Fallbacks: VertexAttrib4NsvARB",0,null],[12,"MapNamedBuffer","","",0,null],[12,"MultiDrawElementsIndirect","","Fallbacks: MultiDrawElementsIndirectAMD, MultiDrawElementsIndirectEXT",0,null],[12,"TexCoordP4ui","","",0,null],[12,"TexParameteri","","",0,null],[12,"GetSubroutineUniformLocation","","",0,null],[12,"BindTextures","","",0,null],[12,"StencilOpSeparate","","Fallbacks: StencilOpSeparateATI",0,null],[12,"TextureParameterfv","","",0,null],[12,"VertexAttribI3iv","","Fallbacks: VertexAttribI3ivEXT",0,null],[12,"VertexAttribL1dv","","Fallbacks: VertexAttribL1dvEXT",0,null],[12,"VertexArrayAttribFormat","","",0,null],[12,"GetVertexAttribdv","","Fallbacks: GetVertexAttribdvARB, GetVertexAttribdvNV",0,null],[12,"VertexAttrib3f","","Fallbacks: VertexAttrib3fARB, VertexAttrib3fNV",0,null],[12,"MultiTexCoordP2uiv","","",0,null],[12,"TextureStorage2D","","",0,null],[12,"GetTextureParameterfv","","",0,null],[12,"TransformFeedbackVaryings","","Fallbacks: TransformFeedbackVaryingsEXT",0,null],[12,"DebugMessageInsert","","Fallbacks: DebugMessageInsertARB, DebugMessageInsertKHR",0,null],[12,"IsEnabledi","","Fallbacks: IsEnabledIndexedEXT, IsEnablediEXT, IsEnablediNV, IsEnablediOES",0,null],[12,"BlendColor","","Fallbacks: BlendColorEXT",0,null],[12,"GenRenderbuffers","","Fallbacks: GenRenderbuffersEXT",0,null],[12,"ClipControl","","",0,null],[12,"BlendFunciARB","","",0,null],[12,"GetNamedFramebufferAttachmentParameteriv","","",0,null],[12,"GetSynciv","","Fallbacks: GetSyncivAPPLE",0,null],[12,"TextureView","","Fallbacks: TextureViewEXT, TextureViewOES",0,null],[12,"VertexAttribP3uiv","","",0,null],[12,"DeleteProgramPipelines","","",0,null],[12,"DeleteVertexArrays","","Fallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES",0,null],[12,"GetProgramPipelineInfoLog","","",0,null],[12,"Uniform4uiv","","Fallbacks: Uniform4uivEXT",0,null],[12,"Uniform4i","","Fallbacks: Uniform4iARB",0,null],[12,"CompressedTextureSubImage3D","","",0,null],[12,"BlendFuncSeparateiARB","","",0,null],[12,"ProgramUniform1fv","","Fallbacks: ProgramUniform1fvEXT",0,null],[12,"ProgramUniform3f","","Fallbacks: ProgramUniform3fEXT",0,null],[12,"GetnPixelMapusv","","",0,null],[12,"UniformBlockBinding","","",0,null],[12,"AttachShader","","Fallbacks: AttachObjectARB",0,null],[12,"GenVertexArrays","","Fallbacks: GenVertexArraysAPPLE, GenVertexArraysOES",0,null],[12,"Uniform4fv","","Fallbacks: Uniform4fvARB",0,null],[12,"DeleteBuffers","","Fallbacks: DeleteBuffersARB",0,null],[12,"CopyBufferSubData","","Fallbacks: CopyBufferSubDataNV",0,null],[12,"ProgramBinary","","Fallbacks: ProgramBinaryOES",0,null],[12,"SampleMaski","","",0,null],[12,"EndTransformFeedback","","Fallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV",0,null],[12,"DrawBuffer","","",0,null],[12,"ProgramUniformMatrix2x4dv","","",0,null],[12,"GetnConvolutionFilter","","",0,null],[12,"ProgramUniform1f","","Fallbacks: ProgramUniform1fEXT",0,null],[12,"DrawBuffers","","Fallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT",0,null],[12,"ClearNamedFramebufferfi","","",0,null],[12,"TexBufferRange","","Fallbacks: TexBufferRangeEXT, TexBufferRangeOES",0,null],[12,"MultiTexCoordP3ui","","",0,null],[12,"IsProgram","","",0,null],[12,"BindVertexBuffers","","",0,null],[12,"GetTexLevelParameteriv","","",0,null],[12,"TexParameterfv","","",0,null],[12,"TexParameterIuiv","","Fallbacks: TexParameterIuivEXT, TexParameterIuivOES",0,null],[12,"UniformMatrix2x4fv","","Fallbacks: UniformMatrix2x4fvNV",0,null],[12,"EndConditionalRender","","Fallbacks: EndConditionalRenderNV, EndConditionalRenderNVX",0,null],[12,"VertexAttrib1dv","","Fallbacks: VertexAttrib1dvARB, VertexAttrib1dvNV",0,null],[12,"PolygonOffset","","",0,null],[12,"VertexAttribI4bv","","Fallbacks: VertexAttribI4bvEXT",0,null],[12,"TexSubImage3D","","Fallbacks: TexSubImage3DEXT, TexSubImage3DOES",0,null],[12,"ProgramUniform4f","","Fallbacks: ProgramUniform4fEXT",0,null],[12,"VertexAttrib1s","","Fallbacks: VertexAttrib1sARB, VertexAttrib1sNV",0,null],[12,"DeleteTextures","","",0,null],[12,"DrawTransformFeedbackStreamInstanced","","",0,null],[12,"GetTextureParameterIiv","","",0,null],[12,"VertexAttribP1uiv","","",0,null],[12,"GetMultisamplefv","","Fallbacks: GetMultisamplefvNV",0,null],[12,"VertexAttrib2dv","","Fallbacks: VertexAttrib2dvARB, VertexAttrib2dvNV",0,null],[12,"DeleteShader","","",0,null],[12,"FramebufferRenderbuffer","","Fallbacks: FramebufferRenderbufferEXT",0,null],[12,"Uniform4ui","","Fallbacks: Uniform4uiEXT",0,null],[12,"InvalidateFramebuffer","","",0,null],[12,"ClearBufferuiv","","",0,null],[12,"BeginTransformFeedback","","Fallbacks: BeginTransformFeedbackEXT, BeginTransformFeedbackNV",0,null],[12,"ProgramUniform3dv","","",0,null],[12,"GetQueryiv","","Fallbacks: GetQueryivARB",0,null],[12,"FramebufferTexture1D","","Fallbacks: FramebufferTexture1DEXT",0,null],[12,"VertexAttrib2fv","","Fallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV",0,null],[12,"DepthRangeArrayv","","",0,null],[12,"TexImage3DMultisample","","",0,null],[12,"BlendFuncSeparatei","","Fallbacks: BlendFuncSeparateIndexedAMD, BlendFuncSeparateiARB, BlendFuncSeparateiEXT, BlendFuncSeparateiOES",0,null],[12,"BindImageTextures","","",0,null],[12,"NamedFramebufferParameteri","","",0,null],[12,"MemoryBarrierByRegion","","",0,null],[12,"GenFramebuffers","","Fallbacks: GenFramebuffersEXT",0,null],[12,"InvalidateNamedFramebufferSubData","","",0,null],[12,"NamedRenderbufferStorage","","",0,null],[12,"DepthRange","","",0,null],[12,"ProgramUniformMatrix3x2dv","","",0,null],[12,"DrawTransformFeedbackInstanced","","",0,null],[12,"Uniform2d","","",0,null],[12,"InvalidateBufferSubData","","",0,null],[12,"UniformMatrix2x4dv","","",0,null],[12,"DrawElementsIndirect","","",0,null],[12,"VertexAttribBinding","","",0,null],[12,"ViewportArrayv","","Fallbacks: ViewportArrayvNV",0,null],[12,"GenQueries","","Fallbacks: GenQueriesARB",0,null],[12,"NamedRenderbufferStorageMultisample","","",0,null],[12,"UniformMatrix3fv","","Fallbacks: UniformMatrix3fvARB",0,null],[12,"GetnPixelMapfv","","",0,null],[12,"PushDebugGroup","","Fallbacks: PushDebugGroupKHR",0,null],[12,"ProgramUniform4uiv","","Fallbacks: ProgramUniform4uivEXT",0,null],[12,"GetSubroutineIndex","","",0,null],[12,"EndQuery","","Fallbacks: EndQueryARB",0,null],[12,"PatchParameterfv","","",0,null],[12,"ReleaseShaderCompiler","","",0,null],[12,"GetVertexAttribPointerv","","Fallbacks: GetVertexAttribPointervARB, GetVertexAttribPointervNV",0,null],[12,"GetBufferSubData","","Fallbacks: GetBufferSubDataARB",0,null],[12,"FlushMappedNamedBufferRange","","",0,null],[12,"IsQuery","","Fallbacks: IsQueryARB",0,null],[12,"VertexAttrib2s","","Fallbacks: VertexAttrib2sARB, VertexAttrib2sNV",0,null],[12,"GetProgramResourceIndex","","",0,null],[12,"IsTexture","","",0,null],[12,"VertexAttribP4uiv","","",0,null],[12,"ProgramUniform2d","","",0,null],[12,"GetInternalformati64v","","",0,null],[12,"CreateSamplers","","",0,null],[12,"DrawElementsInstancedBaseVertexBaseInstance","","Fallbacks: DrawElementsInstancedBaseVertexBaseInstanceEXT",0,null],[12,"DebugMessageCallback","","Fallbacks: DebugMessageCallbackARB, DebugMessageCallbackKHR",0,null],[12,"ClearBufferfv","","",0,null],[12,"ProgramUniformMatrix2x3fv","","Fallbacks: ProgramUniformMatrix2x3fvEXT",0,null],[12,"GetActiveUniformsiv","","",0,null],[12,"FrontFace","","",0,null],[12,"MultiDrawArraysIndirect","","Fallbacks: MultiDrawArraysIndirectAMD, MultiDrawArraysIndirectEXT",0,null],[12,"InvalidateTexSubImage","","",0,null],[12,"BlendEquationSeparateiARB","","",0,null],[12,"VertexAttribIPointer","","Fallbacks: VertexAttribIPointerEXT",0,null],[12,"FramebufferTexture2D","","Fallbacks: FramebufferTexture2DEXT",0,null],[12,"UniformMatrix4dv","","",0,null],[12,"GetActiveUniformBlockiv","","",0,null],[12,"BindFragDataLocationIndexed","","",0,null],[12,"CreateBuffers","","",0,null],[12,"DepthFunc","","",0,null],[12,"BindBuffersBase","","",0,null],[12,"DrawElementsBaseVertex","","Fallbacks: DrawElementsBaseVertexEXT, DrawElementsBaseVertexOES",0,null],[12,"UniformMatrix2x3dv","","",0,null],[12,"PointParameteriv","","Fallbacks: PointParameterivNV",0,null],[12,"DeleteRenderbuffers","","Fallbacks: DeleteRenderbuffersEXT",0,null],[12,"DepthMask","","",0,null],[12,"TexCoordP2uiv","","",0,null],[12,"Clear","","",0,null],[12,"TextureParameterIuiv","","",0,null],[12,"VertexAttribI2iv","","Fallbacks: VertexAttribI2ivEXT",0,null],[12,"ReadPixels","","",0,null],[12,"VertexAttribI4uiv","","Fallbacks: VertexAttribI4uivEXT",0,null],[12,"TexCoordP1ui","","",0,null],[12,"VertexAttrib4f","","Fallbacks: VertexAttrib4fARB, VertexAttrib4fNV",0,null],[12,"DrawElementsInstancedBaseVertex","","Fallbacks: DrawElementsInstancedBaseVertexEXT, DrawElementsInstancedBaseVertexOES",0,null],[12,"VertexAttribL4d","","Fallbacks: VertexAttribL4dEXT",0,null],[12,"CompressedTexSubImage1D","","Fallbacks: CompressedTexSubImage1DARB",0,null],[12,"Finish","","",0,null],[12,"ColorP4ui","","",0,null],[12,"CopyTexSubImage1D","","Fallbacks: CopyTexSubImage1DEXT",0,null],[12,"VertexAttribL2d","","Fallbacks: VertexAttribL2dEXT",0,null],[12,"BlendEquationi","","Fallbacks: BlendEquationIndexedAMD, BlendEquationiARB, BlendEquationiEXT, BlendEquationiOES",0,null],[12,"UseProgram","","Fallbacks: UseProgramObjectARB",0,null],[12,"VertexAttrib4ubv","","Fallbacks: VertexAttrib4ubvARB",0,null],[12,"VertexAttrib3sv","","Fallbacks: VertexAttrib3svARB, VertexAttrib3svNV",0,null],[12,"VertexAttrib4d","","Fallbacks: VertexAttrib4dARB, VertexAttrib4dNV",0,null],[12,"ClearBufferSubData","","",0,null],[12,"Disablei","","Fallbacks: DisableIndexedEXT, DisableiEXT, DisableiNV, DisableiOES",0,null],[12,"VertexAttribDivisor","","Fallbacks: VertexAttribDivisorANGLE, VertexAttribDivisorARB, VertexAttribDivisorEXT, VertexAttribDivisorNV",0,null],[12,"FramebufferTexture3D","","Fallbacks: FramebufferTexture3DEXT, FramebufferTexture3DOES",0,null],[12,"GetnMinmax","","",0,null],[12,"CompressedTexImage2D","","Fallbacks: CompressedTexImage2DARB",0,null],[12,"VertexAttrib4Niv","","Fallbacks: VertexAttrib4NivARB",0,null],[12,"ColorP4uiv","","",0,null],[12,"SamplerParameteri","","",0,null],[12,"UnmapBuffer","","Fallbacks: UnmapBufferARB, UnmapBufferOES",0,null],[12,"VertexAttribLFormat","","",0,null],[12,"GetProgramResourceName","","",0,null],[12,"VertexAttribL3dv","","Fallbacks: VertexAttribL3dvEXT",0,null],[12,"VertexArrayAttribIFormat","","",0,null],[12,"MultiTexCoordP2ui","","",0,null],[12,"GetNamedFramebufferParameteriv","","",0,null],[12,"CompressedTextureSubImage2D","","",0,null],[12,"ObjectLabel","","Fallbacks: ObjectLabelKHR",0,null],[12,"VertexAttrib4Nusv","","Fallbacks: VertexAttrib4NusvARB",0,null],[12,"GetTexParameterIuiv","","Fallbacks: GetTexParameterIuivEXT, GetTexParameterIuivOES",0,null],[12,"UniformMatrix3x4fv","","Fallbacks: UniformMatrix3x4fvNV",0,null],[12,"ProgramUniformMatrix4fv","","Fallbacks: ProgramUniformMatrix4fvEXT",0,null],[12,"GetRenderbufferParameteriv","","Fallbacks: GetRenderbufferParameterivEXT",0,null],[12,"VertexAttrib4bv","","Fallbacks: VertexAttrib4bvARB",0,null],[12,"ScissorIndexed","","Fallbacks: ScissorIndexedNV",0,null],[12,"TextureSubImage1D","","",0,null],[12,"DrawRangeElements","","Fallbacks: DrawRangeElementsEXT",0,null],[12,"GetVertexArrayiv","","",0,null],[12,"LineWidth","","",0,null],[12,"CompressedTexImage3D","","Fallbacks: CompressedTexImage3DARB, CompressedTexImage3DOES",0,null],[12,"VertexAttribI4ubv","","Fallbacks: VertexAttribI4ubvEXT",0,null],[12,"Disable","","",0,null],[12,"DrawElementsInstanced","","Fallbacks: DrawElementsInstancedANGLE, DrawElementsInstancedARB, DrawElementsInstancedEXT, DrawElementsInstancedNV",0,null],[12,"Uniform4dv","","",0,null],[12,"MemoryBarrier","","Fallbacks: MemoryBarrierEXT",0,null],[12,"ProgramParameteri","","Fallbacks: ProgramParameteriARB, ProgramParameteriEXT",0,null],[12,"VertexAttribP2ui","","",0,null],[12,"ClearBufferiv","","",0,null],[12,"TexCoordP3uiv","","",0,null],[12,"GetSamplerParameteriv","","",0,null],[12,"BlendEquationSeparate","","Fallbacks: BlendEquationSeparateEXT",0,null],[12,"FramebufferTexture","","Fallbacks: FramebufferTextureARB, FramebufferTextureEXT, FramebufferTextureOES",0,null],[12,"VertexAttribP2uiv","","",0,null],[12,"Hint","","",0,null],[12,"VertexAttrib2d","","Fallbacks: VertexAttrib2dARB, VertexAttrib2dNV",0,null],[12,"VertexAttribI4usv","","Fallbacks: VertexAttribI4usvEXT",0,null],[12,"GetnSeparableFilter","","",0,null],[12,"TextureParameterIiv","","",0,null],[12,"GetCompressedTextureSubImage","","",0,null],[12,"GetNamedBufferPointerv","","",0,null],[12,"DrawArraysInstancedBaseInstance","","Fallbacks: DrawArraysInstancedBaseInstanceEXT",0,null],[12,"DebugMessageControl","","Fallbacks: DebugMessageControlARB, DebugMessageControlKHR",0,null],[12,"VertexAttribI2uiv","","Fallbacks: VertexAttribI2uivEXT",0,null],[12,"CompressedTextureSubImage1D","","",0,null],[12,"BlendEquation","","Fallbacks: BlendEquationEXT",0,null],[12,"Viewport","","",0,null],[12,"EnableVertexAttribArray","","Fallbacks: EnableVertexAttribArrayARB",0,null],[12,"UniformMatrix2dv","","",0,null],[12,"Scissor","","",0,null],[12,"GetActiveUniformName","","",0,null],[12,"UnmapNamedBuffer","","",0,null],[12,"TextureBufferRange","","",0,null],[12,"VertexAttribL3d","","Fallbacks: VertexAttribL3dEXT",0,null],[12,"VertexArrayAttribBinding","","",0,null],[12,"Uniform2uiv","","Fallbacks: Uniform2uivEXT",0,null],[12,"GetnUniformfv","","Fallbacks: GetnUniformfvKHR",0,null],[12,"ProgramUniform2fv","","Fallbacks: ProgramUniform2fvEXT",0,null],[12,"PixelStorei","","",0,null],[12,"GetFramebufferAttachmentParameteriv","","Fallbacks: GetFramebufferAttachmentParameterivEXT",0,null],[12,"MultiTexCoordP4uiv","","",0,null],[12,"GetDoublei_v","","Fallbacks: GetDoubleIndexedvEXT, GetDoublei_vEXT",0,null],[12,"GetQueryObjecti64v","","Fallbacks: GetQueryObjecti64vEXT",0,null],[12,"DeleteProgram","","",0,null],[12,"ActiveShaderProgram","","",0,null],[12,"SecondaryColorP3ui","","",0,null],[12,"VertexAttrib4Nbv","","Fallbacks: VertexAttrib4NbvARB",0,null],[12,"DispatchCompute","","",0,null],[12,"GetDoublev","","",0,null],[12,"DepthRangeIndexed","","",0,null],[12,"TexImage2DMultisample","","",0,null],[12,"TexParameterf","","",0,null],[12,"Uniform3dv","","",0,null],[12,"ProgramUniform1d","","",0,null],[12,"CheckFramebufferStatus","","Fallbacks: CheckFramebufferStatusEXT",0,null],[12,"VertexAttrib2sv","","Fallbacks: VertexAttrib2svARB, VertexAttrib2svNV",0,null],[12,"TexCoordP4uiv","","",0,null],[12,"Uniform1d","","",0,null],[12,"VertexAttribP1ui","","",0,null],[12,"UniformMatrix3dv","","",0,null],[12,"BindTexture","","Fallbacks: BindTextureEXT",0,null],[12,"ProgramUniform1ui","","Fallbacks: ProgramUniform1uiEXT",0,null],[12,"ProgramUniform2dv","","",0,null],[12,"CreateRenderbuffers","","",0,null],[12,"GetNamedBufferParameteri64v","","",0,null],[12,"GetNamedRenderbufferParameteriv","","",0,null],[12,"VertexAttrib3fv","","Fallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV",0,null],[12,"Uniform2ui","","Fallbacks: Uniform2uiEXT",0,null],[12,"NormalP3uiv","","",0,null],[12,"VertexAttrib1d","","Fallbacks: VertexAttrib1dARB, VertexAttrib1dNV",0,null],[12,"VertexP2ui","","",0,null],[12,"NamedFramebufferDrawBuffer","","",0,null],[12,"LogicOp","","",0,null],[12,"CreateTransformFeedbacks","","",0,null],[12,"CopyNamedBufferSubData","","",0,null],[12,"GetShaderiv","","",0,null],[12,"MultiTexCoordP1uiv","","",0,null],[12,"BlendFunc","","",0,null],[12,"BlendEquationSeparatei","","Fallbacks: BlendEquationSeparateIndexedAMD, BlendEquationSeparateiARB, BlendEquationSeparateiEXT, BlendEquationSeparateiOES",0,null],[12,"UniformMatrix4x2dv","","",0,null],[12,"UniformMatrix4fv","","Fallbacks: UniformMatrix4fvARB",0,null],[12,"StencilFunc","","",0,null],[12,"GetUniformuiv","","Fallbacks: GetUniformuivEXT",0,null],[12,"Uniform3uiv","","Fallbacks: Uniform3uivEXT",0,null],[12,"ProgramUniformMatrix4x3dv","","",0,null],[12,"GetQueryObjectui64v","","Fallbacks: GetQueryObjectui64vEXT",0,null],[12,"UniformMatrix2x3fv","","Fallbacks: UniformMatrix2x3fvNV",0,null],[12,"GetUniformdv","","",0,null],[12,"Uniform2dv","","",0,null],[12,"ProgramUniformMatrix4dv","","",0,null],[12,"UniformMatrix2fv","","Fallbacks: UniformMatrix2fvARB",0,null],[12,"BindBufferBase","","Fallbacks: BindBufferBaseEXT, BindBufferBaseNV",0,null],[12,"BindBuffer","","Fallbacks: BindBufferARB",0,null],[12,"VertexAttribI3ui","","Fallbacks: VertexAttribI3uiEXT",0,null],[12,"VertexAttrib4fv","","Fallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV",0,null],[12,"InvalidateNamedFramebufferData","","",0,null],[12,"GetFragDataIndex","","",0,null],[12,"MapBufferRange","","Fallbacks: MapBufferRangeEXT",0,null],[12,"DrawRangeElementsBaseVertex","","Fallbacks: DrawRangeElementsBaseVertexEXT, DrawRangeElementsBaseVertexOES",0,null],[12,"IsEnabled","","",0,null],[12,"Uniform1ui","","Fallbacks: Uniform1uiEXT",0,null],[12,"ProgramUniform1i","","Fallbacks: ProgramUniform1iEXT",0,null],[12,"InvalidateBufferData","","",0,null],[12,"StencilMaskSeparate","","",0,null],[12,"GetVertexArrayIndexediv","","",0,null],[12,"NamedFramebufferDrawBuffers","","",0,null],[12,"IsShader","","",0,null],[12,"GetTexParameterfv","","",0,null],[12,"GetnUniformdv","","",0,null],[12,"ShaderSource","","Fallbacks: ShaderSourceARB",0,null],[12,"TextureBarrier","","",0,null],[12,"IsProgramPipeline","","",0,null],[12,"BeginQueryIndexed","","",0,null],[12,"GetInteger64i_v","","",0,null],[12,"VertexAttrib4uiv","","Fallbacks: VertexAttrib4uivARB",0,null],[12,"InvalidateSubFramebuffer","","",0,null],[12,"CompileShader","","Fallbacks: CompileShaderARB",0,null],[12,"MapNamedBufferRange","","",0,null],[12,"BeginQuery","","Fallbacks: BeginQueryARB",0,null],[12,"TexSubImage2D","","Fallbacks: TexSubImage2DEXT",0,null],[12,"VertexP4ui","","",0,null],[12,"PointParameterfv","","Fallbacks: PointParameterfvARB, PointParameterfvEXT, PointParameterfvSGIS",0,null],[12,"ProgramUniform4iv","","Fallbacks: ProgramUniform4ivEXT",0,null],[12,"Uniform1uiv","","Fallbacks: Uniform1uivEXT",0,null],[12,"CopyTextureSubImage1D","","",0,null],[12,"GetnColorTable","","",0,null],[12,"VertexAttribI4i","","Fallbacks: VertexAttribI4iEXT",0,null],[12,"IsRenderbuffer","","Fallbacks: IsRenderbufferEXT",0,null],[12,"Enable","","",0,null],[12,"BufferSubData","","Fallbacks: BufferSubDataARB",0,null],[12,"GenBuffers","","Fallbacks: GenBuffersARB",0,null],[12,"ProgramUniform3iv","","Fallbacks: ProgramUniform3ivEXT",0,null],[12,"GetSamplerParameterfv","","",0,null],[12,"FenceSync","","Fallbacks: FenceSyncAPPLE",0,null],[12,"ActiveTexture","","Fallbacks: ActiveTextureARB",0,null],[12,"ResumeTransformFeedback","","Fallbacks: ResumeTransformFeedbackNV",0,null],[12,"GetUniformIndices","","",0,null],[12,"GetnTexImage","","",0,null],[12,"DeleteSamplers","","",0,null],[12,"BindBuffersRange","","",0,null],[12,"ProgramUniformMatrix3x4dv","","",0,null],[12,"BindProgramPipeline","","",0,null],[12,"GetTextureImage","","",0,null],[12,"Uniform3fv","","Fallbacks: Uniform3fvARB",0,null],[12,"VertexArrayBindingDivisor","","",0,null],[12,"SamplerParameterf","","",0,null],[12,"GetShaderInfoLog","","",0,null],[12,"VertexAttrib4iv","","Fallbacks: VertexAttrib4ivARB",0,null],[12,"ProgramUniform3i","","Fallbacks: ProgramUniform3iEXT",0,null],[12,"CopyTexImage2D","","Fallbacks: CopyTexImage2DEXT",0,null],[12,"DrawTransformFeedback","","Fallbacks: DrawTransformFeedbackNV",0,null],[12,"IsFramebuffer","","Fallbacks: IsFramebufferEXT",0,null],[12,"GetnHistogram","","",0,null],[12,"ProgramUniform4d","","",0,null],[12,"MultiTexCoordP3uiv","","",0,null],[12,"Uniform2f","","Fallbacks: Uniform2fARB",0,null],[12,"BindImageTexture","","",0,null],[12,"CopyTexImage1D","","Fallbacks: CopyTexImage1DEXT",0,null],[12,"ProgramUniformMatrix3x2fv","","Fallbacks: ProgramUniformMatrix3x2fvEXT",0,null],[12,"TexImage1D","","",0,null],[12,"VertexP3uiv","","",0,null],[12,"GetProgramInfoLog","","",0,null],[12,"BindTextureUnit","","",0,null],[12,"CreateProgramPipelines","","",0,null],[12,"VertexAttribI1i","","Fallbacks: VertexAttribI1iEXT",0,null],[12,"NamedFramebufferTexture","","",0,null],[12,"GetTransformFeedbacki64_v","","",0,null],[12,"ProgramUniform4fv","","Fallbacks: ProgramUniform4fvEXT",0,null],[12,"PixelStoref","","",0,null],[12,"NamedFramebufferRenderbuffer","","",0,null],[12,"BindAttribLocation","","Fallbacks: BindAttribLocationARB",0,null],[12,"GetActiveSubroutineUniformName","","",0,null],[12,"BufferStorage","","Fallbacks: BufferStorageEXT",0,null],[12,"ClearBufferfi","","",0,null],[12,"VertexAttribL2dv","","Fallbacks: VertexAttribL2dvEXT",0,null],[12,"GetInteger64v","","Fallbacks: GetInteger64vAPPLE",0,null],[12,"GetCompressedTexImage","","Fallbacks: GetCompressedTexImageARB",0,null],[12,"BlendFuncSeparate","","Fallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR",0,null],[12,"TexStorage2D","","Fallbacks: TexStorage2DEXT",0,null],[12,"NamedFramebufferTextureLayer","","",0,null],[12,"CreateVertexArrays","","",0,null],[12,"GetnCompressedTexImage","","",0,null],[12,"VertexAttrib4usv","","Fallbacks: VertexAttrib4usvARB",0,null],[12,"BindFragDataLocation","","Fallbacks: BindFragDataLocationEXT",0,null],[12,"BlendEquationiARB","","",0,null],[12,"GetUniformSubroutineuiv","","",0,null],[12,"GetProgramResourceiv","","",0,null],[12,"ProgramUniform3fv","","Fallbacks: ProgramUniform3fvEXT",0,null],[12,"ProgramUniformMatrix2x4fv","","Fallbacks: ProgramUniformMatrix2x4fvEXT",0,null],[12,"Uniform1i","","Fallbacks: Uniform1iARB",0,null],[12,"VertexAttribPointer","","Fallbacks: VertexAttribPointerARB",0,null],[12,"NamedBufferSubData","","Fallbacks: NamedBufferSubDataEXT",0,null],[12,"GetObjectPtrLabel","","Fallbacks: GetObjectPtrLabelKHR",0,null],[12,"VertexAttribFormat","","",0,null],[12,"ClearTexSubImage","","",0,null],[12,"PatchParameteri","","Fallbacks: PatchParameteriEXT, PatchParameteriOES",0,null],[12,"DepthRangef","","Fallbacks: DepthRangefOES",0,null],[12,"GetFramebufferParameteriv","","",0,null],[12,"GetNamedBufferSubData","","",0,null],[12,"MultiTexCoordP1ui","","",0,null],[12,"TexStorage3DMultisample","","Fallbacks: TexStorage3DMultisampleOES",0,null],[12,"CreateShaderProgramv","","",0,null],[12,"GetProgramiv","","",0,null],[12,"TextureStorage1D","","",0,null],[12,"GetQueryObjectuiv","","Fallbacks: GetQueryObjectuivARB",0,null],[12,"IsSampler","","",0,null],[12,"Uniform3ui","","Fallbacks: Uniform3uiEXT",0,null],[12,"UniformMatrix3x2fv","","Fallbacks: UniformMatrix3x2fvNV",0,null],[12,"ClearStencil","","",0,null],[12,"GetQueryBufferObjecti64v","","",0,null],[12,"VertexAttrib4sv","","Fallbacks: VertexAttrib4svARB, VertexAttrib4svNV",0,null],[12,"QueryCounter","","Fallbacks: QueryCounterEXT",0,null],[12,"TexStorage3D","","Fallbacks: TexStorage3DEXT",0,null],[12,"GetQueryBufferObjectiv","","",0,null],[12,"SamplerParameterfv","","",0,null],[12,"PointParameteri","","Fallbacks: PointParameteriNV",0,null],[12,"ProgramUniform2uiv","","Fallbacks: ProgramUniform2uivEXT",0,null],[12,"ProgramUniformMatrix4x3fv","","Fallbacks: ProgramUniformMatrix4x3fvEXT",0,null],[12,"GetTexLevelParameterfv","","",0,null],[12,"ViewportIndexedf","","Fallbacks: ViewportIndexedfNV",0,null],[12,"GetShaderSource","","Fallbacks: GetShaderSourceARB",0,null],[12,"SampleCoverage","","Fallbacks: SampleCoverageARB",0,null],[12,"ProgramUniform3d","","",0,null],[12,"ClearBufferData","","",0,null],[12,"GetnPolygonStipple","","",0,null],[12,"FramebufferParameteri","","",0,null],[12,"GetProgramInterfaceiv","","",0,null],[12,"GetActiveSubroutineName","","",0,null],[12,"PauseTransformFeedback","","Fallbacks: PauseTransformFeedbackNV",0,null],[12,"GetUniformLocation","","Fallbacks: GetUniformLocationARB",0,null],[12,"TextureStorage3D","","",0,null],[12,"ClearNamedFramebufferfv","","",0,null],[12,"CreateQueries","","",0,null],[12,"VertexArrayAttribLFormat","","",0,null],[12,"ProgramUniform2f","","Fallbacks: ProgramUniform2fEXT",0,null],[12,"VertexAttribLPointer","","Fallbacks: VertexAttribLPointerEXT",0,null],[12,"GetCompressedTextureImage","","",0,null],[12,"GenProgramPipelines","","",0,null],[12,"GetQueryBufferObjectuiv","","",0,null],[12,"CompressedTexImage1D","","Fallbacks: CompressedTexImage1DARB",0,null],[12,"StencilFuncSeparate","","",0,null],[12,"ClientWaitSync","","Fallbacks: ClientWaitSyncAPPLE",0,null],[12,"GetBooleani_v","","Fallbacks: GetBooleanIndexedvEXT",0,null],[12,"ClearNamedBufferSubData","","",0,null],[12,"TransformFeedbackBufferBase","","",0,null],[12,"DeleteQueries","","Fallbacks: DeleteQueriesARB",0,null],[12,"GetFloatv","","",0,null],[12,"GetAttachedShaders","","",0,null],[12,"ValidateProgram","","Fallbacks: ValidateProgramARB",0,null],[12,"TexCoordP3ui","","",0,null],[12,"BlendFunci","","Fallbacks: BlendFuncIndexedAMD, BlendFunciARB, BlendFunciEXT, BlendFunciOES",0,null],[12,"GetTexParameterIiv","","Fallbacks: GetTexParameterIivEXT, GetTexParameterIivOES",0,null],[12,"VertexAttrib1sv","","Fallbacks: VertexAttrib1svARB, VertexAttrib1svNV",0,null],[12,"VertexAttrib4Nuiv","","Fallbacks: VertexAttrib4NuivARB",0,null],[12,"LinkProgram","","Fallbacks: LinkProgramARB",0,null],[12,"GetQueryObjectiv","","Fallbacks: GetQueryObjectivARB, GetQueryObjectivEXT",0,null],[12,"TexStorage1D","","Fallbacks: TexStorage1DEXT",0,null],[12,"VertexAttrib3dv","","Fallbacks: VertexAttrib3dvARB, VertexAttrib3dvNV",0,null],[12,"UniformSubroutinesuiv","","",0,null],[12,"GetVertexAttribIuiv","","Fallbacks: GetVertexAttribIuivEXT",0,null],[12,"Uniform1fv","","Fallbacks: Uniform1fvARB",0,null],[12,"ScissorIndexedv","","Fallbacks: ScissorIndexedvNV",0,null],[12,"ClearNamedFramebufferuiv","","",0,null],[12,"CompressedTexSubImage3D","","Fallbacks: CompressedTexSubImage3DARB, CompressedTexSubImage3DOES",0,null],[12,"ProgramUniform4dv","","",0,null],[12,"TexSubImage1D","","Fallbacks: TexSubImage1DEXT",0,null],[12,"GetnUniformiv","","Fallbacks: GetnUniformivKHR",0,null],[12,"GetTexImage","","",0,null],[12,"MultiTexCoordP4ui","","",0,null],[12,"VertexAttribI2ui","","Fallbacks: VertexAttribI2uiEXT",0,null],[12,"TextureParameteriv","","",0,null],[12,"BlitFramebuffer","","Fallbacks: BlitFramebufferEXT, BlitFramebufferNV",0,null],[12,"GetTextureParameterIuiv","","",0,null],[12,"GetSamplerParameterIuiv","","Fallbacks: GetSamplerParameterIuivEXT, GetSamplerParameterIuivOES",0,null],[12,"VertexArrayVertexBuffer","","",0,null],[12,"GetProgramPipelineiv","","",0,null],[12,"GetProgramStageiv","","",0,null],[12,"VertexP4uiv","","",0,null],[12,"GetTextureParameteriv","","",0,null],[12,"TexImage3D","","Fallbacks: TexImage3DEXT, TexImage3DOES",0,null],[12,"GetVertexAttribLdv","","Fallbacks: GetVertexAttribLdvEXT",0,null],[12,"VertexAttribIFormat","","",0,null],[12,"GetObjectLabel","","Fallbacks: GetObjectLabelKHR",0,null],[12,"IsVertexArray","","Fallbacks: IsVertexArrayAPPLE, IsVertexArrayOES",0,null],[12,"TexStorage2DMultisample","","",0,null],[12,"FramebufferTextureLayer","","Fallbacks: FramebufferTextureLayerARB, FramebufferTextureLayerEXT",0,null],[12,"Enablei","","Fallbacks: EnableIndexedEXT, EnableiEXT, EnableiNV, EnableiOES",0,null],[12,"GetQueryIndexediv","","",0,null],[12,"IsBuffer","","Fallbacks: IsBufferARB",0,null],[12,"GetTransformFeedbackVarying","","Fallbacks: GetTransformFeedbackVaryingEXT",0,null],[12,"GetFloati_v","","Fallbacks: GetFloatIndexedvEXT, GetFloati_vEXT, GetFloati_vNV",0,null],[12,"ClearTexImage","","",0,null],[12,"BlitNamedFramebuffer","","",0,null],[12,"ProgramUniform3uiv","","Fallbacks: ProgramUniform3uivEXT",0,null],[12,"GetActiveAtomicCounterBufferiv","","",0,null],[12,"GetnMapfv","","",0,null],[12,"DrawElementsInstancedBaseInstance","","Fallbacks: DrawElementsInstancedBaseInstanceEXT",0,null],[12,"ShaderStorageBlockBinding","","",0,null],[12,"ClearDepth","","",0,null],[12,"WaitSync","","Fallbacks: WaitSyncAPPLE",0,null],[12,"ColorP3uiv","","",0,null],[12,"GetDebugMessageLog","","Fallbacks: GetDebugMessageLogARB, GetDebugMessageLogKHR",0,null],[12,"Uniform1f","","Fallbacks: Uniform1fARB",0,null],[12,"ValidateProgramPipeline","","",0,null],[12,"GetVertexAttribIiv","","Fallbacks: GetVertexAttribIivEXT",0,null],[12,"VertexArrayElementBuffer","","",0,null],[12,"GetGraphicsResetStatus","","Fallbacks: GetGraphicsResetStatusKHR",0,null],[12,"GetBooleanv","","",0,null],[12,"GenTextures","","",0,null],[12,"GetnMapiv","","",0,null],[12,"CopyTextureSubImage3D","","",0,null],[12,"VertexAttrib2f","","Fallbacks: VertexAttrib2fARB, VertexAttrib2fNV",0,null],[12,"VertexAttribP4ui","","",0,null],[12,"VertexAttrib3s","","Fallbacks: VertexAttrib3sARB, VertexAttrib3sNV",0,null],[12,"Uniform1iv","","Fallbacks: Uniform1ivARB",0,null],[12,"ReadnPixels","","Fallbacks: ReadnPixelsARB, ReadnPixelsEXT, ReadnPixelsKHR",0,null],[12,"GetShaderPrecisionFormat","","",0,null],[12,"BindVertexArray","","Fallbacks: BindVertexArrayOES",0,null],[12,"MapBuffer","","Fallbacks: MapBufferARB, MapBufferOES",0,null],[12,"VertexP3ui","","",0,null],[12,"DrawElements","","",0,null],[12,"CheckNamedFramebufferStatus","","",0,null],[12,"VertexAttribI1iv","","Fallbacks: VertexAttribI1ivEXT",0,null],[12,"SecondaryColorP3uiv","","",0,null],[12,"CreateFramebuffers","","",0,null],[12,"ProgramUniform2iv","","Fallbacks: ProgramUniform2ivEXT",0,null],[12,"ProgramUniform2ui","","Fallbacks: ProgramUniform2uiEXT",0,null],[12,"GetBufferParameteri64v","","",0,null],[12,"ProgramUniformMatrix4x2fv","","Fallbacks: ProgramUniformMatrix4x2fvEXT",0,null],[12,"SamplerParameteriv","","",0,null],[12,"BindFramebuffer","","",0,null],[12,"GetFragDataLocation","","Fallbacks: GetFragDataLocationEXT",0,null],[12,"TexParameterIiv","","Fallbacks: TexParameterIivEXT, TexParameterIivOES",0,null],[12,"Uniform2iv","","Fallbacks: Uniform2ivARB",0,null],[12,"Uniform1dv","","",0,null],[12,"ScissorArrayv","","Fallbacks: ScissorArrayvNV",0,null],[12,"ProgramUniform1uiv","","Fallbacks: ProgramUniform1uivEXT",0,null],[12,"GetActiveUniform","","Fallbacks: GetActiveUniformARB",0,null],[12,"VertexAttribL1d","","Fallbacks: VertexAttribL1dEXT",0,null],[12,"GetTextureLevelParameteriv","","",0,null],[12,"GetnPixelMapuiv","","",0,null],[12,"ProvokingVertex","","Fallbacks: ProvokingVertexEXT",0,null],[12,"ProgramUniformMatrix3x4fv","","Fallbacks: ProgramUniformMatrix3x4fvEXT",0,null],[12,"BufferData","","Fallbacks: BufferDataARB",0,null],[12,"GetTextureSubImage","","",0,null],[12,"UniformMatrix4x3dv","","",0,null],[12,"Uniform4iv","","Fallbacks: Uniform4ivARB",0,null],[12,"VertexAttribI4iv","","Fallbacks: VertexAttribI4ivEXT",0,null],[12,"GetnUniformuiv","","Fallbacks: GetnUniformuivKHR",0,null],[12,"CreateProgram","","Fallbacks: CreateProgramObjectARB",0,null],[12,"NormalP3ui","","",0,null],[12,"ProgramUniformMatrix2dv","","",0,null],[12,"GetQueryBufferObjectui64v","","",0,null],[12,"CopyImageSubData","","Fallbacks: CopyImageSubDataEXT, CopyImageSubDataOES",0,null],[12,"VertexAttribI4ui","","Fallbacks: VertexAttribI4uiEXT",0,null],[12,"Uniform3f","","Fallbacks: Uniform3fARB",0,null],[12,"ProgramUniformMatrix4x2dv","","",0,null],[12,"VertexAttrib4Nub","","Fallbacks: VertexAttrib4NubARB, VertexAttrib4ubNV",0,null],[12,"TransformFeedbackBufferRange","","",0,null],[12,"InvalidateTexImage","","",0,null],[12,"ColorP3ui","","",0,null],[12,"GetInternalformativ","","",0,null],[12,"GenerateMipmap","","Fallbacks: GenerateMipmapEXT",0,null],[12,"GetnMapdv","","",0,null],[12,"PolygonMode","","Fallbacks: PolygonModeNV",0,null],[12,"UniformMatrix3x2dv","","",0,null],[12,"TexCoordP1uiv","","",0,null],[12,"VertexAttrib4Nubv","","Fallbacks: VertexAttrib4NubvARB, VertexAttrib4ubvNV",0,null],[12,"ProgramUniform3ui","","Fallbacks: ProgramUniform3uiEXT",0,null],[12,"ClearNamedBufferData","","",0,null],[12,"GetPointerv","","Fallbacks: GetPointervEXT, GetPointervKHR",0,null],[12,"GetUniformBlockIndex","","",0,null],[12,"ProgramUniform2i","","Fallbacks: ProgramUniform2iEXT",0,null],[12,"TextureStorage2DMultisample","","",0,null],[12,"EndQueryIndexed","","",0,null],[12,"Uniform4f","","Fallbacks: Uniform4fARB",0,null],[12,"MultiDrawArrays","","Fallbacks: MultiDrawArraysEXT",0,null],[12,"IsTransformFeedback","","Fallbacks: IsTransformFeedbackNV",0,null],[12,"DrawArraysIndirect","","",0,null],[12,"TexCoordP2ui","","",0,null],[12,"BeginConditionalRender","","Fallbacks: BeginConditionalRenderNV",0,null],[12,"VertexAttrib4dv","","Fallbacks: VertexAttrib4dvARB, VertexAttrib4dvNV",0,null],[12,"Uniform3i","","Fallbacks: Uniform3iARB",0,null],[12,"GetTransformFeedbacki_v","","",0,null],[12,"MultiDrawElementsBaseVertex","","Fallbacks: MultiDrawElementsBaseVertexEXT, MultiDrawElementsBaseVertexOES",0,null],[12,"DeleteTransformFeedbacks","","Fallbacks: DeleteTransformFeedbacksNV",0,null],[12,"CullFace","","",0,null],[12,"CopyTextureSubImage2D","","",0,null],[12,"GetIntegeri_v","","Fallbacks: GetIntegerIndexedvEXT",0,null],[12,"GenSamplers","","",0,null],[12,"PointParameterf","","Fallbacks: PointParameterfARB, PointParameterfEXT, PointParameterfSGIS",0,null],[12,"ClearDepthf","","Fallbacks: ClearDepthfOES",0,null],[12,"SamplerParameterIuiv","","Fallbacks: SamplerParameterIuivEXT, SamplerParameterIuivOES",0,null],[12,"MinSampleShading","","Fallbacks: MinSampleShadingARB, MinSampleShadingOES",0,null],[12,"IsSync","","Fallbacks: IsSyncAPPLE",0,null],[12,"VertexAttribP3ui","","",0,null],[12,"UseProgramStages","","",0,null],[12,"TextureParameteri","","",0,null],[12,"ObjectPtrLabel","","Fallbacks: ObjectPtrLabelKHR",0,null],[12,"VertexAttribL4dv","","Fallbacks: VertexAttribL4dvEXT",0,null],[12,"PointSize","","",0,null],[12,"BindSampler","","",0,null],[12,"VertexArrayVertexBuffers","","",0,null],[12,"BindRenderbuffer","","",0,null],[12,"EnableVertexArrayAttrib","","",0,null],[12,"ReadBuffer","","",0,null],[12,"ClampColor","","Fallbacks: ClampColorARB",0,null],[12,"DisableVertexArrayAttrib","","",0,null],[12,"GenTransformFeedbacks","","Fallbacks: GenTransformFeedbacksNV",0,null],[12,"ProgramUniform4i","","Fallbacks: ProgramUniform4iEXT",0,null],[12,"CreateTextures","","",0,null],[12,"DetachShader","","Fallbacks: DetachObjectARB",0,null],[12,"GetUniformfv","","Fallbacks: GetUniformfvARB",0,null],[12,"GetActiveSubroutineUniformiv","","",0,null],[12,"GetBufferPointerv","","Fallbacks: GetBufferPointervARB, GetBufferPointervOES",0,null],[12,"StencilMask","","",0,null],[12,"TextureBuffer","","",0,null],[12,"RenderbufferStorageMultisample","","Fallbacks: RenderbufferStorageMultisampleEXT, RenderbufferStorageMultisampleNV",0,null],[12,"GetIntegerv","","",0,null],[12,"BindVertexBuffer","","",0,null],[12,"GetStringi","","",0,null],[12,"GetVertexAttribiv","","Fallbacks: GetVertexAttribivARB, GetVertexAttribivNV",0,null],[12,"CreateShader","","Fallbacks: CreateShaderObjectARB",0,null],[12,"ClearNamedFramebufferiv","","",0,null],[12,"RenderbufferStorage","","Fallbacks: RenderbufferStorageEXT",0,null],[12,"VertexBindingDivisor","","",0,null],[12,"Uniform4d","","",0,null],[12,"DeleteSync","","Fallbacks: DeleteSyncAPPLE",0,null],[12,"TextureSubImage2D","","",0,null],[12,"GetAttribLocation","","Fallbacks: GetAttribLocationARB",0,null],[12,"MultiDrawElements","","Fallbacks: MultiDrawElementsEXT",0,null],[12,"VertexAttrib3d","","Fallbacks: VertexAttrib3dARB, VertexAttrib3dNV",0,null],[12,"GetProgramResourceLocation","","",0,null],[12,"VertexAttrib1fv","","Fallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV",0,null],[12,"ViewportIndexedfv","","Fallbacks: ViewportIndexedfvNV",0,null],[12,"ProgramUniform1dv","","",0,null],[12,"TexParameteriv","","",0,null],[12,"GenerateTextureMipmap","","",0,null],[12,"GetError","","",0,null],[12,"DisableVertexAttribArray","","Fallbacks: DisableVertexAttribArrayARB",0,null],[12,"VertexAttribI1ui","","Fallbacks: VertexAttribI1uiEXT",0,null],[12,"VertexAttribI2i","","Fallbacks: VertexAttribI2iEXT",0,null],[12,"ProgramUniform4ui","","Fallbacks: ProgramUniform4uiEXT",0,null],[12,"BindSamplers","","",0,null],[12,"ClearColor","","",0,null],[12,"NamedBufferStorage","","Fallbacks: NamedBufferStorageEXT",0,null],[12,"PopDebugGroup","","Fallbacks: PopDebugGroupKHR",0,null],[0,"types","","",null,null],[4,"__GLsync","gfx_gl::types","",null,null],[4,"_cl_context","","",null,null],[4,"_cl_event","","",null,null],[6,"GLenum","","",null,null],[6,"GLboolean","","",null,null],[6,"GLbitfield","","",null,null],[6,"GLvoid","","",null,null],[6,"GLbyte","","",null,null],[6,"GLshort","","",null,null],[6,"GLint","","",null,null],[6,"GLclampx","","",null,null],[6,"GLubyte","","",null,null],[6,"GLushort","","",null,null],[6,"GLuint","","",null,null],[6,"GLsizei","","",null,null],[6,"GLfloat","","",null,null],[6,"GLclampf","","",null,null],[6,"GLdouble","","",null,null],[6,"GLclampd","","",null,null],[6,"GLeglImageOES","","",null,null],[6,"GLchar","","",null,null],[6,"GLcharARB","","",null,null],[6,"GLhandleARB","","",null,null],[6,"GLhalfARB","","",null,null],[6,"GLhalf","","",null,null],[6,"GLfixed","","",null,null],[6,"GLintptr","","",null,null],[6,"GLsizeiptr","","",null,null],[6,"GLint64","","",null,null],[6,"GLuint64","","",null,null],[6,"GLintptrARB","","",null,null],[6,"GLsizeiptrARB","","",null,null],[6,"GLint64EXT","","",null,null],[6,"GLuint64EXT","","",null,null],[6,"GLsync","","",null,null],[6,"GLDEBUGPROC","","",null,null],[6,"GLDEBUGPROCARB","","",null,null],[6,"GLDEBUGPROCKHR","","",null,null],[6,"GLDEBUGPROCAMD","","",null,null],[6,"GLhalfNV","","",null,null],[6,"GLvdpauSurfaceNV","","",null,null],[17,"BLEND_SRC_RGB","gfx_gl","",null,null],[17,"SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"R3_G3_B2","","",null,null],[17,"CLAMP_READ_COLOR","","",null,null],[17,"DRAW_BUFFER14","","",null,null],[17,"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"OUT_OF_MEMORY","","",null,null],[17,"COLOR_ATTACHMENT12","","",null,null],[17,"BUFFER_SIZE","","",null,null],[17,"ONE_MINUS_SRC1_ALPHA","","",null,null],[17,"ARRAY_STRIDE","","",null,null],[17,"RGB16","","",null,null],[17,"FRAMEBUFFER_BLEND","","",null,null],[17,"SMOOTH_LINE_WIDTH_GRANULARITY","","",null,null],[17,"NUM_ACTIVE_VARIABLES","","",null,null],[17,"RENDERBUFFER_WIDTH","","",null,null],[17,"LINK_STATUS","","",null,null],[17,"RGB5","","",null,null],[17,"RG8","","",null,null],[17,"FLOAT_MAT3x4","","",null,null],[17,"TYPE","","",null,null],[17,"PROXY_TEXTURE_1D_ARRAY","","",null,null],[17,"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"COLOR_LOGIC_OP","","",null,null],[17,"BGR","","",null,null],[17,"RG16UI","","",null,null],[17,"QUERY_RESULT_AVAILABLE","","",null,null],[17,"POINT_SIZE_GRANULARITY","","",null,null],[17,"UNPACK_IMAGE_HEIGHT","","",null,null],[17,"IMPLEMENTATION_COLOR_READ_TYPE","","",null,null],[17,"UNIFORM_BLOCK_BINDING","","",null,null],[17,"PACK_LSB_FIRST","","",null,null],[17,"DEBUG_SOURCE_SHADER_COMPILER","","",null,null],[17,"IMAGE_2D_RECT","","",null,null],[17,"INVALID_INDEX","","",null,null],[17,"MAX_GEOMETRY_TEXTURE_IMAGE_UNITS","","",null,null],[17,"RGBA","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Z","","",null,null],[17,"SAMPLER_CUBE","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","","",null,null],[17,"QUERY_BY_REGION_NO_WAIT","","",null,null],[17,"TEXTURE3","","",null,null],[17,"COMPRESSED_RGB8_ETC2","","",null,null],[17,"MAX_VARYING_VECTORS","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_BARRIER_BIT","","",null,null],[17,"INVALID_OPERATION","","",null,null],[17,"GEOMETRY_SUBROUTINE_UNIFORM","","",null,null],[17,"TEXTURE_COMPARE_FUNC","","",null,null],[17,"MEDIUM_FLOAT","","",null,null],[17,"READ_ONLY","","",null,null],[17,"TEXTURE1","","",null,null],[17,"PIXEL_UNPACK_BUFFER","","",null,null],[17,"MAX_SUBROUTINE_UNIFORM_LOCATIONS","","",null,null],[17,"SAMPLER_CUBE_MAP_ARRAY_SHADOW","","",null,null],[17,"RGBA16F","","",null,null],[17,"VERTEX_SHADER_BIT","","",null,null],[17,"READ_FRAMEBUFFER_BINDING","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_RED_SIZE","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_X","","",null,null],[17,"POLYGON_OFFSET_FILL","","",null,null],[17,"UNSIGNED_SHORT_4_4_4_4","","",null,null],[17,"HIGH_FLOAT","","",null,null],[17,"UNIFORM_BUFFER","","",null,null],[17,"COMPRESSED_SRGB","","",null,null],[17,"MAX_ATOMIC_COUNTER_BUFFER_BINDINGS","","",null,null],[17,"COLOR_ATTACHMENT20","","",null,null],[17,"STENCIL_BACK_FAIL","","",null,null],[17,"DEPTH_COMPONENT32","","",null,null],[17,"RG32F","","",null,null],[17,"DYNAMIC_COPY","","",null,null],[17,"AND_INVERTED","","",null,null],[17,"QUERY_BUFFER","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_TYPE","","",null,null],[17,"TESS_CONTROL_SHADER_BIT","","",null,null],[17,"MAX_UNIFORM_BLOCK_SIZE","","",null,null],[17,"COMPRESSED_RGB","","",null,null],[17,"ATOMIC_COUNTER_BARRIER_BIT","","",null,null],[17,"ZERO","","",null,null],[17,"STENCIL_FUNC","","",null,null],[17,"FRAMEBUFFER_DEFAULT_HEIGHT","","",null,null],[17,"SAMPLE_MASK_VALUE","","",null,null],[17,"DEBUG_SOURCE_OTHER","","",null,null],[17,"GREATER","","",null,null],[17,"TEXTURE_BUFFER_DATA_STORE_BINDING","","",null,null],[17,"XOR","","",null,null],[17,"PRIMITIVE_RESTART_INDEX","","",null,null],[17,"VIEW_CLASS_32_BITS","","",null,null],[17,"UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_SIZE","","",null,null],[17,"DRAW_BUFFER3","","",null,null],[17,"TEXTURE_BUFFER","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_INTEGER","","",null,null],[17,"MAX_CLIP_DISTANCES","","",null,null],[17,"UNSIGNED_INT","","",null,null],[17,"INT_SAMPLER_CUBE","","",null,null],[17,"MAX_RENDERBUFFER_SIZE","","",null,null],[17,"DEPTH_CLAMP","","",null,null],[17,"ACTIVE_ATTRIBUTES","","",null,null],[17,"ACTIVE_ATTRIBUTE_MAX_LENGTH","","",null,null],[17,"VIEW_COMPATIBILITY_CLASS","","",null,null],[17,"FRAGMENT_INTERPOLATION_OFFSET_BITS","","",null,null],[17,"IMAGE_CLASS_4_X_8","","",null,null],[17,"CONSTANT_ALPHA","","",null,null],[17,"IMAGE_BINDING_LAYER","","",null,null],[17,"SAMPLER_2D_SHADOW","","",null,null],[17,"DOUBLE_VEC3","","",null,null],[17,"CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT","","",null,null],[17,"RGB8I","","",null,null],[17,"TESS_CONTROL_SUBROUTINE","","",null,null],[17,"BUFFER_ACCESS_FLAGS","","",null,null],[17,"TRIANGLE_FAN","","",null,null],[17,"MAX_ARRAY_TEXTURE_LAYERS","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER","","",null,null],[17,"TEXTURE_COMPARE_MODE","","",null,null],[17,"SAMPLE_COVERAGE_VALUE","","",null,null],[17,"DEPTH_STENCIL","","",null,null],[17,"DRAW_BUFFER4","","",null,null],[17,"FIXED","","",null,null],[17,"IMAGE_BINDING_ACCESS","","",null,null],[17,"COLOR_COMPONENTS","","",null,null],[17,"UNPACK_SKIP_PIXELS","","",null,null],[17,"LOSE_CONTEXT_ON_RESET","","",null,null],[17,"MAX_FRAGMENT_INPUT_COMPONENTS","","",null,null],[17,"DRAW_BUFFER","","",null,null],[17,"MAX_COLOR_TEXTURE_SAMPLES","","",null,null],[17,"LINE_WIDTH_GRANULARITY","","",null,null],[17,"TIMEOUT_IGNORED","","",null,null],[17,"CLIP_DISTANCE3","","",null,null],[17,"UNKNOWN_CONTEXT_RESET","","",null,null],[17,"RGBA4","","",null,null],[17,"UNSIGNED_SHORT_5_6_5_REV","","",null,null],[17,"MAX_UNIFORM_LOCATIONS","","",null,null],[17,"FRAGMENT_TEXTURE","","",null,null],[17,"TRIANGLE_STRIP_ADJACENCY","","",null,null],[17,"POINT_SIZE_RANGE","","",null,null],[17,"QUERY_RESULT_NO_WAIT","","",null,null],[17,"MAX_SHADER_STORAGE_BUFFER_BINDINGS","","",null,null],[17,"POLYGON_SMOOTH","","",null,null],[17,"INTERNALFORMAT_ALPHA_SIZE","","",null,null],[17,"TEXTURE0","","",null,null],[17,"SHADER_STORAGE_BUFFER_BINDING","","",null,null],[17,"BLEND","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_SIZE","","",null,null],[17,"SAMPLES","","",null,null],[17,"DISPLAY_LIST","","",null,null],[17,"MAP_READ_BIT","","",null,null],[17,"VERTEX_BINDING_DIVISOR","","",null,null],[17,"ATTACHED_SHADERS","","",null,null],[17,"BLEND_DST_RGB","","",null,null],[17,"INNOCENT_CONTEXT_RESET","","",null,null],[17,"INFO_LOG_LENGTH","","",null,null],[17,"DRAW_BUFFER5","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_POINTER","","",null,null],[17,"MAX_VIEWPORTS","","",null,null],[17,"VIEW_CLASS_128_BITS","","",null,null],[17,"COLOR_ATTACHMENT0","","",null,null],[17,"INT_2_10_10_10_REV","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_BINDING","","",null,null],[17,"FRAMEBUFFER_COMPLETE","","",null,null],[17,"MAX_FRAMEBUFFER_HEIGHT","","",null,null],[17,"IS_ROW_MAJOR","","",null,null],[17,"DRAW_BUFFER2","","",null,null],[17,"INDEX","","",null,null],[17,"MAX_VERTEX_OUTPUT_COMPONENTS","","",null,null],[17,"COLOR_ATTACHMENT5","","",null,null],[17,"MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS","","",null,null],[17,"DEPTH_COMPONENT32F","","",null,null],[17,"R16","","",null,null],[17,"BLEND_DST_ALPHA","","",null,null],[17,"MAX_FRAGMENT_IMAGE_UNIFORMS","","",null,null],[17,"COLOR_ATTACHMENT25","","",null,null],[17,"COMPARE_REF_TO_TEXTURE","","",null,null],[17,"LINES","","",null,null],[17,"SAMPLER_2D_RECT_SHADOW","","",null,null],[17,"TEXTURE_VIEW_NUM_LEVELS","","",null,null],[17,"BLUE","","",null,null],[17,"MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS","","",null,null],[17,"INTERNALFORMAT_GREEN_SIZE","","",null,null],[17,"WAIT_FAILED","","",null,null],[17,"ALWAYS","","",null,null],[17,"STACK_UNDERFLOW","","",null,null],[17,"MAX_VERTEX_IMAGE_UNIFORMS","","",null,null],[17,"SYNC_STATUS","","",null,null],[17,"NEVER","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_TYPE","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_VECTORS","","",null,null],[17,"QUERY_BY_REGION_NO_WAIT_INVERTED","","",null,null],[17,"MAX_GEOMETRY_SHADER_INVOCATIONS","","",null,null],[17,"UNIFORM_OFFSET","","",null,null],[17,"MAX_SERVER_WAIT_TIMEOUT","","",null,null],[17,"TEXTURE_1D_ARRAY","","",null,null],[17,"FILL","","",null,null],[17,"BOOL_VEC2","","",null,null],[17,"INCR","","",null,null],[17,"MAX_COMBINED_IMAGE_UNIFORMS","","",null,null],[17,"NUM_SAMPLE_COUNTS","","",null,null],[17,"REFERENCED_BY_GEOMETRY_SHADER","","",null,null],[17,"TEXTURE_BINDING_1D_ARRAY","","",null,null],[17,"DELETE_STATUS","","",null,null],[17,"MAX_COMBINED_UNIFORM_BLOCKS","","",null,null],[17,"UNDEFINED_VERTEX","","",null,null],[17,"COMMAND_BARRIER_BIT","","",null,null],[17,"UNSIGNED_INT_IMAGE_3D","","",null,null],[17,"UNSIGNED_SHORT_1_5_5_5_REV","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_BY_CLASS","","",null,null],[17,"ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH","","",null,null],[17,"RGB5_A1","","",null,null],[17,"CLIP_DISTANCE5","","",null,null],[17,"MAX_GEOMETRY_UNIFORM_BLOCKS","","",null,null],[17,"RGBA8","","",null,null],[17,"MAJOR_VERSION","","",null,null],[17,"VERTEX_SUBROUTINE","","",null,null],[17,"SRGB_READ","","",null,null],[17,"QUERY_COUNTER_BITS","","",null,null],[17,"SUBPIXEL_BITS","","",null,null],[17,"PIXEL_PACK_BUFFER_BINDING","","",null,null],[17,"COMPILE_STATUS","","",null,null],[17,"MAX_GEOMETRY_ATOMIC_COUNTERS","","",null,null],[17,"UNSIGNED_INT_8_8_8_8_REV","","",null,null],[17,"PROGRAM_BINARY_FORMATS","","",null,null],[17,"CONTEXT_RELEASE_BEHAVIOR_FLUSH","","",null,null],[17,"DEPTH_COMPONENT","","",null,null],[17,"UNPACK_SWAP_BYTES","","",null,null],[17,"FIRST_VERTEX_CONVENTION","","",null,null],[17,"UNIFORM","","",null,null],[17,"TEXTURE29","","",null,null],[17,"PROXY_TEXTURE_CUBE_MAP","","",null,null],[17,"MAX_SAMPLE_MASK_WORDS","","",null,null],[17,"READ_PIXELS_FORMAT","","",null,null],[17,"INTERNALFORMAT_ALPHA_TYPE","","",null,null],[17,"FLOAT_MAT2x4","","",null,null],[17,"WRITE_ONLY","","",null,null],[17,"DEBUG_TYPE_OTHER","","",null,null],[17,"CONTEXT_FLAG_DEBUG_BIT","","",null,null],[17,"INT","","",null,null],[17,"MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS","","",null,null],[17,"GEQUAL","","",null,null],[17,"DEBUG_SEVERITY_MEDIUM","","",null,null],[17,"TRIANGLES","","",null,null],[17,"PACK_COMPRESSED_BLOCK_HEIGHT","","",null,null],[17,"RGBA16UI","","",null,null],[17,"MAX_TESS_EVALUATION_OUTPUT_COMPONENTS","","",null,null],[17,"MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"TEXTURE_VIEW_NUM_LAYERS","","",null,null],[17,"TEXTURE_RED_TYPE","","",null,null],[17,"BGRA","","",null,null],[17,"REFERENCED_BY_TESS_EVALUATION_SHADER","","",null,null],[17,"RGB8_SNORM","","",null,null],[17,"ELEMENT_ARRAY_BARRIER_BIT","","",null,null],[17,"DOUBLE_MAT2x4","","",null,null],[17,"INT_IMAGE_3D","","",null,null],[17,"RG","","",null,null],[17,"INTERNALFORMAT_DEPTH_SIZE","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH","","",null,null],[17,"MAX_GEOMETRY_OUTPUT_VERTICES","","",null,null],[17,"UNSIGNED_SHORT_4_4_4_4_REV","","",null,null],[17,"UNSIGNED_INT_SAMPLER_CUBE","","",null,null],[17,"PACK_SKIP_ROWS","","",null,null],[17,"SHADER_IMAGE_ATOMIC","","",null,null],[17,"CLEAR","","",null,null],[17,"FRAGMENT_SUBROUTINE_UNIFORM","","",null,null],[17,"IMAGE_COMPATIBILITY_CLASS","","",null,null],[17,"DST_COLOR","","",null,null],[17,"LINE_SMOOTH_HINT","","",null,null],[17,"MAX_INTEGER_SAMPLES","","",null,null],[17,"FRAGMENT_SUBROUTINE","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES","","",null,null],[17,"BUFFER_MAPPED","","",null,null],[17,"COLOR_ATTACHMENT4","","",null,null],[17,"COLOR_ATTACHMENT3","","",null,null],[17,"EQUAL","","",null,null],[17,"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",null,null],[17,"RGBA16","","",null,null],[17,"BLOCK_INDEX","","",null,null],[17,"SHADER","","",null,null],[17,"SRGB8_ALPHA8","","",null,null],[17,"MIRRORED_REPEAT","","",null,null],[17,"CCW","","",null,null],[17,"SYNC_GPU_COMMANDS_COMPLETE","","",null,null],[17,"REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"MAX_VERTEX_UNIFORM_BLOCKS","","",null,null],[17,"MAX_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"TEXTURE26","","",null,null],[17,"MAX_TESS_EVALUATION_IMAGE_UNIFORMS","","",null,null],[17,"TEXTURE_BINDING_CUBE_MAP_ARRAY","","",null,null],[17,"AND","","",null,null],[17,"FLOAT","","",null,null],[17,"TEXTURE_WRAP_R","","",null,null],[17,"VIEWPORT","","",null,null],[17,"STENCIL_INDEX","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_MODE","","",null,null],[17,"NOTEQUAL","","",null,null],[17,"SIGNED_NORMALIZED","","",null,null],[17,"RGB10","","",null,null],[17,"CLIP_DEPTH_MODE","","",null,null],[17,"MAX_COMPUTE_IMAGE_UNIFORMS","","",null,null],[17,"DEPTH_COMPONENT16","","",null,null],[17,"LINES_ADJACENCY","","",null,null],[17,"MIPMAP","","",null,null],[17,"RGB32F","","",null,null],[17,"TEXTURE_MAG_FILTER","","",null,null],[17,"PROXY_TEXTURE_CUBE_MAP_ARRAY","","",null,null],[17,"TEXTURE_COMPRESSED","","",null,null],[17,"BLEND_SRC","","",null,null],[17,"BUFFER_MAP_LENGTH","","",null,null],[17,"UNPACK_SKIP_IMAGES","","",null,null],[17,"UNSIGNALED","","",null,null],[17,"ALL_BARRIER_BITS","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_INDEX","","",null,null],[17,"INT_IMAGE_1D_ARRAY","","",null,null],[17,"FLOAT_32_UNSIGNED_INT_24_8_REV","","",null,null],[17,"FUNC_ADD","","",null,null],[17,"COMPRESSED_RGBA8_ETC2_EAC","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_PAUSED","","",null,null],[17,"MAX_FRAMEBUFFER_WIDTH","","",null,null],[17,"VERTEX_BINDING_BUFFER","","",null,null],[17,"CLIENT_MAPPED_BUFFER_BARRIER_BIT","","",null,null],[17,"TEXTURE_STENCIL_SIZE","","",null,null],[17,"MAX_HEIGHT","","",null,null],[17,"DEPTH_COMPONENT24","","",null,null],[17,"PROGRAM","","",null,null],[17,"STEREO","","",null,null],[17,"MAX_TESS_EVALUATION_UNIFORM_COMPONENTS","","",null,null],[17,"SRC_ALPHA_SATURATE","","",null,null],[17,"POINT","","",null,null],[17,"TEXTURE_2D","","",null,null],[17,"MAX_GEOMETRY_UNIFORM_COMPONENTS","","",null,null],[17,"LOW_INT","","",null,null],[17,"RG32I","","",null,null],[17,"PRIMITIVES_GENERATED","","",null,null],[17,"DOUBLE_MAT3x4","","",null,null],[17,"TEXTURE_MAX_ANISOTROPY_EXT","","",null,null],[17,"GEOMETRY_SHADER_INVOCATIONS","","",null,null],[17,"VERTEX_PROGRAM_POINT_SIZE","","",null,null],[17,"LINE_SMOOTH","","",null,null],[17,"FLOAT_MAT4x3","","",null,null],[17,"UNSIGNED_BYTE","","",null,null],[17,"COMPRESSED_SIGNED_RG11_EAC","","",null,null],[17,"QUERY_BUFFER_BINDING","","",null,null],[17,"VIEW_CLASS_RGTC1_RED","","",null,null],[17,"STATIC_DRAW","","",null,null],[17,"FRAMEBUFFER_UNSUPPORTED","","",null,null],[17,"TEXTURE_1D","","",null,null],[17,"VERTEX_SHADER","","",null,null],[17,"LINE_WIDTH","","",null,null],[17,"TOP_LEVEL_ARRAY_SIZE","","",null,null],[17,"RGBA16I","","",null,null],[17,"TEXTURE","","",null,null],[17,"RENDERBUFFER_BLUE_SIZE","","",null,null],[17,"COMPRESSED_RGBA","","",null,null],[17,"SAMPLER_3D","","",null,null],[17,"DEBUG_GROUP_STACK_DEPTH","","",null,null],[17,"DOUBLE_MAT2","","",null,null],[17,"STREAM_DRAW","","",null,null],[17,"R16I","","",null,null],[17,"DRAW_BUFFER1","","",null,null],[17,"RED_INTEGER","","",null,null],[17,"SHADER_SOURCE_LENGTH","","",null,null],[17,"MAX_COMBINED_SHADER_OUTPUT_RESOURCES","","",null,null],[17,"R8UI","","",null,null],[17,"UNPACK_ROW_LENGTH","","",null,null],[17,"UNSIGNED_INT_IMAGE_1D_ARRAY","","",null,null],[17,"MAX_IMAGE_UNITS","","",null,null],[17,"STENCIL","","",null,null],[17,"TESS_GEN_POINT_MODE","","",null,null],[17,"IMAGE_CLASS_2_X_32","","",null,null],[17,"COLOR_ATTACHMENT16","","",null,null],[17,"ACTIVE_SUBROUTINES","","",null,null],[17,"SRC_ALPHA","","",null,null],[17,"UNSIGNED_BYTE_2_3_3_REV","","",null,null],[17,"TEXTURE_BINDING_BUFFER","","",null,null],[17,"IMAGE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"IMAGE_CLASS_10_10_10_2","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_BUFFERS","","",null,null],[17,"VERTEX_ARRAY_BINDING","","",null,null],[17,"UNSIGNED_INT_24_8","","",null,null],[17,"FASTEST","","",null,null],[17,"QUERY_WAIT","","",null,null],[17,"FRAGMENT_SHADER_BIT","","",null,null],[17,"SAMPLER_CUBE_MAP_ARRAY","","",null,null],[17,"TIMEOUT_EXPIRED","","",null,null],[17,"UNSIGNED_BYTE_3_3_2","","",null,null],[17,"FILTER","","",null,null],[17,"LAST_VERTEX_CONVENTION","","",null,null],[17,"INTERLEAVED_ATTRIBS","","",null,null],[17,"LINEAR_MIPMAP_NEAREST","","",null,null],[17,"VIEWPORT_BOUNDS_RANGE","","",null,null],[17,"MIN_FRAGMENT_INTERPOLATION_OFFSET","","",null,null],[17,"TEXTURE_BINDING_2D_MULTISAMPLE","","",null,null],[17,"POLYGON_MODE","","",null,null],[17,"TEXTURE_COMPRESSION_HINT","","",null,null],[17,"UNSIGNED_INT_8_8_8_8","","",null,null],[17,"RGB10_A2","","",null,null],[17,"ACTIVE_UNIFORMS","","",null,null],[17,"DRAW_INDIRECT_BUFFER_BINDING","","",null,null],[17,"PROGRAM_BINARY_LENGTH","","",null,null],[17,"IMPLEMENTATION_COLOR_READ_FORMAT","","",null,null],[17,"MAX_PATCH_VERTICES","","",null,null],[17,"CLIP_ORIGIN","","",null,null],[17,"R8","","",null,null],[17,"MAX_TESS_CONTROL_ATOMIC_COUNTERS","","",null,null],[17,"BUFFER_VARIABLE","","",null,null],[17,"NO_RESET_NOTIFICATION","","",null,null],[17,"RGB16UI","","",null,null],[17,"COMPRESSED_SIGNED_RG_RGTC2","","",null,null],[17,"NUM_SHADING_LANGUAGE_VERSIONS","","",null,null],[17,"INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"COMPRESSED_RG","","",null,null],[17,"DEPTH_CLEAR_VALUE","","",null,null],[17,"PACK_ALIGNMENT","","",null,null],[17,"TEXTURE_SWIZZLE_RGBA","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D","","",null,null],[17,"RGB4","","",null,null],[17,"PATCH_VERTICES","","",null,null],[17,"MAX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"SAMPLER_2D","","",null,null],[17,"POLYGON_OFFSET_FACTOR","","",null,null],[17,"DRAW_BUFFER8","","",null,null],[17,"COMPRESSED_RGB_BPTC_SIGNED_FLOAT","","",null,null],[17,"TEXTURE6","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_ARRAY","","",null,null],[17,"DEBUG_TYPE_PERFORMANCE","","",null,null],[17,"DRAW_BUFFER0","","",null,null],[17,"DEPTH_RENDERABLE","","",null,null],[17,"IMAGE_2D_MULTISAMPLE","","",null,null],[17,"R32F","","",null,null],[17,"TEXTURE_RED_SIZE","","",null,null],[17,"COLOR_BUFFER_BIT","","",null,null],[17,"RGBA32UI","","",null,null],[17,"FRAMEBUFFER_RENDERABLE_LAYERED","","",null,null],[17,"ONE_MINUS_SRC_COLOR","","",null,null],[17,"UNIFORM_IS_ROW_MAJOR","","",null,null],[17,"INT_SAMPLER_1D","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER","","",null,null],[17,"MAX_3D_TEXTURE_SIZE","","",null,null],[17,"TESS_CONTROL_SHADER","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_VERTEX_SHADER_STORAGE_BLOCKS","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"UNSIGNED_INT_SAMPLER_BUFFER","","",null,null],[17,"ACTIVE_SUBROUTINE_UNIFORMS","","",null,null],[17,"RGB_INTEGER","","",null,null],[17,"INT_IMAGE_2D_MULTISAMPLE","","",null,null],[17,"MANUAL_GENERATE_MIPMAP","","",null,null],[17,"TESS_GEN_VERTEX_ORDER","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_SIZE","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"MAX_COMPUTE_UNIFORM_BLOCKS","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_LAYERED","","",null,null],[17,"AUTO_GENERATE_MIPMAP","","",null,null],[17,"SRC_COLOR","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","","",null,null],[17,"INTERNALFORMAT_BLUE_SIZE","","",null,null],[17,"MAX_TESS_CONTROL_OUTPUT_COMPONENTS","","",null,null],[17,"LINE_STRIP_ADJACENCY","","",null,null],[17,"CW","","",null,null],[17,"SAMPLE_MASK","","",null,null],[17,"MIN_MAP_BUFFER_ALIGNMENT","","",null,null],[17,"MAX_DEBUG_MESSAGE_LENGTH","","",null,null],[17,"FRAMEBUFFER_SRGB","","",null,null],[17,"COMPRESSED_SIGNED_RED_RGTC1","","",null,null],[17,"PROXY_TEXTURE_2D_ARRAY","","",null,null],[17,"OR_INVERTED","","",null,null],[17,"SAMPLER_BINDING","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER","","",null,null],[17,"COPY_WRITE_BUFFER_BINDING","","",null,null],[17,"TEXTURE_VIEW_MIN_LEVEL","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS","","",null,null],[17,"SMOOTH_POINT_SIZE_GRANULARITY","","",null,null],[17,"LESS","","",null,null],[17,"DEPTH_STENCIL_TEXTURE_MODE","","",null,null],[17,"IMAGE_BINDING_LAYERED","","",null,null],[17,"FLOAT_MAT3","","",null,null],[17,"DEPTH_COMPONENTS","","",null,null],[17,"PROXY_TEXTURE_2D_MULTISAMPLE","","",null,null],[17,"MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS","","",null,null],[17,"COMPATIBLE_SUBROUTINES","","",null,null],[17,"DEPTH_TEST","","",null,null],[17,"COMPRESSED_R11_EAC","","",null,null],[17,"ACTIVE_TEXTURE","","",null,null],[17,"FULL_SUPPORT","","",null,null],[17,"TEXTURE7","","",null,null],[17,"STENCIL_BUFFER_BIT","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST","","",null,null],[17,"TEXTURE_WIDTH","","",null,null],[17,"TESS_GEN_SPACING","","",null,null],[17,"MAX_DEPTH","","",null,null],[17,"COMPUTE_WORK_GROUP_SIZE","","",null,null],[17,"CLIENT_STORAGE_BIT","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_HEIGHT","","",null,null],[17,"STENCIL_INDEX4","","",null,null],[17,"SAMPLER_1D_ARRAY_SHADOW","","",null,null],[17,"UNSIGNED_INT_10F_11F_11F_REV","","",null,null],[17,"TEXTURE_RECTANGLE","","",null,null],[17,"LINEAR_MIPMAP_LINEAR","","",null,null],[17,"RGB12","","",null,null],[17,"COPY_READ_BUFFER_BINDING","","",null,null],[17,"TEXTURE_FIXED_SAMPLE_LOCATIONS","","",null,null],[17,"MAX_COMPUTE_SHARED_MEMORY_SIZE","","",null,null],[17,"ALL_SHADER_BITS","","",null,null],[17,"TEXTURE_BUFFER_OFFSET","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_DIVISOR","","",null,null],[17,"RG16","","",null,null],[17,"STENCIL_BACK_REF","","",null,null],[17,"MAX_DUAL_SOURCE_DRAW_BUFFERS","","",null,null],[17,"MAX_TESS_CONTROL_INPUT_COMPONENTS","","",null,null],[17,"COLOR_ATTACHMENT31","","",null,null],[17,"IMAGE_1D","","",null,null],[17,"TEXTURE_SAMPLES","","",null,null],[17,"TEXTURE_IMAGE_FORMAT","","",null,null],[17,"INTERNALFORMAT_SUPPORTED","","",null,null],[17,"IMAGE_CLASS_11_11_10","","",null,null],[17,"MEDIUM_INT","","",null,null],[17,"COLOR_ATTACHMENT2","","",null,null],[17,"INVALID_FRAMEBUFFER_OPERATION","","",null,null],[17,"CLIP_DISTANCE2","","",null,null],[17,"UNIFORM_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"MAX_VERTEX_ATTRIB_STRIDE","","",null,null],[17,"DOUBLE_MAT3x2","","",null,null],[17,"UNSIGNED_INT_ATOMIC_COUNTER","","",null,null],[17,"TEXTURE_BUFFER_BINDING","","",null,null],[17,"IMAGE_2D","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_NORMALIZED","","",null,null],[17,"QUERY_TARGET","","",null,null],[17,"RGBA8_SNORM","","",null,null],[17,"UNIFORM_MATRIX_STRIDE","","",null,null],[17,"SAMPLER_1D_ARRAY","","",null,null],[17,"TEXTURE_BLUE_TYPE","","",null,null],[17,"COLOR_ATTACHMENT18","","",null,null],[17,"ACTIVE_VARIABLES","","",null,null],[17,"COLOR_ATTACHMENT14","","",null,null],[17,"COLOR_ATTACHMENT22","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_SIZE","","",null,null],[17,"LOCATION","","",null,null],[17,"CONSTANT_COLOR","","",null,null],[17,"FRAMEBUFFER_RENDERABLE","","",null,null],[17,"QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION","","",null,null],[17,"CONTEXT_PROFILE_MASK","","",null,null],[17,"ACTIVE_SUBROUTINE_MAX_LENGTH","","",null,null],[17,"STREAM_READ","","",null,null],[17,"IMAGE_3D","","",null,null],[17,"ALIASED_LINE_WIDTH_RANGE","","",null,null],[17,"POLYGON_OFFSET_UNITS","","",null,null],[17,"PIXEL_PACK_BUFFER","","",null,null],[17,"INTERNALFORMAT_GREEN_TYPE","","",null,null],[17,"STENCIL_PASS_DEPTH_PASS","","",null,null],[17,"BUFFER_UPDATE_BARRIER_BIT","","",null,null],[17,"UNSIGNED_SHORT_5_5_5_1","","",null,null],[17,"ATOMIC_COUNTER_BUFFER","","",null,null],[17,"BLEND_DST","","",null,null],[17,"DECR_WRAP","","",null,null],[17,"BUFFER_USAGE","","",null,null],[17,"BUFFER_ACCESS","","",null,null],[17,"ALPHA","","",null,null],[17,"RENDERBUFFER_GREEN_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","","",null,null],[17,"DEBUG_TYPE_UNDEFINED_BEHAVIOR","","",null,null],[17,"TEXTURE25","","",null,null],[17,"CLIP_DISTANCE4","","",null,null],[17,"MAP_FLUSH_EXPLICIT_BIT","","",null,null],[17,"MAX_VERTEX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"RENDERBUFFER","","",null,null],[17,"CONTEXT_COMPATIBILITY_PROFILE_BIT","","",null,null],[17,"REPEAT","","",null,null],[17,"STENCIL_BACK_FUNC","","",null,null],[17,"RGBA_INTEGER","","",null,null],[17,"SAMPLER_BUFFER","","",null,null],[17,"FRAMEBUFFER_DEFAULT_LAYERS","","",null,null],[17,"MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS","","",null,null],[17,"RENDERBUFFER_STENCIL_SIZE","","",null,null],[17,"TEXTURE_TARGET","","",null,null],[17,"BACK","","",null,null],[17,"CLIP_DISTANCE6","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE","","",null,null],[17,"VIEWPORT_INDEX_PROVOKING_VERTEX","","",null,null],[17,"SHADER_STORAGE_BLOCK","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST","","",null,null],[17,"SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"ZERO_TO_ONE","","",null,null],[17,"TEXTURE_SWIZZLE_G","","",null,null],[17,"MAX_DEPTH_TEXTURE_SAMPLES","","",null,null],[17,"SHADER_BINARY_FORMATS","","",null,null],[17,"MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"ELEMENT_ARRAY_BUFFER_BINDING","","",null,null],[17,"RENDERBUFFER_INTERNAL_FORMAT","","",null,null],[17,"RENDERBUFFER_DEPTH_SIZE","","",null,null],[17,"NUM_COMPATIBLE_SUBROUTINES","","",null,null],[17,"ISOLINES","","",null,null],[17,"DEBUG_TYPE_POP_GROUP","","",null,null],[17,"VERTEX_BINDING_OFFSET","","",null,null],[17,"MAX_RECTANGLE_TEXTURE_SIZE","","",null,null],[17,"SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"STENCIL_BACK_WRITEMASK","","",null,null],[17,"NAND","","",null,null],[17,"FLOAT_MAT3x2","","",null,null],[17,"LINE_STRIP","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"STENCIL_REF","","",null,null],[17,"LINE_WIDTH_RANGE","","",null,null],[17,"MAX_TESS_EVALUATION_UNIFORM_BLOCKS","","",null,null],[17,"RG8_SNORM","","",null,null],[17,"IMAGE_CLASS_2_X_8","","",null,null],[17,"COLOR_ATTACHMENT7","","",null,null],[17,"TEXTURE_BLUE_SIZE","","",null,null],[17,"TEXTURE30","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","","",null,null],[17,"MAX_CUBE_MAP_TEXTURE_SIZE","","",null,null],[17,"DRAW_INDIRECT_BUFFER","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS","","",null,null],[17,"OBJECT_TYPE","","",null,null],[17,"TRANSFORM_FEEDBACK","","",null,null],[17,"VERTEX_ATTRIB_RELATIVE_OFFSET","","",null,null],[17,"SMOOTH_POINT_SIZE_RANGE","","",null,null],[17,"DYNAMIC_DRAW","","",null,null],[17,"MULTISAMPLE","","",null,null],[17,"FALSE","","",null,null],[17,"DEPTH_RANGE","","",null,null],[17,"QUERY_NO_WAIT","","",null,null],[17,"FRAMEBUFFER_BINDING","","",null,null],[17,"SRC1_COLOR","","",null,null],[17,"PACK_ROW_LENGTH","","",null,null],[17,"PATCH_DEFAULT_OUTER_LEVEL","","",null,null],[17,"PRIMITIVE_RESTART","","",null,null],[17,"MAX_VERTEX_ATOMIC_COUNTERS","","",null,null],[17,"DEPTH_BUFFER_BIT","","",null,null],[17,"FRAGMENT_SHADER","","",null,null],[17,"MAX_COMPUTE_TEXTURE_IMAGE_UNITS","","",null,null],[17,"ONE_MINUS_SRC1_COLOR","","",null,null],[17,"R8I","","",null,null],[17,"READ_PIXELS","","",null,null],[17,"INT_VEC4","","",null,null],[17,"TEXTURE15","","",null,null],[17,"INT_IMAGE_1D","","",null,null],[17,"RGB8UI","","",null,null],[17,"ACTIVE_UNIFORM_MAX_LENGTH","","",null,null],[17,"REFERENCED_BY_COMPUTE_SHADER","","",null,null],[17,"STREAM_COPY","","",null,null],[17,"RENDERBUFFER_BINDING","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Z","","",null,null],[17,"COMPRESSED_RG_RGTC2","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_SIZE","","",null,null],[17,"RG8I","","",null,null],[17,"TEXTURE17","","",null,null],[17,"TEXTURE14","","",null,null],[17,"TESS_EVALUATION_SUBROUTINE","","",null,null],[17,"MAX_CULL_DISTANCES","","",null,null],[17,"BOOL_VEC3","","",null,null],[17,"MAX_SHADER_STORAGE_BLOCK_SIZE","","",null,null],[17,"ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH","","",null,null],[17,"FRONT_AND_BACK","","",null,null],[17,"COMPRESSED_SRGB_ALPHA_BPTC_UNORM","","",null,null],[17,"MAX_COMPUTE_ATOMIC_COUNTERS","","",null,null],[17,"UNIFORM_NAME_LENGTH","","",null,null],[17,"DYNAMIC_READ","","",null,null],[17,"INT_IMAGE_2D_RECT","","",null,null],[17,"MAX_TESS_EVALUATION_INPUT_COMPONENTS","","",null,null],[17,"MAX_VERTEX_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"RG16I","","",null,null],[17,"FRAMEBUFFER_DEFAULT","","",null,null],[17,"SAMPLER_2D_ARRAY_SHADOW","","",null,null],[17,"DYNAMIC_STORAGE_BIT","","",null,null],[17,"RIGHT","","",null,null],[17,"COLOR_ATTACHMENT30","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_BLOCKS","","",null,null],[17,"R32I","","",null,null],[17,"TEXTURE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"CURRENT_QUERY","","",null,null],[17,"INT_IMAGE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"SAMPLER_CUBE_SHADOW","","",null,null],[17,"RENDERER","","",null,null],[17,"SYNC_FENCE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_STRIDE","","",null,null],[17,"COLOR_WRITEMASK","","",null,null],[17,"COLOR_ATTACHMENT6","","",null,null],[17,"UNIFORM_BUFFER_BINDING","","",null,null],[17,"COLOR_ATTACHMENT10","","",null,null],[17,"QUERY_WAIT_INVERTED","","",null,null],[17,"TEXTURE_CUBE_MAP","","",null,null],[17,"DRAW_BUFFER12","","",null,null],[17,"TEXTURE27","","",null,null],[17,"TEXTURE31","","",null,null],[17,"ANY_SAMPLES_PASSED","","",null,null],[17,"NO_ERROR","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_MULTISAMPLE","","",null,null],[17,"PROGRAM_OUTPUT","","",null,null],[17,"VIEW_CLASS_48_BITS","","",null,null],[17,"TRIANGLE_STRIP","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_BINDING","","",null,null],[17,"SIGNALED","","",null,null],[17,"TEXTURE_DEPTH_SIZE","","",null,null],[17,"HALF_FLOAT","","",null,null],[17,"VIEW_CLASS_S3TC_DXT1_RGBA","","",null,null],[17,"GREEN_INTEGER","","",null,null],[17,"FRAGMENT_SHADER_DERIVATIVE_HINT","","",null,null],[17,"CLIP_DISTANCE0","","",null,null],[17,"TEXTURE_BINDING_CUBE_MAP","","",null,null],[17,"GET_TEXTURE_IMAGE_FORMAT","","",null,null],[17,"SHADER_IMAGE_ACCESS_BARRIER_BIT","","",null,null],[17,"UNSIGNED_INT_VEC2","","",null,null],[17,"MAX_GEOMETRY_INPUT_COMPONENTS","","",null,null],[17,"MAX_TESS_CONTROL_UNIFORM_COMPONENTS","","",null,null],[17,"INTERNALFORMAT_STENCIL_TYPE","","",null,null],[17,"ARRAY_BUFFER","","",null,null],[17,"SAMPLER_1D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_3D","","",null,null],[17,"VIEW_CLASS_S3TC_DXT3_RGBA","","",null,null],[17,"FRAMEBUFFER_DEFAULT_WIDTH","","",null,null],[17,"DRAW_BUFFER7","","",null,null],[17,"SRC1_ALPHA","","",null,null],[17,"COPY_WRITE_BUFFER","","",null,null],[17,"DISPATCH_INDIRECT_BUFFER_BINDING","","",null,null],[17,"TEXTURE4","","",null,null],[17,"IMAGE_CUBE","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYING","","",null,null],[17,"LOWER_LEFT","","",null,null],[17,"DEBUG_SOURCE_API","","",null,null],[17,"ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_COUNT","","",null,null],[17,"UNPACK_LSB_FIRST","","",null,null],[17,"TESS_CONTROL_SUBROUTINE_UNIFORM","","",null,null],[17,"TEXTURE_BINDING_3D","","",null,null],[17,"TEXTURE9","","",null,null],[17,"PACK_SKIP_PIXELS","","",null,null],[17,"TESS_EVALUATION_SHADER_BIT","","",null,null],[17,"VIEW_CLASS_S3TC_DXT5_RGBA","","",null,null],[17,"POINT_FADE_THRESHOLD_SIZE","","",null,null],[17,"RG16F","","",null,null],[17,"DST_ALPHA","","",null,null],[17,"MAX_TESS_PATCH_COMPONENTS","","",null,null],[17,"UNSIGNED_INT_VEC4","","",null,null],[17,"ACTIVE_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"NICEST","","",null,null],[17,"RGB32I","","",null,null],[17,"MAX_TEXTURE_LOD_BIAS","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER","","",null,null],[17,"UNSIGNED_NORMALIZED","","",null,null],[17,"COLOR_CLEAR_VALUE","","",null,null],[17,"COPY","","",null,null],[17,"RG16_SNORM","","",null,null],[17,"IMAGE_BINDING_FORMAT","","",null,null],[17,"BLUE_INTEGER","","",null,null],[17,"UNIFORM_TYPE","","",null,null],[17,"COPY_INVERTED","","",null,null],[17,"MAX_TESS_CONTROL_UNIFORM_BLOCKS","","",null,null],[17,"TEXTURE18","","",null,null],[17,"RED","","",null,null],[17,"BLEND_SRC_ALPHA","","",null,null],[17,"TEXTURE_ALPHA_TYPE","","",null,null],[17,"MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS","","",null,null],[17,"LAYER_PROVOKING_VERTEX","","",null,null],[17,"COLOR_ATTACHMENT11","","",null,null],[17,"BLEND_EQUATION_ALPHA","","",null,null],[17,"TEXTURE10","","",null,null],[17,"OFFSET","","",null,null],[17,"TEXTURE_COMPRESSED_BLOCK_WIDTH","","",null,null],[17,"INT_IMAGE_CUBE_MAP_ARRAY","","",null,null],[17,"NUM_SHADER_BINARY_FORMATS","","",null,null],[17,"MAX_COMPUTE_SHADER_STORAGE_BLOCKS","","",null,null],[17,"TEXTURE_HEIGHT","","",null,null],[17,"DEPTH_FUNC","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","","",null,null],[17,"UNSIGNED_INT_IMAGE_BUFFER","","",null,null],[17,"MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"RG8UI","","",null,null],[17,"COMPRESSED_RGBA_BPTC_UNORM","","",null,null],[17,"DEPTH_WRITEMASK","","",null,null],[17,"TEXTURE_MAX_LOD","","",null,null],[17,"MIN_SAMPLE_SHADING_VALUE","","",null,null],[17,"VIEW_CLASS_RGTC2_RG","","",null,null],[17,"TEXTURE_BASE_LEVEL","","",null,null],[17,"DECR","","",null,null],[17,"SHADER_STORAGE_BUFFER","","",null,null],[17,"MAX_TEXTURE_MAX_ANISOTROPY_EXT","","",null,null],[17,"FRAMEBUFFER_BARRIER_BIT","","",null,null],[17,"TEXTURE28","","",null,null],[17,"MAX_VERTEX_ATTRIBS","","",null,null],[17,"NEAREST","","",null,null],[17,"PROGRAM_PIPELINE_BINDING","","",null,null],[17,"COMPRESSED_RED","","",null,null],[17,"SHADER_COMPILER","","",null,null],[17,"ARRAY_BUFFER_BINDING","","",null,null],[17,"NEAREST_MIPMAP_LINEAR","","",null,null],[17,"NUM_EXTENSIONS","","",null,null],[17,"R16_SNORM","","",null,null],[17,"STENCIL_FAIL","","",null,null],[17,"VERTEX_ARRAY","","",null,null],[17,"TEXTURE13","","",null,null],[17,"FIXED_ONLY","","",null,null],[17,"MAP_WRITE_BIT","","",null,null],[17,"VIEW_CLASS_24_BITS","","",null,null],[17,"SAMPLE_SHADING","","",null,null],[17,"COMPUTE_SUBROUTINE_UNIFORM","","",null,null],[17,"COMPRESSED_SRGB_ALPHA","","",null,null],[17,"GEOMETRY_TEXTURE","","",null,null],[17,"DRAW_BUFFER10","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","","",null,null],[17,"RENDERBUFFER_HEIGHT","","",null,null],[17,"IMAGE_CLASS_1_X_16","","",null,null],[17,"UNSIGNED_INT_IMAGE_1D","","",null,null],[17,"RGBA16_SNORM","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","","",null,null],[17,"SEPARATE_ATTRIBS","","",null,null],[17,"MAX_IMAGE_SAMPLES","","",null,null],[17,"TEXTURE_COMPRESSED_IMAGE_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","","",null,null],[17,"TEXTURE_MAX_LEVEL","","",null,null],[17,"INT_IMAGE_CUBE","","",null,null],[17,"UNSIGNED_INT_SAMPLER_1D","","",null,null],[17,"DEBUG_CALLBACK_USER_PARAM","","",null,null],[17,"COMPRESSED_SIGNED_R11_EAC","","",null,null],[17,"PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"COLOR_ATTACHMENT27","","",null,null],[17,"ONE_MINUS_CONSTANT_COLOR","","",null,null],[17,"SRGB8","","",null,null],[17,"PROXY_TEXTURE_RECTANGLE","","",null,null],[17,"UNIFORM_BUFFER_SIZE","","",null,null],[17,"SAMPLER_2D_RECT","","",null,null],[17,"TEXTURE_SHARED_SIZE","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Y","","",null,null],[17,"DRAW_BUFFER9","","",null,null],[17,"LEQUAL","","",null,null],[17,"COLOR_ATTACHMENT15","","",null,null],[17,"MAX_TEXTURE_SIZE","","",null,null],[17,"UNIFORM_ARRAY_STRIDE","","",null,null],[17,"SHADER_TYPE","","",null,null],[17,"TEXTURE_SWIZZLE_A","","",null,null],[17,"TEXTURE_CUBE_MAP_ARRAY","","",null,null],[17,"DEBUG_TYPE_MARKER","","",null,null],[17,"UNIFORM_BLOCK_NAME_LENGTH","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","","",null,null],[17,"PROVOKING_VERTEX","","",null,null],[17,"UNSIGNED_SHORT","","",null,null],[17,"DEBUG_TYPE_DEPRECATED_BEHAVIOR","","",null,null],[17,"IMAGE_CLASS_1_X_32","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_RECT","","",null,null],[17,"PACK_COMPRESSED_BLOCK_SIZE","","",null,null],[17,"IMAGE_CUBE_MAP_ARRAY","","",null,null],[17,"COLOR_ATTACHMENT26","","",null,null],[17,"IMAGE_1D_ARRAY","","",null,null],[17,"DEBUG_TYPE_PUSH_GROUP","","",null,null],[17,"DISPATCH_INDIRECT_BUFFER","","",null,null],[17,"PROGRAM_BINARY_RETRIEVABLE_HINT","","",null,null],[17,"MAX_SUBROUTINES","","",null,null],[17,"NAME_LENGTH","","",null,null],[17,"COLOR_ATTACHMENT1","","",null,null],[17,"GEOMETRY_VERTICES_OUT","","",null,null],[17,"UNSIGNED_INT_10_10_10_2","","",null,null],[17,"SAMPLER","","",null,null],[17,"CONTEXT_LOST","","",null,null],[17,"MAX_FRAGMENT_ATOMIC_COUNTERS","","",null,null],[17,"SHADER_IMAGE_STORE","","",null,null],[17,"MAX_FRAGMENT_SHADER_STORAGE_BLOCKS","","",null,null],[17,"DRAW_FRAMEBUFFER","","",null,null],[17,"COLOR_ATTACHMENT21","","",null,null],[17,"R32UI","","",null,null],[17,"DEBUG_LOGGED_MESSAGES","","",null,null],[17,"NUM_COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"DEBUG_OUTPUT","","",null,null],[17,"SET","","",null,null],[17,"INTERNALFORMAT_STENCIL_SIZE","","",null,null],[17,"VALIDATE_STATUS","","",null,null],[17,"MAP_PERSISTENT_BIT","","",null,null],[17,"COLOR_ATTACHMENT13","","",null,null],[17,"DEBUG_SOURCE_WINDOW_SYSTEM","","",null,null],[17,"NUM_PROGRAM_BINARY_FORMATS","","",null,null],[17,"MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","","",null,null],[17,"MAP_UNSYNCHRONIZED_BIT","","",null,null],[17,"RGB8","","",null,null],[17,"STENCIL_COMPONENTS","","",null,null],[17,"INT_VEC2","","",null,null],[17,"COMPRESSED_SRGB8_ETC2","","",null,null],[17,"INT_VEC3","","",null,null],[17,"COMPUTE_SHADER_BIT","","",null,null],[17,"COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT","","",null,null],[17,"INTERNALFORMAT_PREFERRED","","",null,null],[17,"INVALID_ENUM","","",null,null],[17,"MAX_FRAMEBUFFER_SAMPLES","","",null,null],[17,"MIRROR_CLAMP_TO_EDGE","","",null,null],[17,"MINOR_VERSION","","",null,null],[17,"PROGRAM_POINT_SIZE","","",null,null],[17,"IMAGE_CLASS_4_X_16","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER","","",null,null],[17,"DEPTH","","",null,null],[17,"TEXTURE_IMMUTABLE_LEVELS","","",null,null],[17,"COLOR","","",null,null],[17,"COLOR_ENCODING","","",null,null],[17,"GET_TEXTURE_IMAGE_TYPE","","",null,null],[17,"INVALID_VALUE","","",null,null],[17,"SAMPLE_BUFFERS","","",null,null],[17,"VERSION","","",null,null],[17,"UNSIGNED_SHORT_5_6_5","","",null,null],[17,"SAMPLE_COVERAGE_INVERT","","",null,null],[17,"STENCIL_INDEX8","","",null,null],[17,"CONTEXT_RELEASE_BEHAVIOR","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_PASS","","",null,null],[17,"RGB565","","",null,null],[17,"STENCIL_BACK_VALUE_MASK","","",null,null],[17,"INTERNALFORMAT_RED_SIZE","","",null,null],[17,"UNIFORM_BUFFER_START","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","","",null,null],[17,"GEOMETRY_SHADER_BIT","","",null,null],[17,"FLOAT_VEC3","","",null,null],[17,"TEXTURE_BINDING_2D_ARRAY","","",null,null],[17,"TEXTURE_3D","","",null,null],[17,"ALREADY_SIGNALED","","",null,null],[17,"PROXY_TEXTURE_1D","","",null,null],[17,"BUFFER_MAP_POINTER","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER","","",null,null],[17,"TEXTURE21","","",null,null],[17,"IMAGE_FORMAT_COMPATIBILITY_BY_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","","",null,null],[17,"RESET_NOTIFICATION_STRATEGY","","",null,null],[17,"PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED","","",null,null],[17,"DOUBLEBUFFER","","",null,null],[17,"RGB32UI","","",null,null],[17,"UNIFORM_SIZE","","",null,null],[17,"TEXTURE_GATHER_SHADOW","","",null,null],[17,"MAX_VERTEX_ATTRIB_RELATIVE_OFFSET","","",null,null],[17,"RGB10_A2UI","","",null,null],[17,"DEBUG_SOURCE_APPLICATION","","",null,null],[17,"SAMPLER_2D_ARRAY","","",null,null],[17,"DEBUG_OUTPUT_SYNCHRONOUS","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_START","","",null,null],[17,"VERTEX_ATTRIB_BINDING","","",null,null],[17,"BGRA_INTEGER","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORMS","","",null,null],[17,"TEXTURE_COMPRESSED_BLOCK_HEIGHT","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_FAIL","","",null,null],[17,"LOCATION_COMPONENT","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_WIDTH","","",null,null],[17,"IMAGE_CLASS_2_X_16","","",null,null],[17,"CLIP_DISTANCE1","","",null,null],[17,"POLYGON_OFFSET_POINT","","",null,null],[17,"RGBA32F","","",null,null],[17,"BUFFER_STORAGE_FLAGS","","",null,null],[17,"VERTEX_SUBROUTINE_UNIFORM","","",null,null],[17,"STENCIL_INDEX16","","",null,null],[17,"EXTENSIONS","","",null,null],[17,"IMAGE_BINDING_LEVEL","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_DATA_SIZE","","",null,null],[17,"MAX_GEOMETRY_SHADER_STORAGE_BLOCKS","","",null,null],[17,"CURRENT_VERTEX_ATTRIB","","",null,null],[17,"RENDERBUFFER_ALPHA_SIZE","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_START","","",null,null],[17,"RASTERIZER_DISCARD","","",null,null],[17,"TESS_EVALUATION_TEXTURE","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"NEAREST_MIPMAP_NEAREST","","",null,null],[17,"COMPRESSED_RED_RGTC1","","",null,null],[17,"FRAMEBUFFER_DEFAULT_SAMPLES","","",null,null],[17,"MAX_VARYING_COMPONENTS","","",null,null],[17,"QUERY_BUFFER_BARRIER_BIT","","",null,null],[17,"COLOR_ATTACHMENT23","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS","","",null,null],[17,"TEXTURE_BINDING_2D","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_STRIDE","","",null,null],[17,"SAMPLE_ALPHA_TO_COVERAGE","","",null,null],[17,"LOCATION_INDEX","","",null,null],[17,"MAX_ELEMENTS_INDICES","","",null,null],[17,"STENCIL_INDEX1","","",null,null],[17,"TEXTURE20","","",null,null],[17,"RGB16F","","",null,null],[17,"TEXTURE22","","",null,null],[17,"COMPUTE_SUBROUTINE","","",null,null],[17,"TEXTURE_UPDATE_BARRIER_BIT","","",null,null],[17,"DEPTH_STENCIL_ATTACHMENT","","",null,null],[17,"TEXTURE_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"MAX_COMBINED_ATOMIC_COUNTERS","","",null,null],[17,"STATIC_COPY","","",null,null],[17,"LOW_FLOAT","","",null,null],[17,"MAX_VERTEX_ATTRIB_BINDINGS","","",null,null],[17,"PROGRAM_PIPELINE","","",null,null],[17,"BUFFER_BINDING","","",null,null],[17,"TEXTURE_DEPTH","","",null,null],[17,"STENCIL_CLEAR_VALUE","","",null,null],[17,"TEXTURE_GREEN_SIZE","","",null,null],[17,"COLOR_RENDERABLE","","",null,null],[17,"VIEW_CLASS_8_BITS","","",null,null],[17,"TEXTURE16","","",null,null],[17,"GREEN","","",null,null],[17,"RGB16I","","",null,null],[17,"ACTIVE_PROGRAM","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_ARRAY","","",null,null],[17,"TEXTURE_MIN_LOD","","",null,null],[17,"DOUBLE_VEC2","","",null,null],[17,"DEPTH_ATTACHMENT","","",null,null],[17,"VIEW_CLASS_S3TC_DXT1_RGB","","",null,null],[17,"UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX","","",null,null],[17,"MAX_VARYING_FLOATS","","",null,null],[17,"FRACTIONAL_EVEN","","",null,null],[17,"CLEAR_TEXTURE","","",null,null],[17,"MAX_ELEMENTS_VERTICES","","",null,null],[17,"UNPACK_ALIGNMENT","","",null,null],[17,"COLOR_ATTACHMENT19","","",null,null],[17,"MAX_COMBINED_TEXTURE_IMAGE_UNITS","","",null,null],[17,"TESS_CONTROL_OUTPUT_VERTICES","","",null,null],[17,"SAMPLE_POSITION","","",null,null],[17,"COMPRESSED_RG11_EAC","","",null,null],[17,"TEXTURE_LOD_BIAS","","",null,null],[17,"VENDOR","","",null,null],[17,"MAP_COHERENT_BIT","","",null,null],[17,"PROXY_TEXTURE_3D","","",null,null],[17,"STENCIL_ATTACHMENT","","",null,null],[17,"EQUIV","","",null,null],[17,"UNIFORM_BLOCK","","",null,null],[17,"STENCIL_TEST","","",null,null],[17,"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"TEXTURE_MIN_FILTER","","",null,null],[17,"CONTEXT_FLAG_ROBUST_ACCESS_BIT","","",null,null],[17,"DRAW_BUFFER13","","",null,null],[17,"TEXTURE_INTERNAL_FORMAT","","",null,null],[17,"BACK_LEFT","","",null,null],[17,"MIN","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_ACTIVE","","",null,null],[17,"FUNC_SUBTRACT","","",null,null],[17,"DOUBLE_MAT4x3","","",null,null],[17,"IMAGE_PIXEL_FORMAT","","",null,null],[17,"TEXTURE2","","",null,null],[17,"UNIFORM_BLOCK_DATA_SIZE","","",null,null],[17,"DEPTH24_STENCIL8","","",null,null],[17,"IMAGE_BINDING_NAME","","",null,null],[17,"GEOMETRY_INPUT_TYPE","","",null,null],[17,"UNSIGNED_INT_SAMPLER_1D_ARRAY","","",null,null],[17,"SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE","","",null,null],[17,"MAX_TEXTURE_BUFFER_SIZE","","",null,null],[17,"MAX_NUM_ACTIVE_VARIABLES","","",null,null],[17,"STACK_OVERFLOW","","",null,null],[17,"NEGATIVE_ONE_TO_ONE","","",null,null],[17,"RGBA32I","","",null,null],[17,"MAX_TESS_CONTROL_IMAGE_UNIFORMS","","",null,null],[17,"SRGB","","",null,null],[17,"DITHER","","",null,null],[17,"POINT_SPRITE_COORD_ORIGIN","","",null,null],[17,"BYTE","","",null,null],[17,"SYNC_FLUSH_COMMANDS_BIT","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","","",null,null],[17,"DOUBLE_VEC4","","",null,null],[17,"MAX_LABEL_LENGTH","","",null,null],[17,"PACK_IMAGE_HEIGHT","","",null,null],[17,"PATCH_DEFAULT_INNER_LEVEL","","",null,null],[17,"BUFFER_MAP_OFFSET","","",null,null],[17,"INT_SAMPLER_2D_ARRAY","","",null,null],[17,"MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"SYNC_FLAGS","","",null,null],[17,"CLIP_DISTANCE7","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_LONG","","",null,null],[17,"RENDERBUFFER_SAMPLES","","",null,null],[17,"CONTEXT_FLAGS","","",null,null],[17,"ACTIVE_RESOURCES","","",null,null],[17,"MAX_VIEWPORT_DIMS","","",null,null],[17,"IMAGE_CLASS_1_X_8","","",null,null],[17,"INCR_WRAP","","",null,null],[17,"CONDITION_SATISFIED","","",null,null],[17,"MAX_VERTEX_STREAMS","","",null,null],[17,"MAX_NUM_COMPATIBLE_SUBROUTINES","","",null,null],[17,"INT_IMAGE_BUFFER","","",null,null],[17,"DOUBLE","","",null,null],[17,"READ_PIXELS_TYPE","","",null,null],[17,"QUERY_BY_REGION_WAIT_INVERTED","","",null,null],[17,"CLAMP_TO_BORDER","","",null,null],[17,"TEXTURE_BINDING_RECTANGLE","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_X","","",null,null],[17,"COLOR_ATTACHMENT28","","",null,null],[17,"INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"OR_REVERSE","","",null,null],[17,"TESS_EVALUATION_SUBROUTINE_UNIFORM","","",null,null],[17,"TEXTURE_BORDER_COLOR","","",null,null],[17,"COLOR_ATTACHMENT8","","",null,null],[17,"PIXEL_BUFFER_BARRIER_BIT","","",null,null],[17,"MAX_UNIFORM_BUFFER_BINDINGS","","",null,null],[17,"QUERY_BY_REGION_WAIT","","",null,null],[17,"MIN_PROGRAM_TEXTURE_GATHER_OFFSET","","",null,null],[17,"PRIMITIVE_RESTART_FIXED_INDEX","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","","",null,null],[17,"BGR_INTEGER","","",null,null],[17,"VERTEX_BINDING_STRIDE","","",null,null],[17,"PATCHES","","",null,null],[17,"SHADER_STORAGE_BUFFER_START","","",null,null],[17,"BOOL_VEC4","","",null,null],[17,"MAX_NAME_LENGTH","","",null,null],[17,"MAX_COMPUTE_UNIFORM_COMPONENTS","","",null,null],[17,"INT_IMAGE_2D_ARRAY","","",null,null],[17,"MAX_SAMPLES","","",null,null],[17,"COLOR_ATTACHMENT9","","",null,null],[17,"COLOR_ATTACHMENT17","","",null,null],[17,"READ_FRAMEBUFFER","","",null,null],[17,"DEPTH32F_STENCIL8","","",null,null],[17,"TIMESTAMP","","",null,null],[17,"ELEMENT_ARRAY_BUFFER","","",null,null],[17,"READ_WRITE","","",null,null],[17,"CONTEXT_CORE_PROFILE_BIT","","",null,null],[17,"TEXTURE_2D_ARRAY","","",null,null],[17,"PACK_COMPRESSED_BLOCK_WIDTH","","",null,null],[17,"FRACTIONAL_ODD","","",null,null],[17,"BUFFER","","",null,null],[17,"TEXTURE5","","",null,null],[17,"NOOP","","",null,null],[17,"DRAW_BUFFER11","","",null,null],[17,"POINT_SIZE","","",null,null],[17,"STATIC_READ","","",null,null],[17,"TEXTURE19","","",null,null],[17,"TEXTURE_GATHER","","",null,null],[17,"FLOAT_VEC4","","",null,null],[17,"TEXTURE8","","",null,null],[17,"STENCIL_RENDERABLE","","",null,null],[17,"ONE_MINUS_DST_ALPHA","","",null,null],[17,"COLOR_ATTACHMENT29","","",null,null],[17,"LEFT","","",null,null],[17,"ACTIVE_UNIFORM_BLOCKS","","",null,null],[17,"SHADER_STORAGE_BARRIER_BIT","","",null,null],[17,"REFERENCED_BY_TESS_CONTROL_SHADER","","",null,null],[17,"RGB9_E5","","",null,null],[17,"POINTS","","",null,null],[17,"MAX_COMBINED_DIMENSIONS","","",null,null],[17,"DOUBLE_MAT2x3","","",null,null],[17,"MAX_FRAMEBUFFER_LAYERS","","",null,null],[17,"TRANSFORM_FEEDBACK_PAUSED","","",null,null],[17,"POLYGON_SMOOTH_HINT","","",null,null],[17,"SCISSOR_TEST","","",null,null],[17,"PROXY_TEXTURE_2D","","",null,null],[17,"INT_SAMPLER_2D","","",null,null],[17,"GUILTY_CONTEXT_RESET","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","","",null,null],[17,"MAX_VERTEX_UNIFORM_VECTORS","","",null,null],[17,"DEBUG_TYPE_PORTABILITY","","",null,null],[17,"TESS_GEN_MODE","","",null,null],[17,"MAX_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"LINE_LOOP","","",null,null],[17,"INTERNALFORMAT_SHARED_SIZE","","",null,null],[17,"QUERY_RESULT","","",null,null],[17,"R16UI","","",null,null],[17,"QUERY","","",null,null],[17,"REPLACE","","",null,null],[17,"DRAW_BUFFER15","","",null,null],[17,"SHADER_IMAGE_LOAD","","",null,null],[17,"PROGRAM_INPUT","","",null,null],[17,"FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS","","",null,null],[17,"MAX_WIDTH","","",null,null],[17,"FLOAT_MAT4","","",null,null],[17,"TEXTURE_FETCH_BARRIER_BIT","","",null,null],[17,"PACK_SWAP_BYTES","","",null,null],[17,"R8_SNORM","","",null,null],[17,"MAX_GEOMETRY_OUTPUT_COMPONENTS","","",null,null],[17,"RGBA12","","",null,null],[17,"ARRAY_SIZE","","",null,null],[17,"SMOOTH_LINE_WIDTH_RANGE","","",null,null],[17,"MAX_FRAGMENT_INTERPOLATION_OFFSET","","",null,null],[17,"VIEW_CLASS_96_BITS","","",null,null],[17,"TEXTURE_IMMUTABLE_FORMAT","","",null,null],[17,"MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS","","",null,null],[17,"ANY_SAMPLES_PASSED_CONSERVATIVE","","",null,null],[17,"SYNC_CONDITION","","",null,null],[17,"VIEW_CLASS_16_BITS","","",null,null],[17,"STENCIL_PASS_DEPTH_FAIL","","",null,null],[17,"SHORT","","",null,null],[17,"PACK_COMPRESSED_BLOCK_DEPTH","","",null,null],[17,"FLOAT_MAT2x3","","",null,null],[17,"LINE","","",null,null],[17,"TEXTURE_WRAP_S","","",null,null],[17,"MAX_COMBINED_CLIP_AND_CULL_DISTANCES","","",null,null],[17,"PROGRAM_SEPARABLE","","",null,null],[17,"INTERNALFORMAT_BLUE_TYPE","","",null,null],[17,"IS_PER_PATCH","","",null,null],[17,"DOUBLE_MAT4","","",null,null],[17,"RG32UI","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER","","",null,null],[17,"IMAGE_2D_ARRAY","","",null,null],[17,"MAX_TESS_EVALUATION_ATOMIC_COUNTERS","","",null,null],[17,"POLYGON_OFFSET_LINE","","",null,null],[17,"FRONT_RIGHT","","",null,null],[17,"TEXTURE_GREEN_TYPE","","",null,null],[17,"MAX_PROGRAM_TEXTURE_GATHER_OFFSET","","",null,null],[17,"DRAW_BUFFER6","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT","","",null,null],[17,"NOR","","",null,null],[17,"FRONT_LEFT","","",null,null],[17,"FLOAT_VEC2","","",null,null],[17,"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH","","",null,null],[17,"GEOMETRY_SHADER","","",null,null],[17,"UNIFORM_BARRIER_BIT","","",null,null],[17,"BUFFER_DATA_SIZE","","",null,null],[17,"UNIFORM_BLOCK_INDEX","","",null,null],[17,"TEXTURE_CUBE_MAP_SEAMLESS","","",null,null],[17,"UNSIGNED_INT_2_10_10_10_REV","","",null,null],[17,"TRANSFORM_FEEDBACK_BARRIER_BIT","","",null,null],[17,"BUFFER_IMMUTABLE_STORAGE","","",null,null],[17,"SCISSOR_BOX","","",null,null],[17,"DEBUG_TYPE_ERROR","","",null,null],[17,"RENDERBUFFER_RED_SIZE","","",null,null],[17,"OR","","",null,null],[17,"FRONT_FACE","","",null,null],[17,"COMPUTE_TEXTURE","","",null,null],[17,"MAX_LAYERS","","",null,null],[17,"VIEWPORT_SUBPIXEL_BITS","","",null,null],[17,"MAX_ELEMENT_INDEX","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","","",null,null],[17,"IMAGE_TEXEL_SIZE","","",null,null],[17,"REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"FUNC_REVERSE_SUBTRACT","","",null,null],[17,"IMAGE_BUFFER","","",null,null],[17,"INT_IMAGE_2D","","",null,null],[17,"TRUE","","",null,null],[17,"SRGB_WRITE","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Y","","",null,null],[17,"MAX_COMBINED_SHADER_STORAGE_BLOCKS","","",null,null],[17,"RGBA8I","","",null,null],[17,"MAX_DRAW_BUFFERS","","",null,null],[17,"MAX_COLOR_ATTACHMENTS","","",null,null],[17,"MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS","","",null,null],[17,"TRANSFORM_FEEDBACK_ACTIVE","","",null,null],[17,"CLAMP_TO_EDGE","","",null,null],[17,"TESS_CONTROL_TEXTURE","","",null,null],[17,"TEXTURE23","","",null,null],[17,"DRAW_FRAMEBUFFER_BINDING","","",null,null],[17,"COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"TEXTURE11","","",null,null],[17,"MAP_INVALIDATE_RANGE_BIT","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_READ_BUFFER","","",null,null],[17,"TEXTURE_BUFFER_SIZE","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER","","",null,null],[17,"RGBA2","","",null,null],[17,"TRIANGLES_ADJACENCY","","",null,null],[17,"ONE","","",null,null],[17,"UNSIGNED_INT_5_9_9_9_REV","","",null,null],[17,"ONE_MINUS_SRC_ALPHA","","",null,null],[17,"MAX_GEOMETRY_IMAGE_UNIFORMS","","",null,null],[17,"CAVEAT_SUPPORT","","",null,null],[17,"MAP_INVALIDATE_BUFFER_BIT","","",null,null],[17,"INT_SAMPLER_CUBE_MAP_ARRAY","","",null,null],[17,"RG_INTEGER","","",null,null],[17,"MAX_COMPUTE_WORK_GROUP_INVOCATIONS","","",null,null],[17,"SRGB_ALPHA","","",null,null],[17,"VIEW_CLASS_BPTC_FLOAT","","",null,null],[17,"TEXTURE_VIEW","","",null,null],[17,"SAMPLE_ALPHA_TO_ONE","","",null,null],[17,"R11F_G11F_B10F","","",null,null],[17,"INT_SAMPLER_2D_RECT","","",null,null],[17,"TEXTURE_SWIZZLE_R","","",null,null],[17,"FRAMEBUFFER_UNDEFINED","","",null,null],[17,"COLOR_ATTACHMENT24","","",null,null],[17,"ONE_MINUS_DST_COLOR","","",null,null],[17,"TRANSFORM_FEEDBACK_BINDING","","",null,null],[17,"HIGH_INT","","",null,null],[17,"KEEP","","",null,null],[17,"GEOMETRY_OUTPUT_TYPE","","",null,null],[17,"SAMPLE_COVERAGE","","",null,null],[17,"MAX","","",null,null],[17,"VIEW_CLASS_BPTC_UNORM","","",null,null],[17,"COMPUTE_SHADER","","",null,null],[17,"INT_SAMPLER_BUFFER","","",null,null],[17,"TOP_LEVEL_ARRAY_STRIDE","","",null,null],[17,"TEXTURE_SWIZZLE_B","","",null,null],[17,"TEXTURE_DEPTH_TYPE","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYINGS","","",null,null],[17,"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",null,null],[17,"CURRENT_PROGRAM","","",null,null],[17,"BACK_RIGHT","","",null,null],[17,"STENCIL_WRITEMASK","","",null,null],[17,"QUERY_NO_WAIT_INVERTED","","",null,null],[17,"CLEAR_BUFFER","","",null,null],[17,"ONE_MINUS_CONSTANT_ALPHA","","",null,null],[17,"AND_REVERSE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_ENABLED","","",null,null],[17,"TEXTURE_SHADOW","","",null,null],[17,"MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"RGB","","",null,null],[17,"UNSIGNED_INT_VEC3","","",null,null],[17,"QUADS","","",null,null],[17,"BLEND_EQUATION_RGB","","",null,null],[17,"MAX_DEBUG_GROUP_STACK_DEPTH","","",null,null],[17,"INTERNALFORMAT_RED_TYPE","","",null,null],[17,"FRAMEBUFFER","","",null,null],[17,"TIME_ELAPSED","","",null,null],[17,"FLOAT_MAT2","","",null,null],[17,"DONT_CARE","","",null,null],[17,"TESS_EVALUATION_SHADER","","",null,null],[17,"VERTEX_TEXTURE","","",null,null],[17,"CULL_FACE_MODE","","",null,null],[17,"INT_SAMPLER_3D","","",null,null],[17,"FRONT","","",null,null],[17,"IMAGE_CLASS_4_X_32","","",null,null],[17,"DOUBLE_MAT3","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER","","",null,null],[17,"INVERT","","",null,null],[17,"R16F","","",null,null],[17,"CULL_FACE","","",null,null],[17,"STENCIL_VALUE_MASK","","",null,null],[17,"MAX_COMBINED_ATOMIC_COUNTER_BUFFERS","","",null,null],[17,"TEXTURE_WRAP_T","","",null,null],[17,"INTERNALFORMAT_DEPTH_TYPE","","",null,null],[17,"TEXTURE24","","",null,null],[17,"UNPACK_SKIP_ROWS","","",null,null],[17,"UNSIGNED_INT_IMAGE_CUBE","","",null,null],[17,"MAX_ATOMIC_COUNTER_BUFFER_SIZE","","",null,null],[17,"SHADING_LANGUAGE_VERSION","","",null,null],[17,"TEXTURE_2D_MULTISAMPLE","","",null,null],[17,"TEXTURE_BINDING_1D","","",null,null],[17,"MAX_TESS_GEN_LEVEL","","",null,null],[17,"MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS","","",null,null],[17,"SHADER_STORAGE_BUFFER_SIZE","","",null,null],[17,"PIXEL_UNPACK_BUFFER_BINDING","","",null,null],[17,"TEXTURE_IMAGE_TYPE","","",null,null],[17,"DEBUG_SEVERITY_HIGH","","",null,null],[17,"UNSIGNED_INT_IMAGE_2D_RECT","","",null,null],[17,"RGBA8UI","","",null,null],[17,"DOUBLE_MAT4x2","","",null,null],[17,"UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY","","",null,null],[17,"INT_SAMPLER_1D_ARRAY","","",null,null],[17,"PACK_SKIP_IMAGES","","",null,null],[17,"BOOL","","",null,null],[17,"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","","",null,null],[17,"VIEW_CLASS_64_BITS","","",null,null],[17,"MATRIX_STRIDE","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_INDEX","","",null,null],[17,"TEXTURE_ALPHA_SIZE","","",null,null],[17,"DEBUG_SEVERITY_NOTIFICATION","","",null,null],[17,"DEBUG_SOURCE_THIRD_PARTY","","",null,null],[17,"READ_BUFFER","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","","",null,null],[17,"GEOMETRY_SUBROUTINE","","",null,null],[17,"FLOAT_MAT4x2","","",null,null],[17,"DEBUG_SEVERITY_LOW","","",null,null],[17,"LINEAR","","",null,null],[17,"TEXTURE_COMPRESSED_BLOCK_SIZE","","",null,null],[17,"NONE","","",null,null],[17,"UPPER_LEFT","","",null,null],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","","",null,null],[17,"COPY_READ_BUFFER","","",null,null],[17,"TEXTURE12","","",null,null],[17,"IMAGE_PIXEL_TYPE","","",null,null],[17,"LOGIC_OP_MODE","","",null,null],[17,"TEXTURE_VIEW_MIN_LAYER","","",null,null],[17,"UNPACK_COMPRESSED_BLOCK_DEPTH","","",null,null],[17,"MAX_DEBUG_LOGGED_MESSAGES","","",null,null],[17,"SAMPLER_1D_SHADOW","","",null,null],[17,"SAMPLES_PASSED","","",null,null],[17,"RGB16_SNORM","","",null,null],[17,"MIN_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"DEBUG_CALLBACK_FUNCTION","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"fnptr"}],"output":{"name":"fnptr"}}],[11,"is_loaded","","Returns `true` if the function has been successfully loaded.",1,{"inputs":[{"name":"fnptr"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"gl"}],"output":{"name":"gl"}}],[11,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the\nuse of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.",0,{"inputs":[{"name":"f"}],"output":{"name":"gl"}}],[11,"GetString","","",0,null],[11,"GetProgramBinary","","",0,null],[11,"ProgramUniformMatrix2fv","","",0,null],[11,"GetSamplerParameterIiv","","",0,null],[11,"GetTexParameteriv","","",0,null],[11,"GetActiveUniformBlockName","","",0,null],[11,"UniformMatrix4x3fv","","",0,null],[11,"FlushMappedBufferRange","","",0,null],[11,"VertexP2uiv","","",0,null],[11,"ShaderBinary","","",0,null],[11,"DrawTransformFeedbackStream","","",0,null],[11,"SamplerParameterIiv","","",0,null],[11,"VertexAttribI3uiv","","",0,null],[11,"NamedFramebufferReadBuffer","","",0,null],[11,"BindTransformFeedback","","",0,null],[11,"ColorMask","","",0,null],[11,"ProgramUniformMatrix2x3dv","","",0,null],[11,"GetNamedBufferParameteriv","","",0,null],[11,"GetBufferParameteriv","","",0,null],[11,"GetUniformiv","","",0,null],[11,"DeleteFramebuffers","","",0,null],[11,"ProgramUniform1iv","","",0,null],[11,"VertexAttribI1uiv","","",0,null],[11,"StencilOp","","",0,null],[11,"VertexAttrib1f","","",0,null],[11,"TexImage2D","","",0,null],[11,"GetProgramResourceLocationIndex","","",0,null],[11,"TextureSubImage3D","","",0,null],[11,"CompressedTexSubImage2D","","",0,null],[11,"PrimitiveRestartIndex","","",0,null],[11,"VertexAttrib4s","","",0,null],[11,"TextureParameterf","","",0,null],[11,"VertexAttribI3i","","",0,null],[11,"GetTransformFeedbackiv","","",0,null],[11,"UniformMatrix4x2fv","","",0,null],[11,"DispatchComputeIndirect","","",0,null],[11,"GetVertexAttribfv","","",0,null],[11,"TextureStorage3DMultisample","","",0,null],[11,"ColorMaski","","",0,null],[11,"ProgramUniformMatrix3dv","","",0,null],[11,"ProgramUniformMatrix3fv","","",0,null],[11,"NamedBufferData","","",0,null],[11,"GetTextureLevelParameterfv","","",0,null],[11,"Flush","","",0,null],[11,"GetVertexArrayIndexed64iv","","",0,null],[11,"DrawArrays","","",0,null],[11,"TexBuffer","","",0,null],[11,"Uniform2fv","","",0,null],[11,"Uniform3d","","",0,null],[11,"DrawArraysInstanced","","",0,null],[11,"CopyTexSubImage2D","","",0,null],[11,"Uniform2i","","",0,null],[11,"CopyTexSubImage3D","","",0,null],[11,"Uniform3iv","","",0,null],[11,"BindBufferRange","","",0,null],[11,"UniformMatrix3x4dv","","",0,null],[11,"GetActiveAttrib","","",0,null],[11,"VertexAttribI4sv","","",0,null],[11,"VertexAttrib4Nsv","","",0,null],[11,"MapNamedBuffer","","",0,null],[11,"MultiDrawElementsIndirect","","",0,null],[11,"TexCoordP4ui","","",0,null],[11,"TexParameteri","","",0,null],[11,"GetSubroutineUniformLocation","","",0,null],[11,"BindTextures","","",0,null],[11,"StencilOpSeparate","","",0,null],[11,"TextureParameterfv","","",0,null],[11,"VertexAttribI3iv","","",0,null],[11,"VertexAttribL1dv","","",0,null],[11,"VertexArrayAttribFormat","","",0,null],[11,"GetVertexAttribdv","","",0,null],[11,"VertexAttrib3f","","",0,null],[11,"MultiTexCoordP2uiv","","",0,null],[11,"TextureStorage2D","","",0,null],[11,"GetTextureParameterfv","","",0,null],[11,"TransformFeedbackVaryings","","",0,null],[11,"DebugMessageInsert","","",0,null],[11,"IsEnabledi","","",0,{"inputs":[{"name":"gl"},{"name":"glenum"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"BlendColor","","",0,null],[11,"GenRenderbuffers","","",0,null],[11,"ClipControl","","",0,null],[11,"BlendFunciARB","","",0,null],[11,"GetNamedFramebufferAttachmentParameteriv","","",0,null],[11,"GetSynciv","","",0,null],[11,"TextureView","","",0,null],[11,"VertexAttribP3uiv","","",0,null],[11,"DeleteProgramPipelines","","",0,null],[11,"DeleteVertexArrays","","",0,null],[11,"GetProgramPipelineInfoLog","","",0,null],[11,"Uniform4uiv","","",0,null],[11,"Uniform4i","","",0,null],[11,"CompressedTextureSubImage3D","","",0,null],[11,"BlendFuncSeparateiARB","","",0,null],[11,"ProgramUniform1fv","","",0,null],[11,"ProgramUniform3f","","",0,null],[11,"GetnPixelMapusv","","",0,null],[11,"UniformBlockBinding","","",0,null],[11,"AttachShader","","",0,null],[11,"GenVertexArrays","","",0,null],[11,"Uniform4fv","","",0,null],[11,"DeleteBuffers","","",0,null],[11,"CopyBufferSubData","","",0,null],[11,"ProgramBinary","","",0,null],[11,"SampleMaski","","",0,null],[11,"EndTransformFeedback","","",0,null],[11,"DrawBuffer","","",0,null],[11,"ProgramUniformMatrix2x4dv","","",0,null],[11,"GetnConvolutionFilter","","",0,null],[11,"ProgramUniform1f","","",0,null],[11,"DrawBuffers","","",0,null],[11,"ClearNamedFramebufferfi","","",0,null],[11,"TexBufferRange","","",0,null],[11,"MultiTexCoordP3ui","","",0,null],[11,"IsProgram","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"BindVertexBuffers","","",0,null],[11,"GetTexLevelParameteriv","","",0,null],[11,"TexParameterfv","","",0,null],[11,"TexParameterIuiv","","",0,null],[11,"UniformMatrix2x4fv","","",0,null],[11,"EndConditionalRender","","",0,null],[11,"VertexAttrib1dv","","",0,null],[11,"PolygonOffset","","",0,null],[11,"VertexAttribI4bv","","",0,null],[11,"TexSubImage3D","","",0,null],[11,"ProgramUniform4f","","",0,null],[11,"VertexAttrib1s","","",0,null],[11,"DeleteTextures","","",0,null],[11,"DrawTransformFeedbackStreamInstanced","","",0,null],[11,"GetTextureParameterIiv","","",0,null],[11,"VertexAttribP1uiv","","",0,null],[11,"GetMultisamplefv","","",0,null],[11,"VertexAttrib2dv","","",0,null],[11,"DeleteShader","","",0,null],[11,"FramebufferRenderbuffer","","",0,null],[11,"Uniform4ui","","",0,null],[11,"InvalidateFramebuffer","","",0,null],[11,"ClearBufferuiv","","",0,null],[11,"BeginTransformFeedback","","",0,null],[11,"ProgramUniform3dv","","",0,null],[11,"GetQueryiv","","",0,null],[11,"FramebufferTexture1D","","",0,null],[11,"VertexAttrib2fv","","",0,null],[11,"DepthRangeArrayv","","",0,null],[11,"TexImage3DMultisample","","",0,null],[11,"BlendFuncSeparatei","","",0,null],[11,"BindImageTextures","","",0,null],[11,"NamedFramebufferParameteri","","",0,null],[11,"MemoryBarrierByRegion","","",0,null],[11,"GenFramebuffers","","",0,null],[11,"InvalidateNamedFramebufferSubData","","",0,null],[11,"NamedRenderbufferStorage","","",0,null],[11,"DepthRange","","",0,null],[11,"ProgramUniformMatrix3x2dv","","",0,null],[11,"DrawTransformFeedbackInstanced","","",0,null],[11,"Uniform2d","","",0,null],[11,"InvalidateBufferSubData","","",0,null],[11,"UniformMatrix2x4dv","","",0,null],[11,"DrawElementsIndirect","","",0,null],[11,"VertexAttribBinding","","",0,null],[11,"ViewportArrayv","","",0,null],[11,"GenQueries","","",0,null],[11,"NamedRenderbufferStorageMultisample","","",0,null],[11,"UniformMatrix3fv","","",0,null],[11,"GetnPixelMapfv","","",0,null],[11,"PushDebugGroup","","",0,null],[11,"ProgramUniform4uiv","","",0,null],[11,"GetSubroutineIndex","","",0,null],[11,"EndQuery","","",0,null],[11,"PatchParameterfv","","",0,null],[11,"ReleaseShaderCompiler","","",0,null],[11,"GetVertexAttribPointerv","","",0,null],[11,"GetBufferSubData","","",0,null],[11,"FlushMappedNamedBufferRange","","",0,null],[11,"IsQuery","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"VertexAttrib2s","","",0,null],[11,"GetProgramResourceIndex","","",0,null],[11,"IsTexture","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"VertexAttribP4uiv","","",0,null],[11,"ProgramUniform2d","","",0,null],[11,"GetInternalformati64v","","",0,null],[11,"CreateSamplers","","",0,null],[11,"DrawElementsInstancedBaseVertexBaseInstance","","",0,null],[11,"DebugMessageCallback","","",0,null],[11,"ClearBufferfv","","",0,null],[11,"ProgramUniformMatrix2x3fv","","",0,null],[11,"GetActiveUniformsiv","","",0,null],[11,"FrontFace","","",0,null],[11,"MultiDrawArraysIndirect","","",0,null],[11,"InvalidateTexSubImage","","",0,null],[11,"BlendEquationSeparateiARB","","",0,null],[11,"VertexAttribIPointer","","",0,null],[11,"FramebufferTexture2D","","",0,null],[11,"UniformMatrix4dv","","",0,null],[11,"GetActiveUniformBlockiv","","",0,null],[11,"BindFragDataLocationIndexed","","",0,null],[11,"CreateBuffers","","",0,null],[11,"DepthFunc","","",0,null],[11,"BindBuffersBase","","",0,null],[11,"DrawElementsBaseVertex","","",0,null],[11,"UniformMatrix2x3dv","","",0,null],[11,"PointParameteriv","","",0,null],[11,"DeleteRenderbuffers","","",0,null],[11,"DepthMask","","",0,null],[11,"TexCoordP2uiv","","",0,null],[11,"Clear","","",0,null],[11,"TextureParameterIuiv","","",0,null],[11,"VertexAttribI2iv","","",0,null],[11,"ReadPixels","","",0,null],[11,"VertexAttribI4uiv","","",0,null],[11,"TexCoordP1ui","","",0,null],[11,"VertexAttrib4f","","",0,null],[11,"DrawElementsInstancedBaseVertex","","",0,null],[11,"VertexAttribL4d","","",0,null],[11,"CompressedTexSubImage1D","","",0,null],[11,"Finish","","",0,null],[11,"ColorP4ui","","",0,null],[11,"CopyTexSubImage1D","","",0,null],[11,"VertexAttribL2d","","",0,null],[11,"BlendEquationi","","",0,null],[11,"UseProgram","","",0,null],[11,"VertexAttrib4ubv","","",0,null],[11,"VertexAttrib3sv","","",0,null],[11,"VertexAttrib4d","","",0,null],[11,"ClearBufferSubData","","",0,null],[11,"Disablei","","",0,null],[11,"VertexAttribDivisor","","",0,null],[11,"FramebufferTexture3D","","",0,null],[11,"GetnMinmax","","",0,null],[11,"CompressedTexImage2D","","",0,null],[11,"VertexAttrib4Niv","","",0,null],[11,"ColorP4uiv","","",0,null],[11,"SamplerParameteri","","",0,null],[11,"UnmapBuffer","","",0,{"inputs":[{"name":"gl"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"VertexAttribLFormat","","",0,null],[11,"GetProgramResourceName","","",0,null],[11,"VertexAttribL3dv","","",0,null],[11,"VertexArrayAttribIFormat","","",0,null],[11,"MultiTexCoordP2ui","","",0,null],[11,"GetNamedFramebufferParameteriv","","",0,null],[11,"CompressedTextureSubImage2D","","",0,null],[11,"ObjectLabel","","",0,null],[11,"VertexAttrib4Nusv","","",0,null],[11,"GetTexParameterIuiv","","",0,null],[11,"UniformMatrix3x4fv","","",0,null],[11,"ProgramUniformMatrix4fv","","",0,null],[11,"GetRenderbufferParameteriv","","",0,null],[11,"VertexAttrib4bv","","",0,null],[11,"ScissorIndexed","","",0,null],[11,"TextureSubImage1D","","",0,null],[11,"DrawRangeElements","","",0,null],[11,"GetVertexArrayiv","","",0,null],[11,"LineWidth","","",0,null],[11,"CompressedTexImage3D","","",0,null],[11,"VertexAttribI4ubv","","",0,null],[11,"Disable","","",0,null],[11,"DrawElementsInstanced","","",0,null],[11,"Uniform4dv","","",0,null],[11,"MemoryBarrier","","",0,null],[11,"ProgramParameteri","","",0,null],[11,"VertexAttribP2ui","","",0,null],[11,"ClearBufferiv","","",0,null],[11,"TexCoordP3uiv","","",0,null],[11,"GetSamplerParameteriv","","",0,null],[11,"BlendEquationSeparate","","",0,null],[11,"FramebufferTexture","","",0,null],[11,"VertexAttribP2uiv","","",0,null],[11,"Hint","","",0,null],[11,"VertexAttrib2d","","",0,null],[11,"VertexAttribI4usv","","",0,null],[11,"GetnSeparableFilter","","",0,null],[11,"TextureParameterIiv","","",0,null],[11,"GetCompressedTextureSubImage","","",0,null],[11,"GetNamedBufferPointerv","","",0,null],[11,"DrawArraysInstancedBaseInstance","","",0,null],[11,"DebugMessageControl","","",0,null],[11,"VertexAttribI2uiv","","",0,null],[11,"CompressedTextureSubImage1D","","",0,null],[11,"BlendEquation","","",0,null],[11,"Viewport","","",0,null],[11,"EnableVertexAttribArray","","",0,null],[11,"UniformMatrix2dv","","",0,null],[11,"Scissor","","",0,null],[11,"GetActiveUniformName","","",0,null],[11,"UnmapNamedBuffer","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"TextureBufferRange","","",0,null],[11,"VertexAttribL3d","","",0,null],[11,"VertexArrayAttribBinding","","",0,null],[11,"Uniform2uiv","","",0,null],[11,"GetnUniformfv","","",0,null],[11,"ProgramUniform2fv","","",0,null],[11,"PixelStorei","","",0,null],[11,"GetFramebufferAttachmentParameteriv","","",0,null],[11,"MultiTexCoordP4uiv","","",0,null],[11,"GetDoublei_v","","",0,null],[11,"GetQueryObjecti64v","","",0,null],[11,"DeleteProgram","","",0,null],[11,"ActiveShaderProgram","","",0,null],[11,"SecondaryColorP3ui","","",0,null],[11,"VertexAttrib4Nbv","","",0,null],[11,"DispatchCompute","","",0,null],[11,"GetDoublev","","",0,null],[11,"DepthRangeIndexed","","",0,null],[11,"TexImage2DMultisample","","",0,null],[11,"TexParameterf","","",0,null],[11,"Uniform3dv","","",0,null],[11,"ProgramUniform1d","","",0,null],[11,"CheckFramebufferStatus","","",0,{"inputs":[{"name":"gl"},{"name":"glenum"}],"output":{"name":"glenum"}}],[11,"VertexAttrib2sv","","",0,null],[11,"TexCoordP4uiv","","",0,null],[11,"Uniform1d","","",0,null],[11,"VertexAttribP1ui","","",0,null],[11,"UniformMatrix3dv","","",0,null],[11,"BindTexture","","",0,null],[11,"ProgramUniform1ui","","",0,null],[11,"ProgramUniform2dv","","",0,null],[11,"CreateRenderbuffers","","",0,null],[11,"GetNamedBufferParameteri64v","","",0,null],[11,"GetNamedRenderbufferParameteriv","","",0,null],[11,"VertexAttrib3fv","","",0,null],[11,"Uniform2ui","","",0,null],[11,"NormalP3uiv","","",0,null],[11,"VertexAttrib1d","","",0,null],[11,"VertexP2ui","","",0,null],[11,"NamedFramebufferDrawBuffer","","",0,null],[11,"LogicOp","","",0,null],[11,"CreateTransformFeedbacks","","",0,null],[11,"CopyNamedBufferSubData","","",0,null],[11,"GetShaderiv","","",0,null],[11,"MultiTexCoordP1uiv","","",0,null],[11,"BlendFunc","","",0,null],[11,"BlendEquationSeparatei","","",0,null],[11,"UniformMatrix4x2dv","","",0,null],[11,"UniformMatrix4fv","","",0,null],[11,"StencilFunc","","",0,null],[11,"GetUniformuiv","","",0,null],[11,"Uniform3uiv","","",0,null],[11,"ProgramUniformMatrix4x3dv","","",0,null],[11,"GetQueryObjectui64v","","",0,null],[11,"UniformMatrix2x3fv","","",0,null],[11,"GetUniformdv","","",0,null],[11,"Uniform2dv","","",0,null],[11,"ProgramUniformMatrix4dv","","",0,null],[11,"UniformMatrix2fv","","",0,null],[11,"BindBufferBase","","",0,null],[11,"BindBuffer","","",0,null],[11,"VertexAttribI3ui","","",0,null],[11,"VertexAttrib4fv","","",0,null],[11,"InvalidateNamedFramebufferData","","",0,null],[11,"GetFragDataIndex","","",0,null],[11,"MapBufferRange","","",0,null],[11,"DrawRangeElementsBaseVertex","","",0,null],[11,"IsEnabled","","",0,{"inputs":[{"name":"gl"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"Uniform1ui","","",0,null],[11,"ProgramUniform1i","","",0,null],[11,"InvalidateBufferData","","",0,null],[11,"StencilMaskSeparate","","",0,null],[11,"GetVertexArrayIndexediv","","",0,null],[11,"NamedFramebufferDrawBuffers","","",0,null],[11,"IsShader","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"GetTexParameterfv","","",0,null],[11,"GetnUniformdv","","",0,null],[11,"ShaderSource","","",0,null],[11,"TextureBarrier","","",0,null],[11,"IsProgramPipeline","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"BeginQueryIndexed","","",0,null],[11,"GetInteger64i_v","","",0,null],[11,"VertexAttrib4uiv","","",0,null],[11,"InvalidateSubFramebuffer","","",0,null],[11,"CompileShader","","",0,null],[11,"MapNamedBufferRange","","",0,null],[11,"BeginQuery","","",0,null],[11,"TexSubImage2D","","",0,null],[11,"VertexP4ui","","",0,null],[11,"PointParameterfv","","",0,null],[11,"ProgramUniform4iv","","",0,null],[11,"Uniform1uiv","","",0,null],[11,"CopyTextureSubImage1D","","",0,null],[11,"GetnColorTable","","",0,null],[11,"VertexAttribI4i","","",0,null],[11,"IsRenderbuffer","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"Enable","","",0,null],[11,"BufferSubData","","",0,null],[11,"GenBuffers","","",0,null],[11,"ProgramUniform3iv","","",0,null],[11,"GetSamplerParameterfv","","",0,null],[11,"FenceSync","","",0,{"inputs":[{"name":"gl"},{"name":"glenum"},{"name":"glbitfield"}],"output":{"name":"glsync"}}],[11,"ActiveTexture","","",0,null],[11,"ResumeTransformFeedback","","",0,null],[11,"GetUniformIndices","","",0,null],[11,"GetnTexImage","","",0,null],[11,"DeleteSamplers","","",0,null],[11,"BindBuffersRange","","",0,null],[11,"ProgramUniformMatrix3x4dv","","",0,null],[11,"BindProgramPipeline","","",0,null],[11,"GetTextureImage","","",0,null],[11,"Uniform3fv","","",0,null],[11,"VertexArrayBindingDivisor","","",0,null],[11,"SamplerParameterf","","",0,null],[11,"GetShaderInfoLog","","",0,null],[11,"VertexAttrib4iv","","",0,null],[11,"ProgramUniform3i","","",0,null],[11,"CopyTexImage2D","","",0,null],[11,"DrawTransformFeedback","","",0,null],[11,"IsFramebuffer","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"GetnHistogram","","",0,null],[11,"ProgramUniform4d","","",0,null],[11,"MultiTexCoordP3uiv","","",0,null],[11,"Uniform2f","","",0,null],[11,"BindImageTexture","","",0,null],[11,"CopyTexImage1D","","",0,null],[11,"ProgramUniformMatrix3x2fv","","",0,null],[11,"TexImage1D","","",0,null],[11,"VertexP3uiv","","",0,null],[11,"GetProgramInfoLog","","",0,null],[11,"BindTextureUnit","","",0,null],[11,"CreateProgramPipelines","","",0,null],[11,"VertexAttribI1i","","",0,null],[11,"NamedFramebufferTexture","","",0,null],[11,"GetTransformFeedbacki64_v","","",0,null],[11,"ProgramUniform4fv","","",0,null],[11,"PixelStoref","","",0,null],[11,"NamedFramebufferRenderbuffer","","",0,null],[11,"BindAttribLocation","","",0,null],[11,"GetActiveSubroutineUniformName","","",0,null],[11,"BufferStorage","","",0,null],[11,"ClearBufferfi","","",0,null],[11,"VertexAttribL2dv","","",0,null],[11,"GetInteger64v","","",0,null],[11,"GetCompressedTexImage","","",0,null],[11,"BlendFuncSeparate","","",0,null],[11,"TexStorage2D","","",0,null],[11,"NamedFramebufferTextureLayer","","",0,null],[11,"CreateVertexArrays","","",0,null],[11,"GetnCompressedTexImage","","",0,null],[11,"VertexAttrib4usv","","",0,null],[11,"BindFragDataLocation","","",0,null],[11,"BlendEquationiARB","","",0,null],[11,"GetUniformSubroutineuiv","","",0,null],[11,"GetProgramResourceiv","","",0,null],[11,"ProgramUniform3fv","","",0,null],[11,"ProgramUniformMatrix2x4fv","","",0,null],[11,"Uniform1i","","",0,null],[11,"VertexAttribPointer","","",0,null],[11,"NamedBufferSubData","","",0,null],[11,"GetObjectPtrLabel","","",0,null],[11,"VertexAttribFormat","","",0,null],[11,"ClearTexSubImage","","",0,null],[11,"PatchParameteri","","",0,null],[11,"DepthRangef","","",0,null],[11,"GetFramebufferParameteriv","","",0,null],[11,"GetNamedBufferSubData","","",0,null],[11,"MultiTexCoordP1ui","","",0,null],[11,"TexStorage3DMultisample","","",0,null],[11,"CreateShaderProgramv","","",0,null],[11,"GetProgramiv","","",0,null],[11,"TextureStorage1D","","",0,null],[11,"GetQueryObjectuiv","","",0,null],[11,"IsSampler","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"Uniform3ui","","",0,null],[11,"UniformMatrix3x2fv","","",0,null],[11,"ClearStencil","","",0,null],[11,"GetQueryBufferObjecti64v","","",0,null],[11,"VertexAttrib4sv","","",0,null],[11,"QueryCounter","","",0,null],[11,"TexStorage3D","","",0,null],[11,"GetQueryBufferObjectiv","","",0,null],[11,"SamplerParameterfv","","",0,null],[11,"PointParameteri","","",0,null],[11,"ProgramUniform2uiv","","",0,null],[11,"ProgramUniformMatrix4x3fv","","",0,null],[11,"GetTexLevelParameterfv","","",0,null],[11,"ViewportIndexedf","","",0,null],[11,"GetShaderSource","","",0,null],[11,"SampleCoverage","","",0,null],[11,"ProgramUniform3d","","",0,null],[11,"ClearBufferData","","",0,null],[11,"GetnPolygonStipple","","",0,null],[11,"FramebufferParameteri","","",0,null],[11,"GetProgramInterfaceiv","","",0,null],[11,"GetActiveSubroutineName","","",0,null],[11,"PauseTransformFeedback","","",0,null],[11,"GetUniformLocation","","",0,null],[11,"TextureStorage3D","","",0,null],[11,"ClearNamedFramebufferfv","","",0,null],[11,"CreateQueries","","",0,null],[11,"VertexArrayAttribLFormat","","",0,null],[11,"ProgramUniform2f","","",0,null],[11,"VertexAttribLPointer","","",0,null],[11,"GetCompressedTextureImage","","",0,null],[11,"GenProgramPipelines","","",0,null],[11,"GetQueryBufferObjectuiv","","",0,null],[11,"CompressedTexImage1D","","",0,null],[11,"StencilFuncSeparate","","",0,null],[11,"ClientWaitSync","","",0,{"inputs":[{"name":"gl"},{"name":"glsync"},{"name":"glbitfield"},{"name":"gluint64"}],"output":{"name":"glenum"}}],[11,"GetBooleani_v","","",0,null],[11,"ClearNamedBufferSubData","","",0,null],[11,"TransformFeedbackBufferBase","","",0,null],[11,"DeleteQueries","","",0,null],[11,"GetFloatv","","",0,null],[11,"GetAttachedShaders","","",0,null],[11,"ValidateProgram","","",0,null],[11,"TexCoordP3ui","","",0,null],[11,"BlendFunci","","",0,null],[11,"GetTexParameterIiv","","",0,null],[11,"VertexAttrib1sv","","",0,null],[11,"VertexAttrib4Nuiv","","",0,null],[11,"LinkProgram","","",0,null],[11,"GetQueryObjectiv","","",0,null],[11,"TexStorage1D","","",0,null],[11,"VertexAttrib3dv","","",0,null],[11,"UniformSubroutinesuiv","","",0,null],[11,"GetVertexAttribIuiv","","",0,null],[11,"Uniform1fv","","",0,null],[11,"ScissorIndexedv","","",0,null],[11,"ClearNamedFramebufferuiv","","",0,null],[11,"CompressedTexSubImage3D","","",0,null],[11,"ProgramUniform4dv","","",0,null],[11,"TexSubImage1D","","",0,null],[11,"GetnUniformiv","","",0,null],[11,"GetTexImage","","",0,null],[11,"MultiTexCoordP4ui","","",0,null],[11,"VertexAttribI2ui","","",0,null],[11,"TextureParameteriv","","",0,null],[11,"BlitFramebuffer","","",0,null],[11,"GetTextureParameterIuiv","","",0,null],[11,"GetSamplerParameterIuiv","","",0,null],[11,"VertexArrayVertexBuffer","","",0,null],[11,"GetProgramPipelineiv","","",0,null],[11,"GetProgramStageiv","","",0,null],[11,"VertexP4uiv","","",0,null],[11,"GetTextureParameteriv","","",0,null],[11,"TexImage3D","","",0,null],[11,"GetVertexAttribLdv","","",0,null],[11,"VertexAttribIFormat","","",0,null],[11,"GetObjectLabel","","",0,null],[11,"IsVertexArray","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"TexStorage2DMultisample","","",0,null],[11,"FramebufferTextureLayer","","",0,null],[11,"Enablei","","",0,null],[11,"GetQueryIndexediv","","",0,null],[11,"IsBuffer","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"GetTransformFeedbackVarying","","",0,null],[11,"GetFloati_v","","",0,null],[11,"ClearTexImage","","",0,null],[11,"BlitNamedFramebuffer","","",0,null],[11,"ProgramUniform3uiv","","",0,null],[11,"GetActiveAtomicCounterBufferiv","","",0,null],[11,"GetnMapfv","","",0,null],[11,"DrawElementsInstancedBaseInstance","","",0,null],[11,"ShaderStorageBlockBinding","","",0,null],[11,"ClearDepth","","",0,null],[11,"WaitSync","","",0,null],[11,"ColorP3uiv","","",0,null],[11,"GetDebugMessageLog","","",0,null],[11,"Uniform1f","","",0,null],[11,"ValidateProgramPipeline","","",0,null],[11,"GetVertexAttribIiv","","",0,null],[11,"VertexArrayElementBuffer","","",0,null],[11,"GetGraphicsResetStatus","","",0,{"inputs":[{"name":"gl"}],"output":{"name":"glenum"}}],[11,"GetBooleanv","","",0,null],[11,"GenTextures","","",0,null],[11,"GetnMapiv","","",0,null],[11,"CopyTextureSubImage3D","","",0,null],[11,"VertexAttrib2f","","",0,null],[11,"VertexAttribP4ui","","",0,null],[11,"VertexAttrib3s","","",0,null],[11,"Uniform1iv","","",0,null],[11,"ReadnPixels","","",0,null],[11,"GetShaderPrecisionFormat","","",0,null],[11,"BindVertexArray","","",0,null],[11,"MapBuffer","","",0,null],[11,"VertexP3ui","","",0,null],[11,"DrawElements","","",0,null],[11,"CheckNamedFramebufferStatus","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glenum"}}],[11,"VertexAttribI1iv","","",0,null],[11,"SecondaryColorP3uiv","","",0,null],[11,"CreateFramebuffers","","",0,null],[11,"ProgramUniform2iv","","",0,null],[11,"ProgramUniform2ui","","",0,null],[11,"GetBufferParameteri64v","","",0,null],[11,"ProgramUniformMatrix4x2fv","","",0,null],[11,"SamplerParameteriv","","",0,null],[11,"BindFramebuffer","","",0,null],[11,"GetFragDataLocation","","",0,null],[11,"TexParameterIiv","","",0,null],[11,"Uniform2iv","","",0,null],[11,"Uniform1dv","","",0,null],[11,"ScissorArrayv","","",0,null],[11,"ProgramUniform1uiv","","",0,null],[11,"GetActiveUniform","","",0,null],[11,"VertexAttribL1d","","",0,null],[11,"GetTextureLevelParameteriv","","",0,null],[11,"GetnPixelMapuiv","","",0,null],[11,"ProvokingVertex","","",0,null],[11,"ProgramUniformMatrix3x4fv","","",0,null],[11,"BufferData","","",0,null],[11,"GetTextureSubImage","","",0,null],[11,"UniformMatrix4x3dv","","",0,null],[11,"Uniform4iv","","",0,null],[11,"VertexAttribI4iv","","",0,null],[11,"GetnUniformuiv","","",0,null],[11,"CreateProgram","","",0,{"inputs":[{"name":"gl"}],"output":{"name":"gluint"}}],[11,"NormalP3ui","","",0,null],[11,"ProgramUniformMatrix2dv","","",0,null],[11,"GetQueryBufferObjectui64v","","",0,null],[11,"CopyImageSubData","","",0,null],[11,"VertexAttribI4ui","","",0,null],[11,"Uniform3f","","",0,null],[11,"ProgramUniformMatrix4x2dv","","",0,null],[11,"VertexAttrib4Nub","","",0,null],[11,"TransformFeedbackBufferRange","","",0,null],[11,"InvalidateTexImage","","",0,null],[11,"ColorP3ui","","",0,null],[11,"GetInternalformativ","","",0,null],[11,"GenerateMipmap","","",0,null],[11,"GetnMapdv","","",0,null],[11,"PolygonMode","","",0,null],[11,"UniformMatrix3x2dv","","",0,null],[11,"TexCoordP1uiv","","",0,null],[11,"VertexAttrib4Nubv","","",0,null],[11,"ProgramUniform3ui","","",0,null],[11,"ClearNamedBufferData","","",0,null],[11,"GetPointerv","","",0,null],[11,"GetUniformBlockIndex","","",0,null],[11,"ProgramUniform2i","","",0,null],[11,"TextureStorage2DMultisample","","",0,null],[11,"EndQueryIndexed","","",0,null],[11,"Uniform4f","","",0,null],[11,"MultiDrawArrays","","",0,null],[11,"IsTransformFeedback","","",0,{"inputs":[{"name":"gl"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"DrawArraysIndirect","","",0,null],[11,"TexCoordP2ui","","",0,null],[11,"BeginConditionalRender","","",0,null],[11,"VertexAttrib4dv","","",0,null],[11,"Uniform3i","","",0,null],[11,"GetTransformFeedbacki_v","","",0,null],[11,"MultiDrawElementsBaseVertex","","",0,null],[11,"DeleteTransformFeedbacks","","",0,null],[11,"CullFace","","",0,null],[11,"CopyTextureSubImage2D","","",0,null],[11,"GetIntegeri_v","","",0,null],[11,"GenSamplers","","",0,null],[11,"PointParameterf","","",0,null],[11,"ClearDepthf","","",0,null],[11,"SamplerParameterIuiv","","",0,null],[11,"MinSampleShading","","",0,null],[11,"IsSync","","",0,{"inputs":[{"name":"gl"},{"name":"glsync"}],"output":{"name":"glboolean"}}],[11,"VertexAttribP3ui","","",0,null],[11,"UseProgramStages","","",0,null],[11,"TextureParameteri","","",0,null],[11,"ObjectPtrLabel","","",0,null],[11,"VertexAttribL4dv","","",0,null],[11,"PointSize","","",0,null],[11,"BindSampler","","",0,null],[11,"VertexArrayVertexBuffers","","",0,null],[11,"BindRenderbuffer","","",0,null],[11,"EnableVertexArrayAttrib","","",0,null],[11,"ReadBuffer","","",0,null],[11,"ClampColor","","",0,null],[11,"DisableVertexArrayAttrib","","",0,null],[11,"GenTransformFeedbacks","","",0,null],[11,"ProgramUniform4i","","",0,null],[11,"CreateTextures","","",0,null],[11,"DetachShader","","",0,null],[11,"GetUniformfv","","",0,null],[11,"GetActiveSubroutineUniformiv","","",0,null],[11,"GetBufferPointerv","","",0,null],[11,"StencilMask","","",0,null],[11,"TextureBuffer","","",0,null],[11,"RenderbufferStorageMultisample","","",0,null],[11,"GetIntegerv","","",0,null],[11,"BindVertexBuffer","","",0,null],[11,"GetStringi","","",0,null],[11,"GetVertexAttribiv","","",0,null],[11,"CreateShader","","",0,{"inputs":[{"name":"gl"},{"name":"glenum"}],"output":{"name":"gluint"}}],[11,"ClearNamedFramebufferiv","","",0,null],[11,"RenderbufferStorage","","",0,null],[11,"VertexBindingDivisor","","",0,null],[11,"Uniform4d","","",0,null],[11,"DeleteSync","","",0,null],[11,"TextureSubImage2D","","",0,null],[11,"GetAttribLocation","","",0,null],[11,"MultiDrawElements","","",0,null],[11,"VertexAttrib3d","","",0,null],[11,"GetProgramResourceLocation","","",0,null],[11,"VertexAttrib1fv","","",0,null],[11,"ViewportIndexedfv","","",0,null],[11,"ProgramUniform1dv","","",0,null],[11,"TexParameteriv","","",0,null],[11,"GenerateTextureMipmap","","",0,null],[11,"GetError","","",0,{"inputs":[{"name":"gl"}],"output":{"name":"glenum"}}],[11,"DisableVertexAttribArray","","",0,null],[11,"VertexAttribI1ui","","",0,null],[11,"VertexAttribI2i","","",0,null],[11,"ProgramUniform4ui","","",0,null],[11,"BindSamplers","","",0,null],[11,"ClearColor","","",0,null],[11,"NamedBufferStorage","","",0,null],[11,"PopDebugGroup","","",0,null]],"paths":[[3,"Gl"],[3,"FnPtr"]]};
searchIndex["lzw"] = {"doc":"# LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or\nonly the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"decoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder.",1,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"decoderearlychange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder.",2,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,{"inputs":[{"name":"encoder"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"lsbreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",4,{"inputs":[],"output":{"name":"lsbreader"}}],[11,"fmt","","",5,{"inputs":[{"name":"msbreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",5,{"inputs":[],"output":{"name":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"inputs":[{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"lsbwriter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",7,{"inputs":[{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"msbwriter"}],"output":{"name":"result"}}],[11,"write_bits","","",6,{"inputs":[{"name":"lsbwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",7,{"inputs":[{"name":"msbwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,{"inputs":[{"name":"bitwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["miniz_sys"] = {"doc":"","items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex["draw_state"] = {"doc":"Graphics state blocks for gfx-rs","items":[[0,"preset","draw_state","State presets",null,null],[0,"blend","draw_state::preset","Blending preset modes.",null,null],[17,"ADD","draw_state::preset::blend","When combining two fragments, add their values together, saturating at 1.0",null,null],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",null,null],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the\nvalue of the destination multiplied by the inverse of the source alpha channel. Has the\nusual transparency effect: mixes the two colors using a fraction of each one specified by\nthe alpha of the source.",null,null],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color\nusing the source color as weight. Has an invert effect with the constant color\nas base and source color controlling displacement from the base color.\nA white source color and a white value results in plain invert.\nThe output alpha is same as destination alpha.",null,null],[0,"depth","draw_state::preset","Depth preset modes.",null,null],[17,"LESS_EQUAL_TEST","draw_state::preset::depth","&quot;&lt;=&quot; comparison with read-only depth",null,null],[17,"LESS_EQUAL_WRITE","","&quot;&lt;=&quot; comparison with writable depth",null,null],[0,"state","draw_state","Fixed-function hardware state.",null,null],[3,"Offset","draw_state::state","How to offset vertices in screen space, if at all.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",1,null],[12,"method","","How to rasterize this primitive.",1,null],[12,"offset","","Any polygon offset to apply.",1,null],[12,"samples","","Multi-sampling mode.",1,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",2,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",2,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",2,null],[12,"op_fail","","What operation to do if the stencil test fails.",2,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",2,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",2,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",3,null],[12,"back","","",3,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",4,null],[12,"write","","Specify whether to write to the depth buffer or not.",4,null],[3,"BlendChannel","","",null,null],[12,"equation","","",5,null],[12,"source","","",5,null],[12,"destination","","",5,null],[3,"Blend","","",null,null],[12,"color","","",6,null],[12,"alpha","","",6,null],[3,"ColorMask","","",null,null],[3,"Color","","The state of an active color render target",null,null],[12,"mask","","Color mask to use.",7,null],[12,"blend","","Optional blending.",7,null],[3,"RefValues","","The complete set of the rasterizer reference values.\nSwitching these doesn&#39;t roll the hardware context.",null,null],[12,"stencil","","Stencil front and back values.",8,null],[12,"blend","","Constant blend color.",8,null],[4,"FrontFace","","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",9,null],[13,"CounterClockwise","","Counter-clockwise winding order.",9,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",10,null],[13,"Front","","",10,null],[13,"Back","","",10,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",11,null],[13,"Line","","Rasterize as a line with the given width.",11,null],[13,"Fill","","Rasterize as a face with a given cull face mode.",11,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",12,null],[13,"Less","","`x &lt; y`",12,null],[13,"LessEqual","","`x &lt;= y`",12,null],[13,"Equal","","`x == y`",12,null],[13,"GreaterEqual","","`x &gt;= y`",12,null],[13,"Greater","","`x &gt; y`",12,null],[13,"NotEqual","","`x != y`",12,null],[13,"Always","","`true`",12,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",13,null],[13,"Zero","","Set the value in the stencil buffer to zero.",13,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",13,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",13,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",13,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",13,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",13,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",13,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",14,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",14,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",14,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",14,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",14,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",15,null],[13,"SourceAlpha","","",15,null],[13,"DestColor","","",15,null],[13,"DestAlpha","","",15,null],[13,"ConstColor","","",15,null],[13,"ConstAlpha","","",15,null],[4,"Factor","","",null,null],[13,"Zero","","",16,null],[13,"One","","",16,null],[13,"SourceAlphaSaturated","","",16,null],[13,"ZeroPlus","","",16,null],[13,"OneMinus","","",16,null],[6,"LineWidth","","Width of a line.\nCould be f32 if not for Hash deriving issues.",null,null],[6,"OffsetSlope","","Slope depth offset factor\nCould be f32 if not for Hash deriving issues.",null,null],[6,"OffsetUnits","","Number of units to offset, where\nthe unit is the minimal difference in the depth value\ndictated by the precision of the depth buffer.",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[11,"fmt","","",9,{"inputs":[{"name":"frontface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"frontface"}],"output":{"name":"frontface"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"eq","","",9,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"offset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"offset"}],"output":{"name":"offset"}}],[11,"cmp","","",10,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"option"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"cullface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"cullface"}],"output":{"name":"cullface"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"rastermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"rastermethod"}],"output":{"name":"rastermethod"}}],[11,"get_cull_face","","Get the cull face, if any, for this primitive state.",11,{"inputs":[{"name":"rastermethod"}],"output":{"name":"cullface"}}],[11,"cmp","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"multisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"multisample"}],"output":{"name":"multisample"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"rasterizer"},{"name":"rasterizer"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"rasterizer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"rasterizer"}],"output":{"name":"rasterizer"}}],[11,"new_fill","","Create a new filling rasterizer.",1,{"inputs":[{"name":"cullface"}],"output":{"name":"rasterizer"}}],[11,"with_offset","","Add polygon offset.",1,{"inputs":[{"name":"rasterizer"},{"name":"f32"},{"name":"offsetunits"}],"output":{"name":"rasterizer"}}],[11,"cmp","","",12,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"comparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"comparison"}],"output":{"name":"comparison"}}],[11,"cmp","","",13,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"stencilop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"stencilop"}],"output":{"name":"stencilop"}}],[11,"cmp","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"stencilside"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"stencilside"}}],[11,"cmp","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"stencil"}}],[11,"new","","Create a new stencil state with a given function.",3,null],[11,"cmp","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"depth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"depth"}}],[11,"cmp","","",14,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"option"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"equation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"equation"}],"output":{"name":"equation"}}],[11,"cmp","","",15,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"blendvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"blendvalue"}],"output":{"name":"blendvalue"}}],[11,"cmp","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"factor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"factor"}],"output":{"name":"factor"}}],[11,"fmt","","",5,{"inputs":[{"name":"blendchannel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"blendchannel"}}],[11,"eq","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"blend"}}],[11,"new","","Create a new blend state with a given equation.",6,{"inputs":[{"name":"equation"},{"name":"factor"},{"name":"factor"}],"output":{"name":"blend"}}],[11,"fmt","","",6,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"cmp","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"eq","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"colormask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",18,{"inputs":[{"name":"u8"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"not","","Returns the complement of this set of flags.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"colormask"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"color"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"color"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"refvalues"},{"name":"refvalues"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"refvalues"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"refvalues"}],"output":{"name":"refvalues"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"refvalues"}}],[0,"target","draw_state","Render target specification.",null,null],[3,"Rect","draw_state::target","A screen space rectangle",null,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"w","","",19,null],[12,"h","","",19,null],[3,"Mirror","","Mirroring flags, used for blitting",null,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[6,"ColorValue","","A color with floating-point components.",null,null],[17,"MIRROR_X","","",null,null],[17,"MIRROR_Y","","",null,null],[11,"partial_cmp","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"hash","","",20,null],[11,"cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"eq","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"mirror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"sub","","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"not","","Returns the complement of this set of flags.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"mirror"}}]],"paths":[[3,"Offset"],[3,"Rasterizer"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[4,"FrontFace"],[4,"CullFace"],[4,"RasterMethod"],[4,"Comparison"],[4,"StencilOp"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"MultiSample"],[3,"ColorMask"],[3,"Rect"],[3,"Mirror"]]};
searchIndex["wayland_sys"] = {"doc":"FFI bindings to the wayland system libraries.","items":[[0,"common","wayland_sys","Various types and functions that are used by both the client and the server\nlibraries.",null,null],[3,"wl_message","wayland_sys::common","",null,null],[12,"name","","",0,null],[12,"signature","","",0,null],[12,"types","","",0,null],[3,"wl_interface","","",null,null],[12,"name","","",1,null],[12,"version","","",1,null],[12,"request_count","","",1,null],[12,"requests","","",1,null],[12,"event_count","","",1,null],[12,"events","","",1,null],[3,"wl_list","","",null,null],[12,"prev","","",2,null],[12,"next","","",2,null],[3,"wl_array","","",null,null],[12,"size","","",3,null],[12,"alloc","","",3,null],[12,"data","","",3,null],[3,"wl_argument","","",null,null],[5,"wl_fixed_to_double","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"f64"}}],[5,"wl_fixed_from_double","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"wl_fixed_t"}}],[5,"wl_fixed_to_int","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"i32"}}],[5,"wl_fixed_from_int","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"wl_fixed_t"}}],[6,"wl_fixed_t","","",null,null],[6,"wl_dispatcher_func_t","","",null,null],[6,"wl_log_func_t","","",null,null],[0,"client","wayland_sys","Bindings to the client library `libwayland-client.so`",null,null],[3,"WaylandClient","wayland_sys::client","",null,null],[12,"wl_display_connect_to_fd","","",4,null],[12,"wl_display_connect","","",4,null],[12,"wl_display_disconnect","","",4,null],[12,"wl_display_get_fd","","",4,null],[12,"wl_display_roundtrip","","",4,null],[12,"wl_display_read_events","","",4,null],[12,"wl_display_prepare_read","","",4,null],[12,"wl_display_cancel_read","","",4,null],[12,"wl_display_dispatch","","",4,null],[12,"wl_display_dispatch_pending","","",4,null],[12,"wl_display_get_error","","",4,null],[12,"wl_display_get_protocol_error","","",4,null],[12,"wl_display_flush","","",4,null],[12,"wl_event_queue_destroy","","",4,null],[12,"wl_display_create_queue","","",4,null],[12,"wl_display_roundtrip_queue","","",4,null],[12,"wl_display_prepare_read_queue","","",4,null],[12,"wl_display_dispatch_queue","","",4,null],[12,"wl_display_dispatch_queue_pending","","",4,null],[12,"wl_proxy_create","","",4,null],[12,"wl_proxy_destroy","","",4,null],[12,"wl_proxy_add_listener","","",4,null],[12,"wl_proxy_get_listener","","",4,null],[12,"wl_proxy_add_dispatcher","","",4,null],[12,"wl_proxy_marshal_array_constructor","","",4,null],[12,"wl_proxy_marshal_array","","",4,null],[12,"wl_proxy_set_user_data","","",4,null],[12,"wl_proxy_get_user_data","","",4,null],[12,"wl_proxy_get_id","","",4,null],[12,"wl_proxy_get_class","","",4,null],[12,"wl_proxy_set_queue","","",4,null],[12,"wl_log_set_handler_client","","",4,null],[12,"wl_list_init","","",4,null],[12,"wl_list_insert","","",4,null],[12,"wl_list_remove","","",4,null],[12,"wl_list_length","","",4,null],[12,"wl_list_empty","","",4,null],[12,"wl_list_insert_list","","",4,null],[12,"wl_array_init","","",4,null],[12,"wl_array_release","","",4,null],[12,"wl_array_add","","",4,null],[12,"wl_array_copy","","",4,null],[12,"wl_proxy_marshal_constructor","","",4,null],[12,"wl_proxy_marshal","","",4,null],[3,"WAYLAND_CLIENT_OPTION","","",null,null],[3,"WAYLAND_CLIENT_HANDLE","","",null,null],[4,"wl_proxy","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_queue","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",5,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",5,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",5,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",5,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",5,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",5,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",5,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",5,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",5,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",5,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",5,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",5,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",5,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",5,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",5,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",5,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",5,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",5,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",5,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",5,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",5,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",5,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"deref","wayland_sys::client","",6,{"inputs":[{"name":"wayland_client_option"}],"output":{"name":"option"}}],[11,"deref","","",7,{"inputs":[{"name":"wayland_client_handle"}],"output":{"name":"waylandclient"}}],[0,"egl","wayland_sys","Bindings to the EGL library `libwayland-egl.so`",null,null],[3,"WaylandEgl","wayland_sys::egl","",null,null],[12,"wl_egl_window_create","","",8,null],[12,"wl_egl_window_destroy","","",8,null],[12,"wl_egl_window_resize","","",8,null],[12,"wl_egl_window_get_attached_size","","",8,null],[3,"WAYLAND_EGL_OPTION","","",null,null],[3,"WAYLAND_EGL_HANDLE","","",null,null],[4,"wl_egl_window","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",9,{"inputs":[{"name":"wayland_egl_option"}],"output":{"name":"option"}}],[11,"deref","","",10,{"inputs":[{"name":"wayland_egl_handle"}],"output":{"name":"waylandegl"}}],[0,"cursor","wayland_sys","Bindings to the `wayland-cursor.so` library",null,null],[3,"wl_cursor_image","wayland_sys::cursor","",null,null],[12,"width","","actual width",11,null],[12,"height","","actual height",11,null],[12,"hotspot_x","","hot spot x (must be inside image)",11,null],[12,"hotspot_y","","hot spot y (must be inside image)",11,null],[12,"delay","","animation delay to next frame",11,null],[3,"wl_cursor","","",null,null],[12,"image_count","","",12,null],[12,"images","","",12,null],[12,"name","","",12,null],[3,"WaylandCursor","","",null,null],[12,"wl_cursor_theme_load","","",13,null],[12,"wl_cursor_theme_destroy","","",13,null],[12,"wl_cursor_theme_get_cursor","","",13,null],[12,"wl_cursor_image_get_buffer","","",13,null],[12,"wl_cursor_frame","","",13,null],[12,"wl_cursor_frame_and_duration","","",13,null],[3,"WAYLAND_CURSOR_OPTION","","",null,null],[3,"WAYLAND_CURSOR_HANDLE","","",null,null],[4,"wl_cursor_theme","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",14,{"inputs":[{"name":"wayland_cursor_option"}],"output":{"name":"option"}}],[11,"deref","","",15,{"inputs":[{"name":"wayland_cursor_handle"}],"output":{"name":"waylandcursor"}}],[14,"ffi_dispatch!","wayland_sys","",null,null]],"paths":[[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[3,"WaylandClient"],[4,"Option"],[3,"WAYLAND_CLIENT_OPTION"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"WaylandEgl"],[3,"WAYLAND_EGL_OPTION"],[3,"WAYLAND_EGL_HANDLE"],[3,"wl_cursor_image"],[3,"wl_cursor"],[3,"WaylandCursor"],[3,"WAYLAND_CURSOR_OPTION"],[3,"WAYLAND_CURSOR_HANDLE"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"stat64","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",50,null],[12,"uc_link","","",50,null],[12,"uc_stack","","",50,null],[12,"uc_mcontext","","",50,null],[12,"uc_sigmask","","",50,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",51,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",51,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",51,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",51,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",51,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",52,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",52,null],[11,"clone","libc","",48,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",49,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",53,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",54,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",50,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",55,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",37,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",38,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",39,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",40,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",41,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",42,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",43,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",44,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",45,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",27,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",28,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",29,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",30,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",31,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",56,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",57,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",58,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",59,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",32,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",33,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",34,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",35,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",60,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",36,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",61,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",18,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",19,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",62,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",23,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",24,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",25,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",26,{"inputs":[{"name":"lconv"}],"output":{"name":"lconv"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["graphics"] = {"doc":"A library for 2D graphics that works with multiple back-ends.","items":[[8,"ImageSize","graphics","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",0,null],[11,"get_width","","Gets the image width.",0,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[11,"get_height","","Gets the image height.",0,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[11,"abs_transform","viewport","Computes absolute transform for 2D graphics,\nwhich uses a row major 2x3 matrix.\nThe origin is in the upper left corner of the viewport rectangle.\nThe x axis points to the right, and the y axis points down.\nThe units are in points (window coordinates).",1,null],[11,"clone","","",1,{"inputs":[{"name":"viewport"}],"output":{"name":"viewport"}}],[3,"Viewport","graphics","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels.\n```[x, y, width height]``` where ```(x, y)``` is lower left corner.",1,null],[12,"draw_size","","The size of frame buffer in pixels.",1,null],[12,"window_size","","The size of window in points.",1,null],[5,"clear","","Clears the screen.",null,{"inputs":[{"name":"color"},{"name":"g"}],"output":null}],[5,"image","","Draws image.",null,null],[5,"ellipse","","Draws ellipse.",null,{"inputs":[{"name":"color"},{"name":"r"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"circle_arc","","Draws arc",null,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"scalar"},{"name":"scalar"},{"name":"r"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"rectangle","","Draws rectangle.",null,{"inputs":[{"name":"color"},{"name":"r"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"polygon","","Draws polygon.",null,{"inputs":[{"name":"color"},{"name":"polygon"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"line","","Draws line.",null,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"l"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[5,"text","","Draws text.",null,{"inputs":[{"name":"color"},{"name":"fontsize"},{"name":"str"},{"name":"c"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"draw_state","","Graphics draw state.",null,null],[3,"DrawState","graphics::draw_state","Graphics draw state used for blending, clipping and stencil rendering.",null,null],[12,"scissor","","Scissor mask to use. If set, no pixel outside of this\nrectangle (in screen space) will be written to as a result of rendering.",2,null],[12,"stencil","","Stencil test to use. If None, no stencil testing is done.",2,null],[12,"blend","","Blend function to use. If None, blending is disabled.",2,null],[4,"Blend","","The blend setting to use when drawing.",null,null],[13,"Alpha","","Alpha blending (allows semi-transparent pixels).",3,null],[13,"Add","","Additive blending.",3,null],[13,"Multiply","","Multiply color components.",3,null],[13,"Invert","","Invert colors when rendering a white shape.",3,null],[4,"Stencil","","Stencil buffer settings.",null,null],[13,"Clip","","Draw to stencil buffer.",4,null],[13,"Inside","","Draw pixels that have stencil value.",4,null],[13,"Outside","","Draw pixels that does not have stencil value.",4,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"drawstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"new_alpha","","Uses alpha blending.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_clip","","Draws to stencil buffer with value 255.\nThis can be used for clipping.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_inside","","Tests against stencil buffer with value 255.\nDraws inside the shape defined by stencil buffer.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"new_outside","","Tests against stencil buffer with value 255.\nDraws outside the shape defined by stencil buffer.",2,{"inputs":[],"output":{"name":"drawstate"}}],[11,"blend","","Sets blending.",2,{"inputs":[{"name":"drawstate"},{"name":"blend"}],"output":{"name":"drawstate"}}],[11,"scissor","","Sets scissor `[x, y, w, h]`.",2,null],[11,"partial_cmp","","",3,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"option"}}],[11,"eq","","",3,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[0,"character","graphics","A text character",null,null],[3,"Character","graphics::character","Holds rendered character data.",null,null],[12,"offset","","The offset of character.",5,null],[12,"size","","The size of character, including space.",5,null],[12,"texture","","The texture of the character.",5,null],[8,"CharacterCache","","Stores characters in a buffer and loads them by demand.",null,null],[16,"Texture","","The textyre type associated with the character cache.",6,null],[10,"character","","Get reference to character.",6,{"inputs":[{"name":"charactercache"},{"name":"fontsize"},{"name":"char"}],"output":{"name":"character"}}],[11,"width","","Return the width for some given text.",6,{"inputs":[{"name":"charactercache"},{"name":"fontsize"},{"name":"str"}],"output":{"name":"scalar"}}],[11,"clone","","",5,{"inputs":[{"name":"character"}],"output":{"name":"character"}}],[11,"left","","The left offset.",5,{"inputs":[{"name":"character"}],"output":{"name":"scalar"}}],[11,"top","","The top offset.",5,{"inputs":[{"name":"character"}],"output":{"name":"scalar"}}],[11,"width","","Gets width of character, including space to the next one.",5,{"inputs":[{"name":"character"}],"output":{"name":"scalar"}}],[11,"height","","Sets height of character, including space to the next one.",5,{"inputs":[{"name":"character"}],"output":{"name":"scalar"}}],[0,"context","graphics","Transformation context",null,null],[3,"Context","graphics::context","Drawing 2d context.",null,null],[12,"viewport","","Viewport information.",7,null],[12,"view","","View transformation.",7,null],[12,"transform","","Current transformation.",7,null],[12,"draw_state","","Current draw state settings.",7,null],[11,"clone","","",7,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"new","","Creates a new drawing context.",7,{"inputs":[],"output":{"name":"context"}}],[11,"new_viewport","","Creates a new context with absolute transform in point coordinates.",7,{"inputs":[{"name":"viewport"}],"output":{"name":"context"}}],[11,"new_abs","","Creates a new drawing context in absolute coordinates.",7,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"context"}}],[11,"view","","Moves the current transform to the view coordinate system.",7,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"reset","","Moves the current transform to the default coordinate system.",7,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"store_view","","Stores the current transform as new view.",7,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"get_view_size","","Computes the current view size.",7,{"inputs":[{"name":"context"}],"output":{"name":"vec2d"}}],[0,"color","graphics","Helper methods for colors",null,null],[5,"grey","graphics::color","Returns a grey color",null,{"inputs":[{"name":"colorcomponent"}],"output":{"name":"color"}}],[5,"alpha","","Returns a semi-transparent white color",null,{"inputs":[{"name":"colorcomponent"}],"output":{"name":"color"}}],[5,"hex","","Converts from hexadecimal color format",null,{"inputs":[{"name":"str"}],"output":{"name":"color"}}],[5,"gamma_srgb_to_linear","","Converts gamma (brightness) from sRGB to linear color space.",null,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[5,"gamma_linear_to_srgb","","Converts gamma (brightness) of a color from linear color space to sRGB.",null,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[17,"WHITE","","White color.",null,null],[17,"BLACK","","Black color.",null,null],[17,"TRANSPARENT","","Transparent color.",null,null],[0,"polygon","graphics","Draw polygon",null,null],[3,"Polygon","graphics::polygon","A polygon",null,null],[12,"color","","The color of the polygon",8,null],[11,"clone","","",8,{"inputs":[{"name":"polygon"}],"output":{"name":"polygon"}}],[11,"new","","Creates new polygon",8,{"inputs":[{"name":"color"}],"output":{"name":"polygon"}}],[11,"color","","Sets color.",8,{"inputs":[{"name":"polygon"},{"name":"color"}],"output":{"name":"self"}}],[11,"draw","","Draws polygon using the default method.",8,{"inputs":[{"name":"polygon"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws polygon using triangulation.",8,{"inputs":[{"name":"polygon"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tween_lerp","","Draws tweened polygon with linear interpolation, using default method.",8,{"inputs":[{"name":"polygon"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tween_lerp_tri","","Draws tweened polygon with linear interpolation, using triangulation.",8,{"inputs":[{"name":"polygon"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"line","graphics","Draw Line",null,null],[3,"Line","graphics::line","A colored line with a default border radius",null,null],[12,"color","","The line color",9,null],[12,"radius","","The line radius",9,null],[12,"shape","","The line shape",9,null],[4,"Shape","","The shape of the line",null,null],[13,"Square","","Square edges",10,null],[13,"Round","","Round edges",10,null],[13,"Bevel","","Bevel edges",10,null],[11,"clone","","",10,{"inputs":[{"name":"shape"}],"output":{"name":"shape"}}],[11,"clone","","",9,{"inputs":[{"name":"line"}],"output":{"name":"line"}}],[11,"new","","Creates a new line",9,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"line"}}],[11,"new_round","","Creates a new line",9,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"line"}}],[11,"color","","Sets color.",9,{"inputs":[{"name":"line"},{"name":"color"}],"output":{"name":"self"}}],[11,"radius","","Sets radius.",9,{"inputs":[{"name":"line"},{"name":"radius"}],"output":{"name":"self"}}],[11,"width","","Sets width.",9,{"inputs":[{"name":"line"},{"name":"width"}],"output":{"name":"self"}}],[11,"shape","","Sets shape.",9,{"inputs":[{"name":"line"},{"name":"shape"}],"output":{"name":"self"}}],[11,"draw","","Draws line using default method.",9,{"inputs":[{"name":"line"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws line using triangulation.",9,{"inputs":[{"name":"line"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_arrow","","Draws an arrow",9,{"inputs":[{"name":"line"},{"name":"l"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"circle_arc","graphics","Draw an arc",null,null],[3,"CircleArc","graphics::circle_arc","A curved line",null,null],[12,"color","","The arcs color",11,null],[12,"radius","","The radius of the arc (Thickness of the drawing, not the radius of the circle)",11,null],[12,"start","","The start of the arc in radians",11,null],[12,"end","","The end of the arc in radians",11,null],[12,"resolution","","The resolution for the arc.",11,null],[11,"clone","","",11,{"inputs":[{"name":"circlearc"}],"output":{"name":"circlearc"}}],[11,"new","","Creates a new arc",11,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"circlearc"}}],[11,"color","","Sets the arcs color.",11,{"inputs":[{"name":"circlearc"},{"name":"color"}],"output":{"name":"self"}}],[11,"radius","","Sets the radius of the arc (Thickness of the arc, not the radius of the circle it wraps)",11,{"inputs":[{"name":"circlearc"},{"name":"radius"}],"output":{"name":"self"}}],[11,"start","","Sets the start of the arc (in radians).",11,{"inputs":[{"name":"circlearc"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"end","","Sets the end of the arc (in radians).",11,{"inputs":[{"name":"circlearc"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"resolution","","Sets the resolution of the arcs smoothness.",11,{"inputs":[{"name":"circlearc"},{"name":"resolution"}],"output":{"name":"self"}}],[11,"draw","","Draws circle arc using default method.",11,{"inputs":[{"name":"circlearc"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws circle arc using triangulation.",11,{"inputs":[{"name":"circlearc"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"ellipse","graphics","Draw ellipse",null,null],[3,"Border","graphics::ellipse","Ellipse border",null,null],[12,"color","","The border color",12,null],[12,"radius","","The border radius",12,null],[3,"Ellipse","","An ellipse with filled color",null,null],[12,"color","","The ellipse color",13,null],[12,"border","","The ellipse border",13,null],[12,"resolution","","The resolution for the shape, 360 degrees.",13,null],[11,"clone","","",12,{"inputs":[{"name":"border"}],"output":{"name":"border"}}],[11,"clone","","",13,{"inputs":[{"name":"ellipse"}],"output":{"name":"ellipse"}}],[11,"new","","Creates a new ellipse",13,{"inputs":[{"name":"color"}],"output":{"name":"ellipse"}}],[11,"new_border","","Creates a new ellipse border",13,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"ellipse"}}],[11,"color","","Sets ellipse color.",13,{"inputs":[{"name":"ellipse"},{"name":"color"}],"output":{"name":"self"}}],[11,"border","","Sets ellipse border.",13,{"inputs":[{"name":"ellipse"},{"name":"border"}],"output":{"name":"self"}}],[11,"maybe_border","","Sets optional ellipse border.",13,{"inputs":[{"name":"ellipse"},{"name":"option"}],"output":{"name":"self"}}],[11,"resolution","","Sets resolution of the ellipse smoothness.",13,{"inputs":[{"name":"ellipse"},{"name":"resolution"}],"output":{"name":"self"}}],[11,"draw","","Draws ellipse using default method.",13,{"inputs":[{"name":"ellipse"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws ellipse using triangulation.",13,{"inputs":[{"name":"ellipse"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"rectangle","graphics","Draw rectangle",null,null],[3,"Border","graphics::rectangle","The border of the rectangle",null,null],[12,"color","","The color of the border",14,null],[12,"radius","","The radius of the border",14,null],[3,"Rectangle","","A filled rectangle",null,null],[12,"color","","The rectangle color",15,null],[12,"shape","","The roundness of the rectangle",15,null],[12,"border","","The border",15,null],[4,"Shape","","The shape of the rectangle",null,null],[13,"Square","","Square corners",16,null],[13,"Round","","Round corners, with resolution per corner.",16,null],[13,"Bevel","","Bevel corners",16,null],[5,"centered","","Use x, y, half-width, half-height",null,{"inputs":[{"name":"rectangle"}],"output":{"name":"rectangle"}}],[5,"centered_square","","Use centered square",null,{"inputs":[{"name":"scalar"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rectangle"}}],[5,"square","","Use square with x, y in upper left corner",null,{"inputs":[{"name":"scalar"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"rectangle"}}],[11,"clone","","",16,{"inputs":[{"name":"shape"}],"output":{"name":"shape"}}],[11,"clone","","",14,{"inputs":[{"name":"border"}],"output":{"name":"border"}}],[11,"clone","","",15,{"inputs":[{"name":"rectangle"}],"output":{"name":"rectangle"}}],[11,"new","","Creates a new rectangle.",15,{"inputs":[{"name":"color"}],"output":{"name":"rectangle"}}],[11,"new_round","","Creates a new round rectangle.",15,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"rectangle"}}],[11,"new_border","","Creates a new rectangle border.",15,{"inputs":[{"name":"color"},{"name":"radius"}],"output":{"name":"rectangle"}}],[11,"new_round_border","","Creates a new round rectangle border.",15,{"inputs":[{"name":"color"},{"name":"radius"},{"name":"radius"}],"output":{"name":"rectangle"}}],[11,"color","","Sets color.",15,{"inputs":[{"name":"rectangle"},{"name":"color"}],"output":{"name":"self"}}],[11,"shape","","Sets shape.",15,{"inputs":[{"name":"rectangle"},{"name":"shape"}],"output":{"name":"self"}}],[11,"border","","Sets border.",15,{"inputs":[{"name":"rectangle"},{"name":"border"}],"output":{"name":"self"}}],[11,"maybe_border","","Sets optional border.",15,{"inputs":[{"name":"rectangle"},{"name":"option"}],"output":{"name":"self"}}],[11,"draw","","Draws the rectangle using default method.",15,{"inputs":[{"name":"rectangle"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_tri","","Draws the rectangle using triangulation.",15,{"inputs":[{"name":"rectangle"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"image","graphics","Draw an image",null,null],[3,"Image","graphics::image","An image",null,null],[12,"color","","The color",17,null],[12,"rectangle","","The rectangle to draw image inside",17,null],[12,"source_rectangle","","The image source rectangle",17,null],[5,"draw_many","","Draws many images.",null,null],[11,"clone","","",17,{"inputs":[{"name":"image"}],"output":{"name":"image"}}],[11,"new","","Creates a new image",17,{"inputs":[],"output":{"name":"image"}}],[11,"new_color","","Creates a new colored image",17,{"inputs":[{"name":"color"}],"output":{"name":"image"}}],[11,"color","","Sets color.",17,{"inputs":[{"name":"image"},{"name":"color"}],"output":{"name":"self"}}],[11,"maybe_color","","Sets optional color.",17,{"inputs":[{"name":"image"},{"name":"option"}],"output":{"name":"self"}}],[11,"rect","","Sets rectangle.",17,{"inputs":[{"name":"image"},{"name":"r"}],"output":{"name":"self"}}],[11,"maybe_rect","","Sets optional rectangle.",17,{"inputs":[{"name":"image"},{"name":"option"}],"output":{"name":"self"}}],[11,"src_rect","","Sets source rectangle.",17,{"inputs":[{"name":"image"},{"name":"sourcerectangle"}],"output":{"name":"self"}}],[11,"maybe_src_rect","","Sets optional source rectangle.",17,{"inputs":[{"name":"image"},{"name":"option"}],"output":{"name":"self"}}],[11,"draw","","Draws image using default method.",17,null],[11,"draw_tri","","Draws image using triangulation.",17,null],[0,"types","graphics","Contains type aliases used in this library",null,null],[6,"Area","graphics::types","The type used for area.",null,null],[6,"Color","","[red, green, blue, alpha]",null,null],[6,"ColorComponent","","The type used for color component.",null,null],[6,"Line","","[x1, y1, x2, y2]",null,null],[6,"SourceRectangle","","[x, y, w, h]",null,null],[6,"Polygon","","[p0, p1, ...]",null,null],[6,"Polygons","","A slice of polygons.",null,null],[6,"Radius","","The type used for radius.",null,null],[6,"Resolution","","The type used for resolution.",null,null],[6,"Ray","","[x, y, dir_x, dir_y]",null,null],[6,"Rectangle","","[x, y, w, h]",null,null],[6,"Triangle","","[x1, y1, x2, y2, x3, y3]",null,null],[6,"Width","","The type used for width.",null,null],[6,"FontSize","","The type used for font size.",null,null],[0,"modular_index","graphics","Helper functions for computing modular index safely.",null,null],[5,"offset","graphics::modular_index","Computes modular offset safely for indices.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"isize"}],"output":{"name":"usize"}}],[5,"previous","","Computes previous modular index safely.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"next","","Computes next modular index safely.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"text","graphics","Draw text",null,null],[3,"Text","graphics::text","Renders text",null,null],[12,"color","","The color",18,null],[12,"font_size","","The font size",18,null],[12,"round","","Whether or not the text&#39;s position should be rounded (to a signed distance field).",18,null],[11,"clone","","",18,{"inputs":[{"name":"text"}],"output":{"name":"text"}}],[11,"new","","Creates a new text with black color",18,{"inputs":[{"name":"fontsize"}],"output":{"name":"text"}}],[11,"new_color","","Creates a new colored text",18,{"inputs":[{"name":"color"},{"name":"fontsize"}],"output":{"name":"text"}}],[11,"round","","A builder method indicating that the Text&#39;s position should be rounded upon drawing.",18,{"inputs":[{"name":"text"}],"output":{"name":"text"}}],[11,"draw","","Draws text with a character cache",18,{"inputs":[{"name":"text"},{"name":"str"},{"name":"c"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[0,"triangulation","graphics","Methods for converting shapes into triangles.",null,null],[5,"tx","graphics::triangulation","Transformed x coordinate as f32.",null,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"f32"}}],[5,"ty","","Transformed y coordinate as f32.",null,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"f32"}}],[5,"with_lerp_polygons_tri_list","","Streams tweened polygons using linear interpolation.",null,{"inputs":[{"name":"matrix2d"},{"name":"polygons"},{"name":"scalar"},{"name":"f"}],"output":null}],[5,"with_ellipse_tri_list","","Streams an ellipse specified by a resolution.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"f"}],"output":null}],[5,"with_round_border_line_tri_list","","Streams a round border line.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"line"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"with_round_rectangle_tri_list","","Streams a round rectangle.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"stream_polygon_tri_list","","Streams a polygon into tri list.\nUses buffers that fit inside L1 cache.",null,{"inputs":[{"name":"matrix2d"},{"name":"e"},{"name":"f"}],"output":null}],[5,"with_ellipse_border_tri_list","","Streams an ellipse border specified by a resolution.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"with_arc_tri_list","","Streams an arc between the two radian boundaries.",null,{"inputs":[{"name":"scalar"},{"name":"scalar"},{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"with_round_rectangle_border_tri_list","","Streams a round rectangle border.",null,{"inputs":[{"name":"resolution"},{"name":"matrix2d"},{"name":"rectangle"},{"name":"radius"},{"name":"radius"},{"name":"f"}],"output":null}],[5,"stream_quad_tri_list","","Streams a quad into tri list.",null,{"inputs":[{"name":"matrix2d"},{"name":"e"},{"name":"f"}],"output":null}],[5,"with_polygon_tri_list","","Splits polygon into convex segments.\nCreate a buffer that fits into L1 cache with 1KB overhead.",null,{"inputs":[{"name":"matrix2d"},{"name":"polygon"},{"name":"f"}],"output":null}],[5,"rect_tri_list_xy","","Creates triangle list vertices from rectangle.",null,null],[5,"rect_border_tri_list_xy","","Creates triangle list vertices from rectangle.",null,null],[5,"rect_tri_list_uv","","Creates triangle list texture coords from image.",null,null],[0,"math","graphics","Various methods for computing with vectors.",null,null],[5,"multiply","graphics::math","Multiplies two matrices.",null,null],[5,"dot","","Computes the dot product.",null,null],[5,"cross","","Computes the cross product.",null,null],[5,"add","","Adds two vectors.",null,null],[5,"sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,null],[5,"cast","","Converts to another vector type.",null,null],[5,"mul","","Multiplies two vectors component wise.",null,null],[5,"mul_scalar","","Multiplies the vector with a scalar.",null,null],[5,"square_len","","Computes the square length of a vector.",null,null],[5,"transform_pos","","Transforms a 2D position through matrix.",null,null],[5,"transform_vec","","Transforms a 2D vector through matrix.",null,null],[5,"perp","","Creates a perpendicular vector.",null,null],[5,"abs_transform","","Transforms from normalized to absolute coordinates.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"translate","","Creates a translation matrix.",null,{"inputs":[{"name":"vec2d"}],"output":{"name":"matrix2d"}}],[5,"rotate_radians","","Creates a rotation matrix.",null,{"inputs":[{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"orient","","Orients x axis to look at point.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"scale","","Create a scale matrix.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"matrix2d"}}],[5,"shear","","Create a shear matrix.",null,{"inputs":[{"name":"vec2d"}],"output":{"name":"matrix2d"}}],[5,"identity","","Create an identity matrix.",null,{"inputs":[],"output":{"name":"matrix2d"}}],[5,"get_scale","","Extract scale information from matrix.",null,{"inputs":[{"name":"matrix2d"}],"output":{"name":"vec2d"}}],[5,"separation","","Compute the shortest vector from point to ray.\nA ray stores starting point and directional vector.",null,{"inputs":[{"name":"ray"},{"name":"vec2d"}],"output":{"name":"vec2d"}}],[5,"least_separation_4","","Returns the least separation out of four.\nEach seperation can be computed using `separation` function.\nThe separation returned can be used\nto solve collision of rectangles.",null,{"inputs":[{"name":"vec2d"},{"name":"vec2d"},{"name":"vec2d"},{"name":"vec2d"}],"output":{"name":"vec2d"}}],[5,"margin_rectangle","","Shrinks a rectangle by a factor on all sides.",null,{"inputs":[{"name":"rectangle"},{"name":"t"}],"output":{"name":"rectangle"}}],[5,"relative_rectangle","","Computes a relative rectangle using the rectangle as a tile.",null,{"inputs":[{"name":"rectangle"},{"name":"vec2d"}],"output":{"name":"rectangle"}}],[5,"overlap_rectangle","","Computes overlap between two rectangles.\nThe area of the overlapping rectangle is positive.\nA shared edge or corner is not considered overlap.",null,{"inputs":[{"name":"rectangle"},{"name":"rectangle"}],"output":{"name":"option"}}],[5,"relative_source_rectangle","","Computes a relative source rectangle using\nthe source rectangle as a tile.",null,{"inputs":[{"name":"sourcerectangle"},{"name":"i32"},{"name":"i32"}],"output":{"name":"sourcerectangle"}}],[5,"modular_offset","","Computes modular offset safely for numbers.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"area_centroid","","Computes the area and centroid of a simple polygon.",null,null],[5,"area","","Computes area of a simple polygon.",null,{"inputs":[{"name":"polygon"}],"output":{"name":"t"}}],[5,"centroid","","Computes centroid of a simple polygon.",null,{"inputs":[{"name":"polygon"}],"output":{"name":"vec2d"}}],[5,"line_side","","Returns a number that tells which side it is relative to a line.",null,{"inputs":[{"name":"line"},{"name":"vec2d"}],"output":{"name":"t"}}],[5,"inside_triangle","","Returns true if point is inside triangle.",null,{"inputs":[{"name":"triangle"},{"name":"vec2d"}],"output":{"name":"bool"}}],[5,"triangle_face","","Returns true if triangle is clockwise.",null,{"inputs":[{"name":"triangle"}],"output":{"name":"bool"}}],[5,"to_barycentric","","Transforms from cartesian coordinates to barycentric.",null,{"inputs":[{"name":"triangle"},{"name":"vec2d"}],"output":{"name":"vec3d"}}],[5,"from_barycentric","","Transforms from barycentric coordinates to cartesian.",null,{"inputs":[{"name":"triangle"},{"name":"vec3d"}],"output":{"name":"vec2d"}}],[5,"hsv","","Transform color with hue, saturation and value.",null,{"inputs":[{"name":"color"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color"}}],[6,"Scalar","","The type used for scalars.",null,null],[6,"Matrix2d","","The type used for matrices.",null,null],[6,"Vec2d","","The type used for 2D vectors.",null,null],[6,"Vec3d","","The type used for 3D vectors.",null,null],[0,"deform","graphics","Least square deforming of a 2D grid.",null,null],[3,"DeformGrid","graphics::deform","Represents a deformed grid.",null,null],[12,"cols","","The number of columns in the grid.",19,null],[12,"rows","","The number of rows in the grid.",19,null],[12,"rect","","The grid undeformed, which is a plain rectangle.",19,null],[12,"vertices","","The vertices, deformed.",19,null],[12,"indices","","The triangle indices.",19,null],[12,"texture_coords","","The texture coordinates.",19,null],[12,"ps","","Initial position of control points.",19,null],[12,"qs","","The current position of control points.",19,null],[12,"wis","","A weight computation buffer, one for each control point.",19,null],[11,"clone","","",19,{"inputs":[{"name":"deformgrid"}],"output":{"name":"deformgrid"}}],[11,"new","","Creates a new DeformGrid.",19,{"inputs":[{"name":"rectangle"},{"name":"usize"},{"name":"usize"}],"output":{"name":"deformgrid"}}],[11,"set_current","","Sets current control position.",19,{"inputs":[{"name":"deformgrid"},{"name":"usize"},{"name":"vec2d"}],"output":null}],[11,"set_original","","Sets original control position.",19,{"inputs":[{"name":"deformgrid"},{"name":"usize"},{"name":"vec2d"}],"output":null}],[11,"reset_control_points","","Removes all control points.",19,{"inputs":[{"name":"deformgrid"}],"output":null}],[11,"reset_vertices_and_texture_coords","","Sets vertices and texture coords back to default.",19,{"inputs":[{"name":"deformgrid"}],"output":null}],[11,"hit","","Finds original coordinate.\nIf the deformed grid is overlapping itself, multiple hits might occur.\nReturns the first hit it finds.",19,{"inputs":[{"name":"deformgrid"},{"name":"vec2d"}],"output":{"name":"option"}}],[11,"draw_image","","Draws deformed image using default method.",19,null],[11,"draw_image_tri","","Draws deformed image using triangulation.",19,null],[11,"add_control_point","","Adds a control point, in original coordinates.",19,{"inputs":[{"name":"deformgrid"},{"name":"vec2d"}],"output":null}],[11,"draw_vertical_lines","","Draw vertical grid lines.",19,{"inputs":[{"name":"deformgrid"},{"name":"line"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"draw_horizontal_lines","","Draw horizontal grid lines.",19,{"inputs":[{"name":"deformgrid"},{"name":"line"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"update","","Updates the grid, by deforming the vertices.",19,{"inputs":[{"name":"deformgrid"}],"output":null}],[0,"grid","graphics","A flat grid with square cells.",null,null],[3,"Grid","graphics::grid","Represents a flat grid with square cells.",null,null],[12,"cols","","Number of columns.",20,null],[12,"rows","","Number of rows.",20,null],[12,"units","","The width and height of each grid cell.",20,null],[3,"GridCells","","Iterates through the cells of a grid as (u32, u32).",null,null],[11,"clone","","",20,{"inputs":[{"name":"grid"}],"output":{"name":"grid"}}],[11,"clone","","",21,{"inputs":[{"name":"gridcells"}],"output":{"name":"gridcells"}}],[11,"draw","","Draws the grid.",20,{"inputs":[{"name":"grid"},{"name":"line"},{"name":"drawstate"},{"name":"matrix2d"},{"name":"g"}],"output":null}],[11,"cells","","Get a GridIterator for the grid",20,{"inputs":[{"name":"grid"}],"output":{"name":"gridcells"}}],[11,"cell_position","","Get on-screen position of a grid cell",20,null],[11,"x_pos","","Get on-screen x position of a grid cell",20,null],[11,"y_pos","","Get on-screen y position of a grid cell",20,null],[11,"next","","",21,{"inputs":[{"name":"gridcells"}],"output":{"name":"option"}}],[0,"radians","graphics","Reexport radians helper trait from vecmath",null,null],[8,"Radians","graphics::radians","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",22,{"inputs":[],"output":{"name":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",22,{"inputs":[],"output":{"name":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",22,{"inputs":[],"output":{"name":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees.\nEquivalent to ```value * (π / 180)```.",22,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians.\nEquivalent to ```value * (180 / π)```.",22,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[7,"BACK_END_MAX_VERTEX_COUNT","graphics","Any triangulation method called on the back-end\nnever exceeds this number of vertices.\nThis can be used to initialize buffers that fit the chunk size.",null,null],[8,"Graphics","","Implemented by all graphics back-ends.",null,null],[16,"Texture","","The texture type associated with the back-end.",23,null],[10,"clear_color","","Clears background with a color.",23,{"inputs":[{"name":"graphics"},{"name":"color"}],"output":null}],[10,"clear_stencil","","Clears stencil buffer with a value, usually 0.",23,{"inputs":[{"name":"graphics"},{"name":"u8"}],"output":null}],[10,"tri_list","","Renders list of 2d triangles using a solid color.",23,null],[10,"tri_list_uv","","Renders list of 2d triangles using a color and a texture.",23,null],[11,"rectangle","","Draws a rectangle.",23,{"inputs":[{"name":"graphics"},{"name":"rectangle"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon","","Draws a polygon.",23,{"inputs":[{"name":"graphics"},{"name":"polygon"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",23,{"inputs":[{"name":"graphics"},{"name":"polygon"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"image","","Draws image.",23,{"inputs":[{"name":"graphics"},{"name":"image"},{"name":"texture"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"ellipse","","Draws ellipse.",23,{"inputs":[{"name":"graphics"},{"name":"ellipse"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"line","","Draws line.",23,{"inputs":[{"name":"graphics"},{"name":"line"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"circle_arc","","Draws circle arc.",23,{"inputs":[{"name":"graphics"},{"name":"circlearc"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"deform_image","","Draws deformed image.",23,{"inputs":[{"name":"graphics"},{"name":"deformgrid"},{"name":"texture"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[8,"SourceRectangled","","Should be implemented by contexts that\nhave source rectangle information.",null,null],[10,"src_rect","","Adds a source rectangle.",24,{"inputs":[{"name":"sourcerectangled"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[10,"src_rel","","Moves to a relative source rectangle using\nthe current source rectangle as tile.",24,{"inputs":[{"name":"sourcerectangled"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[10,"src_flip_h","","Flips the source rectangle horizontally.",24,{"inputs":[{"name":"sourcerectangled"}],"output":{"name":"self"}}],[10,"src_flip_v","","Flips the source rectangle vertically.",24,{"inputs":[{"name":"sourcerectangled"}],"output":{"name":"self"}}],[10,"src_flip_hv","","Flips the source rectangle horizontally and vertically.",24,{"inputs":[{"name":"sourcerectangled"}],"output":{"name":"self"}}],[8,"Rectangled","","Should be implemented by contexts that have rectangle information.",null,null],[10,"margin","","Shrinks the current rectangle equally by all sides.",25,{"inputs":[{"name":"rectangled"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"expand","","Expands the current rectangle equally by all sides.",25,{"inputs":[{"name":"rectangled"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"rel","","Moves to a relative rectangle using the current rectangle as tile.",25,{"inputs":[{"name":"rectangled"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[8,"Transformed","","Implemented by contexts that can transform.",null,null],[10,"append_transform","","Appends transform to the current one.",26,{"inputs":[{"name":"transformed"},{"name":"matrix2d"}],"output":{"name":"self"}}],[10,"prepend_transform","","Prepends transform to the current one.",26,{"inputs":[{"name":"transformed"},{"name":"matrix2d"}],"output":{"name":"self"}}],[10,"trans","","Translate x an y in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_deg","","Rotates degrees in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"rot_rad","","Rotate radians in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"orient","","Orients x axis to look at point locally.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[10,"scale","","Scales in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"zoom","","Scales in both directions in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"flip_v","","Flips vertically in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"flip_h","","Flips horizontally in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"flip_hv","","Flips horizontally and vertically in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[10,"shear","","Shears in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"vec2d"}],"output":{"name":"self"}}],[8,"Colored","","Implemented by contexts that contains color.",null,null],[10,"mul_rgba","","Multiplies with red, green, blue and alpha values.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"tint","","Mixes the current color with white.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"shade","","Mixes the current color with black.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_deg","","Rotates hue by degrees.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[10,"hue_rad","","Rotates hue by radians.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"rectangle","","Draws a rectangle.",23,{"inputs":[{"name":"graphics"},{"name":"rectangle"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon","","Draws a polygon.",23,{"inputs":[{"name":"graphics"},{"name":"polygon"},{"name":"polygon"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"polygon_tween_lerp","","Draws a tweened polygon using linear interpolation.",23,{"inputs":[{"name":"graphics"},{"name":"polygon"},{"name":"polygons"},{"name":"scalar"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"image","","Draws image.",23,{"inputs":[{"name":"graphics"},{"name":"image"},{"name":"texture"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"ellipse","","Draws ellipse.",23,{"inputs":[{"name":"graphics"},{"name":"ellipse"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"line","","Draws line.",23,{"inputs":[{"name":"graphics"},{"name":"line"},{"name":"l"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"circle_arc","","Draws circle arc.",23,{"inputs":[{"name":"graphics"},{"name":"circlearc"},{"name":"r"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"deform_image","","Draws deformed image.",23,{"inputs":[{"name":"graphics"},{"name":"deformgrid"},{"name":"texture"},{"name":"drawstate"},{"name":"matrix2d"}],"output":null}],[11,"src_rect","graphics::types","",28,{"inputs":[{"name":"sourcerectangle"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"src_rel","","",28,{"inputs":[{"name":"sourcerectangle"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"src_flip_h","","",28,{"inputs":[{"name":"sourcerectangle"}],"output":{"name":"self"}}],[11,"src_flip_v","","",28,{"inputs":[{"name":"sourcerectangle"}],"output":{"name":"self"}}],[11,"src_flip_hv","","",28,{"inputs":[{"name":"sourcerectangle"}],"output":{"name":"self"}}],[11,"expand","graphics","Expands the current rectangle equally by all sides.",25,{"inputs":[{"name":"rectangled"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"margin","graphics::types","",29,{"inputs":[{"name":"rectangle"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rel","","",29,{"inputs":[{"name":"rectangle"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_deg","graphics","Rotates degrees in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"zoom","","Scales in both directions in local coordinates.",26,{"inputs":[{"name":"transformed"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"flip_v","","Flips vertically in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"flip_h","","Flips horizontally in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"flip_hv","","Flips horizontally and vertically in local coordinates.",26,{"inputs":[{"name":"transformed"}],"output":{"name":"self"}}],[11,"append_transform","graphics::math","",30,{"inputs":[{"name":"matrix2d"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"prepend_transform","","",30,{"inputs":[{"name":"matrix2d"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"trans","","",30,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_rad","","",30,{"inputs":[{"name":"matrix2d"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"orient","","",30,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scale","","",30,{"inputs":[{"name":"matrix2d"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shear","","",30,{"inputs":[{"name":"matrix2d"},{"name":"vec2d"}],"output":{"name":"self"}}],[11,"append_transform","graphics::context","",7,{"inputs":[{"name":"context"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"prepend_transform","","",7,{"inputs":[{"name":"context"},{"name":"matrix2d"}],"output":{"name":"self"}}],[11,"trans","","",7,{"inputs":[{"name":"context"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"rot_rad","","",7,{"inputs":[{"name":"context"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"orient","","",7,{"inputs":[{"name":"context"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"scale","","",7,{"inputs":[{"name":"context"},{"name":"scalar"},{"name":"scalar"}],"output":{"name":"self"}}],[11,"shear","","",7,{"inputs":[{"name":"context"},{"name":"vec2d"}],"output":{"name":"self"}}],[11,"tint","graphics","Mixes the current color with white.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"shade","","Mixes the current color with black.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_deg","","Rotates hue by degrees.",27,{"inputs":[{"name":"colored"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::types","",31,{"inputs":[{"name":"color"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",31,{"inputs":[{"name":"color"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::line","",9,{"inputs":[{"name":"line"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",9,{"inputs":[{"name":"line"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::ellipse","",13,{"inputs":[{"name":"ellipse"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",13,{"inputs":[{"name":"ellipse"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"mul_rgba","graphics::rectangle","",15,{"inputs":[{"name":"rectangle"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"},{"name":"colorcomponent"}],"output":{"name":"self"}}],[11,"hue_rad","","",15,{"inputs":[{"name":"rectangle"},{"name":"colorcomponent"}],"output":{"name":"self"}}]],"paths":[[8,"ImageSize"],[3,"Viewport"],[3,"DrawState"],[4,"Blend"],[4,"Stencil"],[3,"Character"],[8,"CharacterCache"],[3,"Context"],[3,"Polygon"],[3,"Line"],[4,"Shape"],[3,"CircleArc"],[3,"Border"],[3,"Ellipse"],[3,"Border"],[3,"Rectangle"],[4,"Shape"],[3,"Image"],[3,"Text"],[3,"DeformGrid"],[3,"Grid"],[3,"GridCells"],[8,"Radians"],[8,"Graphics"],[8,"SourceRectangled"],[8,"Rectangled"],[8,"Transformed"],[8,"Colored"],[6,"SourceRectangle"],[6,"Rectangle"],[6,"Matrix2d"],[6,"Color"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["stb_truetype"] = {"doc":"","items":[[3,"FontInfo","stb_truetype","",null,null],[3,"Vertex","","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[12,"cx","","",0,null],[12,"cy","","",0,null],[3,"Rect","","",null,null],[12,"x0","","",1,null],[12,"y0","","",1,null],[12,"x1","","",1,null],[12,"y1","","",1,null],[3,"HMetrics","","",null,null],[12,"advance_width","","",2,null],[12,"left_side_bearing","","",2,null],[3,"VMetrics","","",null,null],[12,"ascent","","",3,null],[12,"descent","","",3,null],[12,"line_gap","","",3,null],[4,"VertexType","","",null,null],[13,"MoveTo","","",4,null],[13,"LineTo","","",4,null],[13,"CurveTo","","",4,null],[5,"is_font","","",null,null],[5,"get_font_offset_for_index","","Each .ttf/.ttc file may have more than one font. Each font has a sequential\nindex number starting from 0. Call this function to get the font offset for\na given index; it returns None if the index is out of range. A regular .ttf\nfile will only define one font and it always be at offset 0, so it will\nreturn Some(0) for index 0, and None for all other indices. You can just skip\nthis step if you know it&#39;s that kind of font.",null,null],[11,"clone","","",5,{"inputs":[{"name":"fontinfo"}],"output":{"name":"fontinfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"vertex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"vertex"}],"output":{"name":"vertex"}}],[11,"vertex_type","","",0,{"inputs":[{"name":"vertex"}],"output":{"name":"vertextype"}}],[11,"fmt","","",4,{"inputs":[{"name":"vertextype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"vertextype"}],"output":{"name":"vertextype"}}],[11,"fmt","","",1,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"fmt","","",2,{"inputs":[{"name":"hmetrics"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"hmetrics"}],"output":{"name":"hmetrics"}}],[11,"fmt","","",3,{"inputs":[{"name":"vmetrics"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"vmetrics"}],"output":{"name":"vmetrics"}}],[11,"new","","Given an offset into the file that defines a font, this function builds\nthe necessary cached info for the rest of the system.",5,{"inputs":[{"name":"data"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_num_glyphs","","",5,{"inputs":[{"name":"fontinfo"}],"output":{"name":"u32"}}],[11,"find_glyph_index","","If you&#39;re going to perform multiple operations on the same character\nand you want a speed-up, call this function with the character you&#39;re\ngoing to process, then use glyph-based functions instead of the\ncodepoint-based functions.",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"get_codepoint_shape","","Returns the series of vertices encoding the shape of the glyph for this codepoint.",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_glyph_box","","Like `get_codepoint_box`, but takes a glyph index. Use this if you have cached the glyph index for\na codepoint.",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_codepoint_box","","Gets the bounding box of the visible part of the glyph, in unscaled coordinates",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"}],"output":{"name":"option"}}],[11,"is_glyph_empty","","returns true if nothing is drawn for this glyph",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"get_glyph_shape","","Like `get_codepoint_shape`, but takes a glyph index instead. Use this if you have cached the\nglyph index for a codepoint.",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_glyph_h_metrics","","like `get_codepoint_h_metrics`, but takes a glyph index instead. Use this if you have cached the\nglyph index for a codepoint.",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"}],"output":{"name":"hmetrics"}}],[11,"get_glyph_kern_advance","","like `get_codepoint_kern_advance`, but takes glyph indices instead. Use this if you have cached the\nglyph indices for the codepoints.",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"get_codepoint_kern_advance","","an additional amount to add to the &#39;advance&#39; value between cp1 and cp2",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"get_codepoint_h_metrics","","`left_side_bearing` is the offset from the current horizontal position to the left edge of the character\n`advance_width` is the offset from the current horizontal position to the next horizontal position\nthese are expressed in unscaled coordinates",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"}],"output":{"name":"hmetrics"}}],[11,"get_v_metrics","","`ascent` is the coordinate above the baseline the font extends; descent\nis the coordinate below the baseline the font extends (i.e. it is typically negative)\n`line_gap` is the spacing between one row&#39;s descent and the next row&#39;s ascent...\nso you should advance the vertical position by `ascent - descent + line_gap`\nthese are expressed in unscaled coordinates, so you must multiply by\nthe scale factor for a given size",5,{"inputs":[{"name":"fontinfo"}],"output":{"name":"vmetrics"}}],[11,"get_bounding_box","","the bounding box around all possible characters",5,{"inputs":[{"name":"fontinfo"}],"output":{"name":"rect"}}],[11,"scale_for_pixel_height","","computes a scale factor to produce a font whose &quot;height&quot; is &#39;pixels&#39; tall.\nHeight is measured as the distance from the highest ascender to the lowest\ndescender; in other words, it&#39;s equivalent to calling GetFontVMetrics\nand computing:\n      scale = pixels / (ascent - descent)\nso if you prefer to measure height by the ascent only, use a similar calculation.",5,{"inputs":[{"name":"fontinfo"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"scale_for_mapping_em_to_pixels","","computes a scale factor to produce a font whose EM size is mapped to\n`pixels` tall. This is probably what traditional APIs compute, but\nI&#39;m not positive.",5,{"inputs":[{"name":"fontinfo"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"get_glyph_bitmap_box_subpixel","","like `get_codepoint_bitmap_box_subpixel`, but takes a glyph index instead of a codepoint.",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}],[11,"get_glyph_bitmap_box","","like `get_codepoint_bitmap_box`, but takes a glyph index instead of a codepoint.",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}],[11,"get_codepoint_bitmap_box_subpixel","","same as get_codepoint_bitmap_box, but you can specify a subpixel\nshift for the character",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}],[11,"get_codepoint_bitmap_box","","get the bounding box of the bitmap centered around the glyph origin; so the\nbitmap width is x1-x0, height is y1-y0, and location to place\nthe bitmap top left is (left_side_bearing*scale, y0).\n(Note that the bitmap uses y-increases-down, but the shape uses\ny-increases-up, so CodepointBitmapBox and CodepointBox are inverted.)",5,{"inputs":[{"name":"fontinfo"},{"name":"u32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"option"}}]],"paths":[[3,"Vertex"],[3,"Rect"],[3,"HMetrics"],[3,"VMetrics"],[4,"VertexType"],[3,"FontInfo"]]};
searchIndex["dlib"] = {"doc":"","items":[[11,"new","libloading","Find and load a shared library (module).",0,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"get","","Get a symbol by name.",0,null],[3,"Library","dlib","A dynamically loaded library.",null,null],[11,"deref","libloading","",1,{"inputs":[{"name":"symbol"}],"output":{"name":"t"}}],[3,"Symbol","dlib","Symbol from a library.",null,null],[4,"DlError","","",null,null],[13,"NotFound","","",2,null],[13,"MissingSymbol","","",2,null],[14,"ffi_dispatch!","","",null,null],[14,"ffi_dispatch_static!","","",null,null],[14,"link_external_library!","","",null,null],[14,"dlopen_external_library!","","",null,null],[14,"external_library!","","",null,null]],"paths":[[3,"Library"],[3,"Symbol"],[4,"DlError"]]};
searchIndex["libloading"] = {"doc":"A memory-safer wrapper around system dynamic library primitives.","items":[[3,"Library","libloading","A dynamically loaded library.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[0,"os","","",null,null],[0,"unix","libloading::os","",null,null],[3,"Library","libloading::os::unix","A platform-specific equivalent of the cross-platform `Library`.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",0,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"new","libloading::os::unix","Find and load a shared library (module).",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"this","","Load the dynamic libraries linked into main program.",1,{"inputs":[],"output":{"name":"library"}}],[11,"get","","Get a symbol by name.",1,null],[11,"drop","","",1,{"inputs":[{"name":"library"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"library"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",2,{"inputs":[{"name":"symbol"}],"output":{"name":"t"}}],[11,"fmt","","",2,{"inputs":[{"name":"symbol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",3,{"inputs":[{"name":"nullerror"}],"output":{"name":"error"}}],[6,"Result","libloading","",null,null],[11,"new","","Find and load a shared library (module).",4,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"get","","Get a symbol by name.",4,null],[11,"deref","","",5,{"inputs":[{"name":"symbol"}],"output":{"name":"t"}}]],"paths":[[3,"Mutex"],[3,"Library"],[3,"Symbol"],[3,"Error"],[3,"Library"],[3,"Symbol"]]};
searchIndex["arrayvec"] = {"doc":"**arrayvec** provides the types `ArrayVec` and `ArrayString`:\narray-backed vector and string types, which store their contents inline.","items":[[8,"RangeArgument","arrayvec","**IndexRange** is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"rangeargument"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"rangeargument"}],"output":{"name":"option"}}],[3,"ArrayString","","A string with a fixed capacity.",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[11,"new","","Create a new empty `ArrayString`.",1,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"usize"}}],[11,"push","","Adds the given char to the end of the string.",1,{"inputs":[{"name":"arraystring"},{"name":"char"}],"output":{"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",1,{"inputs":[{"name":"arraystring"},{"name":"str"}],"output":{"name":"result"}}],[11,"clear","","Make the string empty.",1,{"inputs":[{"name":"arraystring"}],"output":null}],[11,"set_len","","Set the strings&#39;s length.",1,{"inputs":[{"name":"arraystring"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"arraystring"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"arraystring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"arraystring"},{"name":"h"}],"output":null}],[11,"borrow","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"as_ref","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"arraystring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"arraystring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","","",1,{"inputs":[{"name":"arraystring"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",1,{"inputs":[{"name":"arraystring"},{"name":"self"}],"output":null}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array&#39;s element type",2,null],[11,"drop","","",3,{"inputs":[{"name":"arrayvec"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"usize"}}],[11,"push","","Push `element` to the end of the vector.",3,{"inputs":[{"name":"arrayvec"},{"name":"item"}],"output":{"name":"option"}}],[11,"insert","","Insert `element` in position `index`.",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"},{"name":"item"}],"output":{"name":"option"}}],[11,"pop","","Remove the last element in the vector.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clear","","Remove all elements in the vector.",3,{"inputs":[{"name":"arrayvec"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",3,{"inputs":[{"name":"arrayvec"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector&#39;s length without dropping or moving out elements",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",3,{"inputs":[{"name":"arrayvec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",3,{"inputs":[{"name":"arrayvec"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",3,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",3,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"intoiter"}}],[11,"next","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"intoiter"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"drain"}],"output":null}],[11,"extend","","",3,{"inputs":[{"name":"arrayvec"},{"name":"t"}],"output":null}],[11,"from_iter","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"self"}}],[11,"clone_from","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":null}],[11,"hash","","",3,{"inputs":[{"name":"arrayvec"},{"name":"h"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"arrayvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"arrayvec"},{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"arrayvec"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"result"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"capacityerror"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",6,{"inputs":[{"name":"capacityerror"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",6,{"inputs":[{"name":"capacityerror"}],"output":{"name":"capacityerror"}}],[11,"description","","",6,{"inputs":[{"name":"capacityerror"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"RangeArgument"],[3,"ArrayString"],[8,"Array"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",11,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[0,"error","bitflags::__core","Traits for working with Errors.",null,null],[8,"Error","bitflags::__core::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[0,"prelude","bitflags::__core","The Rust Prelude.",null,null],[0,"v1","bitflags::__core::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[8,"Sync","bitflags::__core::prelude::v1","Types that can be safely shared between threads when aliased.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",1,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[8,"SliceConcatExt","","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",2,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",2,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",2,null],[10,"connect","","",2,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",3,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",3,null],[10,"into_iter","","Creates an iterator from a value.",3,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",5,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",5,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",5,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",5,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",5,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",6,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",7,null],[10,"next","","Advances the iterator and returns the next value.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",7,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",7,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",7,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",7,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",7,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",7,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",7,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",7,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",8,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",9,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",10,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",10,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",10,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",10,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",10,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",10,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",10,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",10,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",10,null],[11,"as_slice","","Extracts a slice containing the entire vector.",10,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",10,null],[11,"set_len","","Sets the length of a vector.",10,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",10,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",10,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",10,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",10,null],[11,"push","","Appends an element to the back of a collection.",10,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",10,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",10,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",10,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",10,null],[11,"len","","Returns the number of elements in the vector.",10,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",10,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",10,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",10,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",10,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",10,null],[11,"from","","",10,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","","",10,null],[11,"as_mut","","",10,null],[11,"as_ref","","",10,null],[11,"as_mut","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",10,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"vec"}}],[11,"drop","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"extend","","",10,null],[11,"extend","","",10,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",10,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"deref_mut","","",10,null],[11,"deref","","",10,null],[11,"index_mut","","",10,null],[11,"index_mut","","",10,null],[11,"index_mut","","",10,null],[11,"index_mut","","",10,null],[11,"index_mut","","",10,null],[11,"index_mut","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index_mut","","",10,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",10,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",10,null],[11,"borrow_mut","","",10,null],[11,"borrow","","",10,null],[11,"from","","",10,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[3,"Vec","bitflags::__core::prelude::v1","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[11,"is_ok","core::result","Returns true if the result is `Ok`",11,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",11,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",11,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",11,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",11,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",11,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",11,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",11,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",11,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",11,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",11,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",11,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",11,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",11,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",11,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",11,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",11,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",11,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",11,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",11,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",11,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"clone","","",11,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"fmt","","",11,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[4,"Result","bitflags::__core::prelude::v1","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",11,null],[13,"Err","","Contains the error value",11,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",12,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",12,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",13,null],[10,"call_once","","This is called when the call operator is used.",13,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",14,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",15,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",15,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",16,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",17,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",17,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[3,"Box","","A pointer type for heap allocation.",null,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",18,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[5,"drop","","Disposes of a value.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",19,{"inputs":[],"output":{"name":"self"}}],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",20,null],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",21,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[11,"from_iter","core::option","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",22,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",22,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",22,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",22,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",22,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",22,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",22,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",22,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",22,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",22,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",22,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",22,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",22,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",22,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",22,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",22,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",22,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",22,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",22,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",22,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",22,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",22,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",22,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[4,"Option","bitflags::__core::prelude::v1","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",22,null],[13,"Some","","Some value `T`",22,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",23,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",24,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[11,"write_str","collections::string","",25,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",25,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"into","","",25,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"from","","",25,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"as_ref","","",25,null],[11,"as_ref","","",25,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",25,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref","","",25,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"index_mut","","",25,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",25,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",25,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",25,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",25,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",25,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",25,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",25,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",25,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",25,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",25,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",25,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"add","","",25,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"string"}}],[11,"eq","","",25,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"extend","","",25,null],[11,"extend","","",25,null],[11,"extend","","",25,null],[11,"extend","","",25,null],[11,"from_iter","","",25,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",25,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",25,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"clone","","",25,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",25,null],[11,"new","","Creates a new empty `String`.",25,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",25,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",25,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",25,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",25,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",25,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",25,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",25,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",25,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",25,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",25,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",25,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",25,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",25,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",25,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",25,null],[11,"push","","Appends the given `char` to the end of this `String`.",25,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",25,null],[11,"truncate","","Shortens this `String` to the specified length.",25,null],[11,"pop","","Removes the last character from the string buffer and returns it.",25,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",25,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",25,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",25,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",25,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",25,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",25,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",25,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",25,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"borrow","","",25,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[3,"String","bitflags::__core::prelude::v1","A UTF-8 encoded, growable string.",null,null],[0,"f32","bitflags::__core","The 32-bit floating point type.",null,null],[17,"RADIX","bitflags::__core::f32","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"INFINITY","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MIN_EXP","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"MAX","bitflags::__core::f32","Largest finite f32 value",null,null],[17,"EPSILON","","",null,null],[17,"NEG_INFINITY","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"DIGITS","","",null,null],[17,"NAN","","",null,null],[0,"f64","bitflags::__core","The 64-bit floating point type.",null,null],[17,"MAX_10_EXP","bitflags::__core::f64","",null,null],[17,"NAN","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"MIN","bitflags::__core::f64","Smallest finite f64 value",null,null],[17,"INFINITY","","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"MIN_EXP","","",null,null],[17,"RADIX","","",null,null],[17,"NEG_INFINITY","","",null,null],[17,"DIGITS","","",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[0,"ascii","bitflags::__core","Operations on ASCII strings and characters.",null,null],[8,"AsciiExt","bitflags::__core::ascii","Extension methods for ASCII-subset only operations on string slices.",null,null],[16,"Owned","","Container type for copied ASCII characters.",26,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",26,{"inputs":[{"name":"asciiext"}],"output":{"name":"bool"}}],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case.",26,null],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case.",26,null],[10,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",26,{"inputs":[{"name":"asciiext"},{"name":"self"}],"output":{"name":"bool"}}],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",26,null],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",26,null],[11,"next_back","std::ascii","",27,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[3,"EscapeDefault","bitflags::__core::ascii","An iterator over the escaped version of a byte, constructed via\n`std::ascii::escape_default`.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[0,"num","bitflags::__core","Additional functionality for numerics.",null,null],[11,"fmt","core::num","",28,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"eq","","",28,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[3,"ParseIntError","bitflags::__core::num","An error which can be returned when parsing an integer.",null,null],[8,"Zero","","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",29,{"inputs":[],"output":{"name":"self"}}],[11,"bitand_assign","core::num","",30,null],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",30,null],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",30,null],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",30,null],[11,"rem","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",30,null],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",30,null],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",30,null],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",30,null],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",30,null],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",30,null],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",30,null],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",30,null],[11,"rem","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",30,null],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",30,null],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",30,null],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",30,null],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",30,null],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",30,null],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",30,null],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",30,null],[11,"rem","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",30,null],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",30,null],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",30,null],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",30,null],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",30,null],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",30,null],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",30,null],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",30,null],[11,"rem","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",30,null],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",30,null],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",30,null],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",30,null],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",30,null],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",30,null],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",30,null],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",30,null],[11,"rem","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",30,null],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",30,null],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",30,null],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",30,null],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",30,null],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",30,null],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",30,null],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",30,null],[11,"rem","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",30,null],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",30,null],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",30,null],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",30,null],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",30,null],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",30,null],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",30,null],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",30,null],[11,"rem","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",30,null],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",30,null],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",30,null],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",30,null],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",30,null],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",30,null],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",30,null],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",30,null],[11,"rem","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",30,null],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",30,null],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",30,null],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",30,null],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",30,null],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",30,null],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",30,null],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",30,null],[11,"rem","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",30,null],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",30,null],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",30,null],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",30,null],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",30,null],[11,"bitand","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",30,null],[11,"bitor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",30,null],[11,"bitxor","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",30,null],[11,"rem","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",30,null],[11,"div","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",30,null],[11,"mul","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",30,null],[11,"sub","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",30,null],[11,"add","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",30,null],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",30,null],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",30,null],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",30,null],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",30,null],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",30,null],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",30,null],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",30,null],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",30,null],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",30,null],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",30,null],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",30,null],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",30,null],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",30,null],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",30,null],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",30,null],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",30,null],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",30,null],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",30,null],[11,"shr","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",30,null],[11,"shl","","",30,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"fmt","","",30,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"cmp","","",30,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"clone","","",30,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"wrapping"}}],[11,"hash","","",30,null],[3,"Wrapping","bitflags::__core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",30,null],[11,"fmt","core::num::dec2flt","",31,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"eq","","",31,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[3,"ParseFloatError","bitflags::__core::num","An error which can be returned when parsing a float.",null,null],[11,"clone","core::num","",32,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",32,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"FpCategory","bitflags::__core::num","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",32,null],[13,"Infinite","","Positive or negative infinity",32,null],[13,"Zero","","Positive or negative zero",32,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",32,null],[13,"Normal","","A regular floating point number",32,null],[8,"One","","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",33,{"inputs":[],"output":{"name":"self"}}],[0,"thread","bitflags::__core","Native threads.",null,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",34,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",34,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",34,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",34,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[3,"Builder","bitflags::__core::thread","Thread configuration. Provides detailed control over the properties\nand behavior of new threads.",null,null],[5,"spawn","","Spawns a new thread, returning a `JoinHandle` for it.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"current","","Gets a handle to the thread that invokes it.",null,{"inputs":[],"output":{"name":"thread"}}],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,null],[5,"panicking","","Determines whether the current thread is unwinding because of panic.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"sleep_ms","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"sleep","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"park","","Blocks unless or until the current thread&#39;s token is made available.",null,null],[5,"park_timeout_ms","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[5,"park_timeout","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[11,"fmt","std::thread","",35,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",35,null],[11,"name","","Gets the thread&#39;s name.",35,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[3,"Thread","bitflags::__core::thread","A handle to a thread.",null,null],[6,"Result","","",null,null],[11,"thread","std::thread","Extracts a handle to the underlying thread",36,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",36,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[3,"JoinHandle","bitflags::__core::thread","An owned permission to join on a thread (block on its termination).",null,null],[11,"new","std::thread::scoped_tls::imp","",37,{"inputs":[],"output":{"name":"keyinner"}}],[11,"set","","",37,null],[11,"get","","",37,null],[3,"KeyInner","bitflags::__core::thread","",null,null],[11,"eq","std::thread::local","",38,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[4,"LocalKeyState","bitflags::__core::thread","Indicator of the state of a thread local storage key.",null,null],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will\ntransition to the `Valid` state once the first call to `with` happens\nand the initialization expression succeeds.",38,null],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid`\nstate. Keys in the `Valid` state will remain so until the thread exits,\nat which point the destructor will be run and the key will enter the\n`Destroyed` state.",38,null],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if\nnecessary). While a destructor is running, and possibly after a\ndestructor has run, a key is in the `Destroyed` state.",38,null],[11,"new","std::thread::local::os","",39,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",39,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[3,"Key","bitflags::__core::thread","",null,null],[11,"new","std::thread::local::elf","",40,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",40,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[3,"Key","bitflags::__core::thread","",null,null],[11,"with","std::thread::local","Acquires a reference to the value in this TLS key.",41,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",41,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[3,"LocalKey","bitflags::__core::thread","A thread local storage key which owns its contents.",null,null],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",42,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",42,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",42,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[3,"ScopedKey","bitflags::__core::thread","Type representing a thread local storage key corresponding to a reference\nto the type parameter `T`.",null,null],[0,"collections","bitflags::__core","Collection types.",null,null],[0,"hash_map","bitflags::__core::collections","A hashmap",null,null],[11,"len","std::collections::hash::map","",43,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",43,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"clone","","",43,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::hash_map","HashMap iterator.",null,null],[11,"len","std::collections::hash::map","",44,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",44,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"clone","","",44,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[3,"Keys","bitflags::__core::collections::hash_map","HashMap keys iterator.",null,null],[11,"len","std::collections::hash::map","",45,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"next","","",45,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[3,"Drain","bitflags::__core::collections::hash_map","HashMap drain iterator.",null,null],[11,"extend","std::collections::hash::map","",46,null],[11,"extend","","",46,null],[11,"from_iter","","",46,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"index","","",46,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"hashmap"}}],[11,"fmt","","",46,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",46,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",46,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",46,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",46,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"valuesmut"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",46,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",46,null],[11,"get","","Returns a reference to the value corresponding to the key.",46,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",46,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",46,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",46,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",46,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"new","","Creates an empty HashMap.",46,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",46,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"clone","","",46,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[3,"HashMap","bitflags::__core::collections::hash_map","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[11,"or_insert","std::collections::hash::map","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",47,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",47,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[4,"Entry","bitflags::__core::collections::hash_map","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",47,null],[13,"Vacant","","A vacant Entry.",47,null],[11,"key","std::collections::hash::map","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",48,{"inputs":[{"name":"vacantentry"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",48,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[3,"VacantEntry","bitflags::__core::collections::hash_map","A view into a single empty location in a HashMap.",null,null],[11,"key","std::collections::hash::map","Gets a reference to the key in the entry.",49,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",49,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",49,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",49,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",49,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",49,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[3,"OccupiedEntry","bitflags::__core::collections::hash_map","A view into a single occupied location in a HashMap.",null,null],[11,"len","std::collections::hash::map","",50,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",50,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[3,"IterMut","bitflags::__core::collections::hash_map","HashMap mutable values iterator.",null,null],[11,"default","std::collections::hash::map","",51,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",51,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",51,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","","",51,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[3,"RandomState","bitflags::__core::collections::hash_map","`RandomState` is the default state for `HashMap` types.",null,null],[11,"len","std::collections::hash::map","",52,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",52,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"clone","","",52,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[3,"Values","bitflags::__core::collections::hash_map","HashMap values iterator.",null,null],[11,"len","std::collections::hash::map","",53,{"inputs":[{"name":"valuesmut"}],"output":{"name":"usize"}}],[11,"next","","",53,{"inputs":[{"name":"valuesmut"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[3,"ValuesMut","bitflags::__core::collections::hash_map","Mutable HashMap values iterator.",null,null],[11,"len","std::collections::hash::map","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[3,"IntoIter","bitflags::__core::collections::hash_map","HashMap move iterator.",null,null],[0,"hash_set","bitflags::__core::collections","A hashset",null,null],[11,"next","std::collections::hash::set","",55,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"clone","","",55,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[3,"Union","bitflags::__core::collections::hash_set","Set union iterator.",null,null],[11,"next","std::collections::hash::set","",56,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"clone","","",56,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[3,"Intersection","bitflags::__core::collections::hash_set","Intersection iterator",null,null],[11,"next","std::collections::hash::set","",57,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"clone","","",57,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[3,"SymmetricDifference","bitflags::__core::collections::hash_set","Symmetric difference iterator.",null,null],[11,"clone","std::collections::hash::set","",58,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",58,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"hashset"}}],[11,"extend","","",58,null],[11,"extend","","",58,null],[11,"from_iter","","",58,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"fmt","","",58,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",58,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",58,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",58,{"inputs":[{"name":"hashset"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",58,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",58,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",58,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",58,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",58,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",58,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",58,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",58,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",58,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",58,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",58,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",58,null],[11,"contains","","Returns `true` if the set contains a value.",58,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",58,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",58,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",58,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",58,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",58,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",58,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",58,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",58,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"new","","Creates an empty HashSet.",58,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",58,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"eq","","",58,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[3,"HashSet","bitflags::__core::collections::hash_set","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[11,"next","std::collections::hash::set","",59,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"len","","",59,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[3,"IntoIter","bitflags::__core::collections::hash_set","HashSet move iterator",null,null],[11,"next","std::collections::hash::set","",60,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"len","","",60,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[3,"Drain","bitflags::__core::collections::hash_set","HashSet drain iterator",null,null],[11,"next","std::collections::hash::set","",61,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",61,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[3,"Difference","bitflags::__core::collections::hash_set","Difference iterator",null,null],[11,"next","std::collections::hash::set","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"len","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"clone","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::hash_set","HashSet iterator",null,null],[0,"binary_heap","bitflags::__core::collections","A priority queue implemented with a binary heap.",null,null],[11,"extend","collections::binary_heap","",63,null],[11,"extend","","",63,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",63,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",63,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from","","",63,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",63,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",63,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",63,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",63,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",63,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",63,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",63,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",63,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",63,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",63,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",63,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",63,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",63,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",63,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",63,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",63,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",63,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",63,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",63,null],[11,"fmt","","",63,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"clone","","",63,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",63,null],[3,"BinaryHeap","bitflags::__core::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[11,"next_back","collections::binary_heap","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"clone","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::binary_heap","`BinaryHeap` iterator.",null,null],[11,"next_back","collections::binary_heap","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"clone","","",65,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[3,"IntoIter","bitflags::__core::collections::binary_heap","An iterator that moves out of a `BinaryHeap`.",null,null],[11,"next_back","collections::binary_heap","",66,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[3,"Drain","bitflags::__core::collections::binary_heap","An iterator that drains a `BinaryHeap`.",null,null],[11,"hash","collections::linked_list","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"cmp","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"eq","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"extend","","",67,null],[11,"extend","","",67,null],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",67,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"drop","","",67,null],[11,"new","","Creates an empty `LinkedList`.",67,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",67,null],[11,"iter","","Provides a forward iterator.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",67,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",67,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",67,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",67,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",67,{"inputs":[{"name":"linkedlist"}],"output":{"name":"backplace"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"linkedlist"}}],[3,"LinkedList","bitflags::__core::collections","A doubly-linked list.",null,null],[3,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[0,"vec_deque","","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer.",null,null],[11,"from","collections::vec_deque","",68,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"fmt","","",68,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",68,null],[11,"extend","","",68,null],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",68,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"index_mut","","",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index","","",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"hash","","",68,null],[11,"cmp","","",68,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"eq","","",68,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drop","","",68,null],[11,"clone","","",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",68,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",68,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",68,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",68,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",68,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",68,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",68,null],[11,"iter","","Returns a front-to-back iterator.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",68,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",68,null],[11,"len","","Returns the number of elements in the `VecDeque`.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",68,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",68,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",68,null],[11,"push_back","","Appends an element to the back of a buffer",68,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",68,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",68,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",68,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",68,null],[11,"retain","","Retains only the elements specified by the predicate.",68,null],[11,"default","","",68,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",68,null],[3,"VecDeque","bitflags::__core::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[11,"next_back","collections::vec_deque","",69,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"clone","","",69,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::vec_deque","`VecDeque` iterator.",null,null],[11,"next_back","collections::vec_deque","",70,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[3,"IterMut","bitflags::__core::collections::vec_deque","`VecDeque` mutable iterator.",null,null],[11,"next_back","collections::vec_deque","",71,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"clone","","",71,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[3,"IntoIter","bitflags::__core::collections::vec_deque","A by-value VecDeque iterator",null,null],[11,"next_back","collections::vec_deque","",72,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"drop","","",72,null],[3,"Drain","bitflags::__core::collections::vec_deque","A draining VecDeque iterator",null,null],[0,"btree_set","bitflags::__core::collections","",null,null],[11,"next","collections::btree::set","",73,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"clone","","",73,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[3,"SymmetricDifference","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[11,"fmt","collections::btree::set","",74,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"btreeset"}}],[11,"extend","","",74,null],[11,"extend","","",74,null],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",74,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",74,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",74,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",74,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",74,null],[11,"contains","","Returns `true` if the set contains a value.",74,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",74,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",74,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",74,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",74,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",74,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",74,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",74,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",74,{"inputs":[],"output":{"name":"btreeset"}}],[11,"clone","","",74,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"hash","","",74,null],[11,"eq","","",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",74,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[3,"BTreeSet","bitflags::__core::collections::btree_set","A set based on a B-Tree.",null,null],[11,"next","collections::btree::set","",75,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[3,"Union","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set union (in-order).",null,null],[11,"next","collections::btree::set","",76,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"clone","","",76,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[3,"Difference","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set difference (in-order).",null,null],[11,"len","collections::btree::set","",77,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next_back","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"clone","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::btree_set","An iterator over a BTreeSet&#39;s items.",null,null],[11,"next_back","collections::btree::set","",78,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[3,"Range","bitflags::__core::collections::btree_set","An iterator over a sub-range of BTreeSet&#39;s items.",null,null],[11,"next","collections::btree::set","",79,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"clone","","",79,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[3,"Intersection","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set intersection (in-order).",null,null],[11,"len","collections::btree::set","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[3,"IntoIter","bitflags::__core::collections::btree_set","An owning iterator over a BTreeSet&#39;s items.",null,null],[3,"BinaryHeap","bitflags::__core::collections","A priority queue implemented with a binary heap.",null,null],[11,"iter","collections::btree::map","Gets an iterator over the entries of the map, sorted by key.",81,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",81,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",81,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",81,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",81,{"inputs":[{"name":"btreemap"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",81,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",81,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"index","","",81,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"fmt","","",81,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",81,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"eq","","",81,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"default","","",81,{"inputs":[],"output":{"name":"btreemap"}}],[11,"hash","","",81,null],[11,"extend","","",81,null],[11,"extend","","",81,null],[11,"from_iter","","",81,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"into_iter","","",81,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",81,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",81,null],[11,"get","","Returns a reference to the value corresponding to the key.",81,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",81,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",81,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",81,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",81,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",81,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",81,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",81,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"clone","","",81,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"drop","","",81,null],[3,"BTreeMap","bitflags::__core::collections","A map based on a B-Tree.",null,null],[3,"HashMap","","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[11,"clone","collections","",82,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"fmt","","",82,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"eq","","",82,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[4,"Bound","bitflags::__core::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",82,null],[13,"Excluded","","An exclusive bound.",82,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",82,null],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[0,"btree_map","","",null,null],[11,"key","collections::btree::map","Gets a reference to the key in the entry.",83,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",83,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",83,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",83,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",83,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",83,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[3,"OccupiedEntry","bitflags::__core::collections::btree_map","An occupied Entry.",null,null],[11,"or_insert","collections::btree::map","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",84,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",84,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[4,"Entry","bitflags::__core::collections::btree_map","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",84,null],[13,"Occupied","","An occupied Entry",84,null],[11,"len","collections::btree::map","",85,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next_back","","",85,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",85,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[3,"IterMut","bitflags::__core::collections::btree_map","A mutable iterator over a BTreeMap&#39;s entries.",null,null],[11,"key","collections::btree::map","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",86,{"inputs":[{"name":"vacantentry"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",86,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[3,"VacantEntry","bitflags::__core::collections::btree_map","A vacant Entry.",null,null],[11,"clone","collections::btree::map","",87,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next_back","","",87,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",87,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[3,"Range","bitflags::__core::collections::btree_map","An iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[11,"clone","collections::btree::map","",88,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"len","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next_back","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[3,"Iter","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s entries.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[11,"next_back","collections::btree::map","",89,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next","","",89,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[3,"RangeMut","bitflags::__core::collections::btree_map","A mutable iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[11,"clone","collections::btree::map","",90,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"len","","",90,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next_back","","",90,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",90,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[3,"Values","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s values.",null,null],[11,"len","collections::btree::map","",91,{"inputs":[{"name":"valuesmut"}],"output":{"name":"usize"}}],[11,"next_back","","",91,{"inputs":[{"name":"valuesmut"}],"output":{"name":"option"}}],[11,"next","","",91,{"inputs":[{"name":"valuesmut"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[3,"ValuesMut","bitflags::__core::collections::btree_map","A mutable iterator over a BTreeMap&#39;s values.",null,null],[11,"clone","collections::btree::map","",92,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"len","","",92,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next_back","","",92,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",92,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[3,"Keys","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s keys.",null,null],[11,"len","collections::btree::map","",93,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",93,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",93,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"drop","","",93,null],[3,"IntoIter","bitflags::__core::collections::btree_map","An owning iterator over a BTreeMap&#39;s entries.",null,null],[3,"BTreeSet","bitflags::__core::collections","A set based on a B-Tree.",null,null],[0,"linked_list","","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","bitflags::__core::collections::linked_list","A doubly-linked list.",null,null],[11,"next_back","collections::linked_list","",94,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",94,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"clone","","",94,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::linked_list","An iterator over references to the items of a `LinkedList`.",null,null],[11,"insert_next","collections::linked_list","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",95,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",95,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",95,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",95,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[3,"IterMut","bitflags::__core::collections::linked_list","An iterator over mutable references to the items of a `LinkedList`.",null,null],[11,"next_back","collections::linked_list","",96,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"clone","","",96,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[3,"IntoIter","bitflags::__core::collections::linked_list","An iterator over the items of a `LinkedList`.",null,null],[11,"finalize","collections::linked_list","",97,null],[11,"pointer","","",97,null],[11,"make_place","","",97,{"inputs":[{"name":"frontplace"}],"output":{"name":"frontplace"}}],[3,"FrontPlace","bitflags::__core::collections::linked_list","A place for insertion at the front of a `LinkedList`.",null,null],[11,"finalize","collections::linked_list","",98,null],[11,"pointer","","",98,null],[11,"make_place","","",98,{"inputs":[{"name":"backplace"}],"output":{"name":"backplace"}}],[3,"BackPlace","bitflags::__core::collections::linked_list","A place for insertion at the back of a `LinkedList`.",null,null],[0,"env","bitflags::__core","Inspection and manipulation of the process&#39;s environment.",null,null],[5,"current_dir","bitflags::__core::env","Returns the current working directory as a `PathBuf`.",null,{"inputs":[],"output":{"name":"result"}}],[5,"set_current_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"next","std::env","",99,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[3,"Vars","bitflags::__core::env","An iterator over a snapshot of the environment variables of this process.",null,null],[11,"next","std::env","",100,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[3,"VarsOs","bitflags::__core::env","An iterator over a snapshot of the environment variables of this process.",null,null],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"varsos"}}],[5,"var","","Fetches the environment variable `key` from the current process.",null,{"inputs":[{"name":"k"}],"output":{"name":"result"}}],[5,"var_os","","Fetches the environment variable `key` from the current process, returning\n`None` if the variable isn&#39;t set.",null,{"inputs":[{"name":"k"}],"output":{"name":"option"}}],[11,"fmt","std::env","",101,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",101,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"eq","","",101,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"fmt","","",101,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"VarError","bitflags::__core::env","Possible errors from the `env::var` method.",null,null],[13,"NotPresent","","The specified environment variable was not present in the current\nprocess&#39;s environment.",101,null],[13,"NotUnicode","","The specified environment variable was found, but it did not contain\nvalid unicode data. The found data is returned as a payload of this\nvariant.",101,null],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running\nprocess.",null,null],[5,"remove_var","","Removes an environment variable from the environment of the currently running process.",null,null],[11,"next","std::env","",102,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[3,"SplitPaths","bitflags::__core::env","An iterator over `PathBuf` instances for parsing an environment variable\naccording to platform-specific conventions.",null,null],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"t"}],"output":{"name":"splitpaths"}}],[11,"fmt","std::env","",103,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",103,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"fmt","","",103,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"JoinPathsError","bitflags::__core::env","Error type returned from `std::env::join_paths` when paths fail to be\njoined.",null,null],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"home_dir","","Returns the path of the current user&#39;s home directory if known.",null,{"inputs":[],"output":{"name":"option"}}],[5,"temp_dir","","Returns the path of a temporary directory.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"current_exe","","Returns the full filesystem path of the current running executable.",null,{"inputs":[],"output":{"name":"result"}}],[11,"next","std::env","",104,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"len","","",104,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[3,"Args","bitflags::__core::env","An iterator over the arguments of a process, yielding a `String` value\nfor each argument.",null,null],[11,"len","std::env","",105,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"next","","",105,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[3,"ArgsOs","bitflags::__core::env","An iterator over the arguments of a process, yielding an `OsString` value\nfor each argument.",null,null],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"args"}}],[5,"args_os","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"argsos"}}],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","bitflags::__core::env::consts","A string describing the architecture of the CPU that is currently\nin use.",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use.\nExample value is `linux`.",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform. Example value is `lib`.",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform. Example value is `.so`.",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot. Example value is `so`.",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform. Example value is `.exe`.",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform. Example value is `exe`.",null,null],[0,"ffi","bitflags::__core","Utilities related to FFI bindings.",null,null],[11,"clone","std::ffi::c_str","",106,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"eq","","",106,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"fmt","","",106,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"NulError","bitflags::__core::ffi","An error returned from `CString::new` to indicate that a nul byte was found\nin the vector provided.",null,null],[11,"clone","std::ffi::c_str","",107,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"eq","","",107,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IntoStringError","bitflags::__core::ffi","An error returned from `CString::into_string` to indicate that a UTF-8 error\nwas encountered during the conversion.",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is\ncheaply inter-convertible with Rust strings.",null,null],[11,"hash","std::ffi::c_str","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",108,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",108,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"as_ref","","",108,{"inputs":[{"name":"cstr"}],"output":{"name":"cstr"}}],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",108,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",108,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",108,null],[11,"as_ptr","","Returns the inner pointer to this C string.",108,null],[11,"to_bytes","","Converts this C string to a byte slice.",108,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",108,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",108,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",108,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[3,"CStr","bitflags::__core::ffi","Representation of a borrowed C string.",null,null],[11,"eq","std::ffi::c_str","",109,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",109,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",109,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",109,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",109,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",109,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",109,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",109,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",109,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",109,null],[11,"cmp","","",109,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"hash","","",109,null],[11,"deref","","",109,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"clone","","",109,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[3,"CString","bitflags::__core::ffi","A type representing an owned C-compatible string",null,null],[3,"OsStr","","Slices into OS strings (see `OsString`).",null,null],[0,"fs","bitflags::__core","Filesystem manipulation operations.",null,null],[3,"File","bitflags::__core::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the `ReadDir` iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","An structure representing a type of file with accessors for each file type.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file,\ndirectory, etc.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if\n`to` already exists.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components\nnormalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they\nare missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use\ncarefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[0,"io","bitflags::__core","Traits, helpers, and type definitions for core I/O functionality.",null,null],[0,"prelude","bitflags::__core::io","The I/O Prelude",null,null],[8,"Seek","bitflags::__core::io::prelude","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",110,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",111,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",111,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",111,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",111,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",111,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",111,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",111,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",111,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",111,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",112,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",112,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",112,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",112,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",112,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",113,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",113,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",113,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",113,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",113,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",113,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[8,"Read","bitflags::__core::io","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",111,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",111,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",111,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",111,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",111,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",111,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",111,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",111,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",111,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",112,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",112,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",112,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",112,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",112,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",110,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",114,null],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",114,null],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",114,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",113,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",113,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",113,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",113,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",113,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",113,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",115,null],[13,"Other","","Variant representing that an I/O error occurred.",115,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[3,"Empty","","A reader which is always at EOF.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[3,"Sink","","A writer which will move data into the void.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that\nhappened while writing out the buffer, and the buffered writer object\nwhich may be used to recover from the condition.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `&#39;\\n&#39;`) is detected.",null,null],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",116,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",116,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",116,null],[13,"ConnectionReset","","The connection was reset by the remote server.",116,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",116,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",116,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in\nuse elsewhere.",116,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not\nlocal.",116,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",116,null],[13,"AlreadyExists","","An entity already exists, often a file.",116,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was\nrequested to not occur.",116,null],[13,"InvalidInput","","A parameter was incorrect.",116,null],[13,"InvalidData","","Data not valid for the operation were encountered.",116,null],[13,"TimedOut","","The I/O operation&#39;s timeout expired, causing it to be canceled.",116,null],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",116,null],[13,"Interrupted","","This operation was interrupted.",116,null],[13,"Other","","Any I/O error not part of this list.",116,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an\n&quot;end of file&quot; was reached prematurely.",116,null],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Cursor","","A `Cursor` wraps another type and provides it with a\n[`Seek`](trait.Seek.html) implementation.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"BufReader","","The `BufReader` struct adds buffering to any reader.",null,null],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[6,"Result","","",null,null],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[0,"net","bitflags::__core","Networking primitives for TCP/UDP communication.",null,null],[4,"Shutdown","bitflags::__core::net","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",117,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",117,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",117,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[4,"SocketAddr","","Representation of a socket address for networking applications.",null,null],[13,"V4","","An IPv4 socket address which is a (ip, port) combination.",118,null],[13,"V6","","An IPv6 socket address",118,null],[4,"IpAddr","","An IP address, either an IPv4 or IPv6 address.",null,null],[13,"V4","","Representation of an IPv4 address.",119,null],[13,"V6","","Representation of an IPv6 address.",119,null],[3,"Ipv4Addr","","Representation of an IPv4 address.",null,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",120,null],[13,"LinkLocal","","",120,null],[13,"RealmLocal","","",120,null],[13,"AdminLocal","","",120,null],[13,"SiteLocal","","",120,null],[13,"OrganizationLocal","","",120,null],[13,"Global","","",120,null],[3,"TcpStream","","A structure which represents a TCP stream between a local socket and a\nremote socket.",null,null],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more\n`SocketAddr` values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond\nto.",121,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",121,{"inputs":[{"name":"tosocketaddrs"}],"output":{"name":"result"}}],[3,"Incoming","","An infinite iterator over the connections from a `TcpListener`.",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[3,"SocketAddrV4","","An IPv4 socket address which is a (ip, port) combination.",null,null],[3,"AddrParseError","","An error returned when parsing an IP address or a socket address.",null,null],[3,"TcpListener","","A structure representing a socket server.",null,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[0,"os","bitflags::__core","OS-specific functionality.",null,null],[0,"linux","bitflags::__core::os","Linux-specific definitions",null,null],[0,"raw","bitflags::__core::os::linux","Linux-specific raw type definitions",null,null],[6,"dev_t","bitflags::__core::os::linux::raw","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nlink_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"blksize_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",122,null],[12,"st_ino","","",122,null],[12,"st_nlink","","",122,null],[12,"st_mode","","",122,null],[12,"st_uid","","",122,null],[12,"st_gid","","",122,null],[12,"__pad0","","",122,null],[12,"st_rdev","","",122,null],[12,"st_size","","",122,null],[12,"st_blksize","","",122,null],[12,"st_blocks","","",122,null],[12,"st_atime","","",122,null],[12,"st_atime_nsec","","",122,null],[12,"st_mtime","","",122,null],[12,"st_mtime_nsec","","",122,null],[12,"st_ctime","","",122,null],[12,"st_ctime_nsec","","",122,null],[12,"__unused","","",122,null],[0,"fs","bitflags::__core::os::linux","",null,null],[8,"MetadataExt","bitflags::__core::os::linux::fs","OS-specific extension methods for `fs::Metadata`",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which contains\nthe raw information returned by the OS.",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"stat"}}],[10,"st_dev","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_ino","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_mode","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_nlink","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_uid","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_gid","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_rdev","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_size","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_atime","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_atime_nsec","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_mtime","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_mtime_nsec","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_ctime","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_ctime_nsec","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_blksize","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_blocks","","",123,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[0,"raw","bitflags::__core::os","Raw OS-specific types for the current platform/architecture",null,null],[6,"c_char","bitflags::__core::os::raw","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[0,"ext","bitflags::__core::os","Experimental extensions to `std` for Unix platforms.",null,null],[0,"io","bitflags::__core::os::ext","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","bitflags::__core::os::ext::io","",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",124,{"inputs":[{"name":"asrawfd"}],"output":{"name":"i32"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",125,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",126,{"inputs":[{"name":"intorawfd"}],"output":{"name":"i32"}}],[0,"ffi","bitflags::__core::os::ext","Unix-specific extension to the primitives in the `std::ffi` module",null,null],[8,"OsStringExt","bitflags::__core::os::ext::ffi","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",127,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",127,{"inputs":[{"name":"osstringext"}],"output":{"name":"vec"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",128,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",128,null],[0,"fs","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::fs` module.",null,null],[8,"PermissionsExt","bitflags::__core::os::ext::fs","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",129,{"inputs":[{"name":"permissionsext"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",129,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",129,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",130,{"inputs":[{"name":"openoptionsext"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",130,{"inputs":[{"name":"openoptionsext"},{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"ino","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"mode","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"nlink","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"uid","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"gid","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"rdev","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"size","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"atime","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"atime_nsec","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"blksize","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"blocks","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",132,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",132,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",132,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",132,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",133,{"inputs":[{"name":"direntryext"}],"output":{"name":"u64"}}],[5,"symlink","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"DirBuilderExt","","An extension trait for `fs::DirBuilder` for unix-specific options.",null,null],[10,"mode","","Sets the mode to create new directories with. This option defaults to\n0o777.",134,{"inputs":[{"name":"dirbuilderext"},{"name":"u32"}],"output":{"name":"self"}}],[0,"process","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::process` module.",null,null],[8,"CommandExt","bitflags::__core::os::ext::process","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",135,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",135,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",135,{"inputs":[{"name":"commandext"},{"name":"bool"}],"output":{"name":"command"}}],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",135,{"inputs":[{"name":"commandext"},{"name":"f"}],"output":{"name":"command"}}],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",135,{"inputs":[{"name":"commandext"}],"output":{"name":"error"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"signal","","If the process was terminated by a signal, returns that signal.",136,{"inputs":[{"name":"exitstatusext"}],"output":{"name":"option"}}],[0,"raw","bitflags::__core::os::ext","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","bitflags::__core::os::ext::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"off_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[6,"dev_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"ino_t","","",null,null],[6,"blksize_t","","",null,null],[0,"thread","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::thread` module.",null,null],[6,"RawPthread","bitflags::__core::os::ext::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",137,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",137,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[0,"net","bitflags::__core::os::ext","Unix-specific networking functionality",null,null],[3,"SocketAddr","bitflags::__core::os::ext::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a `UnixListener`.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[0,"prelude","bitflags::__core::os::ext","A prelude for conveniently writing platform-specific code.",null,null],[8,"DirEntryExt","bitflags::__core::os::ext::prelude","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",133,{"inputs":[{"name":"direntryext"}],"output":{"name":"u64"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",125,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[8,"OsStringExt","","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",127,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",127,{"inputs":[{"name":"osstringext"}],"output":{"name":"vec"}}],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",132,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",132,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",132,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",132,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",126,{"inputs":[{"name":"intorawfd"}],"output":{"name":"i32"}}],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",124,{"inputs":[{"name":"asrawfd"}],"output":{"name":"i32"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",128,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",128,null],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"signal","","If the process was terminated by a signal, returns that signal.",136,{"inputs":[{"name":"exitstatusext"}],"output":{"name":"option"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",130,{"inputs":[{"name":"openoptionsext"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",130,{"inputs":[{"name":"openoptionsext"},{"name":"i32"}],"output":{"name":"self"}}],[8,"CommandExt","","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",135,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",135,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",135,{"inputs":[{"name":"commandext"},{"name":"bool"}],"output":{"name":"command"}}],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",135,{"inputs":[{"name":"commandext"},{"name":"f"}],"output":{"name":"command"}}],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",135,{"inputs":[{"name":"commandext"}],"output":{"name":"error"}}],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",137,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",137,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",129,{"inputs":[{"name":"permissionsext"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",129,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",129,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[6,"RawFd","","",null,null],[8,"MetadataExt","","",null,null],[10,"dev","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"ino","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"mode","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"nlink","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"uid","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"gid","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"rdev","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"size","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"atime","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"atime_nsec","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"blksize","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"blocks","","",131,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[0,"panic","bitflags::__core","Panic support in the standard library",null,null],[5,"set_handler","bitflags::__core::panic","",null,null],[5,"take_handler","","",null,{"inputs":[],"output":{"name":"box"}}],[8,"UnwindSafe","","A marker trait which represents &quot;panic safe&quot; types in Rust.",null,null],[8,"RecoverSafe","","Deprecated, renamed to UnwindSafe",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference is considered\nrecover safe.",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is panic safe.",null,null],[12,"0","","",138,null],[3,"AssertRecoverSafe","","Deprecated, renamed to `AssertUnwindSafe`",null,null],[12,"0","","",139,null],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding panic if one occurs.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"recover","","Deprecated, renamed to `catch_unwind`",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"resume_unwind","","Triggers a panic without invoking the panic handler.",null,null],[5,"propagate","","Deprecated, use resume_unwind instead",null,null],[3,"PanicInfo","","A struct providing information about a panic.",null,null],[3,"Location","","A struct containing information about the location of a panic.",null,null],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,{"inputs":[],"output":{"name":"box"}}],[5,"set_hook","","Registers a custom panic hook, replacing any that was previously registered.",null,null],[0,"path","bitflags::__core","Cross-platform path manipulation.",null,null],[4,"Prefix","bitflags::__core::path","Path prefixes (Windows only).",null,null],[13,"Verbatim","","Prefix `\\\\?\\`, together with the given component immediately following it.",140,null],[13,"VerbatimUNC","","Prefix `\\\\?\\UNC\\`, with the &quot;server&quot; and &quot;share&quot; components following it.",140,null],[13,"VerbatimDisk","","Prefix like `\\\\?\\C:\\`, for the given drive letter",140,null],[13,"DeviceNS","","Prefix `\\\\.\\`, together with the given component immediately following it.",140,null],[13,"UNC","","Prefix `\\\\server\\share`, with the given &quot;server&quot; and &quot;share&quot; components.",140,null],[13,"Disk","","Prefix `C:` for the given disk drive.",140,null],[5,"is_separator","","Determines whether the character is one of the permitted path\nseparators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator for the current platform",null,null],[3,"PrefixComponent","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",null,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",141,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else",141,null],[13,"CurDir","","A reference to the current directory, i.e. `.`",141,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`",141,null],[13,"Normal","","A normal component, i.e. `a` and `b` in `a/b`",141,null],[3,"Components","","The core iterator giving the components of a path.",null,null],[3,"Iter","","An iterator over the components of a path, as `OsStr` slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to `String`).",null,null],[3,"Path","","A slice of a path (akin to `str`).",null,null],[3,"StripPrefixError","","An error returned from the `Path::strip_prefix` method indicating that the\nprefix was not found in `self`.",null,null],[3,"Display","","Helper struct for safely printing paths with `format!()` and `{}`",null,null],[0,"process","bitflags::__core","Working with processes.",null,null],[3,"Child","bitflags::__core::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child&#39;s stdin, if it has been captured",142,null],[12,"stdout","","The handle for reading from the child&#39;s stdout, if it has been captured",142,null],[12,"stderr","","The handle for reading from the child&#39;s stderr, if it has been captured",142,null],[3,"ChildStdin","","A handle to a child process&#39;s stdin",null,null],[3,"ChildStdout","","A handle to a child process&#39;s stdout",null,null],[3,"ChildStderr","","A handle to a child process&#39;s stderr",null,null],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",143,null],[12,"stdout","","The data that the process wrote to stdout.",143,null],[12,"stderr","","The data that the process wrote to stderr.",143,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a child process.",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,null],[0,"sync","bitflags::__core","Useful synchronization primitives.",null,null],[0,"mpsc","bitflags::__core::sync","Multi-producer, single-consumer FIFO queue communication primitives.",null,null],[3,"Receiver","bitflags::__core::sync::mpsc","The receiving-half of Rust&#39;s channel type. This half can only be owned by\none thread",null,null],[3,"Iter","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"IntoIter","","An owning iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"Sender","","The sending-half of Rust&#39;s asynchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SyncSender","","The sending-half of Rust&#39;s synchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SendError","","An error returned from the `send` function on channels.",null,null],[12,"0","","",144,null],[3,"RecvError","","An error returned from the `recv` function on a `Receiver`.",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that `try_recv` could\nnot return data when called.",null,null],[13,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",145,null],[13,"Disconnected","","This channel&#39;s sending half has become disconnected, and there will\nnever be any more data received on this channel",145,null],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method.",null,null],[13,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",146,null],[13,"Disconnected","","This channel&#39;s receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",146,null],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves.",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel.",null,null],[3,"Select","","The &quot;receiver set&quot; of the select interface. This structure is used to manage\na set of receivers which are being selected over.",null,null],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver.",null,null],[6,"TryLockResult","bitflags::__core::sync","",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[11,"as_ref","alloc::arc","",147,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","","",147,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"from","","",147,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"hash","","",147,null],[11,"default","","",147,{"inputs":[],"output":{"name":"arc"}}],[11,"fmt","","",147,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",147,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",147,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",147,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",147,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",147,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",147,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",147,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",147,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"drop","","Drops the `Arc&lt;T&gt;`.",147,null],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",147,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",147,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"deref","","",147,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",147,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",147,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",147,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",147,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"new","","Constructs a new `Arc&lt;T&gt;`.",147,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",147,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[3,"Arc","bitflags::__core::sync","An atomically reference counted wrapper for shared state.",null,null],[3,"Barrier","","A barrier enables multiple threads to synchronize the beginning\nof some computation.",null,null],[3,"StaticCondvar","","Statically allocated condition variables.",null,null],[17,"MUTEX_INIT","","Static initialization of a mutex. This constant can be used to initialize\nother mutex constants.",null,null],[3,"Once","","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue.",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.",null,null],[3,"StaticRwLock","","Structure representing a statically allocated RwLock.",null,null],[3,"Condvar","","A Condition Variable",null,null],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the\n`try_lock` method.",null,null],[13,"Poisoned","","The lock could not be acquired because another thread failed while holding\nthe lock.",148,null],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would\notherwise block.",148,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when\ndropped.",null,null],[3,"MutexGuard","","An RAII implementation of a &quot;scoped lock&quot; of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.",null,null],[6,"LockResult","","",null,null],[17,"RW_LOCK_INIT","","Constant initialization for a statically-initialized rwlock.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when\ndropped.",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired.",null,null],[11,"new","alloc::arc","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",149,{"inputs":[],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",149,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",149,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",149,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"fmt","","",149,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Weak","bitflags::__core::sync","A weak pointer to an `Arc`.",null,null],[17,"CONDVAR_INIT","","Constant initializer for a statically allocated condition variable.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"StaticMutex","","The static mutex type is provided to allow for static allocation of mutexes.",null,null],[3,"BarrierWaitResult","","A result returned from wait.",null,null],[0,"atomic","","Atomic types",null,null],[11,"fmt","core::sync::atomic","",150,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicBool`.",150,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",150,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",150,null],[11,"swap","","Stores a value into the bool, returning the old value.",150,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",150,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",150,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",150,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",150,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",150,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",150,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",150,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"atomicbool"}}],[3,"AtomicBool","bitflags::__core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",151,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicIsize`.",151,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",151,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",151,null],[11,"swap","","Stores a value into the isize, returning the old value.",151,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",151,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",151,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `isize` if the current value is the same as the `current` value.",151,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",151,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",151,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",151,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",151,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",151,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"atomicisize"}}],[3,"AtomicIsize","bitflags::__core::sync::atomic","A signed integer type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",152,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicUsize`.",152,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",152,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",152,null],[11,"swap","","Stores a value into the usize, returning the old value.",152,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",152,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",152,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",152,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",152,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",152,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",152,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",152,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",152,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"default","","",152,{"inputs":[],"output":{"name":"atomicusize"}}],[3,"AtomicUsize","bitflags::__core::sync::atomic","An unsigned integer type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",153,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicPtr`.",153,null],[11,"load","","Loads a value from the pointer.",153,null],[11,"store","","Stores a value into the pointer.",153,null],[11,"swap","","Stores a value into the pointer, returning the old value.",153,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",153,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",153,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",153,null],[11,"default","","",153,{"inputs":[],"output":{"name":"atomicptr"}}],[3,"AtomicPtr","bitflags::__core::sync::atomic","A raw pointer type which can be safely shared between threads.",null,null],[11,"clone","core::sync::atomic","",154,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"fmt","","",154,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Ordering","bitflags::__core::sync::atomic","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",154,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",154,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",154,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",154,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",154,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[0,"time","bitflags::__core","Temporal quantification.",null,null],[3,"Instant","bitflags::__core::time","A measurement of a monotonically increasing clock.\n Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to\nexternal entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` method on `SystemTime`,\nused to learn about why how far in the opposite direction a timestamp lies.",null,null],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or\nlearn about where in time a `SystemTime` lies.",null,null],[3,"Duration","","A duration type to represent a span of time, typically used for system\ntimeouts.",null,null],[11,"next_u64","bitflags::__core::__rand","Return the next random u64.",155,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",155,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",155,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",155,null],[11,"gen","","Return a random value of a `Rand` type.",155,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",155,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",155,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",155,{"inputs":[{"name":"rng"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",155,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",155,null],[11,"shuffle","","Shuffle a mutable slice in place.",155,null],[0,"option","bitflags::__core","Optional values.",null,null],[4,"Option","bitflags::__core::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",22,null],[13,"Some","","Some value `T`",22,null],[11,"clone","core::option","",156,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"fmt","","",156,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::option","An iterator over a reference of the contained item in an Option.",null,null],[11,"next_back","core::option","",157,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",157,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"fmt","","",157,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::option","An iterator over a mutable reference of the contained item in an Option.",null,null],[11,"next_back","core::option","",158,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",158,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",158,null],[11,"clone","","",158,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"fmt","","",158,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IntoIter","bitflags::__core::option","An iterator over the item contained inside an Option.",null,null],[0,"boxed","bitflags::__core","A pointer type for heap allocation.",null,null],[17,"HEAP","bitflags::__core::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box&lt;FnOnce()&gt;` in a data structure, you should use\n`Box&lt;FnBox()&gt;`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box&lt;FnOnce()&gt;`\nclosures become directly usable.)",null,null],[16,"Output","","",159,null],[10,"call_box","","",159,null],[0,"marker","bitflags::__core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","bitflags::__core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[11,"default","core::marker","",160,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"clone","","",160,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"cmp","","",160,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",160,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"eq","","",160,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"hash","","",160,null],[11,"fmt","","",160,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"PhantomData","bitflags::__core::marker","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"i16","bitflags::__core","The 16-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i16","",null,null],[17,"MAX","","",null,null],[0,"raw","bitflags::__core","Contains struct definitions for the layout of compiler built-in types.",null,null],[11,"clone","core::raw","",161,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[3,"Slice","bitflags::__core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",161,null],[12,"len","","",161,null],[11,"clone","core::raw","",162,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[3,"TraitObject","bitflags::__core::raw","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",162,null],[12,"vtable","","",162,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",163,{"inputs":[{"name":"repr"}],"output":{"name":"t"}}],[0,"rc","bitflags::__core","Thread-local reference-counted boxes (the `Rc&lt;T&gt;` type).",null,null],[11,"default","alloc::rc","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",164,{"inputs":[],"output":{"name":"rc"}}],[11,"as_ref","","",164,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","","",164,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",164,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"drop","","Drops the `Rc&lt;T&gt;`.",164,null],[11,"deref","","",164,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"from","","",164,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"fmt","","",164,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",164,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",164,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",164,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",164,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",164,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",164,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",164,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"new","","Constructs a new `Rc&lt;T&gt;`.",164,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",164,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",164,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[3,"Rc","bitflags::__core::rc","A reference-counted pointer type over an immutable value.",null,null],[11,"clone","alloc::rc","Makes a clone of the `Weak&lt;T&gt;`.",165,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",165,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",165,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",165,{"inputs":[],"output":{"name":"weak"}}],[11,"fmt","","",165,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Weak","bitflags::__core::rc","A weak version of `Rc&lt;T&gt;`.",null,null],[0,"i32","bitflags::__core","The 32-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i32","",null,null],[17,"MAX","","",null,null],[0,"ptr","bitflags::__core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","bitflags::__core::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[11,"fmt","core::ptr","",166,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",166,null],[11,"new","","Creates a new `Unique`.",166,null],[11,"get","","Dereferences the content.",166,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",166,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[3,"Unique","bitflags::__core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[11,"fmt","core::ptr","",167,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",167,null],[11,"clone","","",167,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"new","","Creates a new `Shared`.",167,null],[3,"Shared","bitflags::__core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[0,"u8","bitflags::__core","The 8-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u8","",null,null],[17,"MAX","","",null,null],[0,"i8","bitflags::__core","The 8-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i8","",null,null],[17,"MAX","","",null,null],[0,"clone","bitflags::__core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","bitflags::__core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",15,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",15,null],[0,"cmp","bitflags::__core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","bitflags::__core::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",17,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",17,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[11,"partial_cmp","core::cmp","",168,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"cmp","","",168,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",168,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"clone","","",168,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"eq","","",168,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",168,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",168,null],[4,"Ordering","bitflags::__core::cmp","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",168,null],[13,"Equal","","An ordering where a compared value is equal [to another].",168,null],[13,"Greater","","An ordering where a compared value is greater [than another].",168,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",18,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",5,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",5,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",5,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",5,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",5,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"fmt","bitflags::__core","Utilities for formatting and printing strings",null,null],[5,"format","bitflags::__core::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",169,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",170,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","",null,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",171,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt","",172,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",172,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",172,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",172,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",172,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",172,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",172,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",172,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",172,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",172,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",172,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",172,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",172,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",172,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",172,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",172,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",172,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",172,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",172,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",172,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",172,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[3,"Formatter","bitflags::__core::fmt","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",173,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",174,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",174,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[3,"Arguments","bitflags::__core::fmt","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[11,"entry","core::fmt::builders","Adds a new entry to the list output.",175,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",175,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",175,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[3,"DebugList","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"field","core::fmt::builders","Adds a new field to the generated tuple struct output.",176,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",176,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[3,"DebugTuple","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"entry","core::fmt::builders","Adds a new entry to the set output.",177,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",177,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",177,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[3,"DebugSet","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"fmt","core::fmt","",178,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",178,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",178,{"inputs":[],"output":{"name":"error"}}],[11,"hash","","",178,null],[11,"cmp","","",178,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"eq","","",178,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",178,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"option"}}],[3,"Error","bitflags::__core::fmt","The error type which is returned from formatting a message into a stream.",null,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",179,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entry","core::fmt::builders","Adds a new entry to the map output.",180,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",180,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",180,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[3,"DebugMap","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",181,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",182,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",182,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[3,"DebugStruct","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",183,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",183,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",183,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",184,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",185,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",186,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"cell","bitflags::__core","Shareable mutable containers.",null,null],[11,"eq","core::cell","",187,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"default","","",187,{"inputs":[],"output":{"name":"cell"}}],[11,"clone","","",187,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"new","","Creates a new `Cell` containing the given value.",187,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",187,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",187,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",187,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"fmt","","",187,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Cell","bitflags::__core::cell","A mutable memory location that admits only `Copy` data.",null,null],[11,"eq","core::cell","",188,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"default","","",188,{"inputs":[],"output":{"name":"refcell"}}],[11,"clone","","",188,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"borrow_state","","Query the current state of this `RefCell`",188,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",188,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",188,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",188,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"new","","Creates a new `RefCell` containing `value`.",188,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",188,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"fmt","","",188,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RefCell","bitflags::__core::cell","A mutable memory location with dynamically checked borrow rules",null,null],[11,"clone","core::cell","",189,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"eq","","",189,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"fmt","","",189,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"BorrowState","bitflags::__core::cell","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",189,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",189,null],[13,"Unused","","There are no outstanding borrows on this cell.",189,null],[11,"clone","core::cell","Copies a `Ref`.",190,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",190,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",190,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",190,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"fmt","","",190,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Ref","bitflags::__core::cell","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[11,"deref_mut","core::cell","",191,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref","","",191,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",191,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",191,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",191,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RefMut","bitflags::__core::cell","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[11,"default","core::cell","",192,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",192,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",192,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",192,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"fmt","","",192,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"UnsafeCell","bitflags::__core::cell","The core primitive for interior mutability in Rust.",null,null],[0,"u16","bitflags::__core","The 16-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u16","",null,null],[17,"MAX","","",null,null],[0,"vec","bitflags::__core","A contiguous growable array type with heap-allocated contents, written\n`Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"Vec","bitflags::__core::vec","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[11,"drop","collections::vec","",193,null],[11,"clone","","",193,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next_back","","",193,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",193,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",193,null],[11,"count","","",193,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[3,"IntoIter","bitflags::__core::vec","An iterator that moves out of a vector.",null,null],[11,"drop","collections::vec","",194,null],[11,"next_back","","",194,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",194,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",194,null],[3,"Drain","bitflags::__core::vec","A draining iterator for `Vec&lt;T&gt;`.",null,null],[0,"default","bitflags::__core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","bitflags::__core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",19,{"inputs":[],"output":{"name":"self"}}],[0,"slice","bitflags::__core","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","bitflags::__core::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",2,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",2,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",2,null],[10,"connect","","",2,null],[11,"next","core::slice","",195,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",195,null],[11,"fmt","","",195,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitNMut","bitflags::__core::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[11,"clone","core::slice","",196,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",196,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",196,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",196,null],[11,"count","","",196,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",196,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",196,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",196,null],[11,"fmt","","",196,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::slice","Immutable slice iterator",null,null],[11,"next_back","core::slice","",197,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",197,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",197,null],[11,"clone","","",197,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",197,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Split","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[11,"next_back","core::slice","",198,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next","","",198,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",198,null],[11,"count","","",198,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",198,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",198,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",198,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"fmt","","",198,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Windows","bitflags::__core::slice","An iterator over overlapping subslices of length `size`.",null,null],[11,"next_back","core::slice","",199,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",199,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",199,null],[11,"count","","",199,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",199,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",199,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",199,null],[11,"fmt","","",199,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::slice","Mutable slice iterator.",null,null],[11,"next_back","core::slice","",200,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",200,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",200,null],[11,"count","","",200,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",200,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",200,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"clone","","",200,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"fmt","","",200,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chunks","bitflags::__core::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[11,"next_back","core::slice","",201,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",201,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",201,null],[11,"fmt","","",201,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitMut","bitflags::__core::slice","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[11,"next_back","core::slice","",202,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next","","",202,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",202,null],[11,"count","","",202,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",202,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",202,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","","",202,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ChunksMut","bitflags::__core::slice","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[11,"next","core::slice","",203,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",203,null],[11,"fmt","","",203,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitN","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[11,"next","core::slice","",204,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",204,null],[11,"fmt","","",204,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitNMut","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[11,"next","core::slice","",205,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",205,null],[11,"fmt","","",205,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitN","bitflags::__core::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[0,"i64","bitflags::__core","The 64-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i64","",null,null],[17,"MAX","","",null,null],[0,"any","bitflags::__core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[8,"Any","bitflags::__core::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",206,{"inputs":[{"name":"any"}],"output":{"name":"typeid"}}],[11,"fmt","core::any","",207,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",207,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",207,{"inputs":[],"output":{"name":"typeid"}}],[11,"clone","","",207,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"eq","","",207,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[3,"TypeId","bitflags::__core::any","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"hash","bitflags::__core","Generic hashing support.",null,null],[8,"Hash","bitflags::__core::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",208,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",208,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",209,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",209,null],[11,"write_u8","","Write a single `u8` into this hasher",209,null],[11,"write_u16","","Write a single `u16` into this hasher.",209,null],[11,"write_u32","","Write a single `u32` into this hasher.",209,null],[11,"write_u64","","Write a single `u64` into this hasher.",209,null],[11,"write_usize","","Write a single `usize` into this hasher.",209,null],[11,"write_i8","","Write a single `i8` into this hasher.",209,null],[11,"write_i16","","Write a single `i16` into this hasher.",209,null],[11,"write_i32","","Write a single `i32` into this hasher.",209,null],[11,"write_i64","","Write a single `i64` into this hasher.",209,null],[11,"write_isize","","Write a single `isize` into this hasher.",209,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",210,null],[10,"build_hasher","","Creates a new hasher.",210,null],[11,"default","core::hash","",211,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"clone","","",211,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"build_hasher","","",211,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"fmt","","",211,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"BuildHasherDefault","bitflags::__core::hash","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",212,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",212,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"fmt","","",212,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",212,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",212,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"write","","",212,null],[11,"finish","","",212,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[3,"SipHasher","bitflags::__core::hash","An implementation of SipHash 2-4.",null,null],[0,"str","bitflags::__core","Unicode string slices.",null,null],[6,"Utf16Units","bitflags::__core::str","",null,null],[11,"next","collections::str","",213,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",213,null],[11,"clone","","",213,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[3,"EncodeUtf16","bitflags::__core::str","External iterator for a string&#39;s UTF-16 code units.",null,null],[11,"next_back","core::str","",214,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",214,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",214,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",214,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Matches","bitflags::__core::str","Created with the method [`matches()`].",null,null],[11,"len","core::str","",215,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"next_back","","",215,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"next","","",215,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",215,null],[11,"count","","",215,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",215,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",215,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",215,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",215,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Bytes","bitflags::__core::str","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[11,"fmt","core::str","",216,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",216,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"eq","","",216,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",216,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[3,"ParseBoolError","bitflags::__core::str","An error returned when parsing a `bool` from a string fails.",null,null],[11,"next_back","core::str","",217,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",217,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next","","",217,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",217,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RMatchIndices","bitflags::__core::str","Created with the method [`rmatch_indices()`].",null,null],[11,"next_back","core::str","",218,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",218,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next","","",218,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",218,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RMatches","bitflags::__core::str","Created with the method [`rmatches()`].",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","bitflags::__core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",219,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",219,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",219,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",219,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",219,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",220,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",220,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",220,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",221,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",221,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",221,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",221,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",222,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",222,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",222,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"clone","core::str","",223,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","","",223,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharRange","bitflags::__core::str","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",223,null],[12,"next","","Index of the first byte of the next `char`",223,null],[11,"clone","core::str","",224,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",224,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"fmt","","",224,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitN","bitflags::__core::str","Created with the method [`splitn()`].",null,null],[11,"next_back","core::str","",225,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"next","","",225,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",225,null],[11,"clone","","",225,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"fmt","","",225,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Lines","bitflags::__core::str","Created with the method [`lines()`].",null,null],[11,"fmt","core::str","",226,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",226,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"eq","","",226,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"clone","","",226,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",226,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Utf8Error","bitflags::__core::str","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",227,null],[10,"from_str","","Parses a string `s` to return a value of this type.",227,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"next_back","core::str","",228,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",228,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next","","",228,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",228,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplit","bitflags::__core::str","Created with the method [`rsplit()`].",null,null],[11,"fmt","core::str","",229,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",229,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"next","","",229,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"clone","","",229,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[3,"LinesAny","bitflags::__core::str","Created with the method [`lines_any()`].",null,null],[11,"clone","core::str","",230,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"next","","",230,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"fmt","","",230,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitN","bitflags::__core::str","Created with the method [`rsplitn()`].",null,null],[11,"next_back","core::str","",231,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",231,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",231,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"fmt","","",231,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"MatchIndices","bitflags::__core::str","Created with the method [`match_indices()`].",null,null],[11,"next_back","core::str","",232,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",232,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",232,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",232,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitTerminator","bitflags::__core::str","Created with the method [`split_terminator()`].",null,null],[11,"as_str","core::str","View the underlying data as a subslice of the original data.",233,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"next_back","","",233,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"next","","",233,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",233,null],[11,"clone","","",233,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"fmt","","",233,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chars","bitflags::__core::str","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[11,"as_str","core::str","View the underlying data as a subslice of the original data.",234,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"next_back","","",234,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"next","","",234,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"clone","","",234,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"fmt","","",234,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharIndices","bitflags::__core::str","Iterator for a string&#39;s characters and their byte offsets.",null,null],[11,"next_back","rustc_unicode::u_str","",235,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next","","",235,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[3,"SplitWhitespace","bitflags::__core::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[11,"next_back","core::str","",236,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",236,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next","","",236,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",236,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitTerminator","bitflags::__core::str","Created with the method [`rsplit_terminator()`].",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[11,"next_back","core::str","",237,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",237,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",237,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",237,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Split","bitflags::__core::str","Created with the method [`split()`].",null,null],[0,"ops","bitflags::__core","Overloadable operators.",null,null],[8,"Drop","bitflags::__core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",6,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",238,null],[10,"add","","The method for the `+` operator",238,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",239,null],[10,"sub","","The method for the `-` operator",239,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",240,null],[10,"mul","","The method for the `*` operator",240,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",241,null],[10,"div","","The method for the `/` operator",241,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",242,null],[10,"rem","","The method for the `%` operator",242,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",243,null],[10,"neg","","The method for the unary `-` operator",243,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",244,null],[10,"not","","The method for the unary `!` operator",244,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",245,null],[10,"bitand","","The method for the `&amp;` operator",245,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",246,null],[10,"bitor","","The method for the `|` operator",246,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",247,null],[10,"bitxor","","The method for the `^` operator",247,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",248,null],[10,"shl","","The method for the `&lt;&lt;` operator",248,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",249,null],[10,"shr","","The method for the `&gt;&gt;` operator",249,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",250,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",251,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",252,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",253,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",254,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",255,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",256,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",257,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",258,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",259,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",260,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",260,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",261,null],[11,"fmt","core::ops","",262,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",262,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"eq","","",262,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[3,"RangeFull","bitflags::__core::ops","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[11,"contains","core::ops","# Examples",263,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",263,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",263,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",263,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",263,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",263,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","","",263,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",263,null],[11,"next_back","","",263,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[3,"Range","bitflags::__core::ops","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",263,null],[12,"end","","The upper bound of the range (exclusive).",263,null],[11,"eq","core::ops","",264,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",264,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",264,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"contains","","# Examples",264,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",264,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",264,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","","",264,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[3,"RangeFrom","bitflags::__core::ops","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",264,null],[11,"fmt","core::ops","",265,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",265,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"eq","","",265,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",265,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"contains","","# Examples",265,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[3,"RangeTo","bitflags::__core::ops","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",265,null],[11,"contains","core::ops","# Examples",266,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"from","","",266,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",266,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",266,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"eq","","",266,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",266,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",266,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next_back","","",266,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",266,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",266,null],[4,"RangeInclusive","bitflags::__core::ops","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",266,null],[12,"at","bitflags::__core::ops::RangeInclusive","",266,null],[13,"NonEmpty","bitflags::__core::ops","Non-empty range (iteration will yield value(s))",266,null],[12,"start","bitflags::__core::ops::RangeInclusive","",266,null],[12,"end","","",266,null],[11,"clone","core::ops","",267,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"eq","","",267,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",267,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"contains","","# Examples",267,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",267,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RangeToInclusive","bitflags::__core::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",267,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",268,null],[10,"deref","","The method called to dereference a value",268,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",269,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",20,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",24,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",13,null],[10,"call_once","","This is called when the call operator is used.",13,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",270,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",271,null],[10,"make_place","","Creates a fresh place from `self`.",271,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",272,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",272,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",273,null],[16,"Place","","The place that will negotiate the storage of the data.",273,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",273,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",274,{"inputs":[],"output":{"name":"self"}}],[0,"result","bitflags::__core","Error handling with the `Result` type.",null,null],[4,"Result","bitflags::__core::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",11,null],[13,"Err","","Contains the error value",11,null],[11,"clone","core::result","",275,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",275,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",275,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",275,null],[11,"fmt","","",275,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::result","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[11,"next_back","core::result","",276,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",276,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",276,null],[11,"fmt","","",276,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::result","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[11,"next_back","core::result","",277,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",277,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",277,null],[11,"fmt","","",277,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IntoIter","bitflags::__core::result","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"iter","bitflags::__core","Composable external iteration.",null,null],[8,"Iterator","bitflags::__core::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",7,null],[10,"next","","Advances the iterator and returns the next value.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",7,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",7,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",7,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",7,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",7,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",7,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",7,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",7,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",7,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",7,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",7,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",7,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",7,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",278,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",3,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",3,null],[10,"into_iter","","Creates an iterator from a value.",3,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",8,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",23,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",9,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[11,"next_back","core::iter","",279,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"next","","",279,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",279,null],[11,"clone","","",279,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"fmt","","",279,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Rev","bitflags::__core::iter","An double-ended iterator with the direction inverted.",null,null],[11,"next_back","core::iter","",280,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"next","","",280,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",280,null],[11,"clone","","",280,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"fmt","","",280,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Cloned","bitflags::__core::iter","An iterator that clones the elements of an underlying iterator.",null,null],[11,"clone","core::iter","",281,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"fmt","","",281,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",281,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",281,null],[3,"Cycle","bitflags::__core::iter","An iterator that repeats endlessly.",null,null],[11,"next_back","core::iter","",282,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"next","","",282,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",282,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",282,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",282,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",282,null],[11,"clone","","",282,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"fmt","","",282,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chain","bitflags::__core::iter","An iterator that strings two iterators together.",null,null],[11,"next_back","core::iter","",283,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"next","","",283,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",283,null],[11,"clone","","",283,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"fmt","","",283,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Zip","bitflags::__core::iter","An iterator that iterates two other iterators simultaneously.",null,null],[11,"next_back","core::iter","",284,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"next","","",284,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",284,null],[11,"fmt","","",284,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",284,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[3,"Map","bitflags::__core::iter","An iterator that maps the values of `iter` with `f`.",null,null],[11,"clone","core::iter","",285,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next_back","","",285,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"next","","",285,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",285,null],[11,"fmt","","",285,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Filter","bitflags::__core::iter","An iterator that filters the elements of `iter` with `predicate`.",null,null],[11,"next_back","core::iter","",286,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"next","","",286,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",286,null],[11,"fmt","","",286,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",286,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[3,"FilterMap","bitflags::__core::iter","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[11,"fmt","core::iter","",287,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",287,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",287,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",287,null],[11,"nth","","",287,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",287,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",287,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[3,"Enumerate","bitflags::__core::iter","An iterator that yields the current count and the element during iteration.",null,null],[11,"peek","core::iter","Returns a reference to the next() value without advancing the iterator.",288,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",288,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"next","","",288,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",288,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",288,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",288,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",288,null],[11,"clone","","",288,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"fmt","","",288,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Peekable","bitflags::__core::iter","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[11,"next","core::iter","",289,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",289,null],[11,"fmt","","",289,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",289,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[3,"SkipWhile","bitflags::__core::iter","An iterator that rejects elements while `predicate` is true.",null,null],[11,"next","core::iter","",290,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",290,null],[11,"fmt","","",290,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",290,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[3,"TakeWhile","bitflags::__core::iter","An iterator that only accepts elements while `predicate` is true.",null,null],[11,"fmt","core::iter","",291,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",291,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"next","","",291,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",291,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",291,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",291,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",291,null],[11,"clone","","",291,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[3,"Skip","bitflags::__core::iter","An iterator that skips over `n` elements of `iter`.",null,null],[11,"next","core::iter","",292,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",292,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",292,null],[11,"clone","","",292,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"fmt","","",292,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Take","bitflags::__core::iter","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[11,"next","core::iter","",293,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",293,null],[11,"fmt","","",293,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",293,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[3,"Scan","bitflags::__core::iter","An iterator to maintain state while iterating another iterator.",null,null],[11,"clone","core::iter","",294,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next_back","","",294,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"next","","",294,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",294,null],[11,"fmt","","",294,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"FlatMap","bitflags::__core::iter","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[11,"fmt","core::iter","",295,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",295,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"next","","",295,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",295,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",295,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",295,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",295,null],[11,"clone","","",295,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[3,"Fuse","bitflags::__core::iter","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[11,"next_back","core::iter","",296,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",296,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"fmt","","",296,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",296,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",296,null],[3,"Inspect","bitflags::__core::iter","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",297,{"inputs":[{"name":"step"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",297,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"clone","core::iter","",298,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"fmt","","",298,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",298,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",298,null],[11,"next","","",298,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",298,null],[11,"next","","",298,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",298,null],[3,"StepBy","bitflags::__core::iter","An adapter for stepping range iterators by a custom amount.",null,null],[11,"next_back","core::iter","",299,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",299,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",299,null],[11,"clone","","",299,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"fmt","","",299,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Repeat","bitflags::__core::iter","An iterator that repeats an element endlessly.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[11,"default","core::iter","",300,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",300,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"len","","",300,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"next_back","","",300,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"next","","",300,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",300,null],[11,"fmt","","",300,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Empty","bitflags::__core::iter","An iterator that yields nothing.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[11,"len","core::iter","",301,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"next_back","","",301,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"next","","",301,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",301,null],[11,"clone","","",301,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"fmt","","",301,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Once","bitflags::__core::iter","An iterator that yields an element exactly once.",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[0,"isize","bitflags::__core","The pointer-sized signed integer type.",null,null],[17,"MIN","bitflags::__core::isize","",null,null],[17,"MAX","","",null,null],[0,"u32","bitflags::__core","The 32-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u32","",null,null],[17,"MAX","","",null,null],[0,"convert","bitflags::__core","Traits for conversions between types.",null,null],[8,"AsRef","bitflags::__core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",21,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",14,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",16,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"borrow","bitflags::__core","A module for working with borrowed data.",null,null],[8,"ToOwned","bitflags::__core::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",12,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",12,null],[11,"as_ref","collections::borrow","",302,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","","",302,null],[11,"fmt","","",302,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",302,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","","",302,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"cmp","","",302,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"deref","","",302,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",302,null],[11,"into_owned","","Extracts the owned data.",302,null],[11,"clone","","",302,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"borrow","","",302,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"eq","","",302,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",302,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from_iter","","",302,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from","","",302,null],[11,"from","","",302,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"eq","","",302,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",302,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",302,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",302,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from","","",302,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"from","","",302,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"eq","","",302,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",302,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",302,null],[11,"ne","","",302,null],[11,"eq","","",302,null],[11,"ne","","",302,null],[4,"Cow","bitflags::__core::borrow","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",302,null],[13,"Owned","","Owned data.",302,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",303,{"inputs":[{"name":"borrow"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",304,{"inputs":[{"name":"borrowmut"}],"output":{"name":"borrowed"}}],[0,"string","bitflags::__core","A UTF-8 encoded, growable string.",null,null],[3,"String","bitflags::__core::string","A UTF-8 encoded, growable string.",null,null],[11,"fmt","collections::string","",305,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",305,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",305,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",305,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"FromUtf8Error","bitflags::__core::string","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[11,"fmt","collections::string","",306,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"FromUtf16Error","bitflags::__core::string","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[11,"fmt","collections::string","",307,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",307,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",307,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",307,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"ParseError","bitflags::__core::string","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",1,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[11,"next_back","collections::string","",308,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",308,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",308,null],[11,"drop","","",308,null],[3,"Drain","bitflags::__core::string","A draining iterator for `String`.",null,null],[0,"u64","bitflags::__core","The 64-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u64","",null,null],[17,"MAX","","",null,null],[0,"intrinsics","bitflags::__core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","bitflags::__core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"usize","bitflags::__core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","bitflags::__core::usize","",null,null],[17,"MAX","","",null,null],[0,"mem","bitflags::__core","Basic functions for dealing with memory.",null,null],[5,"forget","bitflags::__core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"char","bitflags::__core","A character type.",null,null],[3,"ToLowercase","bitflags::__core::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`,\nreturning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a\ndecoding error.",null,null],[11,"next","core::char","",309,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",309,null],[11,"clone","","",309,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"fmt","","",309,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EscapeUnicode","bitflags::__core::char","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[11,"next","core::char","",310,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",310,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",310,null],[11,"fmt","","",310,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EncodeUtf8","bitflags::__core::char","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[11,"next","core::char","",311,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",311,null],[11,"count","","",311,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",311,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",311,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","","",311,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"fmt","","",311,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EscapeDefault","bitflags::__core::char","An iterator that yields the literal escape code of a `char`.",null,null],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"next","core::char","",312,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",312,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",312,null],[11,"fmt","","",312,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EncodeUtf16","bitflags::__core::char","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[[8,"Error"],[8,"ToString"],[8,"SliceConcatExt"],[8,"IntoIterator"],[8,"From"],[8,"PartialOrd"],[8,"Drop"],[8,"Iterator"],[8,"Extend"],[8,"ExactSizeIterator"],[3,"Vec"],[4,"Result"],[8,"ToOwned"],[8,"FnOnce"],[8,"AsMut"],[8,"Clone"],[8,"Into"],[8,"PartialEq"],[8,"Ord"],[8,"Default"],[8,"Fn"],[8,"AsRef"],[4,"Option"],[8,"DoubleEndedIterator"],[8,"FnMut"],[3,"String"],[8,"AsciiExt"],[3,"EscapeDefault"],[3,"ParseIntError"],[8,"Zero"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[8,"One"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"KeyInner"],[4,"LocalKeyState"],[3,"Key"],[3,"Key"],[3,"LocalKey"],[3,"ScopedKey"],[3,"Iter"],[3,"Keys"],[3,"Drain"],[3,"HashMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"IterMut"],[3,"RandomState"],[3,"Values"],[3,"ValuesMut"],[3,"IntoIter"],[3,"Union"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"HashSet"],[3,"IntoIter"],[3,"Drain"],[3,"Difference"],[3,"Iter"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"LinkedList"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"SymmetricDifference"],[3,"BTreeSet"],[3,"Union"],[3,"Difference"],[3,"Iter"],[3,"Range"],[3,"Intersection"],[3,"IntoIter"],[3,"BTreeMap"],[4,"Bound"],[3,"OccupiedEntry"],[4,"Entry"],[3,"IterMut"],[3,"VacantEntry"],[3,"Range"],[3,"Iter"],[3,"RangeMut"],[3,"Values"],[3,"ValuesMut"],[3,"Keys"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"FrontPlace"],[3,"BackPlace"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"NulError"],[3,"IntoStringError"],[3,"CStr"],[3,"CString"],[8,"Seek"],[8,"Read"],[8,"Write"],[8,"BufRead"],[4,"SeekFrom"],[4,"CharsError"],[4,"ErrorKind"],[4,"Shutdown"],[4,"SocketAddr"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[8,"ToSocketAddrs"],[3,"stat"],[8,"MetadataExt"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[3,"AssertUnwindSafe"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"Component"],[3,"Child"],[3,"Output"],[3,"SendError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Arc"],[4,"TryLockError"],[3,"Weak"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[8,"Rng"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[8,"FnBox"],[3,"PhantomData"],[3,"Slice"],[3,"TraitObject"],[8,"Repr"],[3,"Rc"],[3,"Weak"],[3,"Unique"],[3,"Shared"],[4,"Ordering"],[8,"LowerExp"],[8,"LowerHex"],[8,"Debug"],[3,"Formatter"],[8,"Pointer"],[3,"Arguments"],[3,"DebugList"],[3,"DebugTuple"],[3,"DebugSet"],[3,"Error"],[8,"Display"],[3,"DebugMap"],[8,"UpperHex"],[3,"DebugStruct"],[8,"Write"],[8,"UpperExp"],[8,"Octal"],[8,"Binary"],[3,"Cell"],[3,"RefCell"],[4,"BorrowState"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"IntoIter"],[3,"Drain"],[3,"RSplitNMut"],[3,"Iter"],[3,"Split"],[3,"Windows"],[3,"IterMut"],[3,"Chunks"],[3,"SplitMut"],[3,"ChunksMut"],[3,"SplitN"],[3,"SplitNMut"],[3,"RSplitN"],[8,"Any"],[3,"TypeId"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"EncodeUtf16"],[3,"Matches"],[3,"Bytes"],[3,"ParseBoolError"],[3,"RMatchIndices"],[3,"RMatches"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharRange"],[3,"SplitN"],[3,"Lines"],[3,"Utf8Error"],[8,"FromStr"],[3,"RSplit"],[3,"LinesAny"],[3,"RSplitN"],[3,"MatchIndices"],[3,"SplitTerminator"],[3,"Chars"],[3,"CharIndices"],[3,"SplitWhitespace"],[3,"RSplitTerminator"],[3,"Split"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Deref"],[8,"DerefMut"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[8,"FromIterator"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[8,"Step"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"EscapeUnicode"],[3,"EncodeUtf8"],[3,"EscapeDefault"],[3,"EncodeUtf16"]]};
searchIndex["vecmath"] = {"doc":"A simple and generic library for vector math.","items":[[5,"col_mat3x2_mul_col","vecmath","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"col_mat3_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat4_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat2x3_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3x4_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat4_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat3x2_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"col_mat3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"col_mat4x3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"col_mat4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"row_mat2x3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"row_mat3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"row_mat3x4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"row_mat4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"mat2x3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix2x3"}}],[5,"mat3x2_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3x2"}}],[5,"mat3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3"}}],[5,"mat3x4_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3x4"}}],[5,"mat4x3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix4x3"}}],[5,"mat4_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix4"}}],[5,"vec2_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_sub","","Subtracts &#39;b&#39; from &#39;a&#39;.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_add","","Adds two vectors.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_add","","Adds two vectors.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_add","","Adds two vectors.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_cross","","Computes the cross product.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_cross","","Computes the cross product.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec2_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector2"},{"name":"t"}],"output":{"name":"vector2"}}],[5,"vec3_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector3"},{"name":"t"}],"output":{"name":"vector3"}}],[5,"vec4_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector4"},{"name":"t"}],"output":{"name":"vector4"}}],[5,"vec2_neg","","Negates the vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_neg","","Negates the vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_neg","","Negates the vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec3_dot_vec2","","Computes transformed vector component.",null,{"inputs":[{"name":"vector3"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec4_dot_vec3","","Computes transformed vector component.",null,{"inputs":[{"name":"vector4"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec3_dot_pos2","","Computes transformed position component.",null,{"inputs":[{"name":"vector3"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec4_dot_pos3","","Computes transformed position component.",null,{"inputs":[{"name":"vector4"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"row_mat2x3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"col_mat2x3_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"row_mat3x2_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3x2_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3x4_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3x4_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat4x3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat4x3_row","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat4_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat4_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"mat2x3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix3x2"}}],[5,"mat3x2_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix2x3"}}],[5,"mat3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix4x3"}}],[5,"mat4x3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix3x4"}}],[5,"mat4_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"col_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"row_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"row_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"row_mat2x3_transform_pos2","","Transforms a 2D position through matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3x2_transform_pos2","","Transforms a 2D position through matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3_transform_pos2","","Transforms a 2D position through row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3_transform_pos2","","Transforms a 2D position through column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3x4_transform_pos3","","Transforms a 3D position through matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_transform_pos3","","Transforms a 3D position through matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"row_mat2x3_transform_vec2","","Transforms a 2D vector through matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3x2_transform_vec2","","Transforms a 2D vector through matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3_transform_vec2","","Transforms a 2D vector through row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3_transform_vec2","","Transforms a 2D vector through column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3x4_transform_vec3","","Transforms a 3D vector through matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_transform_vec3","","Transforms a 3D vector through matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"mat2x3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"t"}}],[5,"mat3x2_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"t"}}],[5,"mat3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"t"}}],[5,"mat3x4_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"t"}}],[5,"mat4x3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"t"}}],[5,"mat4_det","","Computes the determinant of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"t"}}],[5,"mat2x3_inv_det","","Computes inverse determinant of a 2x3 matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"t"}}],[5,"mat3x2_inv_det","","Computes inverse determinant of a 3x2 matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"t"}}],[5,"mat3_inv_det","","Computes inverse determinant of a 3x3 matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"t"}}],[5,"mat3x4_inv_det","","Computes inverse determinant of a 3x4 matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"t"}}],[5,"mat4x3_inv_det","","Computes inverse determinant of a 4x3 matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"t"}}],[5,"mat4_inv_det","","Computes the inverse determinant of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"t"}}],[5,"mat2x3_inv","","Computes the inverse of a 2x3 matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_inv","","Computes the inverse of a 3x2 matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_inv","","Computes the inverse of a 3x3 matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_inv","","Computes the inverse of a 3x4 matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_inv","","Computes the inverse of a 4x3 matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_inv","","Computes the inverse of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[0,"traits","","Various useful traits",null,null],[6,"Vector2","","A 2D vector.",null,null],[6,"Vector3","","A 3D vector.",null,null],[6,"Vector4","","A 4D vector.",null,null],[6,"Matrix2x3","","A 2x3 matrix.",null,null],[6,"Matrix3x2","","A 3x2 matrix.",null,null],[6,"Matrix3","","A 3x3 matrix.",null,null],[6,"Matrix3x4","","A 3x4 matrix.",null,null],[6,"Matrix4x3","","A 4x3 matrix.",null,null],[6,"Matrix4","","A 4x4 matrix.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result&lt;T, byteorder::Error&gt;`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"write_uint","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["color_quant"] = {"doc":"# Color quantization library\nThis library provides a color quantizer based on the [NEUQUANT](http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\nquantization algorithm by Anthony Dekker.\n### Usage\n```\nlet data = vec![0; 40];\nlet nq = color_quant::NeuQuant::new(10, 256, &amp;data);\nlet indixes: Vec&lt;u8&gt; = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect();\nlet color_map = nq.color_map_rgba();\n```","items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,null],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,null],[11,"index_of","","Finds the best-matching index in the color map.",0,null],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample.",0,{"inputs":[{"name":"neuquant"}],"output":{"name":"vec"}}],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample.",0,{"inputs":[{"name":"neuquant"}],"output":{"name":"vec"}}]],"paths":[[3,"NeuQuant"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[0,"mem","","Memory management for concurrent data structures",null,null],[3,"CachePadded","crossbeam::mem","Pad `T` to the length of a cacheline.",null,null],[0,"epoch","","Epoch-based memory management",null,null],[3,"Owned","crossbeam::mem::epoch","Like `Box&lt;T&gt;`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&amp;&#39;a T`: a shared reference valid for lifetime `&#39;a`.",null,null],[3,"Atomic","","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[5,"pin","","Pin the current epoch.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"new","","Move `t` to a new heap allocation.",0,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"deref","","",0,{"inputs":[{"name":"owned"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"owned"}],"output":{"name":"t"}}],[11,"eq","","",1,{"inputs":[{"name":"shared"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"shared"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",1,{"inputs":[{"name":"shared"}],"output":{"name":"t"}}],[11,"null","","Create a new, null atomic pointer.",2,{"inputs":[],"output":{"name":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding\na shared reference to the pointer that was stored.",2,{"inputs":[{"name":"atomic"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the\ngiven memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the\ngiven memory ordering, immediatley acquiring a new `Shared` reference to\nthe previously-owned pointer if successful.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with\nthe given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data\nstructure and should be collected when sufficient epochs have passed.",3,{"inputs":[{"name":"guard"},{"name":"shared"}],"output":null}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",3,{"inputs":[{"name":"guard"}],"output":null}],[11,"drop","","",3,{"inputs":[{"name":"guard"}],"output":null}],[11,"zeroed","crossbeam::mem","A const fn equivalent to mem::zeroed().",4,{"inputs":[],"output":{"name":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",4,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",4,{"inputs":[{"name":"cachepadded"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"cachepadded"}],"output":{"name":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber&#39;s lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates &quot;segments&quot; (arrays of nodes)\nfor efficiency.",null,null],[11,"new","","",5,{"inputs":[],"output":{"name":"atomicoption"}}],[11,"swap_box","","",5,{"inputs":[{"name":"atomicoption"},{"name":"box"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"swap","","",5,{"inputs":[{"name":"atomicoption"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",5,{"inputs":[{"name":"atomicoption"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","","Create a new, empty queue.",6,{"inputs":[],"output":{"name":"msqueue"}}],[11,"push","","Add `t` to the back of the queue.",6,{"inputs":[{"name":"msqueue"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to dequeue from the front.",6,{"inputs":[{"name":"msqueue"}],"output":{"name":"option"}}],[11,"new","","Crate a new, empty stack.",7,{"inputs":[],"output":{"name":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",7,{"inputs":[{"name":"treiberstack"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to pop the top element of the stack.",7,{"inputs":[{"name":"treiberstack"}],"output":{"name":"option"}}],[11,"new","","Create a new, empty queue.",8,{"inputs":[],"output":{"name":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",8,{"inputs":[{"name":"segqueue"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to dequeue from the front.",8,{"inputs":[{"name":"segqueue"}],"output":{"name":"option"}}],[11,"defer","crossbeam","Schedule code to be executed when exiting the scope.",9,{"inputs":[{"name":"scope"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",9,{"inputs":[{"name":"scope"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"join","","Join the scoped thread, returning the result it produced.",10,{"inputs":[{"name":"scopedjoinhandle"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",10,{"inputs":[{"name":"scopedjoinhandle"}],"output":{"name":"thread"}}],[11,"drop","","",9,{"inputs":[{"name":"scope"}],"output":null}]],"paths":[[3,"Owned"],[3,"Shared"],[3,"Atomic"],[3,"Guard"],[3,"CachePadded"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[3,"Scope"],[3,"ScopedJoinHandle"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["linked_hash_map"] = {"doc":"A HashMap wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`&#39;s entries, with immutable references to the\nvalues.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`&#39;s entries, with mutable references to the\nvalues.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`&#39;s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`&#39;s values.",null,null],[11,"new","","Creates a linked hash map.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hash_state","","Creates an empty linked hash map with the given initial hash state.",0,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hash_state","","Creates an empty linked hash map with the given initial capacity and hash state.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The\nmap may reserve more space to avoid frequent allocations.",0,{"inputs":[{"name":"linkedhashmap"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible\nwhile maintaining the internal rules and possibly leaving some space in accordance with the\nresize policy.",0,{"inputs":[{"name":"linkedhashmap"}],"output":null}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is\nreturned.",0,{"inputs":[{"name":"linkedhashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",0,{"inputs":[{"name":"linkedhashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"linkedhashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",0,{"inputs":[{"name":"linkedhashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",0,{"inputs":[{"name":"linkedhashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",0,{"inputs":[{"name":"linkedhashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map of all key-value pairs.",0,{"inputs":[{"name":"linkedhashmap"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`\n# Examples\n```\nuse linked_hash_map::LinkedHashMap;",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"values"}}],[11,"index","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",0,{"inputs":[{"name":"linkedhashmap"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"t"}],"output":null}],[11,"extend","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"i"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",0,{"inputs":[{"name":"linkedhashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"linkedhashmap"},{"name":"h"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"linkedhashmap"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"self"}}],[11,"next","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"len","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"len","","",2,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"keys"}],"output":{"name":"self"}}],[11,"next","","",3,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"clone","","",4,{"inputs":[{"name":"values"}],"output":{"name":"self"}}],[11,"next","","",4,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"len","","",4,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}]],"paths":[[3,"LinkedHashMap"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"]]};
searchIndex["nodrop"] = {"doc":"","items":[[3,"NoDrop","nodrop","A type holding **T** that will not call its destructor on drop",null,null],[11,"new","","Create a new **NoDrop**.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"nodrop"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["glob"] = {"doc":"Support for matching file paths against Unix shell style patterns.","items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular\npattern.",null,null],[3,"GlobError","","A glob iteration error.",null,null],[3,"PatternError","","A pattern parsing error.",null,null],[12,"pos","","The approximate character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Pattern","","A compiled Unix shell style pattern.",null,null],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",null,null],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner.\nThis currently only considers upper/lower case relationships between\nASCII characters, but in future this might be extended to work with\nUnicode.",1,null],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on\nPosix) must be matched by a literal `/`, rather than by `*` or `?` or\n`[...]`",1,null],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.`\nwill not match unless the `.` appears literally in the pattern: `*`, `?`, `**`,\nor `[...]` will not match. This is useful because such files are\nconventionally considered hidden on Unix systems and it might be\ndesirable to skip them when listing files.",1,null],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"},{"name":"matchoptions"}],"output":{"name":"result"}}],[6,"GlobResult","","An alias for a glob iteration result.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"globerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","The Path that the error corresponds to.",2,{"inputs":[{"name":"globerror"}],"output":{"name":"path"}}],[11,"error","","The error in question.",2,{"inputs":[{"name":"globerror"}],"output":{"name":"error"}}],[11,"description","","",2,{"inputs":[{"name":"globerror"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"globerror"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"globerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"paths"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"patternerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"patternerror"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"patternerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"pattern"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"pattern"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"pattern"}],"output":{"name":"pattern"}}],[11,"fmt","","",4,{"inputs":[{"name":"pattern"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","This function compiles Unix shell style patterns.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"escape","","Escape metacharacters within the given string by surrounding them in\nbrackets. The resulting string will, when compiled into a `Pattern`,\nmatch the input string and nothing else.",4,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"matches","","Return if the given `str` matches this `Pattern` using the default\nmatch options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"pattern"},{"name":"path"}],"output":{"name":"bool"}}],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified\nmatch options.",4,{"inputs":[{"name":"pattern"},{"name":"str"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the specified match options.",4,{"inputs":[{"name":"pattern"},{"name":"path"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"as_str","","Access the original glob pattern.",4,{"inputs":[{"name":"pattern"}],"output":{"name":"str"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"matchoptions"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"matchoptions"}],"output":{"name":"matchoptions"}}],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used\nwhen calling functions that do not take an explicit `MatchOptions`\nparameter.",1,{"inputs":[],"output":{"name":"matchoptions"}}]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex["odds"] = {"doc":"Odds and ends — collection miscellania.","items":[[3,"Fix","odds","Fixpoint combinator for rust closures, generalized over the return type.",null,null],[12,"0","","",0,null],[5,"ref_eq","","Compare if **a** and **b** are equal *as pointers*.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"ptr_eq","","Compare if **a** and **b** are equal pointers.",null,null],[5,"raw_byte_repr","","Safe to use with any wholly initialized memory `ptr`",null,null],[5,"get_unchecked","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"get_unchecked_mut","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"debug_assert_unreachable","","Act as `debug_assert!` in debug mode, asserting that this point is not reached.",null,{"inputs":[],"output":null}],[5,"slice_unchecked","","Check slicing bounds in debug mode, otherwise just act as an unchecked\nslice call.",null,null],[5,"slice_unchecked_mut","","Check slicing bounds in debug mode, otherwise just act as an unchecked\nslice call.",null,null],[5,"ref_slice","","Create a length 1 slice out of a reference",null,null],[5,"ref_slice_mut","","Create a length 1 mutable slice out of a reference",null,null],[11,"start","core::ops","",1,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",2,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",3,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",3,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"call","odds","",0,{"inputs":[{"name":"fix"},{"name":"t"}],"output":{"name":"r"}}],[11,"clone","","",0,{"inputs":[{"name":"fix"}],"output":{"name":"self"}}],[0,"string","","Extensions to `&amp;str` and `String`",null,null],[3,"Prefixes","odds::string","Iterator of all non-empty prefixes",null,null],[3,"Suffixes","","Iterator of all non-empty suffixes",null,null],[3,"Substrings","","Iterator of all non-empty substrings",null,null],[8,"StrExt","","Extra methods for `str`",null,null],[10,"rep","","Repeat the string `n` times.",4,{"inputs":[{"name":"strext"},{"name":"usize"}],"output":{"name":"string"}}],[10,"append","","Requires `feature=&quot;std&quot;`",4,{"inputs":[{"name":"strext"},{"name":"str"}],"output":{"name":"string"}}],[10,"prefixes","","All non-empty prefixes",4,{"inputs":[{"name":"strext"}],"output":{"name":"prefixes"}}],[10,"suffixes","","All non-empty suffixes",4,{"inputs":[{"name":"strext"}],"output":{"name":"suffixes"}}],[10,"substrings","","Produce all non-empty substrings",4,{"inputs":[{"name":"strext"}],"output":{"name":"substrings"}}],[10,"is_acceptable_index","","Return `true` if `index` is acceptable for slicing the string.",4,{"inputs":[{"name":"strext"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"StringExt","","Extra methods for `String`",null,null],[10,"insert_str","","**Panics** if `index` is out of bounds.",5,{"inputs":[{"name":"stringext"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"prefixes"}],"output":{"name":"prefixes"}}],[11,"next","","",6,{"inputs":[{"name":"prefixes"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"suffixes"}],"output":{"name":"suffixes"}}],[11,"next","","",7,{"inputs":[{"name":"suffixes"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"substrings"}],"output":{"name":"substrings"}}],[11,"next","","",8,{"inputs":[{"name":"substrings"}],"output":{"name":"option"}}],[11,"insert_str","collections::string","**Panics** if `index` is out of bounds.",9,{"inputs":[{"name":"string"},{"name":"usize"},{"name":"str"}],"output":null}],[0,"vec","odds","Extensions to `Vec`",null,null],[8,"VecExt","odds::vec","Extra methods for `Vec&lt;T&gt;`",null,null],[10,"splice","","Remove elements in a range, and insert from an iterator in their place.",10,{"inputs":[{"name":"vecext"},{"name":"r"},{"name":"i"}],"output":null}],[10,"retain_mut","","Retains only the elements specified by the predicate.",10,{"inputs":[{"name":"vecext"},{"name":"f"}],"output":null}],[11,"splice","collections::vec","",11,{"inputs":[{"name":"vec"},{"name":"r"},{"name":"i"}],"output":null}],[11,"retain_mut","","",11,{"inputs":[{"name":"vec"},{"name":"f"}],"output":null}],[8,"IndexRange","odds","**IndexRange** is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}],[11,"start","","Start index (inclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}]],"paths":[[3,"Fix"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[8,"StrExt"],[8,"StringExt"],[3,"Prefixes"],[3,"Suffixes"],[3,"Substrings"],[3,"String"],[8,"VecExt"],[3,"Vec"],[8,"IndexRange"]]};
searchIndex["viewport"] = {"doc":"A library for storing viewport information","items":[[3,"Viewport","viewport","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels.\n```[x, y, width height]``` where ```(x, y)``` is lower left corner.",0,null],[12,"draw_size","","The size of frame buffer in pixels.",0,null],[12,"window_size","","The size of window in points.",0,null],[11,"clone","","",0,{"inputs":[{"name":"viewport"}],"output":{"name":"viewport"}}],[11,"abs_transform","","Computes absolute transform for 2D graphics,\nwhich uses a row major 2x3 matrix.\nThe origin is in the upper left corner of the viewport rectangle.\nThe x axis points to the right, and the y axis points down.\nThe units are in points (window coordinates).",0,null]],"paths":[[3,"Viewport"]]};
searchIndex["interpolation"] = {"doc":"Interpolation algorithms.","items":[[4,"EaseFunction","interpolation","",null,null],[13,"QuadraticIn","","",0,null],[13,"QuadraticOut","","",0,null],[13,"QuadraticInOut","","",0,null],[13,"CubicIn","","",0,null],[13,"CubicOut","","",0,null],[13,"CubicInOut","","",0,null],[13,"QuarticIn","","",0,null],[13,"QuarticOut","","",0,null],[13,"QuarticInOut","","",0,null],[13,"QuinticIn","","",0,null],[13,"QuinticOut","","",0,null],[13,"QuinticInOut","","",0,null],[13,"SineIn","","",0,null],[13,"SineOut","","",0,null],[13,"SineInOut","","",0,null],[13,"CircularIn","","",0,null],[13,"CircularOut","","",0,null],[13,"CircularInOut","","",0,null],[13,"ExponentialIn","","",0,null],[13,"ExponentialOut","","",0,null],[13,"ExponentialInOut","","",0,null],[13,"ElasticIn","","",0,null],[13,"ElasticOut","","",0,null],[13,"ElasticInOut","","",0,null],[13,"BackIn","","",0,null],[13,"BackOut","","",0,null],[13,"BackInOut","","",0,null],[13,"BounceIn","","",0,null],[13,"BounceOut","","",0,null],[13,"BounceInOut","","",0,null],[5,"lerp","","Performs linear interpolation.\nA linear interpolation consists of two states &#39;a&#39; and &#39;b&#39;.\nThe &#39;t&#39; variable is a factor between 0 and 1 that\ngives weight to &#39;a&#39; or &#39;b&#39;.\nWhen &#39;t&#39; is zero then &#39;a&#39; has full weight.\nWhen &#39;t&#39; is one then &#39;b&#39; has full weight.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"scalar"}],"output":{"name":"t"}}],[5,"quad_bez","","Performs quadratic beziér interpolation.\nThis is done by nesting linear interpolations.\nFor more information, see:",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"scalar"}],"output":{"name":"t"}}],[5,"cub_bez","","Performs cubic beziér interpolation.\nThis is done by interpolation between two quadratic beziér.\nFor more information, see:",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"scalar"}],"output":{"name":"t"}}],[11,"eq","","",0,{"inputs":[{"name":"easefunction"},{"name":"easefunction"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"easefunction"}],"output":{"name":"easefunction"}}],[8,"Ease","","",null,null],[10,"calc","","Calculate the eased value, normalized",1,{"inputs":[{"name":"ease"},{"name":"easefunction"}],"output":{"name":"self"}}],[10,"quadratic_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quadratic_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quadratic_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"cubic_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"cubic_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"cubic_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quartic_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quartic_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quartic_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quintic_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quintic_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"quintic_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"sine_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"sine_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"sine_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"circular_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"circular_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"circular_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"exponential_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"exponential_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"exponential_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"elastic_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"elastic_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"elastic_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"back_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"back_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"back_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"bounce_in","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"bounce_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[10,"bounce_in_out","","",1,{"inputs":[{"name":"ease"}],"output":{"name":"self"}}],[8,"Spatial","","Used for interpolation over spatial structures.",null,null],[16,"Scalar","","The scalar type.",2,null],[10,"add","","Add",2,{"inputs":[{"name":"spatial"},{"name":"self"}],"output":{"name":"self"}}],[10,"sub","","Subtract",2,{"inputs":[{"name":"spatial"},{"name":"self"}],"output":{"name":"self"}}],[10,"scale","","Scales with a scalar.",2,{"inputs":[{"name":"spatial"},{"name":"scalar"}],"output":{"name":"self"}}]],"paths":[[4,"EaseFunction"],[8,"Ease"],[8,"Spatial"]]};
searchIndex["shader_version"] = {"doc":"A helper library for detecting and picking compatible shaders.","items":[[3,"Shaders","shader_version","Shader picker.",null,null],[0,"opengl","","Models versions of OpenGL",null,null],[4,"OpenGL","shader_version::opengl","",null,null],[13,"V2_0","","",0,null],[13,"V2_1","","",0,null],[13,"V3_0","","",0,null],[13,"V3_1","","",0,null],[13,"V3_2","","",0,null],[13,"V3_3","","",0,null],[13,"V4_0","","",0,null],[13,"V4_1","","",0,null],[13,"V4_2","","",0,null],[13,"V4_3","","",0,null],[13,"V4_4","","",0,null],[13,"V4_5","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"opengl"},{"name":"opengl"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"opengl"},{"name":"opengl"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"opengl"},{"name":"opengl"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"opengl"}],"output":{"name":"opengl"}}],[11,"get_major_minor","","Gets the minor version of OpenGL.",0,null],[11,"to_glsl","","Gets GLSL version associated with OpenGL.",0,{"inputs":[{"name":"opengl"}],"output":{"name":"glsl"}}],[0,"glsl","shader_version","Models versions of OpenGL Shader Language (GLSL)",null,null],[4,"GLSL","shader_version::glsl","For OpenGL version 3.3 and above,\nthe GLSL version is the same as the OpenGL version.",null,null],[13,"V1_10","","",1,null],[13,"V1_20","","",1,null],[13,"V1_30","","",1,null],[13,"V1_40","","",1,null],[13,"V1_50","","",1,null],[13,"V3_30","","",1,null],[13,"V4_00","","",1,null],[13,"V4_10","","",1,null],[13,"V4_20","","",1,null],[13,"V4_30","","",1,null],[13,"V4_40","","",1,null],[13,"V4_50","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"glsl"},{"name":"glsl"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"glsl"},{"name":"glsl"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"glsl"},{"name":"glsl"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"glsl"}],"output":{"name":"glsl"}}],[11,"to_opengl","","Gets OpenGL version associated with GLSL.",1,{"inputs":[{"name":"glsl"}],"output":{"name":"opengl"}}],[11,"pick_shader","","",1,{"inputs":[{"name":"glsl"},{"name":"shaders"}],"output":{"name":"option"}}],[8,"PickShader","shader_version","Implemented by shader version enums.",null,null],[10,"pick_shader","","Pick shader.",2,{"inputs":[{"name":"pickshader"},{"name":"shaders"}],"output":{"name":"option"}}],[11,"new","","Creates a new shader picker.",3,{"inputs":[],"output":{"name":"self"}}],[11,"set","","Sets source for a shader version.",3,{"inputs":[{"name":"shaders"},{"name":"v"},{"name":"s"}],"output":{"name":"self"}}],[11,"get","","Get the closest shader to a shader version.",3,{"inputs":[{"name":"shaders"},{"name":"v"}],"output":{"name":"option"}}]],"paths":[[4,"OpenGL"],[4,"GLSL"],[8,"PickShader"],[3,"Shaders"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["float"] = {"doc":"Traits for generic floats in game programming","items":[[8,"Float","float","Convenience trait for floats.",null,null],[8,"Min","","Minimum value.",null,null],[10,"min","","Returns the minimum value of self or other.",0,{"inputs":[{"name":"min"},{"name":"self"}],"output":{"name":"self"}}],[8,"Max","","Maximum value.",null,null],[10,"max","","Returns the maximum value of self or other.",1,{"inputs":[{"name":"max"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signum","","The sign of the number.",null,null],[10,"signum","","Returns number representing the sign of self",2,{"inputs":[{"name":"signum"}],"output":{"name":"self"}}],[8,"Radians","","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",3,{"inputs":[],"output":{"name":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",3,{"inputs":[],"output":{"name":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",3,{"inputs":[],"output":{"name":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees.\nEquivalent to ```value * (π / 180)```.",3,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians.\nEquivalent to ```value * (180 / π)```.",3,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[8,"One","","Number 1.",null,null],[10,"one","","Returns 1.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Number 0.",null,null],[10,"zero","","Returns 0.",5,{"inputs":[],"output":{"name":"self"}}],[8,"Sqrt","","Square root.",null,null],[10,"sqrt","","Returns square root.",6,{"inputs":[{"name":"sqrt"}],"output":{"name":"self"}}],[8,"Trig","","Basic trigonometry functions",null,null],[10,"sin","","Returns sine of self",7,{"inputs":[{"name":"trig"}],"output":{"name":"self"}}],[10,"cos","","Returns cosine of self",7,{"inputs":[{"name":"trig"}],"output":{"name":"self"}}],[10,"tan","","Returns tangent of self",7,{"inputs":[{"name":"trig"}],"output":{"name":"self"}}],[8,"Cast","","Casts into another type.",null,null],[10,"cast","","Casts into other type.",8,{"inputs":[{"name":"cast"}],"output":{"name":"t"}}],[8,"FromPrimitive","","Trait for converting from different numeric types",null,null],[10,"from_f64","","from a f64",9,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[10,"from_f32","","from a f32",9,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[10,"from_isize","","from a isze",9,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[10,"from_u32","","from a u32",9,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"from_i32","","from a i32",9,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}]],"paths":[[8,"Min"],[8,"Max"],[8,"Signum"],[8,"Radians"],[8,"One"],[8,"Zero"],[8,"Sqrt"],[8,"Trig"],[8,"Cast"],[8,"FromPrimitive"]]};
searchIndex["texture"] = {"doc":"A generic library for textures.","items":[[3,"TextureSettings","texture","Texture creation parameters.",null,null],[4,"Format","","Texture format.",null,null],[13,"Rgba8","","`(red, green, blue, alpha)` with values 0-255.",0,null],[4,"Filter","","Sampling filter",null,null],[13,"Linear","","A Weighted Linear Blend",1,null],[13,"Nearest","","Nearest Texel",1,null],[0,"ops","","Image operations for textures.",null,null],[5,"flip_vertical","texture::ops","Flips the image vertically.",null,null],[5,"alpha_to_rgba8","","Converts from alpha to rgba8.",null,null],[8,"ImageSize","texture","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",2,null],[11,"get_width","","Gets the image width.",2,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[11,"get_height","","Gets the image height.",2,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[8,"CreateTexture","","Implemented by textures for creation.",null,null],[16,"Error","","The error when creating texture.",3,null],[10,"create","","Create texture from memory.",3,null],[8,"UpdateTexture","","Implemented by textures for updating.",null,null],[16,"Error","","The error when updating texture.",4,null],[10,"update","","Update texture.",4,null],[11,"new","","Create default settings.",5,{"inputs":[],"output":{"name":"texturesettings"}}],[11,"get_convert_gamma","","Gets whether to convert gamma, treated as sRGB color space.",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"bool"}}],[11,"set_convert_gamma","","Sets convert gamma.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":null}],[11,"convert_gamma","","Sets convert gamma.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_compress","","Gets wheter compress on the GPU.",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"bool"}}],[11,"set_compress","","Sets compress.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":null}],[11,"compress","","Sets compress.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_generate_mipmap","","Gets generate mipmap.",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"bool"}}],[11,"set_generate_mipmap","","Sets generate mipmap.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":null}],[11,"generate_mipmap","","Sets generate mipmap.",5,{"inputs":[{"name":"texturesettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_min","","Gets minify filter.",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"filter"}}],[11,"set_min","","Sets minify filter.",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":null}],[11,"min","","Sets minify filter.",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"self"}}],[11,"get_mag","","Gets magnify filter",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"filter"}}],[11,"set_mag","","Sets magnify filter",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":null}],[11,"mag","","Sets magnify filter",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"self"}}],[11,"get_mipmap","","Gets minify mipmap filter",5,{"inputs":[{"name":"texturesettings"}],"output":{"name":"filter"}}],[11,"set_mipmap","","Sets magnify mipmap filter, and sets generate_mipmap to true.",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":null}],[11,"mipmap","","Sets magnify mipmap filter, and sets generate_mipmap to true",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"self"}}],[11,"get_filter","","Returns the min and mag filter",5,null],[11,"set_filter","","Sets the min and mag filter",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":null}],[11,"filter","","Sets the min and mag filter",5,{"inputs":[{"name":"texturesettings"},{"name":"filter"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"fmt","","",1,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}]],"paths":[[4,"Format"],[4,"Filter"],[8,"ImageSize"],[8,"CreateTexture"],[8,"UpdateTexture"],[3,"TextureSettings"]]};
searchIndex["shaders_graphics2d"] = {"doc":"Shaders for 2D graphics backends.","items":[[0,"colored","shaders_graphics2d","Shaders for colored rendering.",null,null],[17,"VERTEX_GLSL_120","shaders_graphics2d::colored","Vertex shader for GLSL 1.20",null,null],[17,"VERTEX_GLSL_150_CORE","","Vertex shader for GLSL 1.50",null,null],[17,"FRAGMENT_GLSL_120","","Fragment shader for GLSL 1.20",null,null],[17,"FRAGMENT_GLSL_150_CORE","","Fragmentshader for GLSL 1.50",null,null],[0,"textured","shaders_graphics2d","Shaders for textured rendering.",null,null],[17,"VERTEX_GLSL_120","shaders_graphics2d::textured","Vertex shader for GLSL 1.20",null,null],[17,"VERTEX_GLSL_150_CORE","","Vertex shader for GLSL 1.50",null,null],[17,"FRAGMENT_GLSL_120","","Fragment shader for GLSL 1.20",null,null],[17,"FRAGMENT_GLSL_150_CORE","","Fragment shader for GLSL 1.50",null,null]],"paths":[]};
searchIndex["read_color"] = {"doc":"A simple library for reading hex colors.","items":[[5,"char_to_hex","read_color","Converts a character into a u8 value.",null,{"inputs":[{"name":"char"}],"output":{"name":"option"}}],[5,"hex","","Reads a hex value from an iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"hex_pair","","Reads a pair of hex values, joining them in value range 0-255.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"rgb","","Reads RGB colors from iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"rgba","","Reads RGBA colors from iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[5,"rgb_maybe_a","","Reads RGB with optional alpha from iterator of characters.",null,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}]],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[14,"lazy_static!","lazy_static","",null,null]],"paths":[]};
initSearch(searchIndex);
