initSidebarItems({"constant":[["RENDER_TARGET","The resource can be rendered into."],["SHADER_RESOURCE","The resource can be bound to the shader for reading."],["UNORDERED_ACCESS","The resource can be bound to the shader for writing."]],"enum":[["BufferRole","Role of the memory buffer. GLES doesn't chaning bind points for buffers."],["BufferUpdateError","An error happening on buffer updates."],["BufferUsage","A hint as to how this buffer will be used.The nature of these hints make them very implementation specific. Different drivers on different hardware will handle them differently. Only careful profiling will tell which is the best to use for a specific buffer."],["CombinedError","An error from creating textures with views at the same time."],["PipelineStateError","Error creating a PipelineState"],["Primitive","Describes what geometric primitives are created from vertex data."],["ResourceViewError","Error creating either a ShaderResourceView, or UnorderedAccessView."],["ShaderSet","A complete set of shaders to link a program."],["SliceKind","Source of vertex ordering for a slice"],["TargetViewError","Error creating either a RenderTargetView, or DepthStencilView."],["UniformValue","A value that can be uploaded to the device as a uniform."],["UpdateError","An error occuring in buffer/texture updates."]],"fn":[["cast_slice","Cast a slice from one POD type to another."]],"macro":[["gfx_constant_struct!",""],["gfx_format!",""],["gfx_pipeline!",""],["gfx_pipeline_base!",""],["gfx_pipeline_inner!",""],["gfx_vertex_struct!",""]],"mod":[["core",""],["format","Universal format specification. Applicable to textures, views, and vertex buffers."],["handle","Device resource handles"],["macros","Convenience macros Various helper macros."],["preset","State presets"],["pso","Pipeline states Pipeline State Objects - typed higher-level version.A typed PSO is defined by a macro (like `gfx_pipeline`) and generates 3 structures:  - \"init\" - containing all the information about resource types,    formats, layouts - everything needed for PSO initialization.  - \"meta\" - mapping the exact shader inputs to the PSO data. The exact    type of the PSO is `gfx::PipelineState<R, Meta>`.  - \"data\" - having the user-provided version of the run-time data    for PSO rendering, mostly consists of resource handles.A typed PSO is made of individual components, each is represented by the same-named field in all three generated structures. The submodules here define these components grouped by area."],["shade","Shaders Shader parameter handling."],["state","Fixed-function hardware state.Configures the primitive assembly (PA), rasterizer, and output merger (OM) blocks."],["tex","Texture creation and modification.\"Texture\" is an overloaded term. In gfx-rs, a texture consists of two separate pieces of information: image storage description (which is immutable for a single texture object), and image data. To actually use a texture, a \"sampler\" is needed, which provides a way of accessing the image data.  Image data consists of an array of \"texture elements\", or texels."],["traits","public re-exported traits"]],"struct":[["BufferInfo","An information block that is immutable and associated with each buffer"],["DomainShader",""],["Encoder","Graphics commands encoder."],["GeometryShader",""],["HullShader",""],["PixelShader",""],["ProgramInfo","Metadata about a program."],["Slice","Description of a subset of `Mesh` data to render.Only vertices between `start` and `end` are rendered. The source of the vertex data is dependent on the `kind` value.The `primitive` defines how the mesh contents are interpreted. For example,  `Point` typed vertex slice can be used to do shape blending, while still rendereing it as an indexed `TriangleList`."],["SubmitInfo","All the data needed simultaneously for submitting a command buffer for execution on a device."],["VertexShader",""]],"trait":[["CommandBuffer","An interface of the abstract command buffer. It collects commands in an efficient API-specific manner, to be ready for execution on the device."],["Device","An interface for performing draw calls using a specific graphics API"],["Factory",""],["Resources","Resources pertaining to a specific API."],["ToIndexSlice","A helper trait to build index slices from data."]],"type":[["InstanceCount",""],["InstanceOption",""],["VertexCount",""]]});