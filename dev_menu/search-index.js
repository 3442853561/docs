var searchIndex = {};
searchIndex['dev_menu'] = {"items":[[0,"","dev_menu","",null,null],[3,"Menu","","",null,null],[3,"ActionMenuItem","","",null,null],[3,"SliderMenuItem","","",null,null],[4,"MenuItem","","",null,null],[13,"ActionItem","","",0,null],[13,"SliderItem","","",0,null],[11,"new","","",1,{"inputs":[{"name":"menu"}],"output":{"name":"menu"}}],[11,"add_item","","",1,{"inputs":[{"name":"menu"},{"name":"menuitem"}],"output":null}],[11,"draw","","",1,{"inputs":[{"name":"menu"},{"name":"t"},{"name":"debugrenderer"}],"output":null}],[11,"event","","",1,{"inputs":[{"name":"menu"},{"name":"e"},{"name":"t"}],"output":null}],[11,"get_selected_item_mut","","",1,{"inputs":[{"name":"menu"}],"output":{"name":"menuitem"}}],[11,"draw","","",0,null],[11,"event","","",0,{"inputs":[{"name":"menuitem"},{"name":"e"},{"name":"t"}],"output":null}],[11,"action_item","","",0,{"inputs":[{"name":"menuitem"},{"name":"str"},{"name":"box"}],"output":{"name":"menuitem"}}],[11,"slider_item","","",0,null],[11,"draw","","",2,null],[11,"event","","",2,{"inputs":[{"name":"actionmenuitem"},{"name":"e"},{"name":"t"}],"output":null}],[11,"draw","","",3,null],[11,"event","","",3,{"inputs":[{"name":"slidermenuitem"},{"name":"e"},{"name":"t"}],"output":null}]],"paths":[[4,"MenuItem"],[3,"Menu"],[3,"ActionMenuItem"],[3,"SliderMenuItem"]]};
searchIndex['gfx_debug_draw'] = {"items":[[0,"","gfx_debug_draw","",null,null],[3,"DebugRenderer","","",null,null],[3,"BitmapFont","","",null,null],[12,"scale_w","","",0,null],[12,"scale_h","","",0,null],[12,"characters","","",0,null],[11,"new","","",1,null],[11,"draw_line","","",1,null],[11,"draw_text_on_screen","","",1,null],[11,"draw_text_at_position","","",1,null],[11,"render","","",1,null],[11,"resize","","",1,{"inputs":[{"name":"debugrenderer"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"create_buffer","gfx_debug_draw::line_renderer::__gfx_extern_crate_hack::gfx::traits","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"get_handle","","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"eq","gfx::render::batch","",4,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","","Create a new owned batch",5,{"inputs":[{"name":"ownedbatch"},{"name":"mesh"},{"name":"program"},{"name":"t"}],"output":{"name":"result"}}],[11,"get_data","","",5,{"inputs":[{"name":"ownedbatch"}],"output":{"name":"result"}}],[11,"fill_params","","",5,{"inputs":[{"name":"ownedbatch"},{"name":"paramstorage"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"fmt","","",6,{"inputs":[{"name":"id"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"ordering"}}],[11,"fmt","","",7,{"inputs":[{"name":"outofbounds"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"corebatch"}],"output":{"name":"corebatch"}}],[11,"fmt","","",8,{"inputs":[{"name":"corebatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"ordering"}}],[11,"cmp_mesh","","Compare meshes by Id",8,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"ordering"}}],[11,"cmp_program","","Compare programs by Id",8,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"ordering"}}],[11,"cmp_state","","Compare draw states by Id",8,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"ordering"}}],[11,"deref","","",9,{"inputs":[{"name":"refbatch"}],"output":{"name":"corebatch"}}],[11,"clone","","",9,{"inputs":[{"name":"refbatch"}],"output":{"name":"refbatch"}}],[11,"fmt","","",9,{"inputs":[{"name":"refbatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new empty `Context`",10,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"make_core","","Produce a new `CoreBatch`",10,{"inputs":[{"name":"context"},{"name":"program"},{"name":"mesh"},{"name":"drawstate"}],"output":{"name":"result"}}],[11,"make_batch","","Produce a new `RefBatch`",10,{"inputs":[{"name":"context"},{"name":"program"},{"name":"t"},{"name":"mesh"},{"name":"slice"},{"name":"drawstate"}],"output":{"name":"result"}}],[11,"bind","","Complete a CoreBatch temporarily by turning it into CoreBatchFull",10,null],[11,"get_data","","Get data from a batch in the format required for `Batch`",10,{"inputs":[{"name":"context"},{"name":"corebatch"},{"name":"slice"}],"output":{"name":"result"}}],[11,"get_aspect_ratio","gfx::render::ext::canvas","Get width/height aspect, needed for projections.",11,{"inputs":[{"name":"canvas"}],"output":{"name":"f32"}}],[11,"clear","","Clear the canvas.",11,null],[11,"blit_on","","Blit on this canvas from another `Output`.",11,null],[11,"blit_to","","Blit this canvas to another `Output`.",11,null],[11,"draw","","Draw a simple `Batch`.",11,{"inputs":[{"name":"canvas"},{"name":"b"}],"output":{"name":"result"}}],[11,"draw_instanced","","Draw an instanced `Batch`.",11,{"inputs":[{"name":"canvas"},{"name":"b"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"present","","Show what we've been drawing all this time.",11,null],[11,"deref","gfx::render::ext::device","",12,{"inputs":[{"name":"graphics"}],"output":{"name":"context"}}],[11,"deref_mut","","",12,{"inputs":[{"name":"graphics"}],"output":{"name":"context"}}],[11,"clear","","Clear the output with given `ClearData`.",12,null],[11,"draw","","Draw a `RefBatch` batch.",12,{"inputs":[{"name":"graphics"},{"name":"refbatch"},{"name":"o"}],"output":{"name":"result"}}],[11,"draw_core","","Draw a `CoreBatch` batch.",12,{"inputs":[{"name":"graphics"},{"name":"corebatch"},{"name":"slice"},{"name":"t"},{"name":"o"}],"output":{"name":"result"}}],[11,"end_frame","","Submit the internal command buffer and reset for the next frame.",12,null],[11,"cleanup","","Cleanup resources after the frame.",12,null],[11,"fmt","gfx::render::ext::shade","",13,{"inputs":[{"name":"programerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"programerror"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"programerror"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"programerror"}],"output":{"name":"programerror"}}],[11,"fmt","","",14,{"inputs":[{"name":"shadersource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"shadersource"},{"name":"shadersource"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"shadersource"},{"name":"shadersource"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"shadersource"}],"output":{"name":"shadersource"}}],[11,"empty","","Create an empty shader source. Useful for specifying the remaining\nstructure members upon construction.",14,{"inputs":[{"name":"shadersource"}],"output":{"name":"shadersource"}}],[11,"choose","","Pick one of the stored versions that is the highest supported by the device.",14,{"inputs":[{"name":"shadersource"},{"name":"shadermodel"}],"output":{"name":"result"}}],[11,"eq","gfx::render::mesh","",15,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"eq","","",16,{"inputs":[{"name":"mesh"},{"name":"mesh"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"mesh"},{"name":"mesh"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"mesh"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"mesh"}],"output":{"name":"mesh"}}],[11,"new","","Create a new mesh, which is a `TriangleList` with no attributes and `nv` vertices.",16,{"inputs":[{"name":"mesh"},{"name":"u32"}],"output":{"name":"mesh"}}],[11,"from_format","","Create a new `Mesh` from a struct that implements `VertexFormat` and a buffer.",16,{"inputs":[{"name":"mesh"},{"name":"buffer"},{"name":"u32"}],"output":{"name":"mesh"}}],[11,"from_format_instanced","","Create a new intanced `Mesh` given a vertex buffer and an instance buffer.",16,{"inputs":[{"name":"mesh"},{"name":"buffer"},{"name":"u32"},{"name":"buffer"}],"output":{"name":"mesh"}}],[11,"eq","","",17,{"inputs":[{"name":"slice"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"slice"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"eq","","",18,{"inputs":[{"name":"slicekind"},{"name":"slicekind"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"slicekind"},{"name":"slicekind"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"slicekind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"slicekind"}],"output":{"name":"slicekind"}}],[11,"to_slice","","Return a vertex slice of the whole mesh.",16,{"inputs":[{"name":"mesh"},{"name":"primitivetype"}],"output":{"name":"slice"}}],[11,"to_slice","gfx::device::handle","Return an index slice of the whole buffer.",19,{"inputs":[{"name":"indexbuffer"},{"name":"primitivetype"}],"output":{"name":"slice"}}],[11,"to_slice","","Return an index slice of the whole buffer.",19,{"inputs":[{"name":"indexbuffer"},{"name":"primitivetype"}],"output":{"name":"slice"}}],[11,"to_slice","","Return an index slice of the whole buffer.",19,{"inputs":[{"name":"indexbuffer"},{"name":"primitivetype"}],"output":{"name":"slice"}}],[11,"eq","gfx::render::mesh","",20,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",21,{"inputs":[{"name":"attributeiter"}],"output":{"name":"attributeiter"}}],[11,"next","","",21,{"inputs":[{"name":"attributeiter"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"link"}],"output":{"name":"link"}}],[11,"new","","Match mesh attributes against shader inputs, produce a mesh link.\nExposed to public to allow external `Batch` implementations to use it.",22,{"inputs":[{"name":"link"},{"name":"mesh"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"from_iter","","Construct a new link from an iterator over attribute indices.",22,{"inputs":[{"name":"link"},{"name":"i"}],"output":{"name":"result"}}],[11,"to_iter","","Convert to an iterator returning attribute indices",22,{"inputs":[{"name":"link"}],"output":{"name":"attributeiter"}}],[11,"fmt","gfx::render::shade","",23,{"inputs":[{"name":"parametererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"parametererror"},{"name":"parametererror"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"parametererror"},{"name":"parametererror"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"parametererror"}],"output":{"name":"parametererror"}}],[11,"create_link","core::option","",24,{"inputs":[{"name":"option"},{"name":"option"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"fill_params","","",24,null],[11,"create_link","gfx::render::shade","",25,{"inputs":[{"name":"paramdictionary"},{"name":"option"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"fill_params","","",25,null],[11,"fmt","gfx::render::target","",26,{"inputs":[{"name":"plane"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"plane"}],"output":{"name":"plane"}}],[11,"get_surface_info","","Get the surface info.",26,{"inputs":[{"name":"plane"}],"output":{"name":"surfaceinfo"}}],[11,"get_format","","Get surface/texture format.",26,{"inputs":[{"name":"plane"}],"output":{"name":"format"}}],[11,"get_size","","",26,null],[11,"get_colors","","",26,null],[11,"get_depth","","",26,{"inputs":[{"name":"plane"}],"output":{"name":"option"}}],[11,"get_stencil","","",26,{"inputs":[{"name":"plane"}],"output":{"name":"option"}}],[11,"fmt","","",27,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"empty","","Create an empty `Frame`.",27,{"inputs":[{"name":"frame"},{"name":"u16"},{"name":"u16"}],"output":{"name":"frame"}}],[11,"get_size","","",27,null],[11,"get_colors","","",27,null],[11,"get_depth","","",27,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"get_stencil","","",27,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"get_gamma","","",27,{"inputs":[{"name":"frame"}],"output":{"name":"gamma"}}],[11,"eq","gfx::render","",28,{"inputs":[{"name":"drawerror"},{"name":"drawerror"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"drawerror"},{"name":"drawerror"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"drawerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"drawerror"}],"output":{"name":"drawerror"}}],[11,"reset","","Reset all commands for the command buffer re-usal.",29,null],[11,"as_buffer","","Get command and data buffers to be submitted to the device.",29,null],[11,"clone_empty","","Clone the renderer shared data but ignore the commands.",29,{"inputs":[{"name":"renderer"}],"output":{"name":"renderer"}}],[11,"clear","","Clear the output with given `ClearData`.",29,null],[11,"draw","","Draw a `batch` into the specified output.",29,{"inputs":[{"name":"renderer"},{"name":"b"},{"name":"o"}],"output":{"name":"result"}}],[11,"draw_instanced","","Draw a `batch` multiple times using instancing.",29,{"inputs":[{"name":"renderer"},{"name":"b"},{"name":"u32"},{"name":"u32"},{"name":"o"}],"output":{"name":"result"}}],[11,"blit","","Blit one frame onto another.",29,null],[11,"update_buffer_vec","","Update a buffer with data from a vector.",29,null],[11,"update_buffer_struct","","Update a buffer with data from a single type.",29,null],[11,"update_texture","","Update the contents of a texture.",29,null],[11,"fmt","gfx::device::attrib","",30,{"inputs":[{"name":"signflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"signflag"}],"output":{"name":"signflag"}}],[11,"hash","","",30,null],[11,"partial_cmp","","",30,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"cmp","","",30,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"ordering"}}],[11,"fmt","","",31,{"inputs":[{"name":"intsubtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"intsubtype"}],"output":{"name":"intsubtype"}}],[11,"hash","","",31,null],[11,"partial_cmp","","",31,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"cmp","","",31,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"ordering"}}],[11,"fmt","","",32,{"inputs":[{"name":"intsize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"intsize"}],"output":{"name":"intsize"}}],[11,"hash","","",32,null],[11,"partial_cmp","","",32,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"cmp","","",32,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"ordering"}}],[11,"fmt","","",33,{"inputs":[{"name":"floatsubtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"floatsubtype"}],"output":{"name":"floatsubtype"}}],[11,"hash","","",33,null],[11,"partial_cmp","","",33,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"cmp","","",33,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"ordering"}}],[11,"fmt","","",34,{"inputs":[{"name":"floatsize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"floatsize"}],"output":{"name":"floatsize"}}],[11,"hash","","",34,null],[11,"partial_cmp","","",34,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"cmp","","",34,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"ordering"}}],[11,"fmt","","",35,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"hash","","",35,null],[11,"partial_cmp","","",35,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"option"}}],[11,"lt","","",35,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"le","","",35,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"gt","","",35,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ge","","",35,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"cmp","","",35,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"ordering"}}],[11,"is_compatible","","Check if the attribute is compatible with a particular shader type.",35,{"inputs":[{"name":"type"},{"name":"basetype"}],"output":{"name":"result"}}],[11,"get_size","","Return the size of the type in bytes.",35,{"inputs":[{"name":"type"}],"output":{"name":"u8"}}],[11,"fmt","","",36,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"hash","","",36,null],[11,"partial_cmp","","",36,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"cmp","","",36,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"fmt","gfx::device::draw","",37,{"inputs":[{"name":"datapointer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"datapointer"},{"name":"datapointer"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"datapointer"},{"name":"datapointer"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"datapointer"}],"output":{"name":"datapointer"}}],[11,"new","","Create a fresh new data buffer.",38,{"inputs":[{"name":"databuffer"}],"output":{"name":"databuffer"}}],[11,"clear","","Clear all the data but retain the allocated storage.",38,null],[11,"add_struct","","Copy a given structure into the buffer, return the offset and the size.",38,{"inputs":[{"name":"databuffer"},{"name":"t"}],"output":{"name":"datapointer"}}],[11,"add_vec","","Copy a given vector slice into the buffer",38,null],[11,"get_ref","","Return a reference to a stored data object.",38,null],[11,"fmt","","",39,{"inputs":[{"name":"access"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"access"}],"output":{"name":"access"}}],[11,"fmt","","",40,{"inputs":[{"name":"gamma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"gamma"},{"name":"gamma"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"gamma"},{"name":"gamma"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"fmt","","",41,{"inputs":[{"name":"target"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"target"}],"output":{"name":"target"}}],[11,"eq","gfx::device::handle","",42,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"buffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"buffer"}],"output":{"name":"buffer"}}],[11,"from_raw","","Create a type-safe Buffer from a RawBufferHandle",42,{"inputs":[{"name":"buffer"},{"name":"rawbuffer"}],"output":{"name":"buffer"}}],[11,"cast","","Cast the type this Buffer references",42,{"inputs":[{"name":"buffer"}],"output":{"name":"buffer"}}],[11,"raw","","Get the underlying raw Handle",42,{"inputs":[{"name":"buffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get the associated information about the buffer",42,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferinfo"}}],[11,"len","","Get the number of elements in the buffer.",42,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"eq","","",19,{"inputs":[{"name":"indexbuffer"},{"name":"indexbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"indexbuffer"},{"name":"indexbuffer"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"indexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indexbuffer"}}],[11,"from_raw","","Create a type-safe IndexBuffer from a RawBufferHandle",19,{"inputs":[{"name":"indexbuffer"},{"name":"rawbuffer"}],"output":{"name":"indexbuffer"}}],[11,"raw","","Get the underlying raw Handle",19,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get the associated information about the buffer",19,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"bufferinfo"}}],[11,"len","","Get the number of elements in the buffer.",19,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"usize"}}],[11,"eq","","",43,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"rawbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get raw buffer info",43,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"bufferinfo"}}],[11,"eq","","",44,{"inputs":[{"name":"arraybuffer"},{"name":"arraybuffer"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"arraybuffer"},{"name":"arraybuffer"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"arraybuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"arraybuffer"}],"output":{"name":"arraybuffer"}}],[11,"eq","","",45,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"shader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"shader"}],"output":{"name":"shader"}}],[11,"get_stage","","Get shader stage",45,{"inputs":[{"name":"shader"}],"output":{"name":"stage"}}],[11,"eq","","",46,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"program"}],"output":{"name":"program"}}],[11,"get_info","","Get program info",46,{"inputs":[{"name":"program"}],"output":{"name":"programinfo"}}],[11,"eq","","",47,{"inputs":[{"name":"framebuffer"},{"name":"framebuffer"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"framebuffer"},{"name":"framebuffer"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"framebuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"framebuffer"}],"output":{"name":"framebuffer"}}],[11,"eq","","",48,{"inputs":[{"name":"surface"},{"name":"surface"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"surface"},{"name":"surface"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"surface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"surface"}],"output":{"name":"surface"}}],[11,"get_info","","Get surface info",48,{"inputs":[{"name":"surface"}],"output":{"name":"surfaceinfo"}}],[11,"eq","","",49,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"texture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"texture"}],"output":{"name":"texture"}}],[11,"get_info","","Get texture info",49,{"inputs":[{"name":"texture"}],"output":{"name":"textureinfo"}}],[11,"eq","","",50,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"sampler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"sampler"}],"output":{"name":"sampler"}}],[11,"get_info","","Get sampler info",50,{"inputs":[{"name":"sampler"}],"output":{"name":"samplerinfo"}}],[11,"make_buffer","","",51,null],[11,"make_array_buffer","","",51,null],[11,"make_shader","","",51,null],[11,"make_program","","",51,null],[11,"make_frame_buffer","","",51,null],[11,"make_surface","","",51,null],[11,"make_texture","","",51,null],[11,"make_sampler","","",51,null],[11,"clean_with","","",51,null],[11,"new","","Create a new handle manager",51,{"inputs":[{"name":"manager"}],"output":{"name":"manager"}}],[11,"clear","","Clear all references",51,null],[11,"extend","","Extend with all references of another handle manager",51,null],[11,"count","","Count the total number of referenced resources",51,{"inputs":[{"name":"manager"}],"output":{"name":"usize"}}],[11,"ref_buffer","","Reference a buffer",51,null],[11,"ref_array_buffer","","Reference am array buffer",51,null],[11,"ref_shader","","Reference a shader",51,null],[11,"ref_program","","Reference a program",51,null],[11,"ref_frame_buffer","","Reference a frame buffer",51,null],[11,"ref_surface","","Reference a surface",51,null],[11,"ref_texture","","Reference a texture",51,null],[11,"ref_sampler","","Reference a sampler",51,null],[11,"deref","gfx::device::mapping","",52,null],[11,"drop","","",52,null],[11,"set","","Set a value in the buffer",53,null],[11,"drop","","",53,null],[11,"deref","","",54,null],[11,"deref_mut","","",54,null],[11,"drop","","",54,null],[11,"fmt","gfx::device::shade","",55,{"inputs":[{"name":"isarray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"isarray"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"isarray"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"isarray"}],"output":{"name":"isarray"}}],[11,"fmt","","",56,{"inputs":[{"name":"isshadow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"isshadow"},{"name":"isshadow"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"isshadow"},{"name":"isshadow"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"isshadow"}],"output":{"name":"isshadow"}}],[11,"fmt","","",57,{"inputs":[{"name":"ismultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"ismultisample"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"ismultisample"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"ismultisample"}],"output":{"name":"ismultisample"}}],[11,"fmt","","",58,{"inputs":[{"name":"isrect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"isrect"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"isrect"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"isrect"}],"output":{"name":"isrect"}}],[11,"fmt","","",59,{"inputs":[{"name":"matrixformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"matrixformat"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"matrixformat"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"matrixformat"}],"output":{"name":"matrixformat"}}],[11,"fmt","","",60,{"inputs":[{"name":"samplertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"samplertype"}],"output":{"name":"samplertype"}}],[11,"fmt","","",61,{"inputs":[{"name":"basetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"basetype"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"basetype"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"basetype"}],"output":{"name":"basetype"}}],[11,"fmt","","",62,{"inputs":[{"name":"containertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"containertype"}],"output":{"name":"containertype"}}],[11,"eq","","",63,{"inputs":[{"name":"stage"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"stage"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"stage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"stage"}],"output":{"name":"stage"}}],[11,"is_same_type","","Whether two `UniformValue`s have the same type.",64,{"inputs":[{"name":"uniformvalue"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"uniformvalue"}],"output":{"name":"uniformvalue"}}],[11,"fmt","","",64,{"inputs":[{"name":"uniformvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"fmt","","",66,{"inputs":[{"name":"uniformvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"uniformvar"},{"name":"uniformvar"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"uniformvar"},{"name":"uniformvar"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"uniformvar"}],"output":{"name":"uniformvar"}}],[11,"fmt","","",67,{"inputs":[{"name":"blockvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"blockvar"},{"name":"blockvar"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"blockvar"},{"name":"blockvar"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"blockvar"}],"output":{"name":"blockvar"}}],[11,"fmt","","",68,{"inputs":[{"name":"samplervar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"samplervar"}],"output":{"name":"samplervar"}}],[11,"fmt","","",69,{"inputs":[{"name":"programinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"programinfo"}],"output":{"name":"programinfo"}}],[11,"fmt","","",70,{"inputs":[{"name":"compatibilityerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"compatibilityerror"}],"output":{"name":"compatibilityerror"}}],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored\nin this variable.",66,{"inputs":[{"name":"uniformvar"},{"name":"uniformvalue"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"createshadererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"createshadererror"}],"output":{"name":"createshadererror"}}],[11,"fmt","","",72,{"inputs":[{"name":"shadermodel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"option"}}],[11,"lt","","",72,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"le","","",72,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"gt","","",72,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"ge","","",72,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"shadermodel"}],"output":{"name":"shadermodel"}}],[11,"to_number","","Return the shader model as a numeric value.",72,{"inputs":[{"name":"shadermodel"}],"output":{"name":"u8"}}],[11,"fmt","gfx::device::tex","",73,{"inputs":[{"name":"surfaceerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"surfaceerror"},{"name":"surfaceerror"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"surfaceerror"},{"name":"surfaceerror"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"surfaceerror"}],"output":{"name":"surfaceerror"}}],[11,"eq","","",74,{"inputs":[{"name":"textureerror"},{"name":"textureerror"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"textureerror"},{"name":"textureerror"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"textureerror"}],"output":{"name":"textureerror"}}],[11,"fmt","","",74,{"inputs":[{"name":"textureerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"aamode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"aamode"}],"output":{"name":"aamode"}}],[11,"hash","","",75,null],[11,"partial_cmp","","",75,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"option"}}],[11,"lt","","",75,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"le","","",75,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"gt","","",75,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ge","","",75,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"cmp","","",75,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"ordering"}}],[11,"fmt","","",76,{"inputs":[{"name":"components"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"hash","","",76,null],[11,"partial_cmp","","",76,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"lt","","",76,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"le","","",76,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"gt","","",76,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"ge","","",76,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"eq","","",76,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"cmp","","",76,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"fmt","","",77,{"inputs":[{"name":"compression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"compression"}],"output":{"name":"compression"}}],[11,"hash","","",77,null],[11,"partial_cmp","","",77,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"cmp","","",77,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"ordering"}}],[11,"fmt","","",78,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"hash","","",78,null],[11,"partial_cmp","","",78,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"option"}}],[11,"lt","","",78,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",78,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",78,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",78,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"cmp","","",78,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"get_components","","Extract the components format",78,{"inputs":[{"name":"format"}],"output":{"name":"option"}}],[11,"is_color","","Check if it's a color format.",78,{"inputs":[{"name":"format"}],"output":{"name":"bool"}}],[11,"has_depth","","Check if it has a depth component.",78,{"inputs":[{"name":"format"}],"output":{"name":"bool"}}],[11,"has_stencil","","Check if it has a stencil component.",78,{"inputs":[{"name":"format"}],"output":{"name":"bool"}}],[11,"is_compressed","","Check if it's a compressed format.",78,{"inputs":[{"name":"format"}],"output":{"name":"bool"}}],[11,"does_convert_gamma","","Check if it's a sRGB color space.",78,{"inputs":[{"name":"format"}],"output":{"name":"bool"}}],[11,"fmt","","",79,{"inputs":[{"name":"surfaceinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"surfaceinfo"}],"output":{"name":"surfaceinfo"}}],[11,"hash","","",79,null],[11,"partial_cmp","","",79,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"cmp","","",79,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"ordering"}}],[11,"fmt","","",80,{"inputs":[{"name":"filtermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"filtermethod"}],"output":{"name":"filtermethod"}}],[11,"hash","","",80,null],[11,"partial_cmp","","",80,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"option"}}],[11,"lt","","",80,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"le","","",80,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"gt","","",80,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ge","","",80,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"cmp","","",80,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"ordering"}}],[11,"fmt","","",81,{"inputs":[{"name":"texturekind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"texturekind"}],"output":{"name":"texturekind"}}],[11,"hash","","",81,null],[11,"partial_cmp","","",81,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"cmp","","",81,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"ordering"}}],[11,"fmt","","",82,{"inputs":[{"name":"cubeface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"cubeface"}],"output":{"name":"cubeface"}}],[11,"hash","","",82,null],[11,"partial_cmp","","",82,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"eq","","",82,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"cmp","","",82,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"ordering"}}],[11,"get_aa_mode","","Return the anti-aliasing mode of the texture",81,{"inputs":[{"name":"texturekind"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"textureinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"textureinfo"}],"output":{"name":"textureinfo"}}],[11,"hash","","",83,null],[11,"partial_cmp","","",83,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"cmp","","",83,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"ordering"}}],[11,"fmt","","",84,{"inputs":[{"name":"imageinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"imageinfo"}],"output":{"name":"imageinfo"}}],[11,"hash","","",84,null],[11,"partial_cmp","","",84,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"cmp","","",84,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"ordering"}}],[11,"default","","",84,{"inputs":[{"name":"imageinfo"}],"output":{"name":"imageinfo"}}],[11,"default","","",83,{"inputs":[{"name":"textureinfo"}],"output":{"name":"textureinfo"}}],[11,"new","","Create a new empty texture info.",83,{"inputs":[{"name":"textureinfo"}],"output":{"name":"textureinfo"}}],[11,"to_image_info","","Convert to a default ImageInfo that could be used\nto update the contents of the whole texture.",83,{"inputs":[{"name":"textureinfo"}],"output":{"name":"imageinfo"}}],[11,"to_surface_info","","Convert to a `SurfaceInfo`, used as a common denominator between\nsurfaces and textures.",83,{"inputs":[{"name":"textureinfo"}],"output":{"name":"surfaceinfo"}}],[11,"contains","","Check if given ImageInfo is a part of the texture.",83,{"inputs":[{"name":"textureinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"new","","Create a new `ImageInfo`, using default values.",84,{"inputs":[{"name":"imageinfo"}],"output":{"name":"imageinfo"}}],[11,"fmt","","",85,{"inputs":[{"name":"wrapmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"wrapmode"}],"output":{"name":"wrapmode"}}],[11,"hash","","",85,null],[11,"partial_cmp","","",85,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"cmp","","",85,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"ordering"}}],[11,"fmt","","",86,{"inputs":[{"name":"comparisonmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"comparisonmode"}],"output":{"name":"comparisonmode"}}],[11,"hash","","",86,null],[11,"partial_cmp","","",86,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"cmp","","",86,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"ordering"}}],[11,"fmt","","",87,{"inputs":[{"name":"samplerinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"samplerinfo"}],"output":{"name":"samplerinfo"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD\nmodifications.",87,{"inputs":[{"name":"samplerinfo"},{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[11,"fmt","gfx::device","",88,{"inputs":[{"name":"capabilities"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"capabilities"}],"output":{"name":"capabilities"}}],[11,"clone","","",89,{"inputs":[{"name":"mapaccess"}],"output":{"name":"mapaccess"}}],[11,"fmt","","",90,{"inputs":[{"name":"primitivetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"primitivetype"}],"output":{"name":"primitivetype"}}],[11,"eq","","",91,{"inputs":[{"name":"bufferrole"},{"name":"bufferrole"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"bufferrole"},{"name":"bufferrole"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"bufferrole"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"bufferrole"}],"output":{"name":"bufferrole"}}],[11,"eq","","",92,{"inputs":[{"name":"bufferusage"},{"name":"bufferusage"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"bufferusage"},{"name":"bufferusage"}],"output":{"name":"bool"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"bufferusage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"bufferusage"}],"output":{"name":"bufferusage"}}],[11,"eq","","",93,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"bufferinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"bufferinfo"}],"output":{"name":"bufferinfo"}}],[11,"fmt","draw_state::state","",94,{"inputs":[{"name":"frontface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"frontface"}],"output":{"name":"frontface"}}],[11,"hash","","",94,null],[11,"partial_cmp","","",94,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"lt","","",94,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"le","","",94,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"gt","","",94,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"ge","","",94,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"eq","","",94,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"cmp","","",94,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"fmt","","",95,{"inputs":[{"name":"offset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",95,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"offset"}],"output":{"name":"offset"}}],[11,"fmt","","",96,{"inputs":[{"name":"cullface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"cullface"}],"output":{"name":"cullface"}}],[11,"fmt","","",97,{"inputs":[{"name":"rastermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"rastermethod"}],"output":{"name":"rastermethod"}}],[11,"fmt","","",98,{"inputs":[{"name":"primitive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",98,{"inputs":[{"name":"primitive"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"primitive"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"primitive"}],"output":{"name":"primitive"}}],[11,"get_cull_face","","Get the cull face, if any, for this primitive state.",98,{"inputs":[{"name":"primitive"}],"output":{"name":"cullface"}}],[11,"default","","",98,{"inputs":[{"name":"primitive"}],"output":{"name":"primitive"}}],[11,"fmt","","",99,{"inputs":[{"name":"multisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"multisample"}],"output":{"name":"multisample"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"lt","","",99,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"le","","",99,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"gt","","",99,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"ge","","",99,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"cmp","","",99,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"fmt","","",100,{"inputs":[{"name":"comparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"comparison"}],"output":{"name":"comparison"}}],[11,"hash","","",100,null],[11,"partial_cmp","","",100,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"lt","","",100,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"le","","",100,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"gt","","",100,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"ge","","",100,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"eq","","",100,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"cmp","","",100,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"fmt","","",101,{"inputs":[{"name":"stencilop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"stencilop"}],"output":{"name":"stencilop"}}],[11,"hash","","",101,null],[11,"partial_cmp","","",101,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"lt","","",101,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"le","","",101,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"gt","","",101,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"ge","","",101,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"eq","","",101,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"cmp","","",101,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"fmt","","",102,{"inputs":[{"name":"stencilside"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"hash","","",102,null],[11,"partial_cmp","","",102,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",102,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",102,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",102,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",102,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"eq","","",102,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"cmp","","",102,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"default","","",102,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"fmt","","",103,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"hash","","",103,null],[11,"partial_cmp","","",103,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",103,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",103,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",103,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",103,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"eq","","",103,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"cmp","","",103,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"fmt","","",104,{"inputs":[{"name":"depth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"hash","","",104,null],[11,"partial_cmp","","",104,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",104,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",104,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",104,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",104,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"eq","","",104,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"cmp","","",104,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"default","","",104,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"fmt","","",105,{"inputs":[{"name":"equation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"equation"}],"output":{"name":"equation"}}],[11,"hash","","",105,null],[11,"partial_cmp","","",105,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"cmp","","",105,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"fmt","","",106,{"inputs":[{"name":"blendvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"blendvalue"}],"output":{"name":"blendvalue"}}],[11,"hash","","",106,null],[11,"partial_cmp","","",106,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"cmp","","",106,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"fmt","","",107,{"inputs":[{"name":"factor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"factor"}],"output":{"name":"factor"}}],[11,"hash","","",107,null],[11,"partial_cmp","","",107,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"eq","","",107,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"cmp","","",107,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"fmt","","",108,{"inputs":[{"name":"blendchannel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"hash","","",108,null],[11,"partial_cmp","","",108,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","","",108,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"cmp","","",108,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"default","","",108,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"default","","",109,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"eq","","",109,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"fmt","","",109,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"cmp","","",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"eq","","",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",110,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",110,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",110,{"inputs":[{"name":"colormask"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",110,{"inputs":[{"name":"colormask"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",110,{"inputs":[{"name":"colormask"},{"name":"u32"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",110,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",110,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",110,null],[11,"remove","","Removes the specified flags in-place.",110,null],[11,"toggle","","Toggles the specified flags in-place.",110,null],[11,"bitor","","Returns the union of the two sets of flags.",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"sub","","Returns the set difference of the two sets of flags.",110,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"not","","Returns the complement of this set of flags.",110,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"fmt","","",110,{"inputs":[{"name":"colormask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","draw_state::target","",111,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"hash","","",112,null],[11,"cmp","","",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"option"}}],[11,"lt","","",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"le","","",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"gt","","",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"ge","","",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"eq","","",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",112,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"all","","Returns the set containing all flags.",112,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",112,{"inputs":[{"name":"mask"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",112,{"inputs":[{"name":"mask"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",112,{"inputs":[{"name":"mask"},{"name":"u8"}],"output":{"name":"mask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",112,{"inputs":[{"name":"mask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",112,{"inputs":[{"name":"mask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",112,null],[11,"remove","","Removes the specified flags in-place.",112,null],[11,"toggle","","Toggles the specified flags in-place.",112,null],[11,"bitor","","Returns the union of the two sets of flags.",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[11,"sub","","Returns the set difference of the two sets of flags.",112,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[11,"not","","Returns the complement of this set of flags.",112,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"fmt","","",112,{"inputs":[{"name":"mask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",113,null],[11,"cmp","","",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"option"}}],[11,"lt","","",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"eq","","",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"fmt","","",113,{"inputs":[{"name":"mirror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",113,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",113,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",113,{"inputs":[{"name":"mirror"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",113,{"inputs":[{"name":"mirror"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",113,{"inputs":[{"name":"mirror"},{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",113,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",113,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",113,null],[11,"remove","","Removes the specified flags in-place.",113,null],[11,"toggle","","Toggles the specified flags in-place.",113,null],[11,"bitor","","Returns the union of the two sets of flags.",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"sub","","Returns the set difference of the two sets of flags.",113,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"not","","Returns the complement of this set of flags.",113,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"clone","","",114,{"inputs":[{"name":"cleardata"}],"output":{"name":"cleardata"}}],[11,"fmt","","",114,{"inputs":[{"name":"cleardata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_handle","gfx_debug_draw::line_renderer::__gfx_extern_crate_hack::gfx::render::target","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"create_buffer","gfx_debug_draw::line_renderer::__gfx_extern_crate_hack::gfx::device","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"fmt","draw_state","",115,{"inputs":[{"name":"drawstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"hash","","",116,null],[11,"fmt","","",116,{"inputs":[{"name":"blendpreset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"blendpreset"},{"name":"blendpreset"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"blendpreset"},{"name":"blendpreset"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"blendpreset"}],"output":{"name":"blendpreset"}}],[11,"new","","Create a default `DrawState`. Uses counter-clockwise winding, culls the backface of each\nprimitive, and does no scissor/stencil/depth/blend/color masking.",115,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"get_target_mask","","Return a target mask that contains all the planes required by this state.",115,{"inputs":[{"name":"drawstate"}],"output":{"name":"mask"}}],[11,"multi_sample","","Enable multi-sampled rasterization",115,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"stencil","","Set the stencil test to a simple expression",115,{"inputs":[{"name":"drawstate"},{"name":"comparison"},{"name":"u8"}],"output":{"name":"drawstate"}}],[11,"depth","","Set the depth test with the mask",115,{"inputs":[{"name":"drawstate"},{"name":"comparison"},{"name":"bool"}],"output":{"name":"drawstate"}}],[11,"scissor","","Set the scissor",115,{"inputs":[{"name":"drawstate"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"drawstate"}}],[11,"blend","","Set the blend mode to one of the presets",115,{"inputs":[{"name":"drawstate"},{"name":"blendpreset"}],"output":{"name":"drawstate"}}],[11,"get_handle","gfx_debug_draw::line_renderer::__gfx_extern_crate_hack::gfx","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"create_buffer","","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"create_buffer","gfx_debug_draw::line_renderer::__gfx_extern_crate_hack::gfx::traits","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"get_handle","","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"get_handle","gfx_debug_draw::line_renderer::__gfx_extern_crate_hack::gfx::render::target","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"create_buffer","gfx_debug_draw::line_renderer::__gfx_extern_crate_hack::gfx::device","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"get_handle","gfx_debug_draw::line_renderer::__gfx_extern_crate_hack::gfx","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"create_buffer","","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"create_buffer","gfx_debug_draw::text_renderer::__gfx_extern_crate_hack::gfx::traits","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"get_handle","","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"get_handle","gfx_debug_draw::text_renderer::__gfx_extern_crate_hack::gfx::render::target","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"create_buffer","gfx_debug_draw::text_renderer::__gfx_extern_crate_hack::gfx::device","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"get_handle","gfx_debug_draw::text_renderer::__gfx_extern_crate_hack::gfx","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"create_buffer","","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"create_buffer","gfx_debug_draw::text_renderer::__gfx_extern_crate_hack::gfx::traits","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"get_handle","","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"get_handle","gfx_debug_draw::text_renderer::__gfx_extern_crate_hack::gfx::render::target","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"create_buffer","gfx_debug_draw::text_renderer::__gfx_extern_crate_hack::gfx::device","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"get_handle","gfx_debug_draw::text_renderer::__gfx_extern_crate_hack::gfx","Get an associated device handle, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_colors","","Get array of color planes.",3,null],[11,"get_depth","","Get depth plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",3,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",3,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",3,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"create_buffer","","",2,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[11,"create_buffer_static","","",2,null],[11,"create_buffer_index","","",2,null],[11,"update_buffer","","",2,null],[11,"update_texture","","",2,null],[11,"from_path","gfx_debug_draw","",0,{"inputs":[{"name":"bitmapfont"},{"name":"path"}],"output":{"name":"result"}}],[11,"from_string","","",0,{"inputs":[{"name":"bitmapfont"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"BitmapFont"],[3,"DebugRenderer"],[8,"Factory"],[8,"Output"],[4,"Error"],[3,"OwnedBatch"],[3,"Id"],[3,"OutOfBounds"],[3,"CoreBatch"],[3,"RefBatch"],[3,"Context"],[3,"Canvas"],[3,"Graphics"],[4,"ProgramError"],[3,"ShaderSource"],[3,"Attribute"],[3,"Mesh"],[3,"Slice"],[4,"SliceKind"],[3,"IndexBuffer"],[4,"Error"],[3,"AttributeIter"],[3,"Link"],[4,"ParameterError"],[4,"Option"],[3,"ParamDictionary"],[4,"Plane"],[3,"Frame"],[4,"DrawError"],[3,"Renderer"],[4,"SignFlag"],[4,"IntSubType"],[4,"IntSize"],[4,"FloatSubType"],[4,"FloatSize"],[4,"Type"],[3,"Format"],[3,"DataPointer"],[3,"DataBuffer"],[4,"Access"],[4,"Gamma"],[4,"Target"],[3,"Buffer"],[3,"RawBuffer"],[3,"ArrayBuffer"],[3,"Shader"],[3,"Program"],[3,"FrameBuffer"],[3,"Surface"],[3,"Texture"],[3,"Sampler"],[3,"Manager"],[3,"Readable"],[3,"Writable"],[3,"RW"],[4,"IsArray"],[4,"IsShadow"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"SamplerType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[3,"Attribute"],[3,"UniformVar"],[3,"BlockVar"],[3,"SamplerVar"],[3,"ProgramInfo"],[4,"CompatibilityError"],[4,"CreateShaderError"],[4,"ShaderModel"],[4,"SurfaceError"],[4,"TextureError"],[4,"AaMode"],[4,"Components"],[4,"Compression"],[4,"Format"],[3,"SurfaceInfo"],[4,"FilterMethod"],[4,"TextureKind"],[4,"CubeFace"],[3,"TextureInfo"],[3,"ImageInfo"],[4,"WrapMode"],[4,"ComparisonMode"],[3,"SamplerInfo"],[3,"Capabilities"],[4,"MapAccess"],[4,"PrimitiveType"],[4,"BufferRole"],[4,"BufferUsage"],[3,"BufferInfo"],[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Primitive"],[3,"MultiSample"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"ColorMask"],[3,"Rect"],[3,"Mask"],[3,"Mirror"],[3,"ClearData"],[3,"DrawState"],[4,"BlendPreset"]]};
searchIndex['gfx_texture'] = {"items":[[0,"","gfx_texture","A Gfx texture representation that works nicely with Piston libraries.",null,null],[8,"ImageSize","","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",0,null],[11,"get_width","","Gets the image width.",0,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[11,"get_height","","Gets the image height.",0,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[3,"Texture","","Represents a texture.",null,null],[12,"handle","","A handle to the Gfx texture.",1,null],[3,"Settings","","Texture creation parameters.",null,null],[12,"force_alpha","","Convert to rgba8.",2,null],[12,"flip_vertical","","Sometimes you need the other way around.",2,null],[12,"compress","","Compress on GPU.",2,null],[12,"generate_mipmap","","Generate mipmap chain.",2,null],[11,"fmt","","",1,{"inputs":[{"name":"texture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"texture"}],"output":{"name":"texture"}}],[11,"from_path","","Creates a texture from path.",1,{"inputs":[{"name":"texture"},{"name":"f"},{"name":"p"},{"name":"settings"}],"output":{"name":"result"}}],[11,"from_image","","Creates a texture from image.",1,{"inputs":[{"name":"texture"},{"name":"f"},{"name":"rgbaimage"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"from_memory_alpha","","Creates texture from memory alpha.",1,null],[11,"update","","Updates the texture with an image.",1,{"inputs":[{"name":"texture"},{"name":"f"},{"name":"rgbaimage"}],"output":null}],[11,"get_size","","",1,null],[11,"new","","Create default settings.",2,{"inputs":[{"name":"settings"}],"output":{"name":"settings"}}]],"paths":[[8,"ImageSize"],[3,"Texture"],[3,"Settings"]]};
searchIndex['image'] = {"items":[[0,"","image","This crate provides native rust implementations of\nImage encoders and decoders and basic image manipulation\nfunctions.",null,null],[3,"Luma","","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Hold the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image Errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image's dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"ImageFormat","","An enumeration of supported image formats.\nNot all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",6,null],[13,"JPEG","","An Image in JPEG Format",6,null],[13,"GIF","","An Image in GIF Format",6,null],[13,"WEBP","","An Image in WEBP Format",6,null],[13,"PPM","","An Image in PPM Format",6,null],[13,"TIFF","","An Image in TIFF Format",6,null],[13,"TGA","","An Image in TGA Format",6,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",8,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",8,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",8,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",8,null],[5,"open","","Open the image located at the path specified.\nThe image's format is determined from the path's file extension.",null,{"inputs":[{"name":"p"}],"output":{"name":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"inputs":[{"name":"r"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice\nMakes an educated guess about the image format.\nTGA is not supported by this function.",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[5,"copy_memory","","Copies data from `src` to `dst`",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\nSee \"Kohonen neural networks for optimal colour quantization\"\nin \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\nfor a discussion of the algorithm.\nSee also  http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data",9,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data",9,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",9,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",9,null],[0,"imageops","image","Image Processing Functions",null,null],[5,"rotate90","image::imageops","Rotate an image 90 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image.\n```kernel``` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions\n```nwidth``` and ```nheight``` are the new dimensions.\n```filter``` is the sampling filter to use.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image.\n```sigma``` is a measure of how much to blur by.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image\n```sigma``` is the amount to blur the image by.\n```threshold``` is the threshold for the difference between\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"colorops","","Public only because of Rust bug:\nhttps://github.com/rust-lang/rust/issues/18241\nFunctions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image\nThis function operates in place.",null,{"inputs":[{"name":"i"}],"output":null}],[5,"contrast","","Adjust the contrast of the supplied image\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying\nFloyd-Steinberg dithering to improve the visual conception",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":null}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":{"name":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","image::imageops::colorops::ColorMap","The color type on which the map operates on",null,null],[10,"index_of","image::imageops::colorops","Returns the index of the closed match of `color`\nin the color map.",10,{"inputs":[{"name":"colormap"},{"name":"color"}],"output":{"name":"usize"}}],[10,"map_color","","Maps `color` to the closes color in the color map.",10,{"inputs":[{"name":"colormap"},{"name":"color"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"bilevel"}],"output":{"name":"bilevel"}}],[6,"Color","","",null,null],[11,"index_of","","",11,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",11,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":null}],[6,"Color","","",null,null],[11,"index_of","image::math::nq","",9,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",9,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":null}],[11,"clone","image","",7,{"inputs":[{"name":"filtertype"}],"output":{"name":"filtertype"}}],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",12,{"inputs":[{"name":"webpdecoder"},{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",12,null],[11,"read_image","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",13,null],[12,"height","","The height of the luma plane",13,null],[12,"ybuf","","The luma plane of the frame",13,null],[12,"keyframe","","Indicates whether this frame is a keyframe",13,null],[12,"for_display","","Indicates whether this frame is intended for display",13,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",13,null],[3,"VP8Decoder","","VP8 Decoder\nOnly decodes keyframes",null,null],[11,"clone","","",13,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",13,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",14,{"inputs":[{"name":"vp8decoder"},{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",14,{"inputs":[{"name":"vp8decoder"}],"output":{"name":"result"}}],[0,"ppm","image","Encoding of portable pixmap Images",null,null],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder.",null,null],[11,"new","","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",15,{"inputs":[{"name":"ppmencoder"},{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",15,null],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","The representation of a PNG decoder",null,null],[3,"PNGEncoder","","The representation of a PNG encoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",16,{"inputs":[{"name":"pngdecoder"},{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"palette","","Returns a reference to the color palette used for indexed\ncolor images.\nEach array element is a tuple of RGB values.",16,null],[11,"dimensions","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",16,null],[11,"read_image","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to ```w```",17,{"inputs":[{"name":"pngencoder"},{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",17,null],[0,"zlib","","An Implementation of RFC 1950",null,null],[3,"ZlibDecoder","image::png::zlib","A Zlib compressed stream decoder.",null,null],[3,"ZlibEncoder","","A Zlib compressed stream encoder.",null,null],[11,"new","","Create a new decoder that decodes from a Reader",18,{"inputs":[{"name":"zlibdecoder"},{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"inner","","Return a mutable reference to the wrapped Reader",18,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"new","","Builds a new encoder.",19,{"inputs":[{"name":"zlibencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"into_inner","","Finish writing and returns the underlying writer.",19,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"write","","",19,null],[11,"flush","","",19,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"drop","","",19,{"inputs":[{"name":"zlibencoder"}],"output":null}],[0,"deflate","image::png","A DEFLATE encoder (RFC 1951).",null,null],[3,"Deflater","image::png::deflate","A DEFLATE encoder (RFC 1951).",null,null],[11,"new","","Creates a new encoder that writes to the underlying writer.",20,{"inputs":[{"name":"deflater"},{"name":"w"}],"output":{"name":"deflater"}}],[11,"into_inner","","Stops encoding and returns the underlying writer.",20,{"inputs":[{"name":"deflater"}],"output":{"name":"result"}}],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"deflater"}],"output":{"name":"result"}}],[11,"drop","","",20,{"inputs":[{"name":"deflater"}],"output":null}],[0,"inflate","image::png","An Implementation of RFC 1951",null,null],[3,"Inflater","image::png::inflate","A DEFLATE compressed stream decoder.",null,null],[11,"new","","Create a new decoder that decodes from a Reader",21,{"inputs":[{"name":"inflater"},{"name":"r"}],"output":{"name":"inflater"}}],[11,"eof","","Indicate whether the end of the stream has been reached.",21,{"inputs":[{"name":"inflater"}],"output":{"name":"bool"}}],[11,"inner","","Return a mutable reference to the wrapped Reader",21,{"inputs":[{"name":"inflater"}],"output":{"name":"r"}}],[11,"read","","",21,null],[0,"hash","image::png","This module provides implementations of common hashing algorithms.",null,null],[3,"Adler32","image::png::hash","An Implementation of the Adler-32 checksum",null,null],[3,"Crc32","","An Implementation of the Crc-32 checksum",null,null],[11,"clone","","",22,{"inputs":[{"name":"adler32"}],"output":{"name":"adler32"}}],[11,"new","","Create a new hasher.",22,{"inputs":[{"name":"adler32"}],"output":{"name":"adler32"}}],[11,"update","","Update the internal hasher with the bytes from ```buf```",22,null],[11,"checksum","","Return the computed hash.",22,{"inputs":[{"name":"adler32"}],"output":{"name":"u32"}}],[11,"reset","","Reset this hasher to its initial state.",22,{"inputs":[{"name":"adler32"}],"output":null}],[11,"clone","","",23,{"inputs":[{"name":"crc32"}],"output":{"name":"crc32"}}],[11,"new","","Create a new hasher.",23,{"inputs":[{"name":"crc32"}],"output":{"name":"crc32"}}],[11,"update","","Update the internal hasher with the bytes from ```buf```",23,null],[11,"checksum","","Return the computed hash.",23,{"inputs":[{"name":"crc32"}],"output":{"name":"u32"}}],[11,"reset","","Reset this hasher to its initial state.",23,{"inputs":[{"name":"crc32"}],"output":null}],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","The representation of a JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[3,"Component","","A representation of a JPEG component",null,null],[12,"id","","The Component's identifier",24,null],[12,"h","","Horizontal sampling factor",24,null],[12,"v","","Vertical sampling factor",24,null],[12,"tq","","The quantization table selector",24,null],[12,"dc_table","","Index to the Huffman DC Table",24,null],[12,"ac_table","","Index to the AC Huffman Table",24,null],[12,"dc_pred","","The dc prediction of the component",24,null],[11,"new","","Create a new encoder that writes its output to ```w```",25,{"inputs":[{"name":"jpegencoder"},{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```\nThe Image in encoded with subsampling ratio 4:2:2",25,null],[11,"clone","","",24,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",26,{"inputs":[{"name":"jpegdecoder"},{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",26,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",26,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",26,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",26,null],[11,"read_image","","",26,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[0,"gif","image","Decoding of GIF Images",null,null],[3,"GIFDecoder","image::gif","A gif decoder",null,null],[3,"GIFEncoder","","A GIF encoder.",null,null],[4,"ColorMode","","The color mode the encoder will use to encode the image.",null,null],[13,"TrueColor","","Image will be encoded in multiple frames if more than 256 colors are present",27,null],[13,"Indexed","","Number of colors will be reduced",27,null],[11,"new","","Creates a new GIF decoder",28,{"inputs":[{"name":"gifdecoder"},{"name":"r"}],"output":{"name":"gifdecoder"}}],[11,"dimensions","","",28,{"inputs":[{"name":"gifdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",28,{"inputs":[{"name":"gifdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",28,{"inputs":[{"name":"gifdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",28,null],[11,"read_image","","",28,{"inputs":[{"name":"gifdecoder"}],"output":{"name":"imageresult"}}],[11,"clone","","",27,{"inputs":[{"name":"colormode"}],"output":{"name":"colormode"}}],[11,"fmt","","",27,{"inputs":[{"name":"colormode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new GIF encoder",29,{"inputs":[{"name":"gifencoder"},{"name":"imagebuffer"},{"name":"option"},{"name":"colormode"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes the image",29,{"inputs":[{"name":"gifencoder"},{"name":"w"}],"output":{"name":"result"}}],[0,"tiff","image","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a PNG decoder",null,null],[4,"ByteOrder","","Byte order of the TIFF file.",null,null],[13,"LittleEndian","","little endian byte order",30,null],[13,"BigEndian","","big endian byte order",30,null],[11,"fmt","","",31,{"inputs":[{"name":"tiffdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",31,{"inputs":[{"name":"tiffdecoder"},{"name":"r"}],"output":{"name":"imageresult"}}],[11,"init","","Initializes the decoder.",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_long","","Reads a TIFF long value",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",31,{"inputs":[{"name":"tiffdecoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",31,null],[11,"read_image","","",31,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"fmt","","",30,{"inputs":[{"name":"byteorder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"byteorder"}],"output":{"name":"byteorder"}}],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",32,{"inputs":[{"name":"tgadecoder"},{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",32,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",32,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",32,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",32,null],[11,"read_image","","",32,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"fmt","image","",5,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"from","","",5,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"imageformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"imageformat"}],"output":{"name":"imageformat"}}],[11,"next","","",33,{"inputs":[{"name":"pixels"}],"output":{"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"mutpixels"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",35,{"inputs":[{"name":"subimage"},{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",35,{"inputs":[{"name":"subimage"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",35,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"to_image","","Convert this subimage to an ImageBuffer",35,{"inputs":[{"name":"subimage"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",35,null],[11,"bounds","","",35,null],[11,"get_pixel","","",35,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i"}}],[11,"put_pixel","","",35,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"i"}],"output":null}],[11,"blend_pixel","","",35,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"i"}],"output":null}],[11,"get_pixel_mut","","",35,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"i"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey\npixels with transparency.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rgbimage"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rgbaimage"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"grayimage"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"grayalphaimage"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"raw_pixels","","Return this image's pixels as a byte vector.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"vec"}}],[11,"color","","Return this image's color type.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image.\nThis method operates inplace.",8,{"inputs":[{"name":"dynamicimage"}],"output":null}],[11,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image's aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image's dimensions",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image's dimensions",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",8,null],[11,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",8,{"inputs":[{"name":"dynamicimage"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"save","","Encode this image and write it to ```w```",8,{"inputs":[{"name":"dynamicimage"},{"name":"w"},{"name":"imageformat"}],"output":{"name":"result"}}],[11,"dimensions","","",8,null],[11,"bounds","","",8,null],[11,"get_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"put_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"blend_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"get_pixel_mut","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"clone","","",4,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",4,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"rgb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"eq","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"channel_count","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"u8"}}],[11,"color_model","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"str"}}],[11,"color_type","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"inputs":[{"name":"rgb"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgba"}}],[11,"to_luma","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"lumaa"}}],[11,"map","","",2,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",2,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",2,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",2,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",2,{"inputs":[{"name":"rgb"},{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"},{"name":"f"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"rgb"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":null}],[11,"index","","",2,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",2,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"luma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"eq","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"channel_count","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"u8"}}],[11,"color_model","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"str"}}],[11,"color_type","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"inputs":[{"name":"luma"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"rgba"}}],[11,"to_luma","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"lumaa"}}],[11,"map","","",0,{"inputs":[{"name":"luma"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",0,{"inputs":[{"name":"luma"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",0,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",0,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",0,{"inputs":[{"name":"luma"},{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",0,{"inputs":[{"name":"luma"},{"name":"luma"},{"name":"f"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"luma"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"rgba"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"eq","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"channel_count","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"u8"}}],[11,"color_model","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"str"}}],[11,"color_type","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"inputs":[{"name":"rgba"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"to_luma","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"lumaa"}}],[11,"map","","",3,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",3,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",3,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",3,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",3,{"inputs":[{"name":"rgba"},{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"},{"name":"f"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"rgba"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",3,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"lumaa"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"eq","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"channel_count","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"u8"}}],[11,"color_model","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"str"}}],[11,"color_type","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"inputs":[{"name":"lumaa"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgba"}}],[11,"to_luma","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"map","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",1,{"inputs":[{"name":"lumaa"},{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"lumaa"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"from_color","","",0,{"inputs":[{"name":"luma"},{"name":"rgba"}],"output":null}],[11,"from_color","","",0,{"inputs":[{"name":"luma"},{"name":"rgb"}],"output":null}],[11,"from_color","","",0,{"inputs":[{"name":"luma"},{"name":"lumaa"}],"output":null}],[11,"from_color","","",1,{"inputs":[{"name":"lumaa"},{"name":"rgba"}],"output":null}],[11,"from_color","","",1,{"inputs":[{"name":"lumaa"},{"name":"rgb"}],"output":null}],[11,"from_color","","",1,{"inputs":[{"name":"lumaa"},{"name":"luma"}],"output":null}],[11,"from_color","","",3,{"inputs":[{"name":"rgba"},{"name":"rgb"}],"output":null}],[11,"from_color","","",3,{"inputs":[{"name":"rgba"},{"name":"lumaa"}],"output":null}],[11,"from_color","","",3,{"inputs":[{"name":"rgba"},{"name":"luma"}],"output":null}],[11,"from_color","","",2,{"inputs":[{"name":"rgb"},{"name":"rgba"}],"output":null}],[11,"from_color","","",2,{"inputs":[{"name":"rgb"},{"name":"lumaa"}],"output":null}],[11,"from_color","","",2,{"inputs":[{"name":"rgb"},{"name":"luma"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"lumaa"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"luma"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"rgba"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"rgb"}],"output":null}],[11,"from_raw","","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)\nReturns None if the container is not big enough",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",36,null],[11,"width","","The width of this image.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"save","","Saves the buffer to a file at the path specified.",36,{"inputs":[{"name":"imagebuffer"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",36,null],[11,"deref_mut","","",36,null],[11,"index","","",36,null],[11,"index_mut","","",36,null],[11,"clone","","",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",36,null],[11,"bounds","","",36,null],[11,"get_pixel","","",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel's x and y coordinates.",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",36,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"vec"}}],[11,"convert","","",36,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"new","","Contructs a new frame iterator",37,{"inputs":[{"name":"frames"},{"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",38,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",38,{"inputs":[{"name":"frame"},{"name":"rgbaimage"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",38,{"inputs":[{"name":"frame"},{"name":"rgbaimage"},{"name":"u32"},{"name":"u32"},{"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",38,{"inputs":[{"name":"frame"}],"output":{"name":"ratio"}}],[11,"buffer","","Returns the image buffer",38,{"inputs":[{"name":"frame"}],"output":{"name":"rgbaimage"}}],[11,"into_buffer","","Returns the image buffer",38,{"inputs":[{"name":"frame"}],"output":{"name":"rgbaimage"}}],[11,"left","","Returns the x offset",38,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"top","","Returns the x offset",38,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"next","","",37,{"inputs":[{"name":"frames"}],"output":{"name":"option"}}],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"Primitive","","Primitive trait from old stdlib, added max_value",null,null],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","image::Pixel","The underlying subpixel type.",null,null],[10,"channel_count","image","Returns the number of channels of this pixel type.",39,{"inputs":[{"name":"pixel"}],"output":{"name":"u8"}}],[10,"channels","","Returns the components as a slice.",39,null],[10,"channels_mut","","Returns the components as a mutable slice",39,null],[10,"color_model","","Returns a string that can help to interprete the meaning each channel\nSee [gimp babl](http://gegl.org/babl/).",39,{"inputs":[{"name":"pixel"}],"output":{"name":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",39,{"inputs":[{"name":"pixel"}],"output":{"name":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel\nhas less than 4 channels the remainder is filled with the maximum value\nTODO deprecate",39,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d.\nIf the pixel does not contain 4 channels the extra are ignored.\nTODO deprecate",39,{"inputs":[{"name":"pixel"},{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"}],"output":{"name":"self"}}],[10,"from_slice","","Returns a view into a slice.",39,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",39,null],[10,"to_rgb","","Convert this pixel to RGB",39,{"inputs":[{"name":"pixel"}],"output":{"name":"rgb"}}],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",39,{"inputs":[{"name":"pixel"}],"output":{"name":"rgba"}}],[10,"to_luma","","Convert this pixel to luma",39,{"inputs":[{"name":"pixel"}],"output":{"name":"luma"}}],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",39,{"inputs":[{"name":"pixel"}],"output":{"name":"lumaa"}}],[10,"map","","Apply the function ```f``` to each channel of this pixel.",39,{"inputs":[{"name":"pixel"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply","","Apply the function ```f``` to each channel of this pixel.",39,{"inputs":[{"name":"pixel"},{"name":"f"}],"output":null}],[10,"map_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel.",39,{"inputs":[{"name":"pixel"},{"name":"f"},{"name":"g"}],"output":{"name":"self"}}],[10,"apply_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel. Works in-place.",39,{"inputs":[{"name":"pixel"},{"name":"f"},{"name":"g"}],"output":null}],[10,"map2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise.",39,{"inputs":[{"name":"pixel"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise. Works in-place.",39,{"inputs":[{"name":"pixel"},{"name":"self"},{"name":"f"}],"output":null}],[10,"invert","","Invert this pixel",39,{"inputs":[{"name":"pixel"}],"output":null}],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",39,{"inputs":[{"name":"pixel"},{"name":"self"}],"output":null}],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"colortype","","Returns the color type of the image e.g RGB(8) (8bit RGB)",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"row_len","","Returns the length in bytes of one decoded row of the image",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"is_animated","","Returns true if the image is animated",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"read_scanline","","Reads one row from the image into buf and returns the row index",40,null],[10,"read_image","","Decodes the entire image and return it as a Vector",40,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",40,{"inputs":[{"name":"imagedecoder"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","image::GenericImage","The type of pixel.",null,null],[10,"dimensions","image","The width and height of this image.",41,null],[11,"width","","The width of this image.",41,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",41,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[10,"bounds","","The bounding rectangle of this image.",41,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_pixel","","Returns the pixel located at (x, y)",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[10,"put_pixel","","Put a pixel at location (x, y)",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",41,{"inputs":[{"name":"genericimage"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",41,{"inputs":[{"name":"genericimage"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",41,{"inputs":[{"name":"genericimage"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",41,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"is_animated","","Returns true if the image is animated",40,null],[11,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",40,null],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",40,null],[11,"width","","The width of this image.",41,null],[11,"height","","The height of this image.",41,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",41,null],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",41,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",41,null],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",41,null],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",41,null],[11,"copy_from","","Copies all of the pixels from another image into this image.",41,null],[11,"sub_image","","Returns a subimage that is a view into this image.",41,null],[11,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to\nadjust it's alpha value accordingly.",42,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"ImageFormat"],[4,"FilterType"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"Deflater"],[3,"Inflater"],[3,"Adler32"],[3,"Crc32"],[3,"Component"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[4,"ColorMode"],[3,"GIFDecoder"],[3,"GIFEncoder"],[4,"ByteOrder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"Pixel"],[8,"ImageDecoder"],[8,"GenericImage"],[6,"GrayImage"]]};
searchIndex['piston'] = {"items":[[0,"","piston","A user friendly game engine written in Rust.",null,null],[0,"input","","",null,null],[0,"keyboard","piston::input","Back-end agnostic keyboard keys.",null,null],[11,"empty","input::keyboard","Returns an empty set of flags.",0,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"modifierkey"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"modifierkey"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",0,{"inputs":[{"name":"modifierkey"},{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,null],[11,"remove","","Removes the specified flags in-place.",0,null],[11,"toggle","","Toggles the specified flags in-place.",0,null],[11,"handle_input","","Change modifier key state depending on input.",0,null],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"eq","","",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"modifierkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"modifierkey"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"modifierkey"},{"name":"__d"}],"output":{"name":"result"}}],[6,"Output","piston::input::keyboard","",null,null],[11,"bitor","input::keyboard","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[6,"Output","piston::input::keyboard","",null,null],[11,"bitxor","input::keyboard","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[6,"Output","piston::input::keyboard","",null,null],[11,"bitand","input::keyboard","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[6,"Output","piston::input::keyboard","",null,null],[11,"sub","input::keyboard","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[6,"Output","piston::input::keyboard","",null,null],[11,"not","input::keyboard","Returns the complement of this set of flags.",0,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"default","","",0,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"key"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"key"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",1,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"ordering"}}],[11,"code","","Returns an id of the key",1,{"inputs":[{"name":"key"}],"output":{"name":"i32"}}],[11,"to_i64","","",1,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"to_u64","","",1,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"to_isize","","",1,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"from_u64","","",1,{"inputs":[{"name":"key"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",1,{"inputs":[{"name":"key"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_isize","","",1,{"inputs":[{"name":"key"},{"name":"isize"}],"output":{"name":"option"}}],[11,"fmt","input::mouse","",2,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"encode","","",2,{"inputs":[{"name":"mousebutton"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"mousebutton"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"from_u64","","",2,{"inputs":[{"name":"mousebutton"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"mousebutton"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_isize","","",2,{"inputs":[{"name":"mousebutton"},{"name":"isize"}],"output":{"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"to_i64","","",2,{"inputs":[{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"to_isize","","",2,{"inputs":[{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"fmt","input","",3,{"inputs":[{"name":"button"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"button"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"button"},{"name":"button"}],"output":{"name":"bool"}}],[11,"encode","","",3,{"inputs":[{"name":"button"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"button"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"button"}],"output":{"name":"button"}}],[11,"fmt","","",4,{"inputs":[{"name":"motion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"motion"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"motion"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"encode","","",4,{"inputs":[{"name":"motion"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"motion"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"motion"}],"output":{"name":"motion"}}],[11,"fmt","","",5,{"inputs":[{"name":"input"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"input"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"input"},{"name":"input"}],"output":{"name":"bool"}}],[11,"encode","","",5,{"inputs":[{"name":"input"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"input"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"input"}],"output":{"name":"input"}}],[3,"ModifierKey","piston::input::keyboard","",null,null],[17,"NO_MODIFIER","","",null,null],[17,"CTRL","","",null,null],[17,"SHIFT","","",null,null],[17,"ALT","","",null,null],[17,"GUI","","",null,null],[17,"CTRL_SHIFT","","",null,null],[17,"CTRL_ALT","","",null,null],[17,"CTRL_GUI","","",null,null],[17,"CTRL_SHIFT_ALT","","",null,null],[17,"CTRL_SHIFT_GUI","","",null,null],[17,"CTRL_SHIFT_ALT_GUI","","",null,null],[17,"SHIFT_ALT","","",null,null],[17,"SHIFT_GUI","","",null,null],[17,"SHIFT_ALT_GUI","","",null,null],[17,"ALT_GUI","","",null,null],[4,"Key","","Represent a keyboard key.",null,null],[13,"Unknown","","",1,null],[13,"Backspace","","",1,null],[13,"Tab","","",1,null],[13,"Return","","",1,null],[13,"Escape","","",1,null],[13,"Space","","",1,null],[13,"Exclaim","","",1,null],[13,"Quotedbl","","",1,null],[13,"Hash","","",1,null],[13,"Dollar","","",1,null],[13,"Percent","","",1,null],[13,"Ampersand","","",1,null],[13,"Quote","","",1,null],[13,"LeftParen","","",1,null],[13,"RightParen","","",1,null],[13,"Asterisk","","",1,null],[13,"Plus","","",1,null],[13,"Comma","","",1,null],[13,"Minus","","",1,null],[13,"Period","","",1,null],[13,"Slash","","",1,null],[13,"D0","","",1,null],[13,"D1","","",1,null],[13,"D2","","",1,null],[13,"D3","","",1,null],[13,"D4","","",1,null],[13,"D5","","",1,null],[13,"D6","","",1,null],[13,"D7","","",1,null],[13,"D8","","",1,null],[13,"D9","","",1,null],[13,"Colon","","",1,null],[13,"Semicolon","","",1,null],[13,"Less","","",1,null],[13,"Equals","","",1,null],[13,"Greater","","",1,null],[13,"Question","","",1,null],[13,"At","","",1,null],[13,"LeftBracket","","",1,null],[13,"Backslash","","",1,null],[13,"RightBracket","","",1,null],[13,"Caret","","",1,null],[13,"Underscore","","",1,null],[13,"Backquote","","",1,null],[13,"A","","",1,null],[13,"B","","",1,null],[13,"C","","",1,null],[13,"D","","",1,null],[13,"E","","",1,null],[13,"F","","",1,null],[13,"G","","",1,null],[13,"H","","",1,null],[13,"I","","",1,null],[13,"J","","",1,null],[13,"K","","",1,null],[13,"L","","",1,null],[13,"M","","",1,null],[13,"N","","",1,null],[13,"O","","",1,null],[13,"P","","",1,null],[13,"Q","","",1,null],[13,"R","","",1,null],[13,"S","","",1,null],[13,"T","","",1,null],[13,"U","","",1,null],[13,"V","","",1,null],[13,"W","","",1,null],[13,"X","","",1,null],[13,"Y","","",1,null],[13,"Z","","",1,null],[13,"Delete","","",1,null],[13,"CapsLock","","",1,null],[13,"F1","","",1,null],[13,"F2","","",1,null],[13,"F3","","",1,null],[13,"F4","","",1,null],[13,"F5","","",1,null],[13,"F6","","",1,null],[13,"F7","","",1,null],[13,"F8","","",1,null],[13,"F9","","",1,null],[13,"F10","","",1,null],[13,"F11","","",1,null],[13,"F12","","",1,null],[13,"PrintScreen","","",1,null],[13,"ScrollLock","","",1,null],[13,"Pause","","",1,null],[13,"Insert","","",1,null],[13,"Home","","",1,null],[13,"PageUp","","",1,null],[13,"End","","",1,null],[13,"PageDown","","",1,null],[13,"Right","","",1,null],[13,"Left","","",1,null],[13,"Down","","",1,null],[13,"Up","","",1,null],[13,"NumLockClear","","",1,null],[13,"NumPadDivide","","",1,null],[13,"NumPadMultiply","","",1,null],[13,"NumPadMinus","","",1,null],[13,"NumPadPlus","","",1,null],[13,"NumPadEnter","","",1,null],[13,"NumPad1","","",1,null],[13,"NumPad2","","",1,null],[13,"NumPad3","","",1,null],[13,"NumPad4","","",1,null],[13,"NumPad5","","",1,null],[13,"NumPad6","","",1,null],[13,"NumPad7","","",1,null],[13,"NumPad8","","",1,null],[13,"NumPad9","","",1,null],[13,"NumPad0","","",1,null],[13,"NumPadPeriod","","",1,null],[13,"Application","","",1,null],[13,"Power","","",1,null],[13,"NumPadEquals","","",1,null],[13,"F13","","",1,null],[13,"F14","","",1,null],[13,"F15","","",1,null],[13,"F16","","",1,null],[13,"F17","","",1,null],[13,"F18","","",1,null],[13,"F19","","",1,null],[13,"F20","","",1,null],[13,"F21","","",1,null],[13,"F22","","",1,null],[13,"F23","","",1,null],[13,"F24","","",1,null],[13,"Execute","","",1,null],[13,"Help","","",1,null],[13,"Menu","","",1,null],[13,"Select","","",1,null],[13,"Stop","","",1,null],[13,"Again","","",1,null],[13,"Undo","","",1,null],[13,"Cut","","",1,null],[13,"Copy","","",1,null],[13,"Paste","","",1,null],[13,"Find","","",1,null],[13,"Mute","","",1,null],[13,"VolumeUp","","",1,null],[13,"VolumeDown","","",1,null],[13,"NumPadComma","","",1,null],[13,"NumPadEqualsAS400","","",1,null],[13,"AltErase","","",1,null],[13,"Sysreq","","",1,null],[13,"Cancel","","",1,null],[13,"Clear","","",1,null],[13,"Prior","","",1,null],[13,"Return2","","",1,null],[13,"Separator","","",1,null],[13,"Out","","",1,null],[13,"Oper","","",1,null],[13,"ClearAgain","","",1,null],[13,"CrSel","","",1,null],[13,"ExSel","","",1,null],[13,"NumPad00","","",1,null],[13,"NumPad000","","",1,null],[13,"ThousandsSeparator","","",1,null],[13,"DecimalSeparator","","",1,null],[13,"CurrencyUnit","","",1,null],[13,"CurrencySubUnit","","",1,null],[13,"NumPadLeftParen","","",1,null],[13,"NumPadRightParen","","",1,null],[13,"NumPadLeftBrace","","",1,null],[13,"NumPadRightBrace","","",1,null],[13,"NumPadTab","","",1,null],[13,"NumPadBackspace","","",1,null],[13,"NumPadA","","",1,null],[13,"NumPadB","","",1,null],[13,"NumPadC","","",1,null],[13,"NumPadD","","",1,null],[13,"NumPadE","","",1,null],[13,"NumPadF","","",1,null],[13,"NumPadXor","","",1,null],[13,"NumPadPower","","",1,null],[13,"NumPadPercent","","",1,null],[13,"NumPadLess","","",1,null],[13,"NumPadGreater","","",1,null],[13,"NumPadAmpersand","","",1,null],[13,"NumPadDblAmpersand","","",1,null],[13,"NumPadVerticalBar","","",1,null],[13,"NumPadDblVerticalBar","","",1,null],[13,"NumPadColon","","",1,null],[13,"NumPadHash","","",1,null],[13,"NumPadSpace","","",1,null],[13,"NumPadAt","","",1,null],[13,"NumPadExclam","","",1,null],[13,"NumPadMemStore","","",1,null],[13,"NumPadMemRecall","","",1,null],[13,"NumPadMemClear","","",1,null],[13,"NumPadMemAdd","","",1,null],[13,"NumPadMemSubtract","","",1,null],[13,"NumPadMemMultiply","","",1,null],[13,"NumPadMemDivide","","",1,null],[13,"NumPadPlusMinus","","",1,null],[13,"NumPadClear","","",1,null],[13,"NumPadClearEntry","","",1,null],[13,"NumPadBinary","","",1,null],[13,"NumPadOctal","","",1,null],[13,"NumPadDecimal","","",1,null],[13,"NumPadHexadecimal","","",1,null],[13,"LCtrl","","",1,null],[13,"LShift","","",1,null],[13,"LAlt","","",1,null],[13,"LGui","","",1,null],[13,"RCtrl","","",1,null],[13,"RShift","","",1,null],[13,"RAlt","","",1,null],[13,"RGui","","",1,null],[13,"Mode","","",1,null],[13,"AudioNext","","",1,null],[13,"AudioPrev","","",1,null],[13,"AudioStop","","",1,null],[13,"AudioPlay","","",1,null],[13,"AudioMute","","",1,null],[13,"MediaSelect","","",1,null],[13,"Www","","",1,null],[13,"Mail","","",1,null],[13,"Calculator","","",1,null],[13,"Computer","","",1,null],[13,"AcSearch","","",1,null],[13,"AcHome","","",1,null],[13,"AcBack","","",1,null],[13,"AcForward","","",1,null],[13,"AcStop","","",1,null],[13,"AcRefresh","","",1,null],[13,"AcBookmarks","","",1,null],[13,"BrightnessDown","","",1,null],[13,"BrightnessUp","","",1,null],[13,"DisplaySwitch","","",1,null],[13,"KbdIllumToggle","","",1,null],[13,"KbdIllumDown","","",1,null],[13,"KbdIllumUp","","",1,null],[13,"Eject","","",1,null],[13,"Sleep","","",1,null],[0,"mouse","piston::input","Back-end agnostic mouse buttons.",null,null],[4,"MouseButton","piston::input::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",2,null],[13,"Left","","Left mouse button.",2,null],[13,"Right","","Right mouse button.",2,null],[13,"Middle","","Middle mouse button.",2,null],[13,"X1","","Extra mouse button number 1.",2,null],[13,"X2","","Extra mouse button number 2.",2,null],[13,"Button6","","Mouse button number 6.",2,null],[13,"Button7","","Mouse button number 7.",2,null],[13,"Button8","","Mouse button number 8.",2,null],[4,"Button","piston::input","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",3,null],[13,"Mouse","","A mouse button.",3,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",4,null],[13,"MouseRelative","","x and y in relative coordinates.",4,null],[13,"MouseScroll","","x and y in scroll ticks.",4,null],[4,"Input","","Models input events.",null,null],[13,"Press","","Pressed a button.",5,null],[13,"Release","","Released a button.",5,null],[13,"Move","","Moved mouse cursor.",5,null],[13,"Text","","Text (usually from keyboard).",5,null],[13,"Resize","","Window got resized.",5,null],[13,"Focus","","Window gained or lost focus.",5,null],[4,"MouseButton","","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",2,null],[13,"Left","","Left mouse button.",2,null],[13,"Right","","Right mouse button.",2,null],[13,"Middle","","Middle mouse button.",2,null],[13,"X1","","Extra mouse button number 1.",2,null],[13,"X2","","Extra mouse button number 2.",2,null],[13,"Button6","","Mouse button number 6.",2,null],[13,"Button7","","Mouse button number 7.",2,null],[13,"Button8","","Mouse button number 8.",2,null],[4,"Key","","Represent a keyboard key.",null,null],[13,"Unknown","","",1,null],[13,"Backspace","","",1,null],[13,"Tab","","",1,null],[13,"Return","","",1,null],[13,"Escape","","",1,null],[13,"Space","","",1,null],[13,"Exclaim","","",1,null],[13,"Quotedbl","","",1,null],[13,"Hash","","",1,null],[13,"Dollar","","",1,null],[13,"Percent","","",1,null],[13,"Ampersand","","",1,null],[13,"Quote","","",1,null],[13,"LeftParen","","",1,null],[13,"RightParen","","",1,null],[13,"Asterisk","","",1,null],[13,"Plus","","",1,null],[13,"Comma","","",1,null],[13,"Minus","","",1,null],[13,"Period","","",1,null],[13,"Slash","","",1,null],[13,"D0","","",1,null],[13,"D1","","",1,null],[13,"D2","","",1,null],[13,"D3","","",1,null],[13,"D4","","",1,null],[13,"D5","","",1,null],[13,"D6","","",1,null],[13,"D7","","",1,null],[13,"D8","","",1,null],[13,"D9","","",1,null],[13,"Colon","","",1,null],[13,"Semicolon","","",1,null],[13,"Less","","",1,null],[13,"Equals","","",1,null],[13,"Greater","","",1,null],[13,"Question","","",1,null],[13,"At","","",1,null],[13,"LeftBracket","","",1,null],[13,"Backslash","","",1,null],[13,"RightBracket","","",1,null],[13,"Caret","","",1,null],[13,"Underscore","","",1,null],[13,"Backquote","","",1,null],[13,"A","","",1,null],[13,"B","","",1,null],[13,"C","","",1,null],[13,"D","","",1,null],[13,"E","","",1,null],[13,"F","","",1,null],[13,"G","","",1,null],[13,"H","","",1,null],[13,"I","","",1,null],[13,"J","","",1,null],[13,"K","","",1,null],[13,"L","","",1,null],[13,"M","","",1,null],[13,"N","","",1,null],[13,"O","","",1,null],[13,"P","","",1,null],[13,"Q","","",1,null],[13,"R","","",1,null],[13,"S","","",1,null],[13,"T","","",1,null],[13,"U","","",1,null],[13,"V","","",1,null],[13,"W","","",1,null],[13,"X","","",1,null],[13,"Y","","",1,null],[13,"Z","","",1,null],[13,"Delete","","",1,null],[13,"CapsLock","","",1,null],[13,"F1","","",1,null],[13,"F2","","",1,null],[13,"F3","","",1,null],[13,"F4","","",1,null],[13,"F5","","",1,null],[13,"F6","","",1,null],[13,"F7","","",1,null],[13,"F8","","",1,null],[13,"F9","","",1,null],[13,"F10","","",1,null],[13,"F11","","",1,null],[13,"F12","","",1,null],[13,"PrintScreen","","",1,null],[13,"ScrollLock","","",1,null],[13,"Pause","","",1,null],[13,"Insert","","",1,null],[13,"Home","","",1,null],[13,"PageUp","","",1,null],[13,"End","","",1,null],[13,"PageDown","","",1,null],[13,"Right","","",1,null],[13,"Left","","",1,null],[13,"Down","","",1,null],[13,"Up","","",1,null],[13,"NumLockClear","","",1,null],[13,"NumPadDivide","","",1,null],[13,"NumPadMultiply","","",1,null],[13,"NumPadMinus","","",1,null],[13,"NumPadPlus","","",1,null],[13,"NumPadEnter","","",1,null],[13,"NumPad1","","",1,null],[13,"NumPad2","","",1,null],[13,"NumPad3","","",1,null],[13,"NumPad4","","",1,null],[13,"NumPad5","","",1,null],[13,"NumPad6","","",1,null],[13,"NumPad7","","",1,null],[13,"NumPad8","","",1,null],[13,"NumPad9","","",1,null],[13,"NumPad0","","",1,null],[13,"NumPadPeriod","","",1,null],[13,"Application","","",1,null],[13,"Power","","",1,null],[13,"NumPadEquals","","",1,null],[13,"F13","","",1,null],[13,"F14","","",1,null],[13,"F15","","",1,null],[13,"F16","","",1,null],[13,"F17","","",1,null],[13,"F18","","",1,null],[13,"F19","","",1,null],[13,"F20","","",1,null],[13,"F21","","",1,null],[13,"F22","","",1,null],[13,"F23","","",1,null],[13,"F24","","",1,null],[13,"Execute","","",1,null],[13,"Help","","",1,null],[13,"Menu","","",1,null],[13,"Select","","",1,null],[13,"Stop","","",1,null],[13,"Again","","",1,null],[13,"Undo","","",1,null],[13,"Cut","","",1,null],[13,"Copy","","",1,null],[13,"Paste","","",1,null],[13,"Find","","",1,null],[13,"Mute","","",1,null],[13,"VolumeUp","","",1,null],[13,"VolumeDown","","",1,null],[13,"NumPadComma","","",1,null],[13,"NumPadEqualsAS400","","",1,null],[13,"AltErase","","",1,null],[13,"Sysreq","","",1,null],[13,"Cancel","","",1,null],[13,"Clear","","",1,null],[13,"Prior","","",1,null],[13,"Return2","","",1,null],[13,"Separator","","",1,null],[13,"Out","","",1,null],[13,"Oper","","",1,null],[13,"ClearAgain","","",1,null],[13,"CrSel","","",1,null],[13,"ExSel","","",1,null],[13,"NumPad00","","",1,null],[13,"NumPad000","","",1,null],[13,"ThousandsSeparator","","",1,null],[13,"DecimalSeparator","","",1,null],[13,"CurrencyUnit","","",1,null],[13,"CurrencySubUnit","","",1,null],[13,"NumPadLeftParen","","",1,null],[13,"NumPadRightParen","","",1,null],[13,"NumPadLeftBrace","","",1,null],[13,"NumPadRightBrace","","",1,null],[13,"NumPadTab","","",1,null],[13,"NumPadBackspace","","",1,null],[13,"NumPadA","","",1,null],[13,"NumPadB","","",1,null],[13,"NumPadC","","",1,null],[13,"NumPadD","","",1,null],[13,"NumPadE","","",1,null],[13,"NumPadF","","",1,null],[13,"NumPadXor","","",1,null],[13,"NumPadPower","","",1,null],[13,"NumPadPercent","","",1,null],[13,"NumPadLess","","",1,null],[13,"NumPadGreater","","",1,null],[13,"NumPadAmpersand","","",1,null],[13,"NumPadDblAmpersand","","",1,null],[13,"NumPadVerticalBar","","",1,null],[13,"NumPadDblVerticalBar","","",1,null],[13,"NumPadColon","","",1,null],[13,"NumPadHash","","",1,null],[13,"NumPadSpace","","",1,null],[13,"NumPadAt","","",1,null],[13,"NumPadExclam","","",1,null],[13,"NumPadMemStore","","",1,null],[13,"NumPadMemRecall","","",1,null],[13,"NumPadMemClear","","",1,null],[13,"NumPadMemAdd","","",1,null],[13,"NumPadMemSubtract","","",1,null],[13,"NumPadMemMultiply","","",1,null],[13,"NumPadMemDivide","","",1,null],[13,"NumPadPlusMinus","","",1,null],[13,"NumPadClear","","",1,null],[13,"NumPadClearEntry","","",1,null],[13,"NumPadBinary","","",1,null],[13,"NumPadOctal","","",1,null],[13,"NumPadDecimal","","",1,null],[13,"NumPadHexadecimal","","",1,null],[13,"LCtrl","","",1,null],[13,"LShift","","",1,null],[13,"LAlt","","",1,null],[13,"LGui","","",1,null],[13,"RCtrl","","",1,null],[13,"RShift","","",1,null],[13,"RAlt","","",1,null],[13,"RGui","","",1,null],[13,"Mode","","",1,null],[13,"AudioNext","","",1,null],[13,"AudioPrev","","",1,null],[13,"AudioStop","","",1,null],[13,"AudioPlay","","",1,null],[13,"AudioMute","","",1,null],[13,"MediaSelect","","",1,null],[13,"Www","","",1,null],[13,"Mail","","",1,null],[13,"Calculator","","",1,null],[13,"Computer","","",1,null],[13,"AcSearch","","",1,null],[13,"AcHome","","",1,null],[13,"AcBack","","",1,null],[13,"AcForward","","",1,null],[13,"AcStop","","",1,null],[13,"AcRefresh","","",1,null],[13,"AcBookmarks","","",1,null],[13,"BrightnessDown","","",1,null],[13,"BrightnessUp","","",1,null],[13,"DisplaySwitch","","",1,null],[13,"KbdIllumToggle","","",1,null],[13,"KbdIllumDown","","",1,null],[13,"KbdIllumUp","","",1,null],[13,"Eject","","",1,null],[13,"Sleep","","",1,null],[0,"event","piston","",null,null],[0,"generic_event","piston::event","Trait for generic events",null,null],[8,"GenericEvent","piston::event::generic_event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",6,{"inputs":[{"name":"genericevent"}],"output":{"name":"eventid"}}],[10,"with_args","","Calls closure with table",6,{"inputs":[{"name":"genericevent"},{"name":"f"}],"output":{"name":"u"}}],[10,"from_args","","Converts from table to `Self`",6,{"inputs":[{"name":"genericevent"},{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"event_id","piston::input","",5,{"inputs":[{"name":"input"}],"output":{"name":"eventid"}}],[11,"with_args","","",5,{"inputs":[{"name":"input"},{"name":"f"}],"output":{"name":"u"}}],[11,"from_args","","",5,{"inputs":[{"name":"input"},{"name":"eventid"},{"name":"any"},{"name":"input"}],"output":{"name":"option"}}],[11,"event_id","event::event","",7,{"inputs":[{"name":"event"}],"output":{"name":"eventid"}}],[11,"with_args","","",7,{"inputs":[{"name":"event"},{"name":"f"}],"output":{"name":"u"}}],[11,"from_args","","",7,{"inputs":[{"name":"event"},{"name":"eventid"},{"name":"any"},{"name":"event"}],"output":{"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"render","","",7,{"inputs":[{"name":"event"},{"name":"renderargs"}],"output":{"name":"event"}}],[11,"after_render","","",7,{"inputs":[{"name":"event"},{"name":"afterrenderargs"}],"output":{"name":"event"}}],[11,"update","","",7,{"inputs":[{"name":"event"},{"name":"updateargs"}],"output":{"name":"event"}}],[11,"idle","","",7,{"inputs":[{"name":"event"},{"name":"idleargs"}],"output":{"name":"event"}}],[11,"input","","",7,{"inputs":[{"name":"event"},{"name":"i"}],"output":{"name":"event"}}],[11,"eq","event","",8,{"inputs":[{"name":"eventid"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"eventid"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"eventid"}],"output":{"name":"eventid"}}],[11,"events","alloc::rc","",9,{"inputs":[{"name":"rc"}],"output":{"name":"events"}}],[11,"fmt","event_loop","",10,{"inputs":[{"name":"renderargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"renderargs"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"renderargs"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"renderargs"}],"output":{"name":"renderargs"}}],[11,"viewport","","Returns viewport information filling entire render area.",10,{"inputs":[{"name":"renderargs"}],"output":{"name":"viewport"}}],[11,"fmt","","",11,{"inputs":[{"name":"afterrenderargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"afterrenderargs"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"afterrenderargs"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"afterrenderargs"}}],[11,"fmt","","",12,{"inputs":[{"name":"updateargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"updateargs"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"updateargs"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"updateargs"}],"output":{"name":"updateargs"}}],[11,"fmt","","",13,{"inputs":[{"name":"idleargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"idleargs"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"idleargs"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"idleargs"}],"output":{"name":"idleargs"}}],[11,"eq","","",14,{"inputs":[{"name":"idle"},{"name":"idle"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"idle"},{"name":"idle"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"idle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"idle"}],"output":{"name":"idle"}}],[11,"fmt","","",15,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"new","","Creates a new event iterator with default UPS and FPS settings.",16,{"inputs":[{"name":"events"},{"name":"rc"}],"output":{"name":"events"}}],[11,"ups","","The number of updates per second",16,{"inputs":[{"name":"events"},{"name":"u64"}],"output":{"name":"events"}}],[11,"max_fps","","The maximum number of frames per second",16,{"inputs":[{"name":"events"},{"name":"u64"}],"output":{"name":"events"}}],[11,"swap_buffers","","Enable or disable automatic swapping of buffers.",16,{"inputs":[{"name":"events"},{"name":"bool"}],"output":{"name":"events"}}],[6,"Item","piston::event","",null,null],[11,"next","event_loop","Returns the next game event.",16,{"inputs":[{"name":"events"}],"output":{"name":"option"}}],[3,"EventId","piston::event","Used to identify events arguments provided by traits.",null,null],[8,"Events","","A trait for create event iterator from window.",null,null],[10,"events","","Creates event iterator from window.",17,{"inputs":[{"name":"events"}],"output":{"name":"events"}}],[4,"Event","","Adds render and update events to input events",null,null],[13,"Render","","Render graphics.",7,null],[13,"AfterRender","","After rendering and swapping buffers.",7,null],[13,"Update","","Update the state of the application.",7,null],[13,"Idle","","Do background tasks that can be done incrementally.",7,null],[13,"Input","","Input event.",7,null],[8,"MouseCursorEvent","","The position of the mouse cursor",null,null],[10,"from_xy","","Creates a mouse cursor event.",18,{"inputs":[{"name":"mousecursorevent"},{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_cursor","","Calls closure if this is a mouse cursor event.",18,{"inputs":[{"name":"mousecursorevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_cursor_args","","Returns mouse cursor arguments.",18,{"inputs":[{"name":"mousecursorevent"}],"output":{"name":"option"}}],[8,"IdleEvent","","When background tasks should be performed",null,null],[10,"from_idle_args","","Creates an idle event.",19,{"inputs":[{"name":"idleevent"},{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",19,{"inputs":[{"name":"idleevent"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"idle","","Calls closure if this is an idle event.",19,{"inputs":[{"name":"idleevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",19,{"inputs":[{"name":"idleevent"}],"output":{"name":"option"}}],[8,"MouseRelativeEvent","","The relative movement of mouse cursor",null,null],[10,"from_xy","","Creates a mouse relative event.",20,{"inputs":[{"name":"mouserelativeevent"},{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_relative","","Calls closure if this is a mouse relative event.",20,{"inputs":[{"name":"mouserelativeevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_relative_args","","Returns mouse relative arguments.",20,{"inputs":[{"name":"mouserelativeevent"}],"output":{"name":"option"}}],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",13,null],[8,"ReleaseEvent","","The release of a button",null,null],[10,"from_button","","Creates a release event.",21,{"inputs":[{"name":"releaseevent"},{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"release","","Calls closure if this is a release event.",21,{"inputs":[{"name":"releaseevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",21,{"inputs":[{"name":"releaseevent"}],"output":{"name":"option"}}],[8,"MouseScrollEvent","","The scroll of the mouse wheel",null,null],[10,"from_xy","","Creates a mouse scroll event.",22,{"inputs":[{"name":"mousescrollevent"},{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_scroll","","Calls a closure if this is a mouse scroll event.",22,{"inputs":[{"name":"mousescrollevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_scroll_args","","Returns mouse scroll arguments.",22,{"inputs":[{"name":"mousescrollevent"}],"output":{"name":"option"}}],[8,"ResizeEvent","","When the window is resized",null,null],[10,"from_width_height","","Creates a resize event.",23,{"inputs":[{"name":"resizeevent"},{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[10,"resize","","Calls closure if this is a resize event.",23,{"inputs":[{"name":"resizeevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",23,{"inputs":[{"name":"resizeevent"}],"output":{"name":"option"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",24,{"inputs":[{"name":"updateevent"},{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",24,{"inputs":[{"name":"updateevent"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"update","","Calls closure if this is an update event.",24,{"inputs":[{"name":"updateevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",24,{"inputs":[{"name":"updateevent"}],"output":{"name":"option"}}],[8,"PressEvent","","The press of a button",null,null],[10,"from_button","","Creates a press event.",25,{"inputs":[{"name":"pressevent"},{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"press","","Calls closure if this is a press event.",25,{"inputs":[{"name":"pressevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",25,{"inputs":[{"name":"pressevent"}],"output":{"name":"option"}}],[8,"TextEvent","","When receiving text from user, such as typing a character",null,null],[10,"from_text","","Creates a text event.",26,{"inputs":[{"name":"textevent"},{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[10,"text","","Calls closure if this is a text event.",26,{"inputs":[{"name":"textevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",26,{"inputs":[{"name":"textevent"}],"output":{"name":"option"}}],[8,"AfterRenderEvent","","After rendering and buffers are swapped.",null,null],[10,"from_after_render_args","","Creates an after render event.",27,{"inputs":[{"name":"afterrenderevent"},{"name":"afterrenderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"after_render","","Calls closure if this is an after render event.",27,{"inputs":[{"name":"afterrenderevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",27,{"inputs":[{"name":"afterrenderevent"}],"output":{"name":"option"}}],[8,"FocusEvent","","When window gets or looses focus",null,null],[10,"from_focused","","Creates a focus event.",28,{"inputs":[{"name":"focusevent"},{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"focus","","Calls closure if this is a focus event.",28,{"inputs":[{"name":"focusevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",28,{"inputs":[{"name":"focusevent"}],"output":{"name":"option"}}],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",10,null],[12,"width","","The width of rendered area in points.",10,null],[12,"height","","The height of rendered area in points.",10,null],[12,"draw_width","","The width of rendered area in pixels.",10,null],[12,"draw_height","","The height of rendered area in pixels.",10,null],[3,"UpdateArgs","","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",12,null],[0,"event_loop","","",null,null],[3,"RenderArgs","piston::event::event_loop","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",10,null],[12,"width","","The width of rendered area in points.",10,null],[12,"height","","The height of rendered area in points.",10,null],[12,"draw_width","","The width of rendered area in pixels.",10,null],[12,"draw_height","","The height of rendered area in pixels.",10,null],[3,"AfterRenderArgs","","After render arguments.",null,null],[3,"UpdateArgs","","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",12,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",13,null],[8,"EventMap","","Methods required to map from consumed event to emitted event.",null,null],[10,"render","","Creates a render event.",29,{"inputs":[{"name":"eventmap"},{"name":"renderargs"}],"output":{"name":"self"}}],[10,"after_render","","Creates an after render event.",29,{"inputs":[{"name":"eventmap"},{"name":"afterrenderargs"}],"output":{"name":"self"}}],[10,"update","","Creates an update event.",29,{"inputs":[{"name":"eventmap"},{"name":"updateargs"}],"output":{"name":"self"}}],[10,"input","","Creates an input event.",29,{"inputs":[{"name":"eventmap"},{"name":"i"}],"output":{"name":"self"}}],[10,"idle","","Creates an idle event.",29,{"inputs":[{"name":"eventmap"},{"name":"idleargs"}],"output":{"name":"self"}}],[3,"Events","","An event loop iterator",null,null],[17,"DEFAULT_UPS","","The default updates per second.",null,null],[17,"DEFAULT_MAX_FPS","","The default maximum frames per second.",null,null],[8,"GenericEvent","piston::event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",6,{"inputs":[{"name":"genericevent"}],"output":{"name":"eventid"}}],[10,"with_args","","Calls closure with table",6,{"inputs":[{"name":"genericevent"},{"name":"f"}],"output":{"name":"u"}}],[10,"from_args","","Converts from table to `Self`",6,{"inputs":[{"name":"genericevent"},{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[8,"RenderEvent","","When the next frame should be rendered",null,null],[10,"from_render_args","","Creates a render event.",30,{"inputs":[{"name":"renderevent"},{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"render","","Calls closure if this is a render event.",30,{"inputs":[{"name":"renderevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",30,{"inputs":[{"name":"renderevent"}],"output":{"name":"option"}}],[3,"AfterRenderArgs","","After render arguments.",null,null],[0,"window","piston","",null,null],[11,"clone","window","",31,{"inputs":[{"name":"size"}],"output":{"name":"size"}}],[11,"new","","Creates window settings with defaults.\n- samples: 0\n- fullscreen: false\n- exit_on_esc: false",32,{"inputs":[{"name":"windowsettings"},{"name":"string"},{"name":"size"}],"output":{"name":"windowsettings"}}],[11,"get_title","","Gets title.",32,{"inputs":[{"name":"windowsettings"}],"output":{"name":"string"}}],[11,"title","","Sets title.",32,{"inputs":[{"name":"windowsettings"},{"name":"string"}],"output":{"name":"windowsettings"}}],[11,"get_size","","Gets size.",32,{"inputs":[{"name":"windowsettings"}],"output":{"name":"size"}}],[11,"size","","Sets size.",32,{"inputs":[{"name":"windowsettings"},{"name":"size"}],"output":{"name":"windowsettings"}}],[11,"get_fullscreen","","Gets fullscreen.",32,{"inputs":[{"name":"windowsettings"}],"output":{"name":"bool"}}],[11,"fullscreen","","Sets fullscreen.",32,{"inputs":[{"name":"windowsettings"},{"name":"bool"}],"output":{"name":"windowsettings"}}],[11,"get_exit_on_esc","","Gets exit on esc.",32,{"inputs":[{"name":"windowsettings"}],"output":{"name":"bool"}}],[11,"exit_on_esc","","Sets exit on esc.",32,{"inputs":[{"name":"windowsettings"},{"name":"bool"}],"output":{"name":"windowsettings"}}],[11,"get_samples","","Gets samples.",32,{"inputs":[{"name":"windowsettings"}],"output":{"name":"u8"}}],[11,"samples","","Sets samples.",32,{"inputs":[{"name":"windowsettings"},{"name":"u8"}],"output":{"name":"windowsettings"}}],[11,"new","","Returns a new `NoWindow`.",33,{"inputs":[{"name":"nowindow"},{"name":"windowsettings"}],"output":{"name":"nowindow"}}],[6,"Event","piston::window","",null,null],[11,"should_close","window","",33,{"inputs":[{"name":"nowindow"}],"output":{"name":"bool"}}],[11,"size","","",33,{"inputs":[{"name":"nowindow"}],"output":{"name":"size"}}],[11,"swap_buffers","","",33,null],[11,"poll_event","","",33,{"inputs":[{"name":"nowindow"}],"output":{"name":"option"}}],[11,"draw_size","","",33,{"inputs":[{"name":"nowindow"}],"output":{"name":"size"}}],[11,"get_title","","",33,{"inputs":[{"name":"nowindow"}],"output":{"name":"string"}}],[11,"set_title","","",33,null],[11,"get_exit_on_esc","","",33,{"inputs":[{"name":"nowindow"}],"output":{"name":"bool"}}],[11,"set_exit_on_esc","","",33,null],[11,"set_capture_cursor","","",33,null],[6,"ProcAddress","piston::window","",null,null],[3,"Size","","Size in pixels.",null,null],[12,"width","","The width in pixels.",31,null],[12,"height","","The height in pixels.",31,null],[8,"Window","","Required to use the event loop.",null,null],[16,"Event","piston::window::Window","The event type emitted by `poll_event`",null,null],[10,"should_close","piston::window","Returns true if window should close.",34,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[10,"size","","Gets the size of the window in user coordinates.",34,{"inputs":[{"name":"window"}],"output":{"name":"size"}}],[10,"swap_buffers","","Swaps render buffers.",34,null],[10,"poll_event","","Polls event from window.",34,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[10,"draw_size","","Gets draw size of the window.\nThis is equal to the size of the frame buffer of the inner window,\nexcluding the title bar and borders.",34,{"inputs":[{"name":"window"}],"output":{"name":"size"}}],[8,"AdvancedWindow","","Implemented by fully supported window back-ends.",null,null],[10,"get_title","","Gets a copy of the title of the window.",35,{"inputs":[{"name":"advancedwindow"}],"output":{"name":"string"}}],[10,"set_title","","Sets the title of the window.",35,null],[11,"title","","Sets title on window.",35,{"inputs":[{"name":"advancedwindow"},{"name":"string"}],"output":{"name":"self"}}],[10,"get_exit_on_esc","","Gets whether to exit when pressing esc.",35,{"inputs":[{"name":"advancedwindow"}],"output":{"name":"bool"}}],[10,"set_exit_on_esc","","Sets whether to exit when pressing esc.",35,null],[11,"exit_on_esc","","Sets whether to exit when pressing esc.",35,{"inputs":[{"name":"advancedwindow"},{"name":"bool"}],"output":{"name":"self"}}],[10,"set_capture_cursor","","Sets whether to capture/grab cursor.\nThis is used to lock and hide cursor to the window,\nfor example in a first-person shooter game.",35,null],[11,"capture_cursor","","Sets whether to capture/grab cursor (see `set_capture_cursor`).",35,{"inputs":[{"name":"advancedwindow"},{"name":"bool"}],"output":{"name":"self"}}],[8,"OpenGLWindow","","Trait for OpenGL specific operations.",null,null],[10,"get_proc_address","","Returns the address of an OpenGL function if it exist, else returns null pointer.",36,null],[10,"is_current","","Returns true if this context is the current context.",36,{"inputs":[{"name":"openglwindow"}],"output":{"name":"bool"}}],[10,"make_current","","Make this context current.",36,null],[3,"WindowSettings","","Settings for window behavior.",null,null],[3,"NoWindow","","An implementation of Window that runs without a window at all.",null,null]],"paths":[[3,"ModifierKey"],[4,"Key"],[4,"MouseButton"],[4,"Button"],[4,"Motion"],[4,"Input"],[8,"GenericEvent"],[4,"Event"],[3,"EventId"],[3,"Rc"],[3,"RenderArgs"],[3,"AfterRenderArgs"],[3,"UpdateArgs"],[3,"IdleArgs"],[4,"Idle"],[4,"State"],[3,"Events"],[8,"Events"],[8,"MouseCursorEvent"],[8,"IdleEvent"],[8,"MouseRelativeEvent"],[8,"ReleaseEvent"],[8,"MouseScrollEvent"],[8,"ResizeEvent"],[8,"UpdateEvent"],[8,"PressEvent"],[8,"TextEvent"],[8,"AfterRenderEvent"],[8,"FocusEvent"],[8,"EventMap"],[8,"RenderEvent"],[3,"Size"],[3,"WindowSettings"],[3,"NoWindow"],[8,"Window"],[8,"AdvancedWindow"],[8,"OpenGLWindow"]]};
searchIndex['event'] = {"items":[[0,"","event","A library for event threading",null,null],[0,"events","","",null,null],[11,"viewport","event_loop","Returns viewport information filling entire render area.",0,{"inputs":[{"name":"renderargs"}],"output":{"name":"viewport"}}],[11,"fmt","","",0,{"inputs":[{"name":"renderargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"renderargs"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"renderargs"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"renderargs"}],"output":{"name":"renderargs"}}],[11,"fmt","","",1,{"inputs":[{"name":"afterrenderargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"afterrenderargs"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"afterrenderargs"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"afterrenderargs"}}],[11,"fmt","","",2,{"inputs":[{"name":"updateargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"updateargs"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"updateargs"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"updateargs"}],"output":{"name":"updateargs"}}],[11,"fmt","","",3,{"inputs":[{"name":"idleargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"idleargs"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"idleargs"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"idleargs"}],"output":{"name":"idleargs"}}],[11,"eq","","",4,{"inputs":[{"name":"idle"},{"name":"idle"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"idle"},{"name":"idle"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"idle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"idle"}],"output":{"name":"idle"}}],[11,"fmt","","",5,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"new","","Creates a new event iterator with default UPS and FPS settings.",6,{"inputs":[{"name":"events"},{"name":"rc"}],"output":{"name":"events"}}],[11,"ups","","The number of updates per second",6,{"inputs":[{"name":"events"},{"name":"u64"}],"output":{"name":"events"}}],[11,"max_fps","","The maximum number of frames per second",6,{"inputs":[{"name":"events"},{"name":"u64"}],"output":{"name":"events"}}],[11,"swap_buffers","","Enable or disable automatic swapping of buffers.",6,{"inputs":[{"name":"events"},{"name":"bool"}],"output":{"name":"events"}}],[6,"Item","event::events","",null,null],[11,"next","event_loop","Returns the next game event.",6,{"inputs":[{"name":"events"}],"output":{"name":"option"}}],[3,"RenderArgs","event::events","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",0,null],[12,"width","","The width of rendered area in points.",0,null],[12,"height","","The height of rendered area in points.",0,null],[12,"draw_width","","The width of rendered area in pixels.",0,null],[12,"draw_height","","The height of rendered area in pixels.",0,null],[3,"AfterRenderArgs","","After render arguments.",null,null],[3,"UpdateArgs","","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",2,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",3,null],[8,"EventMap","","Methods required to map from consumed event to emitted event.",null,null],[10,"render","","Creates a render event.",7,{"inputs":[{"name":"eventmap"},{"name":"renderargs"}],"output":{"name":"self"}}],[10,"after_render","","Creates an after render event.",7,{"inputs":[{"name":"eventmap"},{"name":"afterrenderargs"}],"output":{"name":"self"}}],[10,"update","","Creates an update event.",7,{"inputs":[{"name":"eventmap"},{"name":"updateargs"}],"output":{"name":"self"}}],[10,"input","","Creates an input event.",7,{"inputs":[{"name":"eventmap"},{"name":"i"}],"output":{"name":"self"}}],[10,"idle","","Creates an idle event.",7,{"inputs":[{"name":"eventmap"},{"name":"idleargs"}],"output":{"name":"self"}}],[3,"Events","","An event loop iterator",null,null],[17,"DEFAULT_UPS","","The default updates per second.",null,null],[17,"DEFAULT_MAX_FPS","","The default maximum frames per second.",null,null],[3,"UpdateArgs","event","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",2,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",0,null],[12,"width","","The width of rendered area in points.",0,null],[12,"height","","The height of rendered area in points.",0,null],[12,"draw_width","","The width of rendered area in pixels.",0,null],[12,"draw_height","","The height of rendered area in pixels.",0,null],[3,"AfterRenderArgs","","After render arguments.",null,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",3,null],[3,"EventId","","Used to identify events arguments provided by traits.",null,null],[4,"Event","","Adds render and update events to input events",null,null],[13,"Render","","Render graphics.",8,null],[13,"AfterRender","","After rendering and swapping buffers.",8,null],[13,"Update","","Update the state of the application.",8,null],[13,"Idle","","Do background tasks that can be done incrementally.",8,null],[13,"Input","","Input event.",8,null],[0,"generic_event","","Trait for generic events",null,null],[8,"GenericEvent","event::generic_event","Implemented by all events",null,null],[10,"event_id","","The id of this event.",9,{"inputs":[{"name":"genericevent"}],"output":{"name":"eventid"}}],[10,"with_args","","Calls closure with table",9,{"inputs":[{"name":"genericevent"},{"name":"f"}],"output":{"name":"u"}}],[10,"from_args","","Converts from table to `Self`",9,{"inputs":[{"name":"genericevent"},{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"event_id","input","",10,{"inputs":[{"name":"input"}],"output":{"name":"eventid"}}],[11,"with_args","","",10,{"inputs":[{"name":"input"},{"name":"f"}],"output":{"name":"u"}}],[11,"from_args","","",10,{"inputs":[{"name":"input"},{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"event_id","event","",8,{"inputs":[{"name":"event"}],"output":{"name":"eventid"}}],[11,"with_args","","",8,{"inputs":[{"name":"event"},{"name":"f"}],"output":{"name":"u"}}],[11,"from_args","","",8,{"inputs":[{"name":"event"},{"name":"eventid"},{"name":"any"},{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"render","","",8,{"inputs":[{"name":"event"},{"name":"renderargs"}],"output":{"name":"event"}}],[11,"after_render","","",8,{"inputs":[{"name":"event"},{"name":"afterrenderargs"}],"output":{"name":"event"}}],[11,"update","","",8,{"inputs":[{"name":"event"},{"name":"updateargs"}],"output":{"name":"event"}}],[11,"idle","","",8,{"inputs":[{"name":"event"},{"name":"idleargs"}],"output":{"name":"event"}}],[11,"input","","",8,{"inputs":[{"name":"event"},{"name":"i"}],"output":{"name":"event"}}],[8,"UpdateEvent","","When the application state should be updated",null,null],[10,"from_update_args","","Creates an update event.",11,{"inputs":[{"name":"updateevent"},{"name":"updateargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",11,{"inputs":[{"name":"updateevent"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"update","","Calls closure if this is an update event.",11,{"inputs":[{"name":"updateevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"update_args","","Returns update arguments.",11,{"inputs":[{"name":"updateevent"}],"output":{"name":"option"}}],[8,"RenderEvent","","When the next frame should be rendered",null,null],[10,"from_render_args","","Creates a render event.",12,{"inputs":[{"name":"renderevent"},{"name":"renderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"render","","Calls closure if this is a render event.",12,{"inputs":[{"name":"renderevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"render_args","","Returns render arguments.",12,{"inputs":[{"name":"renderevent"}],"output":{"name":"option"}}],[8,"AfterRenderEvent","","After rendering and buffers are swapped.",null,null],[10,"from_after_render_args","","Creates an after render event.",13,{"inputs":[{"name":"afterrenderevent"},{"name":"afterrenderargs"},{"name":"self"}],"output":{"name":"option"}}],[10,"after_render","","Calls closure if this is an after render event.",13,{"inputs":[{"name":"afterrenderevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"after_render_args","","Returns after render arguments.",13,{"inputs":[{"name":"afterrenderevent"}],"output":{"name":"option"}}],[8,"IdleEvent","","When background tasks should be performed",null,null],[10,"from_idle_args","","Creates an idle event.",14,{"inputs":[{"name":"idleevent"},{"name":"idleargs"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_dt","","Creates an update event with delta time.",14,{"inputs":[{"name":"idleevent"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"idle","","Calls closure if this is an idle event.",14,{"inputs":[{"name":"idleevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"idle_args","","Returns idle arguments.",14,{"inputs":[{"name":"idleevent"}],"output":{"name":"option"}}],[8,"PressEvent","","The press of a button",null,null],[10,"from_button","","Creates a press event.",15,{"inputs":[{"name":"pressevent"},{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"press","","Calls closure if this is a press event.",15,{"inputs":[{"name":"pressevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"press_args","","Returns press arguments.",15,{"inputs":[{"name":"pressevent"}],"output":{"name":"option"}}],[8,"ReleaseEvent","","The release of a button",null,null],[10,"from_button","","Creates a release event.",16,{"inputs":[{"name":"releaseevent"},{"name":"button"},{"name":"self"}],"output":{"name":"option"}}],[10,"release","","Calls closure if this is a release event.",16,{"inputs":[{"name":"releaseevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"release_args","","Returns release arguments.",16,{"inputs":[{"name":"releaseevent"}],"output":{"name":"option"}}],[8,"MouseCursorEvent","","The position of the mouse cursor",null,null],[10,"from_xy","","Creates a mouse cursor event.",17,{"inputs":[{"name":"mousecursorevent"},{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_cursor","","Calls closure if this is a mouse cursor event.",17,{"inputs":[{"name":"mousecursorevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_cursor_args","","Returns mouse cursor arguments.",17,{"inputs":[{"name":"mousecursorevent"}],"output":{"name":"option"}}],[8,"MouseRelativeEvent","","The relative movement of mouse cursor",null,null],[10,"from_xy","","Creates a mouse relative event.",18,{"inputs":[{"name":"mouserelativeevent"},{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_relative","","Calls closure if this is a mouse relative event.",18,{"inputs":[{"name":"mouserelativeevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_relative_args","","Returns mouse relative arguments.",18,{"inputs":[{"name":"mouserelativeevent"}],"output":{"name":"option"}}],[8,"MouseScrollEvent","","The scroll of the mouse wheel",null,null],[10,"from_xy","","Creates a mouse scroll event.",19,{"inputs":[{"name":"mousescrollevent"},{"name":"f64"},{"name":"f64"},{"name":"self"}],"output":{"name":"option"}}],[10,"mouse_scroll","","Calls a closure if this is a mouse scroll event.",19,{"inputs":[{"name":"mousescrollevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"mouse_scroll_args","","Returns mouse scroll arguments.",19,{"inputs":[{"name":"mousescrollevent"}],"output":{"name":"option"}}],[8,"TextEvent","","When receiving text from user, such as typing a character",null,null],[10,"from_text","","Creates a text event.",20,{"inputs":[{"name":"textevent"},{"name":"str"},{"name":"self"}],"output":{"name":"option"}}],[10,"text","","Calls closure if this is a text event.",20,{"inputs":[{"name":"textevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"text_args","","Returns text arguments.",20,{"inputs":[{"name":"textevent"}],"output":{"name":"option"}}],[8,"ResizeEvent","","When the window is resized",null,null],[10,"from_width_height","","Creates a resize event.",21,{"inputs":[{"name":"resizeevent"},{"name":"u32"},{"name":"u32"},{"name":"self"}],"output":{"name":"option"}}],[10,"resize","","Calls closure if this is a resize event.",21,{"inputs":[{"name":"resizeevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"resize_args","","Returns resize arguments.",21,{"inputs":[{"name":"resizeevent"}],"output":{"name":"option"}}],[8,"FocusEvent","","When window gets or looses focus",null,null],[10,"from_focused","","Creates a focus event.",22,{"inputs":[{"name":"focusevent"},{"name":"bool"},{"name":"self"}],"output":{"name":"option"}}],[10,"focus","","Calls closure if this is a focus event.",22,{"inputs":[{"name":"focusevent"},{"name":"f"}],"output":{"name":"option"}}],[11,"focus_args","","Returns focus arguments.",22,{"inputs":[{"name":"focusevent"}],"output":{"name":"option"}}],[8,"Events","","A trait for create event iterator from window.",null,null],[10,"events","","Creates event iterator from window.",23,{"inputs":[{"name":"events"}],"output":{"name":"events"}}],[11,"eq","","",24,{"inputs":[{"name":"eventid"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"eventid"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"eventid"}],"output":{"name":"eventid"}}],[11,"events","alloc::rc","",25,{"inputs":[{"name":"rc"}],"output":{"name":"events"}}],[11,"from_dt","event","Creates an update event with delta time.",11,null],[11,"update_args","","Returns update arguments.",11,null],[11,"render_args","","Returns render arguments.",12,null],[11,"after_render_args","","Returns after render arguments.",13,null],[11,"from_dt","","Creates an update event with delta time.",14,null],[11,"idle_args","","Returns idle arguments.",14,null],[11,"press_args","","Returns press arguments.",15,null],[11,"release_args","","Returns release arguments.",16,null],[11,"mouse_cursor_args","","Returns mouse cursor arguments.",17,null],[11,"mouse_relative_args","","Returns mouse relative arguments.",18,null],[11,"mouse_scroll_args","","Returns mouse scroll arguments.",19,null],[11,"text_args","","Returns text arguments.",20,null],[11,"resize_args","","Returns resize arguments.",21,null],[11,"focus_args","","Returns focus arguments.",22,null]],"paths":[[3,"RenderArgs"],[3,"AfterRenderArgs"],[3,"UpdateArgs"],[3,"IdleArgs"],[4,"Idle"],[4,"State"],[3,"Events"],[8,"EventMap"],[4,"Event"],[8,"GenericEvent"],[4,"Input"],[8,"UpdateEvent"],[8,"RenderEvent"],[8,"AfterRenderEvent"],[8,"IdleEvent"],[8,"PressEvent"],[8,"ReleaseEvent"],[8,"MouseCursorEvent"],[8,"MouseRelativeEvent"],[8,"MouseScrollEvent"],[8,"TextEvent"],[8,"ResizeEvent"],[8,"FocusEvent"],[8,"Events"],[3,"EventId"],[3,"Rc"]]};
searchIndex['event_loop'] = {"items":[[0,"","event_loop","A generic event loop for games and interactive applications",null,null],[3,"RenderArgs","","Render arguments",null,null],[12,"ext_dt","","Extrapolated time in seconds, used to do smooth animation.",0,null],[12,"width","","The width of rendered area in points.",0,null],[12,"height","","The height of rendered area in points.",0,null],[12,"draw_width","","The width of rendered area in pixels.",0,null],[12,"draw_height","","The height of rendered area in pixels.",0,null],[3,"AfterRenderArgs","","After render arguments.",null,null],[3,"UpdateArgs","","Update arguments, such as delta time in seconds",null,null],[12,"dt","","Delta time in seconds.",1,null],[3,"IdleArgs","","Idle arguments, such as expected idle time in seconds.",null,null],[12,"dt","","Expected idle time in seconds.",2,null],[3,"Events","","An event loop iterator",null,null],[17,"DEFAULT_UPS","","The default updates per second.",null,null],[17,"DEFAULT_MAX_FPS","","The default maximum frames per second.",null,null],[8,"EventMap","","Methods required to map from consumed event to emitted event.",null,null],[10,"render","","Creates a render event.",3,{"inputs":[{"name":"eventmap"},{"name":"renderargs"}],"output":{"name":"self"}}],[10,"after_render","","Creates an after render event.",3,{"inputs":[{"name":"eventmap"},{"name":"afterrenderargs"}],"output":{"name":"self"}}],[10,"update","","Creates an update event.",3,{"inputs":[{"name":"eventmap"},{"name":"updateargs"}],"output":{"name":"self"}}],[10,"input","","Creates an input event.",3,{"inputs":[{"name":"eventmap"},{"name":"i"}],"output":{"name":"self"}}],[10,"idle","","Creates an idle event.",3,{"inputs":[{"name":"eventmap"},{"name":"idleargs"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"renderargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"renderargs"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"renderargs"},{"name":"renderargs"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"renderargs"}],"output":{"name":"renderargs"}}],[11,"viewport","","Returns viewport information filling entire render area.",0,{"inputs":[{"name":"renderargs"}],"output":{"name":"viewport"}}],[11,"fmt","","",4,{"inputs":[{"name":"afterrenderargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"afterrenderargs"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"afterrenderargs"},{"name":"afterrenderargs"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"afterrenderargs"}],"output":{"name":"afterrenderargs"}}],[11,"fmt","","",1,{"inputs":[{"name":"updateargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"updateargs"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"updateargs"},{"name":"updateargs"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"updateargs"}],"output":{"name":"updateargs"}}],[11,"fmt","","",2,{"inputs":[{"name":"idleargs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"idleargs"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"idleargs"},{"name":"idleargs"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"idleargs"}],"output":{"name":"idleargs"}}],[11,"new","","Creates a new event iterator with default UPS and FPS settings.",5,{"inputs":[{"name":"events"},{"name":"rc"}],"output":{"name":"events"}}],[11,"ups","","The number of updates per second",5,{"inputs":[{"name":"events"},{"name":"u64"}],"output":{"name":"self"}}],[11,"max_fps","","The maximum number of frames per second",5,{"inputs":[{"name":"events"},{"name":"u64"}],"output":{"name":"self"}}],[11,"swap_buffers","","Enable or disable automatic swapping of buffers.",5,{"inputs":[{"name":"events"},{"name":"bool"}],"output":{"name":"self"}}],[6,"Item","","",null,null],[11,"next","","Returns the next game event.",5,{"inputs":[{"name":"events"}],"output":{"name":"option"}}]],"paths":[[3,"RenderArgs"],[3,"UpdateArgs"],[3,"IdleArgs"],[8,"EventMap"],[3,"AfterRenderArgs"],[3,"Events"]]};
searchIndex['window'] = {"items":[[0,"","window","Window abstraction",null,null],[3,"Size","","Size in pixels.",null,null],[12,"width","","The width in pixels.",0,null],[12,"height","","The height in pixels.",0,null],[3,"WindowSettings","","Settings for window behavior.",null,null],[3,"NoWindow","","An implementation of Window that runs without a window at all.",null,null],[6,"ProcAddress","","The type of an OpenGL function address.",null,null],[8,"Window","","Required to use the event loop.",null,null],[16,"Event","window::Window","The event type emitted by `poll_event`",null,null],[10,"should_close","window","Returns true if window should close.",1,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[10,"size","","Gets the size of the window in user coordinates.",1,{"inputs":[{"name":"window"}],"output":{"name":"size"}}],[10,"swap_buffers","","Swaps render buffers.",1,{"inputs":[{"name":"window"}],"output":null}],[10,"poll_event","","Polls event from window.",1,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[10,"draw_size","","Gets draw size of the window.\nThis is equal to the size of the frame buffer of the inner window,\nexcluding the title bar and borders.",1,{"inputs":[{"name":"window"}],"output":{"name":"size"}}],[8,"AdvancedWindow","","Implemented by fully supported window back-ends.",null,null],[10,"get_title","","Gets a copy of the title of the window.",2,{"inputs":[{"name":"advancedwindow"}],"output":{"name":"string"}}],[10,"set_title","","Sets the title of the window.",2,{"inputs":[{"name":"advancedwindow"},{"name":"string"}],"output":null}],[11,"title","","Sets title on window.",2,{"inputs":[{"name":"advancedwindow"},{"name":"string"}],"output":{"name":"self"}}],[10,"get_exit_on_esc","","Gets whether to exit when pressing esc.",2,{"inputs":[{"name":"advancedwindow"}],"output":{"name":"bool"}}],[10,"set_exit_on_esc","","Sets whether to exit when pressing esc.",2,{"inputs":[{"name":"advancedwindow"},{"name":"bool"}],"output":null}],[11,"exit_on_esc","","Sets whether to exit when pressing esc.",2,{"inputs":[{"name":"advancedwindow"},{"name":"bool"}],"output":{"name":"self"}}],[10,"set_capture_cursor","","Sets whether to capture/grab cursor.\nThis is used to lock and hide cursor to the window,\nfor example in a first-person shooter game.",2,{"inputs":[{"name":"advancedwindow"},{"name":"bool"}],"output":null}],[11,"capture_cursor","","Sets whether to capture/grab cursor (see `set_capture_cursor`).",2,{"inputs":[{"name":"advancedwindow"},{"name":"bool"}],"output":{"name":"self"}}],[8,"OpenGLWindow","","Trait for OpenGL specific operations.",null,null],[10,"get_proc_address","","Returns the address of an OpenGL function if it exist, else returns null pointer.",3,{"inputs":[{"name":"openglwindow"},{"name":"str"}],"output":{"name":"procaddress"}}],[10,"is_current","","Returns true if this context is the current context.",3,{"inputs":[{"name":"openglwindow"}],"output":{"name":"bool"}}],[10,"make_current","","Make this context current.",3,{"inputs":[{"name":"openglwindow"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"size"}],"output":{"name":"size"}}],[11,"new","","Creates window settings with defaults.\n- samples: 0\n- fullscreen: false\n- exit_on_esc: false",4,{"inputs":[{"name":"windowsettings"},{"name":"string"},{"name":"size"}],"output":{"name":"windowsettings"}}],[11,"get_title","","Gets title.",4,{"inputs":[{"name":"windowsettings"}],"output":{"name":"string"}}],[11,"title","","Sets title.",4,{"inputs":[{"name":"windowsettings"},{"name":"string"}],"output":{"name":"self"}}],[11,"get_size","","Gets size.",4,{"inputs":[{"name":"windowsettings"}],"output":{"name":"size"}}],[11,"size","","Sets size.",4,{"inputs":[{"name":"windowsettings"},{"name":"size"}],"output":{"name":"self"}}],[11,"get_fullscreen","","Gets fullscreen.",4,{"inputs":[{"name":"windowsettings"}],"output":{"name":"bool"}}],[11,"fullscreen","","Sets fullscreen.",4,{"inputs":[{"name":"windowsettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_exit_on_esc","","Gets exit on esc.",4,{"inputs":[{"name":"windowsettings"}],"output":{"name":"bool"}}],[11,"exit_on_esc","","Sets exit on esc.",4,{"inputs":[{"name":"windowsettings"},{"name":"bool"}],"output":{"name":"self"}}],[11,"get_samples","","Gets samples.",4,{"inputs":[{"name":"windowsettings"}],"output":{"name":"u8"}}],[11,"samples","","Sets samples.",4,{"inputs":[{"name":"windowsettings"},{"name":"u8"}],"output":{"name":"self"}}],[11,"new","","Returns a new `NoWindow`.",5,{"inputs":[{"name":"nowindow"},{"name":"windowsettings"}],"output":{"name":"nowindow"}}],[6,"Event","","",null,null],[11,"should_close","","",5,{"inputs":[{"name":"nowindow"}],"output":{"name":"bool"}}],[11,"size","","",5,{"inputs":[{"name":"nowindow"}],"output":{"name":"size"}}],[11,"swap_buffers","","",5,{"inputs":[{"name":"nowindow"}],"output":null}],[11,"poll_event","","",5,{"inputs":[{"name":"nowindow"}],"output":{"name":"option"}}],[11,"draw_size","","",5,{"inputs":[{"name":"nowindow"}],"output":{"name":"size"}}],[11,"get_title","","",5,{"inputs":[{"name":"nowindow"}],"output":{"name":"string"}}],[11,"set_title","","",5,{"inputs":[{"name":"nowindow"},{"name":"string"}],"output":null}],[11,"get_exit_on_esc","","",5,{"inputs":[{"name":"nowindow"}],"output":{"name":"bool"}}],[11,"set_exit_on_esc","","",5,{"inputs":[{"name":"nowindow"},{"name":"bool"}],"output":null}],[11,"set_capture_cursor","","",5,{"inputs":[{"name":"nowindow"},{"name":"bool"}],"output":null}]],"paths":[[3,"Size"],[8,"Window"],[8,"AdvancedWindow"],[8,"OpenGLWindow"],[3,"WindowSettings"],[3,"NoWindow"]]};
searchIndex['input'] = {"items":[[0,"","input","A flexible structure for user interactions\nto be used in window frameworks and widgets libraries.",null,null],[4,"Button","","Models different kinds of buttons.",null,null],[13,"Keyboard","","A keyboard button.",0,null],[13,"Mouse","","A mouse button.",0,null],[4,"Motion","","Models different kinds of motion.",null,null],[13,"MouseCursor","","x and y in window coordinates.",1,null],[13,"MouseRelative","","x and y in relative coordinates.",1,null],[13,"MouseScroll","","x and y in scroll ticks.",1,null],[4,"Input","","Models input events.",null,null],[13,"Press","","Pressed a button.",2,null],[13,"Release","","Released a button.",2,null],[13,"Move","","Moved mouse cursor.",2,null],[13,"Text","","Text (usually from keyboard).",2,null],[13,"Resize","","Window got resized.",2,null],[13,"Focus","","Window gained or lost focus.",2,null],[0,"keyboard","","Back-end agnostic keyboard keys.",null,null],[3,"ModifierKey","input::keyboard","",null,null],[4,"Key","","Represent a keyboard key.",null,null],[13,"Unknown","","",3,null],[13,"Backspace","","",3,null],[13,"Tab","","",3,null],[13,"Return","","",3,null],[13,"Escape","","",3,null],[13,"Space","","",3,null],[13,"Exclaim","","",3,null],[13,"Quotedbl","","",3,null],[13,"Hash","","",3,null],[13,"Dollar","","",3,null],[13,"Percent","","",3,null],[13,"Ampersand","","",3,null],[13,"Quote","","",3,null],[13,"LeftParen","","",3,null],[13,"RightParen","","",3,null],[13,"Asterisk","","",3,null],[13,"Plus","","",3,null],[13,"Comma","","",3,null],[13,"Minus","","",3,null],[13,"Period","","",3,null],[13,"Slash","","",3,null],[13,"D0","","",3,null],[13,"D1","","",3,null],[13,"D2","","",3,null],[13,"D3","","",3,null],[13,"D4","","",3,null],[13,"D5","","",3,null],[13,"D6","","",3,null],[13,"D7","","",3,null],[13,"D8","","",3,null],[13,"D9","","",3,null],[13,"Colon","","",3,null],[13,"Semicolon","","",3,null],[13,"Less","","",3,null],[13,"Equals","","",3,null],[13,"Greater","","",3,null],[13,"Question","","",3,null],[13,"At","","",3,null],[13,"LeftBracket","","",3,null],[13,"Backslash","","",3,null],[13,"RightBracket","","",3,null],[13,"Caret","","",3,null],[13,"Underscore","","",3,null],[13,"Backquote","","",3,null],[13,"A","","",3,null],[13,"B","","",3,null],[13,"C","","",3,null],[13,"D","","",3,null],[13,"E","","",3,null],[13,"F","","",3,null],[13,"G","","",3,null],[13,"H","","",3,null],[13,"I","","",3,null],[13,"J","","",3,null],[13,"K","","",3,null],[13,"L","","",3,null],[13,"M","","",3,null],[13,"N","","",3,null],[13,"O","","",3,null],[13,"P","","",3,null],[13,"Q","","",3,null],[13,"R","","",3,null],[13,"S","","",3,null],[13,"T","","",3,null],[13,"U","","",3,null],[13,"V","","",3,null],[13,"W","","",3,null],[13,"X","","",3,null],[13,"Y","","",3,null],[13,"Z","","",3,null],[13,"Delete","","",3,null],[13,"CapsLock","","",3,null],[13,"F1","","",3,null],[13,"F2","","",3,null],[13,"F3","","",3,null],[13,"F4","","",3,null],[13,"F5","","",3,null],[13,"F6","","",3,null],[13,"F7","","",3,null],[13,"F8","","",3,null],[13,"F9","","",3,null],[13,"F10","","",3,null],[13,"F11","","",3,null],[13,"F12","","",3,null],[13,"PrintScreen","","",3,null],[13,"ScrollLock","","",3,null],[13,"Pause","","",3,null],[13,"Insert","","",3,null],[13,"Home","","",3,null],[13,"PageUp","","",3,null],[13,"End","","",3,null],[13,"PageDown","","",3,null],[13,"Right","","",3,null],[13,"Left","","",3,null],[13,"Down","","",3,null],[13,"Up","","",3,null],[13,"NumLockClear","","",3,null],[13,"NumPadDivide","","",3,null],[13,"NumPadMultiply","","",3,null],[13,"NumPadMinus","","",3,null],[13,"NumPadPlus","","",3,null],[13,"NumPadEnter","","",3,null],[13,"NumPad1","","",3,null],[13,"NumPad2","","",3,null],[13,"NumPad3","","",3,null],[13,"NumPad4","","",3,null],[13,"NumPad5","","",3,null],[13,"NumPad6","","",3,null],[13,"NumPad7","","",3,null],[13,"NumPad8","","",3,null],[13,"NumPad9","","",3,null],[13,"NumPad0","","",3,null],[13,"NumPadPeriod","","",3,null],[13,"Application","","",3,null],[13,"Power","","",3,null],[13,"NumPadEquals","","",3,null],[13,"F13","","",3,null],[13,"F14","","",3,null],[13,"F15","","",3,null],[13,"F16","","",3,null],[13,"F17","","",3,null],[13,"F18","","",3,null],[13,"F19","","",3,null],[13,"F20","","",3,null],[13,"F21","","",3,null],[13,"F22","","",3,null],[13,"F23","","",3,null],[13,"F24","","",3,null],[13,"Execute","","",3,null],[13,"Help","","",3,null],[13,"Menu","","",3,null],[13,"Select","","",3,null],[13,"Stop","","",3,null],[13,"Again","","",3,null],[13,"Undo","","",3,null],[13,"Cut","","",3,null],[13,"Copy","","",3,null],[13,"Paste","","",3,null],[13,"Find","","",3,null],[13,"Mute","","",3,null],[13,"VolumeUp","","",3,null],[13,"VolumeDown","","",3,null],[13,"NumPadComma","","",3,null],[13,"NumPadEqualsAS400","","",3,null],[13,"AltErase","","",3,null],[13,"Sysreq","","",3,null],[13,"Cancel","","",3,null],[13,"Clear","","",3,null],[13,"Prior","","",3,null],[13,"Return2","","",3,null],[13,"Separator","","",3,null],[13,"Out","","",3,null],[13,"Oper","","",3,null],[13,"ClearAgain","","",3,null],[13,"CrSel","","",3,null],[13,"ExSel","","",3,null],[13,"NumPad00","","",3,null],[13,"NumPad000","","",3,null],[13,"ThousandsSeparator","","",3,null],[13,"DecimalSeparator","","",3,null],[13,"CurrencyUnit","","",3,null],[13,"CurrencySubUnit","","",3,null],[13,"NumPadLeftParen","","",3,null],[13,"NumPadRightParen","","",3,null],[13,"NumPadLeftBrace","","",3,null],[13,"NumPadRightBrace","","",3,null],[13,"NumPadTab","","",3,null],[13,"NumPadBackspace","","",3,null],[13,"NumPadA","","",3,null],[13,"NumPadB","","",3,null],[13,"NumPadC","","",3,null],[13,"NumPadD","","",3,null],[13,"NumPadE","","",3,null],[13,"NumPadF","","",3,null],[13,"NumPadXor","","",3,null],[13,"NumPadPower","","",3,null],[13,"NumPadPercent","","",3,null],[13,"NumPadLess","","",3,null],[13,"NumPadGreater","","",3,null],[13,"NumPadAmpersand","","",3,null],[13,"NumPadDblAmpersand","","",3,null],[13,"NumPadVerticalBar","","",3,null],[13,"NumPadDblVerticalBar","","",3,null],[13,"NumPadColon","","",3,null],[13,"NumPadHash","","",3,null],[13,"NumPadSpace","","",3,null],[13,"NumPadAt","","",3,null],[13,"NumPadExclam","","",3,null],[13,"NumPadMemStore","","",3,null],[13,"NumPadMemRecall","","",3,null],[13,"NumPadMemClear","","",3,null],[13,"NumPadMemAdd","","",3,null],[13,"NumPadMemSubtract","","",3,null],[13,"NumPadMemMultiply","","",3,null],[13,"NumPadMemDivide","","",3,null],[13,"NumPadPlusMinus","","",3,null],[13,"NumPadClear","","",3,null],[13,"NumPadClearEntry","","",3,null],[13,"NumPadBinary","","",3,null],[13,"NumPadOctal","","",3,null],[13,"NumPadDecimal","","",3,null],[13,"NumPadHexadecimal","","",3,null],[13,"LCtrl","","",3,null],[13,"LShift","","",3,null],[13,"LAlt","","",3,null],[13,"LGui","","",3,null],[13,"RCtrl","","",3,null],[13,"RShift","","",3,null],[13,"RAlt","","",3,null],[13,"RGui","","",3,null],[13,"Mode","","",3,null],[13,"AudioNext","","",3,null],[13,"AudioPrev","","",3,null],[13,"AudioStop","","",3,null],[13,"AudioPlay","","",3,null],[13,"AudioMute","","",3,null],[13,"MediaSelect","","",3,null],[13,"Www","","",3,null],[13,"Mail","","",3,null],[13,"Calculator","","",3,null],[13,"Computer","","",3,null],[13,"AcSearch","","",3,null],[13,"AcHome","","",3,null],[13,"AcBack","","",3,null],[13,"AcForward","","",3,null],[13,"AcStop","","",3,null],[13,"AcRefresh","","",3,null],[13,"AcBookmarks","","",3,null],[13,"BrightnessDown","","",3,null],[13,"BrightnessUp","","",3,null],[13,"DisplaySwitch","","",3,null],[13,"KbdIllumToggle","","",3,null],[13,"KbdIllumDown","","",3,null],[13,"KbdIllumUp","","",3,null],[13,"Eject","","",3,null],[13,"Sleep","","",3,null],[17,"NO_MODIFIER","","",null,null],[17,"CTRL","","",null,null],[17,"SHIFT","","",null,null],[17,"ALT","","",null,null],[17,"GUI","","",null,null],[17,"CTRL_SHIFT","","",null,null],[17,"CTRL_ALT","","",null,null],[17,"CTRL_GUI","","",null,null],[17,"CTRL_SHIFT_ALT","","",null,null],[17,"CTRL_SHIFT_GUI","","",null,null],[17,"CTRL_SHIFT_ALT_GUI","","",null,null],[17,"SHIFT_ALT","","",null,null],[17,"SHIFT_GUI","","",null,null],[17,"SHIFT_ALT_GUI","","",null,null],[17,"ALT_GUI","","",null,null],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"eq","","",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"modifierkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"modifierkey"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"modifierkey"},{"name":"__d"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",4,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"all","","Returns the set containing all flags.",4,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"bits","","Returns the raw value of the flags currently stored.",4,{"inputs":[{"name":"modifierkey"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",4,{"inputs":[{"name":"modifierkey"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",4,{"inputs":[{"name":"modifierkey"},{"name":"u8"}],"output":{"name":"modifierkey"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",4,{"inputs":[{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",4,{"inputs":[{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",4,{"inputs":[{"name":"modifierkey"},{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",4,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"handle_input","","Change modifier key state depending on input.",4,{"inputs":[{"name":"modifierkey"},{"name":"input"}],"output":null}],[11,"default","","",4,{"inputs":[{"name":"modifierkey"}],"output":{"name":"modifierkey"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"key"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"key"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"eq","","",3,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"ordering"}}],[11,"code","","Returns an id of the key",3,{"inputs":[{"name":"key"}],"output":{"name":"i32"}}],[11,"to_i64","","",3,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"to_isize","","",3,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"key"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"key"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_isize","","",3,{"inputs":[{"name":"key"},{"name":"isize"}],"output":{"name":"option"}}],[0,"mouse","input","Back-end agnostic mouse buttons.",null,null],[4,"MouseButton","input::mouse","Represent a mouse button.",null,null],[13,"Unknown","","Unknown mouse button.",5,null],[13,"Left","","Left mouse button.",5,null],[13,"Right","","Right mouse button.",5,null],[13,"Middle","","Middle mouse button.",5,null],[13,"X1","","Extra mouse button number 1.",5,null],[13,"X2","","Extra mouse button number 2.",5,null],[13,"Button6","","Mouse button number 6.",5,null],[13,"Button7","","Mouse button number 7.",5,null],[13,"Button8","","Mouse button number 8.",5,null],[11,"fmt","","",5,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"encode","","",5,{"inputs":[{"name":"mousebutton"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"mousebutton"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"from_u64","","",5,{"inputs":[{"name":"mousebutton"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"mousebutton"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_isize","","",5,{"inputs":[{"name":"mousebutton"},{"name":"isize"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"to_i64","","",5,{"inputs":[{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"to_isize","","",5,{"inputs":[{"name":"mousebutton"}],"output":{"name":"option"}}],[11,"fmt","input","",0,{"inputs":[{"name":"button"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"button"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"button"},{"name":"button"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"button"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"button"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"button"}],"output":{"name":"button"}}],[11,"fmt","","",1,{"inputs":[{"name":"motion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"motion"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"motion"},{"name":"motion"}],"output":{"name":"bool"}}],[11,"encode","","",1,{"inputs":[{"name":"motion"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"motion"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"motion"}],"output":{"name":"motion"}}],[11,"fmt","","",2,{"inputs":[{"name":"input"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"input"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"input"},{"name":"input"}],"output":{"name":"bool"}}],[11,"encode","","",2,{"inputs":[{"name":"input"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"input"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"input"}],"output":{"name":"input"}}]],"paths":[[4,"Button"],[4,"Motion"],[4,"Input"],[4,"Key"],[3,"ModifierKey"],[4,"MouseButton"]]};
searchIndex['gfx'] = {"items":[[0,"","gfx","An efficient, low-level, bindless graphics API for Rust. See [the\nblog](http://gfx-rs.github.io/) for explanations and annotated examples.",null,null],[11,"new","draw_state","Create a default `DrawState`. Uses counter-clockwise winding, culls the backface of each\nprimitive, and does no scissor/stencil/depth/blend/color masking.",0,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"get_target_mask","","Return a target mask that contains all the planes required by this state.",0,{"inputs":[{"name":"drawstate"}],"output":{"name":"mask"}}],[11,"multi_sample","","Enable multi-sampled rasterization",0,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"stencil","","Set the stencil test to a simple expression",0,{"inputs":[{"name":"drawstate"},{"name":"comparison"},{"name":"u8"}],"output":{"name":"drawstate"}}],[11,"depth","","Set the depth test with the mask",0,{"inputs":[{"name":"drawstate"},{"name":"comparison"},{"name":"bool"}],"output":{"name":"drawstate"}}],[11,"scissor","","Set the scissor",0,{"inputs":[{"name":"drawstate"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"drawstate"}}],[11,"blend","","Set the blend mode to one of the presets",0,{"inputs":[{"name":"drawstate"},{"name":"blendpreset"}],"output":{"name":"drawstate"}}],[11,"fmt","draw_state::state","",1,{"inputs":[{"name":"frontface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"frontface"}],"output":{"name":"frontface"}}],[11,"hash","","",1,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"fmt","","",2,{"inputs":[{"name":"offset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"offset"}],"output":{"name":"offset"}}],[11,"fmt","","",3,{"inputs":[{"name":"cullface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"cullface"}],"output":{"name":"cullface"}}],[11,"fmt","","",4,{"inputs":[{"name":"rastermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"rastermethod"}],"output":{"name":"rastermethod"}}],[11,"fmt","","",5,{"inputs":[{"name":"primitive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"primitive"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"primitive"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"primitive"}],"output":{"name":"primitive"}}],[11,"get_cull_face","","Get the cull face, if any, for this primitive state.",5,{"inputs":[{"name":"primitive"}],"output":{"name":"cullface"}}],[11,"default","","",5,{"inputs":[{"name":"primitive"}],"output":{"name":"primitive"}}],[11,"fmt","","",6,{"inputs":[{"name":"multisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"multisample"}],"output":{"name":"multisample"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"fmt","","",7,{"inputs":[{"name":"comparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"comparison"}],"output":{"name":"comparison"}}],[11,"hash","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"fmt","","",8,{"inputs":[{"name":"stencilop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"stencilop"}],"output":{"name":"stencilop"}}],[11,"hash","","",8,null],[11,"partial_cmp","","",8,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"fmt","","",9,{"inputs":[{"name":"stencilside"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"default","","",9,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"fmt","","",10,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"hash","","",10,null],[11,"partial_cmp","","",10,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"fmt","","",11,{"inputs":[{"name":"depth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"hash","","",11,null],[11,"partial_cmp","","",11,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"default","","",11,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"fmt","","",12,{"inputs":[{"name":"equation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"equation"}],"output":{"name":"equation"}}],[11,"hash","","",12,null],[11,"partial_cmp","","",12,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"fmt","","",13,{"inputs":[{"name":"blendvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"blendvalue"}],"output":{"name":"blendvalue"}}],[11,"hash","","",13,null],[11,"partial_cmp","","",13,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"fmt","","",14,{"inputs":[{"name":"factor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"factor"}],"output":{"name":"factor"}}],[11,"hash","","",14,null],[11,"partial_cmp","","",14,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"fmt","","",15,{"inputs":[{"name":"blendchannel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"hash","","",15,null],[11,"partial_cmp","","",15,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"default","","",15,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"default","","",16,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"eq","","",16,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"fmt","","",16,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"cmp","","",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"eq","","",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",17,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",17,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",17,{"inputs":[{"name":"colormask"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",17,{"inputs":[{"name":"colormask"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",17,{"inputs":[{"name":"colormask"},{"name":"u32"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",17,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",17,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",17,null],[11,"remove","","Removes the specified flags in-place.",17,null],[11,"toggle","","Toggles the specified flags in-place.",17,null],[6,"Output","gfx","",null,null],[11,"bitor","draw_state::state","Returns the union of the two sets of flags.",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[6,"Output","gfx","",null,null],[11,"bitxor","draw_state::state","Returns the left flags, but with all the right flags toggled.",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[6,"Output","gfx","",null,null],[11,"bitand","draw_state::state","Returns the intersection between the two sets of flags.",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[6,"Output","gfx","",null,null],[11,"sub","draw_state::state","Returns the set difference of the two sets of flags.",17,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[6,"Output","gfx","",null,null],[11,"not","draw_state::state","Returns the complement of this set of flags.",17,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"fmt","","",17,{"inputs":[{"name":"colormask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","draw_state::target","",18,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"hash","","",19,null],[11,"cmp","","",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"eq","","",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",19,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"all","","Returns the set containing all flags.",19,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",19,{"inputs":[{"name":"mask"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",19,{"inputs":[{"name":"mask"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",19,{"inputs":[{"name":"mask"},{"name":"u8"}],"output":{"name":"mask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",19,{"inputs":[{"name":"mask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",19,{"inputs":[{"name":"mask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",19,null],[11,"remove","","Removes the specified flags in-place.",19,null],[11,"toggle","","Toggles the specified flags in-place.",19,null],[6,"Output","gfx","",null,null],[11,"bitor","draw_state::target","Returns the union of the two sets of flags.",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[6,"Output","gfx","",null,null],[11,"bitxor","draw_state::target","Returns the left flags, but with all the right flags toggled.",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[6,"Output","gfx","",null,null],[11,"bitand","draw_state::target","Returns the intersection between the two sets of flags.",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[6,"Output","gfx","",null,null],[11,"sub","draw_state::target","Returns the set difference of the two sets of flags.",19,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[6,"Output","gfx","",null,null],[11,"not","draw_state::target","Returns the complement of this set of flags.",19,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"fmt","","",19,{"inputs":[{"name":"mask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"eq","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"mirror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"mirror"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"mirror"},{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",20,null],[11,"remove","","Removes the specified flags in-place.",20,null],[11,"toggle","","Toggles the specified flags in-place.",20,null],[6,"Output","gfx","",null,null],[11,"bitor","draw_state::target","Returns the union of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[6,"Output","gfx","",null,null],[11,"bitxor","draw_state::target","Returns the left flags, but with all the right flags toggled.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[6,"Output","gfx","",null,null],[11,"bitand","draw_state::target","Returns the intersection between the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[6,"Output","gfx","",null,null],[11,"sub","draw_state::target","Returns the set difference of the two sets of flags.",20,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[6,"Output","gfx","",null,null],[11,"not","draw_state::target","Returns the complement of this set of flags.",20,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"clone","","",21,{"inputs":[{"name":"cleardata"}],"output":{"name":"cleardata"}}],[11,"fmt","","",21,{"inputs":[{"name":"cleardata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","draw_state","",0,{"inputs":[{"name":"drawstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"blendpreset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"blendpreset"},{"name":"blendpreset"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"blendpreset"},{"name":"blendpreset"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"blendpreset"}],"output":{"name":"blendpreset"}}],[3,"DrawState","gfx","An assembly of states that affect regular draw calls",null,null],[12,"primitive","","How to rasterize geometric primitives.",0,null],[12,"multi_sample","","Multi-sampling mode",0,null],[12,"scissor","","Scissor mask to use. If set, no pixel outside of this rectangle (in screen space) will be\nwritten to as a result of rendering.",0,null],[12,"stencil","","Stencil test to use. If None, no stencil testing is done.",0,null],[12,"depth","","Depth test to use. If None, no depth testing is done.",0,null],[12,"blend","","Blend function to use. If None, no blending is done.",0,null],[12,"color_mask","","Color mask to use. Each flag indicates that the given color channel can be written to, and\nthey can be OR'd together.",0,null],[4,"BlendPreset","","Blend function presets for ease of use.",null,null],[13,"Add","","When combining two fragments, add their values together, saturating at 1.0",22,null],[13,"Multiply","","When combining two fragments, multiply their values together.",22,null],[13,"Alpha","","When combining two fragments, add the value of the source times its alpha channel with the\nvalue of the destination multiplied by the inverse of the source alpha channel. Has the\nusual transparency effect: mixes the two colors using a fraction of each one specified by\nthe alpha of the source.",22,null],[13,"Invert","","When combining two fragments, subtract the destination color from a constant color\nusing the source color as weight. Has an invert effect with the constant color\nas base and source color controlling displacement from the base color.\nA white source color and a white value results in plain invert.\nThe output alpha is same as destination alpha.",22,null],[0,"state","","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",1,null],[13,"CounterClockwise","","Counter-clockwise winding order.",1,null],[6,"LineWidth","","",null,null],[6,"OffsetFactor","","",null,null],[6,"OffsetUnits","","",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",3,null],[13,"Front","","",3,null],[13,"Back","","",3,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",4,null],[13,"Line","","Rasterize as a line with the given width.",4,null],[13,"Fill","","Rasterize as a face with a given cull face mode.",4,null],[3,"Primitive","","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",5,null],[12,"method","","How to rasterize this primitive.",5,null],[12,"offset","","Any polygon offset to apply.",5,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",7,null],[13,"Less","","`x < y`",7,null],[13,"LessEqual","","`x <= y`",7,null],[13,"Equal","","`x == y`",7,null],[13,"GreaterEqual","","`x >= y`",7,null],[13,"Greater","","`x > y`",7,null],[13,"NotEqual","","`x != y`",7,null],[13,"Always","","`true`",7,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",8,null],[13,"Zero","","Set the value in the stencil buffer to zero.",8,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",8,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",8,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",8,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",8,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",8,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",8,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",9,null],[12,"value","","Reference value to compare the value in the stencil buffer with.",9,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",9,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",9,null],[12,"op_fail","","What operation to do if the stencil test fails.",9,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",9,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",9,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",10,null],[12,"back","","",10,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",11,null],[12,"write","","Specify whether to write to the depth buffer or not.",11,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",12,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",12,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",12,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",12,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",12,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",13,null],[13,"SourceAlpha","","",13,null],[13,"DestColor","","",13,null],[13,"DestAlpha","","",13,null],[13,"ConstColor","","",13,null],[13,"ConstAlpha","","",13,null],[4,"Factor","","",null,null],[13,"Zero","","",14,null],[13,"One","","",14,null],[13,"SourceAlphaSaturated","","",14,null],[13,"ZeroPlus","","",14,null],[13,"OneMinus","","",14,null],[3,"BlendChannel","","",null,null],[12,"equation","","",15,null],[12,"source","","",15,null],[12,"destination","","",15,null],[3,"Blend","","",null,null],[12,"color","","",16,null],[12,"alpha","","",16,null],[12,"value","","",16,null],[3,"ColorMask","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[0,"traits","gfx","public re-exported traits",null,null],[0,"render","","High-level, platform independent, bindless rendering API.",null,null],[3,"ParamStorage","gfx::render","Temporary parameter storage, used for shader activation.",null,null],[12,"uniforms","","uniform values to be provided",23,null],[12,"blocks","","uniform buffers to be provided",23,null],[12,"textures","","textures to be provided",23,null],[3,"Renderer","","Renderer front-end",null,null],[4,"DrawError","","Draw-time error, showing inconsistencies in draw parameters and data",null,null],[13,"InvalidBatch","","Tha batch is not valid",24,null],[13,"MissingTarget","","The `DrawState` interacts with a target that does not present in the\nframe. For example, the depth test is enabled while there is no depth.",24,null],[13,"BadViewport","","The viewport either covers zero space or exceeds HW limitations.",24,null],[13,"BadVertexCount","","Vertex count exceeds HW limitations.",24,null],[13,"BadIndexCount","","Index count exceeds HW limitations.",24,null],[0,"batch","","Batches\nBatches are structures containing all the data required for the draw call,\nexcept for the target frame. Here we define the `Batch` trait as well as\n`RefBatch` and `OwnedBatch` implementations.",null,null],[3,"OwnedBatch","gfx::render::batch","Owned batch - self-contained, but has heap-allocated data",null,null],[12,"slice","","Mesh slice",25,null],[12,"param","","Parameter data.",25,null],[12,"state","","Draw state",25,null],[3,"OutOfBounds","","Error accessing outside of the array",null,null],[3,"CoreBatch","","Referenced core - a minimal sealed batch that depends on `Context`.\nIt has references to the resources (mesh, program, state), that are held\nby the context that created the batch, so these have to be used together.",null,null],[3,"RefBatch","","An expanded version of the `CoreBatch`, carrying the parameters and\nthe mesh slice with it, publicly mutable.",null,null],[12,"core","","Core of the batch",26,null],[12,"slice","","Mesh slice",26,null],[12,"params","","Shader parameter values",26,null],[3,"Context","","Factory of ref batches, required to always be used with them.",null,null],[4,"Error","","An error occurring at batch creation",null,null],[13,"Mesh","","Error connecting mesh attributes",27,null],[13,"Parameters","","Error connecting shader parameters",27,null],[13,"ContextFull","","Error context is full",27,null],[5,"bind","","Create an implicit batch",null,{"inputs":[{"name":"drawstate"},{"name":"mesh"},{"name":"slice"},{"name":"programhandle"},{"name":"t"}],"output":{"name":"implicitbatch"}}],[6,"BatchData","","Return type for `Batch::get_data()``",null,null],[6,"ImplicitBatch","","A batch that is constructed on the fly when rendering.\nMeant to be a struct, blocked by #614",null,null],[6,"CoreBatchFull","","A `CoreBatch` completed by a slice, shader parameters, and a context\nImplements `Batch` thus can be drawn.\nIt is meant to be a struct, but we have lots of lifetime issues\nwith associated resources, binding which looks nasty (#614)",null,null],[6,"RefBatchFull","","A `RefBatch` completed by the a batch context\nImplements `Batch` thus can be drawn.\nIt is meant to be a struct, but we have lots of lifetime issues\nwith associated resources, binding which looks nasty (#614)",null,null],[8,"Batch","","Abstract batch trait",null,null],[16,"Resources","gfx::render::batch::Batch","",null,null],[16,"Error","","Possible errors occurring at batch access",null,null],[10,"get_data","gfx::render::batch","Obtain information about the mesh, program, and state",28,{"inputs":[{"name":"batch"}],"output":{"name":"result"}}],[10,"fill_params","","Fill shader parameter values",28,{"inputs":[{"name":"batch"},{"name":"paramstorage"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[6,"Resources","","",null,null],[6,"Error","","",null,null],[11,"get_data","","",29,{"inputs":[{"name":"implicitbatch"}],"output":{"name":"result"}}],[11,"fill_params","","",29,{"inputs":[{"name":"implicitbatch"},{"name":"paramstorage"}],"output":{"name":"result"}}],[11,"new","","Create a new owned batch",25,{"inputs":[{"name":"ownedbatch"},{"name":"mesh"},{"name":"programhandle"},{"name":"t"}],"output":{"name":"result"}}],[6,"Resources","","",null,null],[6,"Error","","",null,null],[11,"get_data","","",25,{"inputs":[{"name":"ownedbatch"}],"output":{"name":"result"}}],[11,"fill_params","","",25,{"inputs":[{"name":"ownedbatch"},{"name":"paramstorage"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"outofbounds"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"corebatch"}],"output":{"name":"corebatch"}}],[11,"fmt","","",31,{"inputs":[{"name":"corebatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"ordering"}}],[11,"cmp_mesh","","Compare meshes by Id",31,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"ordering"}}],[11,"cmp_program","","Compare programs by Id",31,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"ordering"}}],[11,"cmp_state","","Compare draw states by Id",31,{"inputs":[{"name":"corebatch"},{"name":"corebatch"}],"output":{"name":"ordering"}}],[6,"Target","","",null,null],[11,"deref","","",26,{"inputs":[{"name":"refbatch"}],"output":{"name":"corebatch"}}],[11,"clone","","",26,{"inputs":[{"name":"refbatch"}],"output":{"name":"refbatch"}}],[11,"fmt","","",26,{"inputs":[{"name":"refbatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new empty `Context`",32,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"make_core","","Produce a new `CoreBatch`",32,{"inputs":[{"name":"context"},{"name":"programhandle"},{"name":"mesh"},{"name":"drawstate"}],"output":{"name":"result"}}],[11,"make_batch","","Produce a new `RefBatch`",32,{"inputs":[{"name":"context"},{"name":"programhandle"},{"name":"t"},{"name":"mesh"},{"name":"slice"},{"name":"drawstate"}],"output":{"name":"result"}}],[11,"bind","","Complete a CoreBatch temporarily by turning it into CoreBatchFull",32,{"inputs":[{"name":"context"},{"name":"corebatch"},{"name":"slice"},{"name":"t"}],"output":{"name":"corebatchfull"}}],[11,"get_data","","Get data from a batch in the format required for `Batch`",32,{"inputs":[{"name":"context"},{"name":"corebatch"},{"name":"slice"}],"output":{"name":"result"}}],[6,"Resources","","",null,null],[6,"Error","","",null,null],[11,"get_data","","",33,{"inputs":[{"name":"corebatchfull"}],"output":{"name":"result"}}],[11,"fill_params","","",33,{"inputs":[{"name":"corebatchfull"},{"name":"paramstorage"}],"output":{"name":"result"}}],[6,"Resources","","",null,null],[6,"Error","","",null,null],[11,"get_data","","",34,{"inputs":[{"name":"refbatchfull"}],"output":{"name":"result"}}],[11,"fill_params","","",34,{"inputs":[{"name":"refbatchfull"},{"name":"paramstorage"}],"output":{"name":"result"}}],[0,"ext","gfx::render","Extensions\nRenderer extensions.",null,null],[0,"canvas","gfx::render::ext","Canvas",null,null],[3,"Canvas","gfx::render::ext::canvas","A canvas with everything you need to draw on it.",null,null],[12,"output","","Output window.",35,null],[12,"device","","Graphics device.",35,null],[12,"factory","","Resource factory.",35,null],[12,"renderer","","Renderer front-end.",35,null],[8,"Window","","Generic output window.",null,null],[10,"swap_buffers","","Swap front and back buffers.",36,{"inputs":[{"name":"window"}],"output":null}],[8,"IntoCanvas","","Something that can be transformed into `Canvas`.",null,null],[10,"into_canvas","","Transform into `Canvas`.",37,{"inputs":[{"name":"intocanvas"}],"output":{"name":"canvas"}}],[11,"get_aspect_ratio","","Get width/height aspect, needed for projections.",35,{"inputs":[{"name":"canvas"}],"output":{"name":"f32"}}],[11,"clear","","Clear the canvas.",35,{"inputs":[{"name":"canvas"},{"name":"cleardata"}],"output":null}],[11,"blit_on","","Blit on this canvas from another `Output`.",35,{"inputs":[{"name":"canvas"},{"name":"i"},{"name":"rect"},{"name":"rect"},{"name":"mirror"},{"name":"mask"}],"output":null}],[11,"blit_to","","Blit this canvas to another `Output`.",35,{"inputs":[{"name":"canvas"},{"name":"o"},{"name":"rect"},{"name":"rect"},{"name":"mirror"},{"name":"mask"}],"output":null}],[11,"draw","","Draw a simple `Batch`.",35,{"inputs":[{"name":"canvas"},{"name":"b"}],"output":{"name":"result"}}],[11,"draw_instanced","","Draw an instanced `Batch`.",35,{"inputs":[{"name":"canvas"},{"name":"b"},{"name":"instancecount"},{"name":"vertexcount"}],"output":{"name":"result"}}],[11,"present","","Show what we've been drawing all this time.",35,{"inputs":[{"name":"canvas"}],"output":null}],[0,"device","gfx::render::ext","Device extensions\nDevice extension. Allows creating a renderer or converting into\na single-threaded wrapper.",null,null],[3,"Graphics","gfx::render::ext::device","A convenient wrapper suitable for single-threaded operation.",null,null],[12,"device","","Graphics device.",38,null],[12,"factory","","Resource factory.",38,null],[12,"renderer","","Renderer front-end.",38,null],[8,"DeviceExt","","Backend extension trait for convenience methods",null,null],[10,"into_graphics","","Convert to single-threaded wrapper",39,{"inputs":[{"name":"deviceext"}],"output":{"name":"graphics"}}],[6,"Target","","",null,null],[11,"deref","","",38,{"inputs":[{"name":"graphics"}],"output":{"name":"context"}}],[11,"deref_mut","","",38,{"inputs":[{"name":"graphics"}],"output":{"name":"context"}}],[11,"clear","","Clear the output with given `ClearData`.",38,{"inputs":[{"name":"graphics"},{"name":"cleardata"},{"name":"mask"},{"name":"o"}],"output":null}],[11,"draw","","Draw a `RefBatch` batch.",38,{"inputs":[{"name":"graphics"},{"name":"refbatch"},{"name":"o"}],"output":{"name":"result"}}],[11,"draw_core","","Draw a `CoreBatch` batch.",38,{"inputs":[{"name":"graphics"},{"name":"corebatch"},{"name":"slice"},{"name":"t"},{"name":"o"}],"output":{"name":"result"}}],[11,"end_frame","","Submit the internal command buffer and reset for the next frame.",38,{"inputs":[{"name":"graphics"}],"output":null}],[11,"cleanup","","Cleanup resources after the frame.",38,{"inputs":[{"name":"graphics"}],"output":null}],[0,"factory","gfx::render::ext","Factory extensions\nFactory extension. Provides resource construction shortcuts.",null,null],[8,"RenderFactory","gfx::render::ext::factory","Factory extension that allows creating new renderers.",null,null],[10,"create_renderer","","Create a new renderer",40,{"inputs":[{"name":"renderfactory"}],"output":{"name":"renderer"}}],[8,"FactoryExt","","Factory extension trait",null,null],[10,"create_mesh","","Create a new mesh from the given vertex data.\nConvenience function around `create_buffer` and `Mesh::from_format`.",41,null],[10,"link_program","","Create a simple program given a vertex shader with a fragment one.",41,null],[10,"link_program_source","","Create a simple program given `ShaderSource` versions of vertex and\nfragment shaders, chooss the matching versions for the device.",41,{"inputs":[{"name":"factoryext"},{"name":"shadersource"},{"name":"shadersource"},{"name":"capabilities"}],"output":{"name":"result"}}],[10,"create_texture_rgba8","","Create a simple RGBA8 2D texture",41,{"inputs":[{"name":"factoryext"},{"name":"u16"},{"name":"u16"},{"name":"bool"}],"output":{"name":"result"}}],[10,"create_texture_depth_stencil","","Create a simple depth+stencil 2D texture",41,{"inputs":[{"name":"factoryext"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[0,"shade","gfx::render::ext","Shader extensions\nShader source extension",null,null],[3,"ShaderSource","gfx::render::ext::shade","A type storing shader source for different graphics APIs and versions.",null,null],[12,"glsl_120","","",42,null],[12,"glsl_130","","",42,null],[12,"glsl_140","","",42,null],[12,"glsl_150","","",42,null],[12,"glsl_430","","",42,null],[12,"targets","","",42,null],[4,"ProgramError","","Program linking error",null,null],[13,"Vertex","","Unable to compile the vertex shader",43,null],[13,"Fragment","","Unable to compile the fragment shader",43,null],[13,"Link","","Unable to link",43,null],[11,"fmt","","",43,{"inputs":[{"name":"programerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"programerror"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"programerror"},{"name":"programerror"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"programerror"}],"output":{"name":"programerror"}}],[11,"fmt","","",42,{"inputs":[{"name":"shadersource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"shadersource"},{"name":"shadersource"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"shadersource"},{"name":"shadersource"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"shadersource"}],"output":{"name":"shadersource"}}],[11,"empty","","Create an empty shader source. Useful for specifying the remaining\nstructure members upon construction.",42,{"inputs":[{"name":"shadersource"}],"output":{"name":"shadersource"}}],[11,"choose","","Pick one of the stored versions that is the highest supported by the device.",42,{"inputs":[{"name":"shadersource"},{"name":"shadermodel"}],"output":{"name":"result"}}],[0,"mesh","gfx::render","Meshes\nMesh loading.",null,null],[3,"Attribute","gfx::render::mesh","Describes a single attribute of a vertex buffer, including its type, name, etc.",null,null],[12,"name","","A name to match the shader input",44,null],[12,"buffer","","Vertex buffer to contain the data",44,null],[12,"format","","Format of the attribute",44,null],[3,"Mesh","","Describes geometry to render.",null,null],[12,"num_vertices","","Number of vertices in the mesh.",45,null],[12,"attributes","","Vertex attributes to use.",45,null],[3,"Slice","","Description of a subset of `Mesh` data to render.",null,null],[12,"start","","Start index of vertices to draw.",46,null],[12,"end","","End index of vertices to draw.",46,null],[12,"prim_type","","Primitive type to render collections of vertices as.",46,null],[12,"kind","","Source of the vertex ordering when drawing.",46,null],[3,"AttributeIter","","An iterator over mesh attributes.",null,null],[3,"Link","","Holds a remapping table from shader inputs to mesh attributes.",null,null],[4,"SliceKind","","Source of vertex ordering for a slice",null,null],[13,"Vertex","","Render vertex data directly from the `Mesh`'s buffer.",47,null],[13,"Index8","","The `Index*` buffer contains a list of indices into the `Mesh`\ndata, so every vertex attribute does not need to be duplicated, only\nits position in the `Mesh`. The base index is added to this index\nbefore fetching the vertex from the buffer.  For example, when drawing\na square, two triangles are needed.  Using only `Vertex`, one\nwould need 6 separate vertices, 3 for each triangle. However, two of\nthe vertices will be identical, wasting space for the duplicated\nattributes.  Instead, the `Mesh` can store 4 vertices and an\n`Index8` can be used instead.",47,null],[13,"Index16","","As `Index8` but with `u16` indices",47,null],[13,"Index32","","As `Index8` but with `u32` indices",47,null],[4,"Error","","Describes kinds of errors that may occur in the mesh linking",null,null],[13,"AttributeMissing","","A required attribute was missing.",48,null],[13,"AttributeType","","An attribute's type from the vertex format differed from the type used in the shader.",48,null],[13,"AttributeIndex","","An attribute index is out of supported bounds",48,null],[13,"ShaderInputIndex","","An input index is out of supported bounds",48,null],[6,"AttributeIndex","","Index of a vertex attribute inside the mesh",null,null],[8,"VertexFormat","","A trait implemented automatically for user vertex structure by\n`#[vertex_format] attribute",null,null],[10,"generate","","Create the attributes for this type, using the given buffer.",49,{"inputs":[{"name":"vertexformat"},{"name":"rawbuffer"}],"output":{"name":"vec"}}],[8,"ToSlice","","Helper methods for cleanly getting the slice of a type.",null,null],[10,"to_slice","","Get the slice of a type.",50,{"inputs":[{"name":"toslice"},{"name":"primitivetype"}],"output":{"name":"slice"}}],[11,"eq","","",44,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"eq","","",45,{"inputs":[{"name":"mesh"},{"name":"mesh"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"mesh"},{"name":"mesh"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"mesh"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"mesh"}],"output":{"name":"mesh"}}],[11,"new","","Create a new mesh, which is a `TriangleList` with no attributes and `nv` vertices.",45,{"inputs":[{"name":"mesh"},{"name":"vertexcount"}],"output":{"name":"mesh"}}],[11,"from_format","","Create a new `Mesh` from a struct that implements `VertexFormat` and a buffer.",45,{"inputs":[{"name":"mesh"},{"name":"bufferhandle"},{"name":"vertexcount"}],"output":{"name":"mesh"}}],[11,"from_format_instanced","","Create a new intanced `Mesh` given a vertex buffer and an instance buffer.",45,{"inputs":[{"name":"mesh"},{"name":"bufferhandle"},{"name":"vertexcount"},{"name":"bufferhandle"}],"output":{"name":"mesh"}}],[11,"eq","","",46,{"inputs":[{"name":"slice"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"slice"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"eq","","",47,{"inputs":[{"name":"slicekind"},{"name":"slicekind"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"slicekind"},{"name":"slicekind"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"slicekind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"slicekind"}],"output":{"name":"slicekind"}}],[11,"to_slice","","Return a vertex slice of the whole mesh.",45,{"inputs":[{"name":"mesh"},{"name":"primitivetype"}],"output":{"name":"slice"}}],[11,"eq","","",48,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",51,{"inputs":[{"name":"attributeiter"}],"output":{"name":"attributeiter"}}],[6,"Item","","",null,null],[11,"next","","",51,{"inputs":[{"name":"attributeiter"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"link"}],"output":{"name":"link"}}],[11,"new","","Match mesh attributes against shader inputs, produce a mesh link.\nExposed to public to allow external `Batch` implementations to use it.",52,{"inputs":[{"name":"link"},{"name":"mesh"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"from_iter","","Construct a new link from an iterator over attribute indices.",52,{"inputs":[{"name":"link"},{"name":"i"}],"output":{"name":"result"}}],[11,"to_iter","","Convert to an iterator returning attribute indices",52,{"inputs":[{"name":"link"}],"output":{"name":"attributeiter"}}],[0,"shade","gfx::render","Shaders\nShader parameter handling.",null,null],[3,"NamedCell","gfx::render::shade","A named cell containing arbitrary value",null,null],[12,"name","","Name",53,null],[12,"value","","Value",53,null],[3,"ParamDictionary","","A dictionary of parameters, meant to be shared between different programs",null,null],[12,"uniforms","","Uniform dictionary",54,null],[12,"blocks","","Block dictionary",54,null],[12,"textures","","Texture dictionary",54,null],[3,"ParamDictionaryLink","","Redirects program input to the relevant ParamDictionary cell",null,null],[4,"ParameterError","","An error type on either the parameter storage or the program side",null,null],[13,"ParameterGeneralMismatch","","Internal error",55,null],[13,"MissingUniform","","Shader requested a uniform that the parameters do not have",55,null],[13,"MissingBlock","","Shader requested a block that the parameters do not have",55,null],[13,"MissingTexture","","Shader requested a texture that the parameters do not have",55,null],[6,"VarUniform","","Variable index of a uniform.",null,null],[6,"VarBlock","","Variable index of a uniform block.",null,null],[6,"VarTexture","","Variable index of a texture.",null,null],[6,"TextureParam","","A texture parameter: consists of a texture handle with an optional sampler.",null,null],[8,"ToUniform","","Helper trait to transform base types into their corresponding uniforms",null,null],[10,"to_uniform","","Create a `UniformValue` representing this value.",56,{"inputs":[{"name":"touniform"}],"output":{"name":"uniformvalue"}}],[8,"ShaderParam","","Abstracts the shader parameter structure, generated by the `shader_param` attribute",null,null],[16,"Resources","gfx::render::shade::ShaderParam","",null,null],[16,"Link","","A helper structure to contain variable indices inside the shader",null,null],[10,"create_link","gfx::render::shade","Create a new link to be used with a given program",57,{"inputs":[{"name":"shaderparam"},{"name":"option"},{"name":"programinfo"}],"output":{"name":"result"}}],[10,"fill_params","","Get all the contained parameter values, using a given link",57,{"inputs":[{"name":"shaderparam"},{"name":"link"},{"name":"paramstorage"}],"output":null}],[11,"fmt","","",55,{"inputs":[{"name":"parametererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"parametererror"},{"name":"parametererror"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"parametererror"},{"name":"parametererror"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"parametererror"}],"output":{"name":"parametererror"}}],[6,"Resources","","",null,null],[6,"Link","","",null,null],[11,"create_link","core::option","",58,{"inputs":[{"name":"option"},{"name":"option"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"fill_params","","",58,null],[6,"Resources","gfx::render::shade","",null,null],[6,"Link","","",null,null],[11,"create_link","","",54,{"inputs":[{"name":"paramdictionary"},{"name":"option"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"fill_params","","",54,{"inputs":[{"name":"paramdictionary"},{"name":"paramdictionarylink"},{"name":"paramstorage"}],"output":null}],[0,"target","gfx::render","Render targets\nRender target specification.",null,null],[3,"Frame","gfx::render::target","A complete `Frame`, which is the result of rendering.",null,null],[12,"width","","The width of the viewport.",59,null],[12,"height","","The height of the viewport.",59,null],[12,"colors","","Each color component has its own buffer.",59,null],[12,"depth","","The depth buffer for this frame.",59,null],[12,"stencil","","The stencil buffer for this frame.",59,null],[12,"gamma","","Color space.",59,null],[4,"Plane","","A single buffer that can be bound to a render target.",null,null],[13,"Surface","","Render to a `Surface` (corresponds to a renderbuffer in GL).",60,null],[13,"Texture","","Render to a texture at a specific mipmap level\nIf `Layer` is set, it is selecting a single 2D slice of a given 3D texture",60,null],[8,"Output","","A generic rendering output, consisting of multiple planes.",null,null],[11,"get_handle","","Get an associated device handle, if any.",61,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[10,"get_size","","Get canvas dimensions.",61,null],[11,"get_colors","","Get array of color planes.",61,null],[11,"get_depth","","Get depth plane, if any.",61,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_stencil","","Get stencil plane, if any.",61,{"inputs":[{"name":"output"}],"output":{"name":"option"}}],[11,"get_gamma","","Check if it converts gamma of the output colors.",61,{"inputs":[{"name":"output"}],"output":{"name":"gamma"}}],[11,"get_mask","","Get the output surface mask.",61,{"inputs":[{"name":"output"}],"output":{"name":"mask"}}],[11,"fmt","","",60,{"inputs":[{"name":"plane"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"plane"}],"output":{"name":"plane"}}],[11,"get_surface_info","","Get the surface info.",60,{"inputs":[{"name":"plane"}],"output":{"name":"surfaceinfo"}}],[11,"get_format","","Get surface/texture format.",60,{"inputs":[{"name":"plane"}],"output":{"name":"format"}}],[11,"get_size","","",60,null],[11,"get_colors","","",60,null],[11,"get_depth","","",60,{"inputs":[{"name":"plane"}],"output":{"name":"option"}}],[11,"get_stencil","","",60,{"inputs":[{"name":"plane"}],"output":{"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"empty","","Create an empty `Frame`.",59,{"inputs":[{"name":"frame"},{"name":"size"},{"name":"size"}],"output":{"name":"frame"}}],[11,"get_size","","",59,null],[11,"get_colors","","",59,null],[11,"get_depth","","",59,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"get_stencil","","",59,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"get_gamma","","",59,{"inputs":[{"name":"frame"}],"output":{"name":"gamma"}}],[11,"eq","gfx::render","",24,{"inputs":[{"name":"drawerror"},{"name":"drawerror"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"drawerror"},{"name":"drawerror"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"drawerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"drawerror"}],"output":{"name":"drawerror"}}],[11,"reset","","Reset all commands for the command buffer re-usal.",62,{"inputs":[{"name":"renderer"}],"output":null}],[11,"as_buffer","","Get command and data buffers to be submitted to the device.",62,null],[11,"clone_empty","","Clone the renderer shared data but ignore the commands.",62,{"inputs":[{"name":"renderer"}],"output":{"name":"renderer"}}],[11,"clear","","Clear the output with given `ClearData`.",62,{"inputs":[{"name":"renderer"},{"name":"cleardata"},{"name":"mask"},{"name":"o"}],"output":null}],[11,"draw","","Draw a `batch` into the specified output.",62,{"inputs":[{"name":"renderer"},{"name":"b"},{"name":"o"}],"output":{"name":"result"}}],[11,"draw_instanced","","Draw a `batch` multiple times using instancing.",62,{"inputs":[{"name":"renderer"},{"name":"b"},{"name":"instancecount"},{"name":"vertexcount"},{"name":"o"}],"output":{"name":"result"}}],[11,"blit","","Blit one frame onto another.",62,{"inputs":[{"name":"renderer"},{"name":"i"},{"name":"rect"},{"name":"o"},{"name":"rect"},{"name":"mirror"},{"name":"mask"}],"output":null}],[11,"update_buffer_vec","","Update a buffer with data from a vector.",62,null],[11,"update_buffer_struct","","Update a buffer with data from a single type.",62,{"inputs":[{"name":"renderer"},{"name":"buffer"},{"name":"t"}],"output":null}],[11,"update_texture","","Update the contents of a texture.",62,null],[0,"device","gfx","Graphics device. Not meant for direct use.",null,null],[0,"target","gfx::device","Render target specification.",null,null],[6,"Layer","gfx::device::target","",null,null],[6,"Level","","",null,null],[6,"Depth","","",null,null],[6,"Stencil","","",null,null],[3,"Rect","","A screen space rectangle",null,null],[12,"x","","",18,null],[12,"y","","",18,null],[12,"w","","",18,null],[12,"h","","",18,null],[6,"ColorValue","","",null,null],[3,"Mask","","/// Output mask, used for blitting and clearing",null,null],[17,"COLOR","","",null,null],[17,"COLOR0","","",null,null],[17,"COLOR1","","",null,null],[17,"COLOR2","","",null,null],[17,"COLOR3","","",null,null],[17,"DEPTH","","",null,null],[17,"STENCIL","","",null,null],[3,"Mirror","","/// Mirroring flags, used for blitting",null,null],[17,"MIRROR_X","","",null,null],[17,"MIRROR_Y","","",null,null],[3,"ClearData","","How to clear a frame.",null,null],[12,"color","","The color to clear the frame with",21,null],[12,"depth","","The depth value to clear the frame with",21,null],[12,"stencil","","The stencil value to clear the frame with",21,null],[0,"state","gfx::device","Fixed-function hardware state.",null,null],[4,"FrontFace","gfx::device::state","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",1,null],[13,"CounterClockwise","","Counter-clockwise winding order.",1,null],[6,"LineWidth","","",null,null],[6,"OffsetFactor","","",null,null],[6,"OffsetUnits","","",null,null],[3,"Offset","","How to offset vertices in screen space, if at all.",null,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",3,null],[13,"Front","","",3,null],[13,"Back","","",3,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",4,null],[13,"Line","","Rasterize as a line with the given width.",4,null],[13,"Fill","","Rasterize as a face with a given cull face mode.",4,null],[3,"Primitive","","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",5,null],[12,"method","","How to rasterize this primitive.",5,null],[12,"offset","","Any polygon offset to apply.",5,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",7,null],[13,"Less","","`x < y`",7,null],[13,"LessEqual","","`x <= y`",7,null],[13,"Equal","","`x == y`",7,null],[13,"GreaterEqual","","`x >= y`",7,null],[13,"Greater","","`x > y`",7,null],[13,"NotEqual","","`x != y`",7,null],[13,"Always","","`true`",7,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",8,null],[13,"Zero","","Set the value in the stencil buffer to zero.",8,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",8,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",8,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",8,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",8,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",8,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",8,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",9,null],[12,"value","","Reference value to compare the value in the stencil buffer with.",9,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",9,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",9,null],[12,"op_fail","","What operation to do if the stencil test fails.",9,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",9,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",9,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",10,null],[12,"back","","",10,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",11,null],[12,"write","","Specify whether to write to the depth buffer or not.",11,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",12,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",12,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",12,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",12,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",12,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",13,null],[13,"SourceAlpha","","",13,null],[13,"DestColor","","",13,null],[13,"DestAlpha","","",13,null],[13,"ConstColor","","",13,null],[13,"ConstAlpha","","",13,null],[4,"Factor","","",null,null],[13,"Zero","","",14,null],[13,"One","","",14,null],[13,"SourceAlphaSaturated","","",14,null],[13,"ZeroPlus","","",14,null],[13,"OneMinus","","",14,null],[3,"BlendChannel","","",null,null],[12,"equation","","",15,null],[12,"source","","",15,null],[12,"destination","","",15,null],[3,"Blend","","",null,null],[12,"color","","",16,null],[12,"alpha","","",16,null],[12,"value","","",16,null],[3,"ColorMask","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[3,"Capabilities","gfx::device","Features that the device supports.",null,null],[12,"shader_model","","",63,null],[12,"max_draw_buffers","","",63,null],[12,"max_texture_size","","",63,null],[12,"max_vertex_attributes","","",63,null],[12,"array_buffer_supported","","",63,null],[12,"fragment_output_supported","","",63,null],[12,"immutable_storage_supported","","",63,null],[12,"instance_base_supported","","",63,null],[12,"instance_call_supported","","",63,null],[12,"instance_rate_supported","","",63,null],[12,"render_targets_supported","","",63,null],[12,"sampler_objects_supported","","",63,null],[12,"srgb_color_supported","","",63,null],[12,"uniform_block_supported","","",63,null],[12,"vertex_base_supported","","",63,null],[3,"BufferInfo","","An information block that is immutable and associated with each buffer",null,null],[12,"role","","Role",64,null],[12,"usage","","Usage hint",64,null],[12,"size","","Size in bytes",64,null],[4,"MapAccess","","Specifies the access allowed to a buffer mapping.",null,null],[13,"Readable","","Only allow reads.",65,null],[13,"Writable","","Only allow writes.",65,null],[13,"RW","","Allow full access.",65,null],[4,"PrimitiveType","","Describes what geometric primitives are created from vertex data.",null,null],[13,"Point","","Each vertex represents a single point.",66,null],[13,"Line","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d,\ne]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",66,null],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of\nlines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line\nline, and `b` and `c` form a line.",66,null],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`,\n`a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",66,null],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c,\nd]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",66,null],[13,"TriangleFan","","The first vertex with the last two are forming a triangle. For example, with `[a, b, c, d\n]`, `a` , `b`, and `c` form a triangle, and `a`, `c`, and `d` form a triangle.",66,null],[4,"BufferRole","","Role of the memory buffer. GLES doesn't chaning bind points for buffers.",null,null],[13,"Vertex","","Generic vertex buffer",67,null],[13,"Index","","Index buffer",67,null],[4,"BufferUsage","","A hint as to how this buffer will be used.",null,null],[13,"Static","","Once uploaded, this buffer will rarely change, but will be read from often.",68,null],[13,"Dynamic","","This buffer will be updated \"frequently\", and will be read from multiple times between\nupdates.",68,null],[13,"Stream","","This buffer always or almost always be updated after each read.",68,null],[5,"as_byte_slice","","Treat a given slice as `&[u8]` for the given function call",null,null],[0,"attrib","","Vertex attribute types.",null,null],[3,"Format","gfx::device::attrib","Complete format of a vertex attribute.",null,null],[12,"elem_count","","Number of elements per vertex",69,null],[12,"elem_type","","Type of a single element",69,null],[12,"offset","","Offset in bytes to the first vertex",69,null],[12,"stride","","Stride in bytes between consecutive vertices",69,null],[12,"instance_rate","","Instance rate per vertex",69,null],[4,"SignFlag","","The signedness of an attribute.",null,null],[13,"Signed","","",70,null],[13,"Unsigned","","",70,null],[4,"IntSubType","","Describes how an integer value is interpreted by the shader.",null,null],[13,"Raw","","",71,null],[13,"Normalized","","",71,null],[13,"AsFloat","","",71,null],[4,"IntSize","","The size of an integer attribute, in bits.",null,null],[13,"U8","","",72,null],[13,"U16","","",72,null],[13,"U32","","",72,null],[4,"FloatSubType","","Type of a floating point attribute on the shader side.",null,null],[13,"Default","","",73,null],[13,"Precision","","",73,null],[4,"FloatSize","","The size of a floating point attribute, in bits.",null,null],[13,"F16","","",74,null],[13,"F32","","",74,null],[13,"F64","","",74,null],[4,"Type","","The type of an attribute.",null,null],[13,"Int","","",75,null],[13,"Float","","",75,null],[13,"Special","","",75,null],[6,"Count","","Number of elements per attribute, only 1 to 4 are supported",null,null],[6,"Offset","","Offset of an attribute from the start of the buffer, in bytes",null,null],[6,"Stride","","Offset between attribute values, in bytes",null,null],[6,"InstanceRate","","The number of instances between each subsequent attribute value",null,null],[11,"fmt","","",70,{"inputs":[{"name":"signflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"signflag"}],"output":{"name":"signflag"}}],[11,"hash","","",70,null],[11,"partial_cmp","","",70,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"bool"}}],[11,"cmp","","",70,{"inputs":[{"name":"signflag"},{"name":"signflag"}],"output":{"name":"ordering"}}],[11,"fmt","","",71,{"inputs":[{"name":"intsubtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"intsubtype"}],"output":{"name":"intsubtype"}}],[11,"hash","","",71,null],[11,"partial_cmp","","",71,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"intsubtype"},{"name":"intsubtype"}],"output":{"name":"ordering"}}],[11,"fmt","","",72,{"inputs":[{"name":"intsize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"intsize"}],"output":{"name":"intsize"}}],[11,"hash","","",72,null],[11,"partial_cmp","","",72,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"option"}}],[11,"lt","","",72,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"le","","",72,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"gt","","",72,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"ge","","",72,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"bool"}}],[11,"cmp","","",72,{"inputs":[{"name":"intsize"},{"name":"intsize"}],"output":{"name":"ordering"}}],[11,"fmt","","",73,{"inputs":[{"name":"floatsubtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"floatsubtype"}],"output":{"name":"floatsubtype"}}],[11,"hash","","",73,null],[11,"partial_cmp","","",73,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"option"}}],[11,"lt","","",73,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"le","","",73,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"gt","","",73,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"ge","","",73,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"bool"}}],[11,"cmp","","",73,{"inputs":[{"name":"floatsubtype"},{"name":"floatsubtype"}],"output":{"name":"ordering"}}],[11,"fmt","","",74,{"inputs":[{"name":"floatsize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"floatsize"}],"output":{"name":"floatsize"}}],[11,"hash","","",74,null],[11,"partial_cmp","","",74,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"option"}}],[11,"lt","","",74,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"le","","",74,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"gt","","",74,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"ge","","",74,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"bool"}}],[11,"cmp","","",74,{"inputs":[{"name":"floatsize"},{"name":"floatsize"}],"output":{"name":"ordering"}}],[11,"fmt","","",75,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"hash","","",75,null],[11,"partial_cmp","","",75,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"option"}}],[11,"lt","","",75,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"le","","",75,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"gt","","",75,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ge","","",75,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"cmp","","",75,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"ordering"}}],[11,"is_compatible","","Check if the attribute is compatible with a particular shader type.",75,{"inputs":[{"name":"type"},{"name":"basetype"}],"output":{"name":"result"}}],[11,"get_size","","Return the size of the type in bytes.",75,{"inputs":[{"name":"type"}],"output":{"name":"u8"}}],[11,"fmt","","",69,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"hash","","",69,null],[11,"partial_cmp","","",69,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"cmp","","",69,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"ordering"}}],[0,"draw","gfx::device","Command Buffer device interface",null,null],[3,"DataPointer","gfx::device::draw","The place of some data in the data buffer.",null,null],[3,"DataBuffer","","A buffer of data accompanying the commands. It can be vertex data, texture\nupdates, uniform blocks, or even some draw states.",null,null],[4,"Access","","Type of the frame buffer access.",null,null],[13,"Draw","","Draw access",76,null],[13,"Read","","Read access",76,null],[4,"Gamma","","Type of the gamma transformation for framebuffer writes.",null,null],[13,"Original","","Process in linear color space.",77,null],[13,"Convert","","Convert to sRGB color space.",77,null],[4,"Target","","When rendering, each \"output\" of the fragment shader goes to a specific target. A `Plane` can\nbe bound to a target, causing writes to that target to affect the `Plane`.",null,null],[13,"Color","","Color data.",78,null],[13,"Depth","","Depth data.",78,null],[13,"Stencil","","Stencil data.",78,null],[13,"DepthStencil","","A target for both depth and stencil data at once.",78,null],[6,"InstanceOption","","Optional instance parameters",null,null],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an\nefficient API-specific manner, to be ready for execution on the device.",null,null],[10,"new","","An empty constructor",79,{"inputs":[{"name":"commandbuffer"}],"output":{"name":"self"}}],[10,"clear","","Clear the command buffer contents, retain the allocated storage",79,{"inputs":[{"name":"commandbuffer"}],"output":null}],[10,"bind_program","","Bind a shader program",79,{"inputs":[{"name":"commandbuffer"},{"name":"r"}],"output":null}],[10,"bind_array_buffer","","Bind an array buffer object",79,{"inputs":[{"name":"commandbuffer"},{"name":"r"}],"output":null}],[10,"bind_attribute","","Bind a vertex attribute",79,{"inputs":[{"name":"commandbuffer"},{"name":"attributeslot"},{"name":"r"},{"name":"format"}],"output":null}],[10,"bind_index","","Bind an index buffer",79,{"inputs":[{"name":"commandbuffer"},{"name":"r"}],"output":null}],[10,"bind_frame_buffer","","Bind a frame buffer object",79,{"inputs":[{"name":"commandbuffer"},{"name":"access"},{"name":"r"},{"name":"gamma"}],"output":null}],[10,"unbind_target","","Unbind any surface from the specified target slot",79,{"inputs":[{"name":"commandbuffer"},{"name":"access"},{"name":"target"}],"output":null}],[10,"bind_target_surface","","Bind a surface to the specified target slot",79,{"inputs":[{"name":"commandbuffer"},{"name":"access"},{"name":"target"},{"name":"r"}],"output":null}],[10,"bind_target_texture","","Bind a level of the texture to the specified target slot",79,{"inputs":[{"name":"commandbuffer"},{"name":"access"},{"name":"target"},{"name":"r"},{"name":"level"},{"name":"option"}],"output":null}],[10,"bind_uniform_block","","Bind a uniform block",79,{"inputs":[{"name":"commandbuffer"},{"name":"r"},{"name":"uniformbufferslot"},{"name":"uniformblockindex"},{"name":"r"}],"output":null}],[10,"bind_uniform","","Bind a single uniform in the default block",79,{"inputs":[{"name":"commandbuffer"},{"name":"location"},{"name":"uniformvalue"}],"output":null}],[10,"bind_texture","","Bind a texture",79,{"inputs":[{"name":"commandbuffer"},{"name":"textureslot"},{"name":"texturekind"},{"name":"r"},{"name":"option"}],"output":null}],[10,"set_draw_color_buffers","","Select, which color buffers are going to be targetted by the shader",79,{"inputs":[{"name":"commandbuffer"},{"name":"usize"}],"output":null}],[10,"set_primitive","","Set primitive topology",79,{"inputs":[{"name":"commandbuffer"},{"name":"primitive"}],"output":null}],[10,"set_viewport","","Set viewport rectangle",79,{"inputs":[{"name":"commandbuffer"},{"name":"rect"}],"output":null}],[10,"set_multi_sample","","Set multi-sampling state",79,{"inputs":[{"name":"commandbuffer"},{"name":"option"}],"output":null}],[10,"set_scissor","","Set scissor test",79,{"inputs":[{"name":"commandbuffer"},{"name":"option"}],"output":null}],[10,"set_depth_stencil","","Set depth and stencil states",79,{"inputs":[{"name":"commandbuffer"},{"name":"option"},{"name":"option"},{"name":"cullface"}],"output":null}],[10,"set_blend","","Set blend state",79,{"inputs":[{"name":"commandbuffer"},{"name":"option"}],"output":null}],[10,"set_color_mask","","Set output color mask for all targets",79,{"inputs":[{"name":"commandbuffer"},{"name":"colormask"}],"output":null}],[10,"update_buffer","","Update a vertex/index/uniform buffer",79,{"inputs":[{"name":"commandbuffer"},{"name":"r"},{"name":"datapointer"},{"name":"usize"}],"output":null}],[10,"update_texture","","Update a texture region",79,{"inputs":[{"name":"commandbuffer"},{"name":"texturekind"},{"name":"r"},{"name":"imageinfo"},{"name":"datapointer"}],"output":null}],[10,"call_clear","","Clear target surfaces",79,{"inputs":[{"name":"commandbuffer"},{"name":"cleardata"},{"name":"mask"}],"output":null}],[10,"call_draw","","Draw a primitive",79,{"inputs":[{"name":"commandbuffer"},{"name":"primitivetype"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[10,"call_draw_indexed","","Draw a primitive with index buffer",79,{"inputs":[{"name":"commandbuffer"},{"name":"primitivetype"},{"name":"indextype"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"vertexcount"},{"name":"instanceoption"}],"output":null}],[10,"call_blit","","Blit from one target to another",79,{"inputs":[{"name":"commandbuffer"},{"name":"rect"},{"name":"rect"},{"name":"mirror"},{"name":"mask"}],"output":null}],[11,"fmt","","",80,{"inputs":[{"name":"datapointer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"datapointer"},{"name":"datapointer"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"datapointer"},{"name":"datapointer"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"datapointer"}],"output":{"name":"datapointer"}}],[11,"new","","Create a fresh new data buffer.",81,{"inputs":[{"name":"databuffer"}],"output":{"name":"databuffer"}}],[11,"clear","","Clear all the data but retain the allocated storage.",81,{"inputs":[{"name":"databuffer"}],"output":null}],[11,"add_struct","","Copy a given structure into the buffer, return the offset and the size.",81,{"inputs":[{"name":"databuffer"},{"name":"t"}],"output":{"name":"datapointer"}}],[11,"add_vec","","Copy a given vector slice into the buffer",81,null],[11,"get_ref","","Return a reference to a stored data object.",81,null],[11,"fmt","","",76,{"inputs":[{"name":"access"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"access"}],"output":{"name":"access"}}],[11,"fmt","","",77,{"inputs":[{"name":"gamma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"gamma"},{"name":"gamma"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"gamma"},{"name":"gamma"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"fmt","","",78,{"inputs":[{"name":"target"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"target"}],"output":{"name":"target"}}],[0,"handle","gfx::device","Device resource handles",null,null],[3,"Buffer","gfx::device::handle","Type-safe buffer handle",null,null],[3,"IndexBuffer","","Type-safe index buffer handle",null,null],[3,"RawBuffer","","Raw (untyped) Buffer Handle",null,null],[3,"ArrayBuffer","","Array Buffer Handle",null,null],[3,"Shader","","Shader Handle",null,null],[3,"Program","","Program Handle",null,null],[3,"FrameBuffer","","Frame Buffer Handle",null,null],[3,"Surface","","Surface Handle",null,null],[3,"Texture","","Texture Handle",null,null],[3,"Sampler","","Sampler Handle",null,null],[3,"Manager","","Stores reference-counted resources used in a command buffer.\nSeals actual resource names behind the interface, automatically\nreferencing them both by the Factory on resource creation\nand the Renderer during CommandBuffer population.",null,null],[8,"Producer","","A service trait to be used by the device implementation",null,null],[10,"make_buffer","","",82,{"inputs":[{"name":"producer"},{"name":"r"},{"name":"bufferinfo"}],"output":{"name":"rawbuffer"}}],[10,"make_array_buffer","","",82,{"inputs":[{"name":"producer"},{"name":"r"}],"output":{"name":"arraybuffer"}}],[10,"make_shader","","",82,{"inputs":[{"name":"producer"},{"name":"r"},{"name":"stage"}],"output":{"name":"shader"}}],[10,"make_program","","",82,{"inputs":[{"name":"producer"},{"name":"r"},{"name":"programinfo"}],"output":{"name":"program"}}],[10,"make_frame_buffer","","",82,{"inputs":[{"name":"producer"},{"name":"r"}],"output":{"name":"framebuffer"}}],[10,"make_surface","","",82,{"inputs":[{"name":"producer"},{"name":"r"},{"name":"surfaceinfo"}],"output":{"name":"surface"}}],[10,"make_texture","","",82,{"inputs":[{"name":"producer"},{"name":"r"},{"name":"textureinfo"}],"output":{"name":"texture"}}],[10,"make_sampler","","",82,{"inputs":[{"name":"producer"},{"name":"r"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"clean_with","","Walk through all the handles, keep ones that are reference elsewhere\nand call the provided delete function (resource-specific) for others",82,{"inputs":[{"name":"producer"},{"name":"t"},{"name":"f1"},{"name":"f2"},{"name":"f3"},{"name":"f4"},{"name":"f5"},{"name":"f6"},{"name":"f7"},{"name":"f8"}],"output":null}],[11,"eq","","",83,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"buffer"},{"name":"buffer"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"buffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"buffer"}],"output":{"name":"buffer"}}],[11,"from_raw","","Create a type-safe Buffer from a RawBufferHandle",83,{"inputs":[{"name":"buffer"},{"name":"rawbuffer"}],"output":{"name":"buffer"}}],[11,"cast","","Cast the type this Buffer references",83,{"inputs":[{"name":"buffer"}],"output":{"name":"buffer"}}],[11,"raw","","Get the underlying raw Handle",83,{"inputs":[{"name":"buffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get the associated information about the buffer",83,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferinfo"}}],[11,"len","","Get the number of elements in the buffer.",83,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"eq","","",84,{"inputs":[{"name":"indexbuffer"},{"name":"indexbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"indexbuffer"},{"name":"indexbuffer"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"indexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indexbuffer"}}],[11,"from_raw","","Create a type-safe IndexBuffer from a RawBufferHandle",84,{"inputs":[{"name":"indexbuffer"},{"name":"rawbuffer"}],"output":{"name":"indexbuffer"}}],[11,"raw","","Get the underlying raw Handle",84,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get the associated information about the buffer",84,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"bufferinfo"}}],[11,"len","","Get the number of elements in the buffer.",84,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"usize"}}],[11,"eq","","",85,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"rawbuffer"},{"name":"rawbuffer"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"rawbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"rawbuffer"}}],[11,"get_info","","Get raw buffer info",85,{"inputs":[{"name":"rawbuffer"}],"output":{"name":"bufferinfo"}}],[11,"eq","","",86,{"inputs":[{"name":"arraybuffer"},{"name":"arraybuffer"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"arraybuffer"},{"name":"arraybuffer"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"arraybuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"arraybuffer"}],"output":{"name":"arraybuffer"}}],[11,"eq","","",87,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"shader"},{"name":"shader"}],"output":{"name":"bool"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"shader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"shader"}],"output":{"name":"shader"}}],[11,"get_stage","","Get shader stage",87,{"inputs":[{"name":"shader"}],"output":{"name":"stage"}}],[11,"eq","","",88,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"program"},{"name":"program"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"program"}],"output":{"name":"program"}}],[11,"get_info","","Get program info",88,{"inputs":[{"name":"program"}],"output":{"name":"programinfo"}}],[11,"eq","","",89,{"inputs":[{"name":"framebuffer"},{"name":"framebuffer"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"framebuffer"},{"name":"framebuffer"}],"output":{"name":"bool"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"framebuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"framebuffer"}],"output":{"name":"framebuffer"}}],[11,"eq","","",90,{"inputs":[{"name":"surface"},{"name":"surface"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"surface"},{"name":"surface"}],"output":{"name":"bool"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"surface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"surface"}],"output":{"name":"surface"}}],[11,"get_info","","Get surface info",90,{"inputs":[{"name":"surface"}],"output":{"name":"surfaceinfo"}}],[11,"eq","","",91,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"texture"},{"name":"texture"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"texture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"texture"}],"output":{"name":"texture"}}],[11,"get_info","","Get texture info",91,{"inputs":[{"name":"texture"}],"output":{"name":"textureinfo"}}],[11,"eq","","",92,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"sampler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"sampler"}],"output":{"name":"sampler"}}],[11,"get_info","","Get sampler info",92,{"inputs":[{"name":"sampler"}],"output":{"name":"samplerinfo"}}],[11,"make_buffer","","",93,{"inputs":[{"name":"manager"},{"name":"r"},{"name":"bufferinfo"}],"output":{"name":"rawbuffer"}}],[11,"make_array_buffer","","",93,{"inputs":[{"name":"manager"},{"name":"r"}],"output":{"name":"arraybuffer"}}],[11,"make_shader","","",93,{"inputs":[{"name":"manager"},{"name":"r"},{"name":"stage"}],"output":{"name":"shader"}}],[11,"make_program","","",93,{"inputs":[{"name":"manager"},{"name":"r"},{"name":"programinfo"}],"output":{"name":"program"}}],[11,"make_frame_buffer","","",93,{"inputs":[{"name":"manager"},{"name":"r"}],"output":{"name":"framebuffer"}}],[11,"make_surface","","",93,{"inputs":[{"name":"manager"},{"name":"r"},{"name":"surfaceinfo"}],"output":{"name":"surface"}}],[11,"make_texture","","",93,{"inputs":[{"name":"manager"},{"name":"r"},{"name":"textureinfo"}],"output":{"name":"texture"}}],[11,"make_sampler","","",93,{"inputs":[{"name":"manager"},{"name":"r"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[11,"clean_with","","",93,{"inputs":[{"name":"manager"},{"name":"t"},{"name":"f1"},{"name":"f2"},{"name":"f3"},{"name":"f4"},{"name":"f5"},{"name":"f6"},{"name":"f7"},{"name":"f8"}],"output":null}],[11,"new","","Create a new handle manager",93,{"inputs":[{"name":"manager"}],"output":{"name":"manager"}}],[11,"clear","","Clear all references",93,{"inputs":[{"name":"manager"}],"output":null}],[11,"extend","","Extend with all references of another handle manager",93,{"inputs":[{"name":"manager"},{"name":"manager"}],"output":null}],[11,"count","","Count the total number of referenced resources",93,{"inputs":[{"name":"manager"}],"output":{"name":"usize"}}],[11,"ref_buffer","","Reference a buffer",93,{"inputs":[{"name":"manager"},{"name":"rawbuffer"}],"output":{"name":"r"}}],[11,"ref_array_buffer","","Reference am array buffer",93,{"inputs":[{"name":"manager"},{"name":"arraybuffer"}],"output":{"name":"r"}}],[11,"ref_shader","","Reference a shader",93,{"inputs":[{"name":"manager"},{"name":"shader"}],"output":{"name":"r"}}],[11,"ref_program","","Reference a program",93,{"inputs":[{"name":"manager"},{"name":"program"}],"output":{"name":"r"}}],[11,"ref_frame_buffer","","Reference a frame buffer",93,{"inputs":[{"name":"manager"},{"name":"framebuffer"}],"output":{"name":"r"}}],[11,"ref_surface","","Reference a surface",93,{"inputs":[{"name":"manager"},{"name":"surface"}],"output":{"name":"r"}}],[11,"ref_texture","","Reference a texture",93,{"inputs":[{"name":"manager"},{"name":"texture"}],"output":{"name":"r"}}],[11,"ref_sampler","","Reference a sampler",93,{"inputs":[{"name":"manager"},{"name":"sampler"}],"output":{"name":"r"}}],[0,"mapping","gfx::device","Memory mapping",null,null],[3,"Readable","gfx::device::mapping","A handle to a readable map, which can be sliced.",null,null],[3,"Writable","","A handle to a writable map, which only allows setting elements.",null,null],[3,"RW","","A handle to a complete readable/writable map, which can be sliced both ways.",null,null],[8,"Raw","","Unsafe operations for a buffer mapping",null,null],[10,"set","","Set the element at `index` to `val`. Not bounds-checked.",94,{"inputs":[{"name":"raw"},{"name":"usize"},{"name":"t"}],"output":null}],[10,"to_slice","","Returns a slice of the specified length.",94,null],[10,"to_mut_slice","","Returns a mutable slice of the specified length.",94,null],[8,"Builder","","A service trait with methods for mapping already implemented.\nTo be used by device back ends.",null,null],[16,"RawMapping","gfx::device::mapping::Builder","",null,null],[10,"map_readable","gfx::device::mapping","",95,{"inputs":[{"name":"builder"},{"name":"rawmapping"},{"name":"usize"}],"output":{"name":"readable"}}],[10,"map_writable","","",95,{"inputs":[{"name":"builder"},{"name":"rawmapping"},{"name":"usize"}],"output":{"name":"writable"}}],[10,"map_read_write","","",95,{"inputs":[{"name":"builder"},{"name":"rawmapping"},{"name":"usize"}],"output":{"name":"rw"}}],[6,"Target","","",null,null],[11,"deref","","",96,null],[11,"drop","","",96,{"inputs":[{"name":"readable"}],"output":null}],[11,"set","","Set a value in the buffer",97,{"inputs":[{"name":"writable"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"drop","","",97,{"inputs":[{"name":"writable"}],"output":null}],[6,"Target","","",null,null],[11,"deref","","",98,null],[11,"deref_mut","","",98,null],[11,"drop","","",98,{"inputs":[{"name":"rw"}],"output":null}],[6,"RawMapping","","",null,null],[0,"shade","gfx::device","Shader handling.",null,null],[3,"Attribute","gfx::device::shade","Vertex information that a shader takes as input.",null,null],[12,"name","","Name of this attribute.",99,null],[12,"location","","Vertex attribute binding.",99,null],[12,"count","","Number of elements this attribute represents.",99,null],[12,"base_type","","Type that this attribute is composed of.",99,null],[12,"container","","\"Scalarness\" of this attribute.",99,null],[3,"UniformVar","","Uniform, a type of shader parameter representing data passed to the program.",null,null],[12,"name","","Name of this uniform.",100,null],[12,"location","","Location of this uniform in the program.",100,null],[12,"count","","Number of elements this uniform represents.",100,null],[12,"base_type","","Type that this uniform is composed of",100,null],[12,"container","","\"Scalarness\" of this uniform.",100,null],[3,"BlockVar","","A uniform block.",null,null],[12,"name","","Name of this uniform block.",101,null],[12,"size","","Size (in bytes) of this uniform block's data.",101,null],[12,"usage","","What program stage this uniform block can be used in, as a bitflag.",101,null],[3,"SamplerVar","","Sampler, a type of shader parameter representing a texture that can be sampled.",null,null],[12,"name","","Name of this sampler variable.",102,null],[12,"location","","Location of this sampler in the program.",102,null],[12,"base_type","","Base type for the sampler.",102,null],[12,"sampler_type","","Type of this sampler.",102,null],[3,"ProgramInfo","","Metadata about a program.",null,null],[12,"attributes","","Attributes in the program.",103,null],[12,"uniforms","","Uniforms in the program",103,null],[12,"blocks","","Uniform blocks in the program",103,null],[12,"textures","","Samplers in the program",103,null],[4,"IsArray","","Whether the sampler samples an array texture.",null,null],[13,"Array","","",104,null],[13,"NoArray","","",104,null],[4,"IsShadow","","Whether the sampler samples a shadow texture (texture with a depth comparison)",null,null],[13,"Shadow","","",105,null],[13,"NoShadow","","",105,null],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",null,null],[13,"MultiSample","","",106,null],[13,"NoMultiSample","","",106,null],[4,"IsRect","","Whether the sampler samples a rectangle texture.",null,null],[13,"Rect","","",107,null],[13,"NoRect","","",107,null],[4,"MatrixFormat","","Whether the matrix is column or row major.",null,null],[13,"ColumnMajor","","",108,null],[13,"RowMajor","","",108,null],[4,"SamplerType","","What texture type this sampler samples from.",null,null],[13,"SamplerBuffer","","Sample from a buffer.",109,null],[13,"Sampler1D","","Sample from a 1D texture",109,null],[13,"Sampler2D","","Sample from a 2D texture",109,null],[13,"Sampler3D","","Sample from a 3D texture",109,null],[13,"SamplerCube","","Sample from a cubemap.",109,null],[4,"BaseType","","Base type of this shader parameter.",null,null],[13,"F32","","",110,null],[13,"F64","","",110,null],[13,"I32","","",110,null],[13,"U32","","",110,null],[13,"Bool","","",110,null],[4,"ContainerType","","Number of components this parameter represents.",null,null],[13,"Single","","Scalar value",111,null],[13,"Vector","","A vector with `Dimension` components.",111,null],[13,"Matrix","","A matrix.",111,null],[4,"Stage","","Which program stage this shader represents.",null,null],[13,"Vertex","","",112,null],[13,"Geometry","","",112,null],[13,"Fragment","","",112,null],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",null,null],[13,"I32","","",113,null],[13,"F32","","",113,null],[13,"I32Vector2","","",113,null],[13,"I32Vector3","","",113,null],[13,"I32Vector4","","",113,null],[13,"F32Vector2","","",113,null],[13,"F32Vector3","","",113,null],[13,"F32Vector4","","",113,null],[13,"F32Matrix2","","",113,null],[13,"F32Matrix3","","",113,null],[13,"F32Matrix4","","",113,null],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a UniformVar.",null,null],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",114,null],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",114,null],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4,\netc)",114,null],[4,"CreateShaderError","","An error type for creating programs.",null,null],[13,"ModelNotSupported","","The device does not support the requested shader model.",115,null],[13,"ShaderCompilationFailed","","The shader failed to compile.",115,null],[4,"ShaderModel","","Shader model supported by the device, corresponds to the HLSL shader models.",null,null],[13,"Unsupported","","",116,null],[13,"Version30","","",116,null],[13,"Version40","","",116,null],[13,"Version41","","",116,null],[13,"Version50","","",116,null],[6,"Dimension","","Number of components in a container type (vectors/matrices)",null,null],[6,"Location","","Location of a parameter in the program.",null,null],[11,"fmt","","",104,{"inputs":[{"name":"isarray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"isarray"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"isarray"},{"name":"isarray"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"isarray"}],"output":{"name":"isarray"}}],[11,"fmt","","",105,{"inputs":[{"name":"isshadow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"isshadow"},{"name":"isshadow"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"isshadow"},{"name":"isshadow"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"isshadow"}],"output":{"name":"isshadow"}}],[11,"fmt","","",106,{"inputs":[{"name":"ismultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"ismultisample"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"ismultisample"},{"name":"ismultisample"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"ismultisample"}],"output":{"name":"ismultisample"}}],[11,"fmt","","",107,{"inputs":[{"name":"isrect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"isrect"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"isrect"},{"name":"isrect"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"isrect"}],"output":{"name":"isrect"}}],[11,"fmt","","",108,{"inputs":[{"name":"matrixformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"matrixformat"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"matrixformat"},{"name":"matrixformat"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"matrixformat"}],"output":{"name":"matrixformat"}}],[11,"fmt","","",109,{"inputs":[{"name":"samplertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"samplertype"},{"name":"samplertype"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"samplertype"}],"output":{"name":"samplertype"}}],[11,"fmt","","",110,{"inputs":[{"name":"basetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"basetype"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"basetype"},{"name":"basetype"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"basetype"}],"output":{"name":"basetype"}}],[11,"fmt","","",111,{"inputs":[{"name":"containertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"containertype"},{"name":"containertype"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"containertype"}],"output":{"name":"containertype"}}],[11,"eq","","",112,{"inputs":[{"name":"stage"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"stage"},{"name":"stage"}],"output":{"name":"bool"}}],[11,"hash","","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"stage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"stage"}],"output":{"name":"stage"}}],[11,"is_same_type","","Whether two `UniformValue`s have the same type.",113,{"inputs":[{"name":"uniformvalue"},{"name":"uniformvalue"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"uniformvalue"}],"output":{"name":"uniformvalue"}}],[11,"fmt","","",113,{"inputs":[{"name":"uniformvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",99,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"fmt","","",100,{"inputs":[{"name":"uniformvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"uniformvar"},{"name":"uniformvar"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"uniformvar"},{"name":"uniformvar"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"uniformvar"}],"output":{"name":"uniformvar"}}],[11,"fmt","","",101,{"inputs":[{"name":"blockvar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"blockvar"},{"name":"blockvar"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"blockvar"},{"name":"blockvar"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"blockvar"}],"output":{"name":"blockvar"}}],[11,"fmt","","",102,{"inputs":[{"name":"samplervar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"samplervar"},{"name":"samplervar"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"samplervar"}],"output":{"name":"samplervar"}}],[11,"fmt","","",103,{"inputs":[{"name":"programinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",103,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"programinfo"},{"name":"programinfo"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"programinfo"}],"output":{"name":"programinfo"}}],[11,"fmt","","",114,{"inputs":[{"name":"compatibilityerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"compatibilityerror"}],"output":{"name":"compatibilityerror"}}],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored\nin this variable.",100,{"inputs":[{"name":"uniformvar"},{"name":"uniformvalue"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"createshadererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"createshadererror"},{"name":"createshadererror"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"createshadererror"}],"output":{"name":"createshadererror"}}],[11,"fmt","","",116,{"inputs":[{"name":"shadermodel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",116,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"option"}}],[11,"lt","","",116,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"le","","",116,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"gt","","",116,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"ge","","",116,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"eq","","",116,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"shadermodel"},{"name":"shadermodel"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"shadermodel"}],"output":{"name":"shadermodel"}}],[11,"to_number","","Return the shader model as a numeric value.",116,{"inputs":[{"name":"shadermodel"}],"output":{"name":"u8"}}],[0,"tex","gfx::device","Texture creation and modification.",null,null],[3,"SurfaceInfo","gfx::device::tex","Describes the storage of a surface.",null,null],[12,"width","","",117,null],[12,"height","","",117,null],[12,"format","","",117,null],[12,"aa_mode","","",117,null],[3,"TextureInfo","","Describes the storage of a texture.",null,null],[12,"width","","",118,null],[12,"height","","",118,null],[12,"depth","","",118,null],[12,"levels","","Number of mipmap levels. Defaults to -1, which stands for unlimited.\nMipmap levels at equal or above `levels` can not be loaded or sampled\nby the shader. width and height of each consecutive mipmap level is\nhalved, starting from level 0.",118,null],[12,"kind","","",118,null],[12,"format","","",118,null],[3,"ImageInfo","","Describes a subvolume of a texture, which image data can be uploaded into.",null,null],[12,"xoffset","","",119,null],[12,"yoffset","","",119,null],[12,"zoffset","","",119,null],[12,"width","","",119,null],[12,"height","","",119,null],[12,"depth","","",119,null],[12,"format","","Format of each texel.",119,null],[12,"mipmap","","Which mipmap to select.",119,null],[3,"SamplerInfo","","Specifies how to sample from a texture.",null,null],[12,"filtering","","Filter method to use.",120,null],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL\nspeak)",120,null],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For\nexample, if it would select mipmap level 2 and lod_bias is 1, it will\nuse mipmap level 3.",120,null],[12,"lod_range","","This range is used to clamp LOD level used for sampling",120,null],[12,"comparison","","comparison mode, used primary for a shadow map",120,null],[4,"SurfaceError","","Surface creation/update error.",null,null],[13,"UnsupportedFormat","","Failed to map a given format to the device.",121,null],[13,"UnsupportedGamma","","Failed to provide sRGB formats.",121,null],[4,"TextureError","","Texture creation/update error.",null,null],[13,"UnsupportedFormat","","Failed to map a given format to the device.",122,null],[13,"UnsupportedGamma","","Failed to provide sRGB formats.",122,null],[13,"UnsupportedSampling","","Failed to map a given multisampled kind to the device.",122,null],[13,"InvalidInfo","","The given TextureInfo contains invalid values.",122,null],[13,"IncorrectSize","","The given data has a different size than the target texture slice.",122,null],[4,"AaMode","","Describes the configuration of samples inside each texel.",null,null],[13,"Msaa","","MultiSampled Anti-Aliasing",123,null],[13,"Eqaa","","Enhanced Quality Anti-Aliasing",123,null],[4,"Components","","Describes the color components of each texel.",null,null],[13,"R","","Red only",124,null],[13,"RG","","Red and green",124,null],[13,"RGB","","Red, green, blue",124,null],[13,"RGBA","","Red, green, blue, alpha",124,null],[4,"Compression","","Codec used to compress image data.",null,null],[13,"ETC2_RGB","","Use the EXT2 algorithm on 3 components.",125,null],[13,"ETC2_SRGB","","Use the EXT2 algorithm on 4 components (RGBA) in the sRGB color space.",125,null],[13,"ETC2_EAC_RGBA8","","Use the EXT2 EAC algorithm on 4 components.",125,null],[4,"Format","","Describes the layout of each texel within a surface/texture.",null,null],[13,"Float","","Floating point.",126,null],[13,"Integer","","Signed integer.",126,null],[13,"Unsigned","","Unsigned integer.",126,null],[13,"Compressed","","Compressed data.",126,null],[13,"R3_G3_B2","","3 bits for RG, 2 for B.",126,null],[13,"R5_G6_B5","","5 bits for RB, 6 for G",126,null],[13,"RGB5_A1","","5 bits each for RGB, 1 for Alpha.",126,null],[13,"RGB10_A2","","10 bits each for RGB, 2 for Alpha.",126,null],[13,"RGB10_A2UI","","10 bits each for RGB, 2 for Alpha, as unsigned integers.",126,null],[13,"R11F_G11F_B10F","","This uses special 11 and 10-bit floating-point values without sign bits.",126,null],[13,"RGB9_E5","","This s an RGB format of type floating-point. The 3 color values have\n9 bits of precision, and they share a single exponent.",126,null],[13,"BGRA8","","Swizzled RGBA color format, used for interaction with Windows DIBs",126,null],[13,"SRGB8","","Gamma-encoded RGB8",126,null],[13,"SRGB8_A8","","Gamma-encoded RGB8, unchanged alpha",126,null],[13,"DEPTH16","","16-bit bits depth",126,null],[13,"DEPTH24","","24 bits depth",126,null],[13,"DEPTH32F","","32 floating-point bits depth",126,null],[13,"DEPTH24_STENCIL8","","24 bits for depth, 8 for stencil",126,null],[13,"DEPTH32F_STENCIL8","","32 floating point bits for depth, 8 for stencil",126,null],[4,"FilterMethod","","How to [filter](https://en.wikipedia.org/wiki/Texture_filtering) the\ntexture when sampling. They correspond to increasing levels of quality,\nbut also cost. They \"layer\" on top of each other: it is not possible to\nhave bilinear filtering without mipmapping, for example.",null,null],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",127,null],[13,"Mipmap","","Add simple mipmapping.",127,null],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase\nquality.",127,null],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",127,null],[13,"Anisotropic","","Anisotropic filtering with a given \"max\", must be between 1 and 16,\ninclusive.",127,null],[4,"TextureKind","","Specifies how a given texture may be used. The available texture types are\nrestricted by what Metal exposes, though this could conceivably be\nextended in the future. Note that a single texture can *only* ever be of\none kind. A texture created as `Texture2D` will forever be `Texture2D`.",null,null],[13,"Texture1D","","A single row of texels.",128,null],[13,"Texture1DArray","","An array of rows of texels. Equivalent to Texture2D except that texels\nin a different row are not sampled.",128,null],[13,"Texture2D","","A traditional 2D texture, with rows arranged contiguously.",128,null],[13,"Texture2DArray","","An array of 2D textures. Equivalent to Texture3D except that texels in\na different depth level are not sampled.",128,null],[13,"Texture2DMultiSample","","A multi-sampled 2D texture. Each pixel may have more than one data value\n(sample) associated with it.",128,null],[13,"Texture2DMultiSampleArray","","A array of multi-sampled 2D textures.",128,null],[13,"TextureCube","","A set of 6 2D textures, one for each face of a cube.",128,null],[13,"Texture3D","","A volume texture, with each 2D layer arranged contiguously.",128,null],[4,"CubeFace","","The face of a cube texture to do an operation on.",null,null],[13,"PosZ","","",129,null],[13,"NegZ","","",129,null],[13,"PosX","","",129,null],[13,"NegX","","",129,null],[13,"PosY","","",129,null],[13,"NegY","","",129,null],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",null,null],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is\nthe default.",130,null],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",130,null],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",130,null],[4,"ComparisonMode","","Specified how the Comparison operator should be used when sampling",null,null],[13,"NoComparison","","the default, don't use this feature.",131,null],[13,"CompareRefToTexture","","Compare Reference to Texture",131,null],[6,"Size","","Dimension size",null,null],[6,"Bits","","Number of bits per component",null,null],[6,"NumSamples","","Number of MSAA samples",null,null],[6,"NumFragments","","Number of EQAA fragments",null,null],[7,"R8","","A single R-component 8-bit normalized format.",null,null],[7,"RGBA8","","A standard RGBA 8-bit normalized format.",null,null],[7,"RGBA16F","","A standard RGBA 16-bit floating-point format.",null,null],[7,"RGBA32F","","A standard RGBA 32-bit floating-point format.",null,null],[11,"fmt","","",121,{"inputs":[{"name":"surfaceerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"surfaceerror"},{"name":"surfaceerror"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"surfaceerror"},{"name":"surfaceerror"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"surfaceerror"}],"output":{"name":"surfaceerror"}}],[11,"eq","","",122,{"inputs":[{"name":"textureerror"},{"name":"textureerror"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"textureerror"},{"name":"textureerror"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"textureerror"}],"output":{"name":"textureerror"}}],[11,"fmt","","",122,{"inputs":[{"name":"textureerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"aamode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"aamode"}],"output":{"name":"aamode"}}],[11,"hash","","",123,null],[11,"partial_cmp","","",123,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"option"}}],[11,"lt","","",123,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"le","","",123,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"gt","","",123,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ge","","",123,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"eq","","",123,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"bool"}}],[11,"cmp","","",123,{"inputs":[{"name":"aamode"},{"name":"aamode"}],"output":{"name":"ordering"}}],[11,"fmt","","",124,{"inputs":[{"name":"components"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"hash","","",124,null],[11,"partial_cmp","","",124,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"lt","","",124,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"le","","",124,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"gt","","",124,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"ge","","",124,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"eq","","",124,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"cmp","","",124,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"fmt","","",125,{"inputs":[{"name":"compression"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"compression"}],"output":{"name":"compression"}}],[11,"hash","","",125,null],[11,"partial_cmp","","",125,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"option"}}],[11,"lt","","",125,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"le","","",125,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"gt","","",125,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"ge","","",125,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"cmp","","",125,{"inputs":[{"name":"compression"},{"name":"compression"}],"output":{"name":"ordering"}}],[11,"fmt","","",126,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"hash","","",126,null],[11,"partial_cmp","","",126,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"option"}}],[11,"lt","","",126,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",126,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",126,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",126,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",126,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"cmp","","",126,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"get_components","","Extract the components format",126,{"inputs":[{"name":"format"}],"output":{"name":"option"}}],[11,"is_color","","Check if it's a color format.",126,{"inputs":[{"name":"format"}],"output":{"name":"bool"}}],[11,"has_depth","","Check if it has a depth component.",126,{"inputs":[{"name":"format"}],"output":{"name":"bool"}}],[11,"has_stencil","","Check if it has a stencil component.",126,{"inputs":[{"name":"format"}],"output":{"name":"bool"}}],[11,"is_compressed","","Check if it's a compressed format.",126,{"inputs":[{"name":"format"}],"output":{"name":"bool"}}],[11,"does_convert_gamma","","Check if it's a sRGB color space.",126,{"inputs":[{"name":"format"}],"output":{"name":"bool"}}],[11,"fmt","","",117,{"inputs":[{"name":"surfaceinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"surfaceinfo"}],"output":{"name":"surfaceinfo"}}],[11,"hash","","",117,null],[11,"partial_cmp","","",117,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"option"}}],[11,"lt","","",117,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"le","","",117,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"gt","","",117,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"ge","","",117,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"eq","","",117,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"bool"}}],[11,"cmp","","",117,{"inputs":[{"name":"surfaceinfo"},{"name":"surfaceinfo"}],"output":{"name":"ordering"}}],[11,"fmt","","",127,{"inputs":[{"name":"filtermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"filtermethod"}],"output":{"name":"filtermethod"}}],[11,"hash","","",127,null],[11,"partial_cmp","","",127,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"option"}}],[11,"lt","","",127,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"le","","",127,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"gt","","",127,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ge","","",127,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"eq","","",127,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"cmp","","",127,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"ordering"}}],[11,"fmt","","",128,{"inputs":[{"name":"texturekind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"texturekind"}],"output":{"name":"texturekind"}}],[11,"hash","","",128,null],[11,"partial_cmp","","",128,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"option"}}],[11,"lt","","",128,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"le","","",128,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"gt","","",128,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"ge","","",128,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"eq","","",128,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"cmp","","",128,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"ordering"}}],[11,"fmt","","",129,{"inputs":[{"name":"cubeface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"cubeface"}],"output":{"name":"cubeface"}}],[11,"hash","","",129,null],[11,"partial_cmp","","",129,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"option"}}],[11,"lt","","",129,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"le","","",129,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"gt","","",129,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"ge","","",129,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"eq","","",129,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"bool"}}],[11,"cmp","","",129,{"inputs":[{"name":"cubeface"},{"name":"cubeface"}],"output":{"name":"ordering"}}],[11,"get_aa_mode","","Return the anti-aliasing mode of the texture",128,{"inputs":[{"name":"texturekind"}],"output":{"name":"option"}}],[11,"fmt","","",118,{"inputs":[{"name":"textureinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"textureinfo"}],"output":{"name":"textureinfo"}}],[11,"hash","","",118,null],[11,"partial_cmp","","",118,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"option"}}],[11,"lt","","",118,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"le","","",118,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"gt","","",118,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"ge","","",118,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"bool"}}],[11,"cmp","","",118,{"inputs":[{"name":"textureinfo"},{"name":"textureinfo"}],"output":{"name":"ordering"}}],[11,"fmt","","",119,{"inputs":[{"name":"imageinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"imageinfo"}],"output":{"name":"imageinfo"}}],[11,"hash","","",119,null],[11,"partial_cmp","","",119,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"option"}}],[11,"lt","","",119,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"le","","",119,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"gt","","",119,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"ge","","",119,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"eq","","",119,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"cmp","","",119,{"inputs":[{"name":"imageinfo"},{"name":"imageinfo"}],"output":{"name":"ordering"}}],[11,"default","","",119,{"inputs":[{"name":"imageinfo"}],"output":{"name":"imageinfo"}}],[11,"default","","",118,{"inputs":[{"name":"textureinfo"}],"output":{"name":"textureinfo"}}],[11,"new","","Create a new empty texture info.",118,{"inputs":[{"name":"textureinfo"}],"output":{"name":"textureinfo"}}],[11,"to_image_info","","Convert to a default ImageInfo that could be used\nto update the contents of the whole texture.",118,{"inputs":[{"name":"textureinfo"}],"output":{"name":"imageinfo"}}],[11,"to_surface_info","","Convert to a `SurfaceInfo`, used as a common denominator between\nsurfaces and textures.",118,{"inputs":[{"name":"textureinfo"}],"output":{"name":"surfaceinfo"}}],[11,"contains","","Check if given ImageInfo is a part of the texture.",118,{"inputs":[{"name":"textureinfo"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"new","","Create a new `ImageInfo`, using default values.",119,{"inputs":[{"name":"imageinfo"}],"output":{"name":"imageinfo"}}],[11,"fmt","","",130,{"inputs":[{"name":"wrapmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"wrapmode"}],"output":{"name":"wrapmode"}}],[11,"hash","","",130,null],[11,"partial_cmp","","",130,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"option"}}],[11,"lt","","",130,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"le","","",130,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"gt","","",130,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"ge","","",130,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"eq","","",130,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"bool"}}],[11,"cmp","","",130,{"inputs":[{"name":"wrapmode"},{"name":"wrapmode"}],"output":{"name":"ordering"}}],[11,"fmt","","",131,{"inputs":[{"name":"comparisonmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"comparisonmode"}],"output":{"name":"comparisonmode"}}],[11,"hash","","",131,null],[11,"partial_cmp","","",131,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"option"}}],[11,"lt","","",131,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"le","","",131,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"gt","","",131,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"ge","","",131,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"bool"}}],[11,"cmp","","",131,{"inputs":[{"name":"comparisonmode"},{"name":"comparisonmode"}],"output":{"name":"ordering"}}],[11,"fmt","","",120,{"inputs":[{"name":"samplerinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"samplerinfo"}],"output":{"name":"samplerinfo"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"eq","","",120,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"samplerinfo"},{"name":"samplerinfo"}],"output":{"name":"bool"}}],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD\nmodifications.",120,{"inputs":[{"name":"samplerinfo"},{"name":"filtermethod"},{"name":"wrapmode"}],"output":{"name":"samplerinfo"}}],[6,"VertexCount","gfx::device","Draw vertex count.",null,null],[6,"InstanceCount","","Draw number of instances",null,null],[6,"UniformBlockIndex","","Index of a uniform block.",null,null],[6,"AttributeSlot","","Slot for an attribute.",null,null],[6,"UniformBufferSlot","","Slot for a uniform buffer object.",null,null],[6,"TextureSlot","","Slot a texture can be bound to.",null,null],[6,"IndexType","","A type of each index value in the mesh's index buffer",null,null],[6,"SubmitInfo","","All the data needed simultaneously for submitting a command buffer for\nexecution on a device.",null,null],[8,"Resources","","Resources pertaining to a specific API.",null,null],[16,"Buffer","gfx::device::Resources","",null,null],[16,"ArrayBuffer","","",null,null],[16,"Shader","","",null,null],[16,"Program","","",null,null],[16,"FrameBuffer","","",null,null],[16,"Surface","","",null,null],[16,"Texture","","",null,null],[16,"Sampler","","",null,null],[8,"Factory","gfx::device","",null,null],[16,"Mapper","gfx::device::Factory","Associated mapper type",null,null],[10,"create_buffer_raw","gfx::device","",132,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"rawbuffer"}}],[11,"create_buffer","","",132,{"inputs":[{"name":"factory"},{"name":"usize"},{"name":"bufferusage"}],"output":{"name":"buffer"}}],[10,"create_buffer_static_raw","","",132,null],[11,"create_buffer_static","","",132,null],[11,"create_buffer_index","","",132,null],[10,"create_array_buffer","","",132,{"inputs":[{"name":"factory"}],"output":{"name":"result"}}],[10,"create_shader","","",132,null],[10,"create_program","","",132,null],[10,"create_frame_buffer","","",132,{"inputs":[{"name":"factory"}],"output":{"name":"framebuffer"}}],[10,"create_surface","","",132,{"inputs":[{"name":"factory"},{"name":"surfaceinfo"}],"output":{"name":"result"}}],[10,"create_texture","","",132,{"inputs":[{"name":"factory"},{"name":"textureinfo"}],"output":{"name":"result"}}],[10,"create_sampler","","",132,{"inputs":[{"name":"factory"},{"name":"samplerinfo"}],"output":{"name":"sampler"}}],[10,"update_buffer_raw","","Update the information stored in a specific buffer",132,null],[11,"update_buffer","","",132,null],[10,"map_buffer_raw","","",132,{"inputs":[{"name":"factory"},{"name":"rawbuffer"},{"name":"mapaccess"}],"output":{"name":"mapper"}}],[10,"unmap_buffer_raw","","",132,{"inputs":[{"name":"factory"},{"name":"mapper"}],"output":null}],[10,"map_buffer_readable","","",132,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"readable"}}],[10,"map_buffer_writable","","",132,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"writable"}}],[10,"map_buffer_rw","","",132,{"inputs":[{"name":"factory"},{"name":"buffer"}],"output":{"name":"rw"}}],[10,"update_texture_raw","","Update the information stored in a texture",132,null],[11,"update_texture","","",132,null],[10,"generate_mipmap","","",132,{"inputs":[{"name":"factory"},{"name":"texture"}],"output":null}],[10,"cleanup","","Clean up all unreferenced resources",132,{"inputs":[{"name":"factory"}],"output":null}],[8,"Device","","An interface for performing draw calls using a specific graphics API",null,null],[16,"Resources","gfx::device::Device","Associated resources type",null,null],[16,"CommandBuffer","","Associated command buffer type",null,null],[10,"get_capabilities","gfx::device","Returns the capabilities available to the specific API implementation",133,{"inputs":[{"name":"device"}],"output":{"name":"capabilities"}}],[10,"reset_state","","Reset all the states to disabled/default",133,{"inputs":[{"name":"device"}],"output":null}],[10,"submit","","Submit a command buffer for execution",133,{"inputs":[{"name":"device"},{"name":"submitinfo"}],"output":null}],[10,"after_frame","","Notify the finished frame",133,{"inputs":[{"name":"device"}],"output":null}],[11,"fmt","","",63,{"inputs":[{"name":"capabilities"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"capabilities"}],"output":{"name":"capabilities"}}],[11,"clone","","",65,{"inputs":[{"name":"mapaccess"}],"output":{"name":"mapaccess"}}],[11,"fmt","","",66,{"inputs":[{"name":"primitivetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"primitivetype"}],"output":{"name":"primitivetype"}}],[11,"eq","","",67,{"inputs":[{"name":"bufferrole"},{"name":"bufferrole"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"bufferrole"},{"name":"bufferrole"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"bufferrole"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"bufferrole"}],"output":{"name":"bufferrole"}}],[11,"eq","","",68,{"inputs":[{"name":"bufferusage"},{"name":"bufferusage"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"bufferusage"},{"name":"bufferusage"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"bufferusage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"bufferusage"}],"output":{"name":"bufferusage"}}],[11,"eq","","",64,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"bufferinfo"},{"name":"bufferinfo"}],"output":{"name":"bool"}}],[11,"hash","","",64,null],[11,"fmt","","",64,{"inputs":[{"name":"bufferinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"bufferinfo"}],"output":{"name":"bufferinfo"}}],[11,"to_slice","gfx::device::handle","Return an index slice of the whole buffer.",84,null],[11,"to_slice","","Return an index slice of the whole buffer.",84,null],[11,"to_slice","","Return an index slice of the whole buffer.",84,null]],"paths":[[3,"DrawState"],[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Primitive"],[3,"MultiSample"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"ColorMask"],[3,"Rect"],[3,"Mask"],[3,"Mirror"],[3,"ClearData"],[4,"BlendPreset"],[3,"ParamStorage"],[4,"DrawError"],[3,"OwnedBatch"],[3,"RefBatch"],[4,"Error"],[8,"Batch"],[6,"ImplicitBatch"],[3,"OutOfBounds"],[3,"CoreBatch"],[3,"Context"],[6,"CoreBatchFull"],[6,"RefBatchFull"],[3,"Canvas"],[8,"Window"],[8,"IntoCanvas"],[3,"Graphics"],[8,"DeviceExt"],[8,"RenderFactory"],[8,"FactoryExt"],[3,"ShaderSource"],[4,"ProgramError"],[3,"Attribute"],[3,"Mesh"],[3,"Slice"],[4,"SliceKind"],[4,"Error"],[8,"VertexFormat"],[8,"ToSlice"],[3,"AttributeIter"],[3,"Link"],[3,"NamedCell"],[3,"ParamDictionary"],[4,"ParameterError"],[8,"ToUniform"],[8,"ShaderParam"],[4,"Option"],[3,"Frame"],[4,"Plane"],[8,"Output"],[3,"Renderer"],[3,"Capabilities"],[3,"BufferInfo"],[4,"MapAccess"],[4,"PrimitiveType"],[4,"BufferRole"],[4,"BufferUsage"],[3,"Format"],[4,"SignFlag"],[4,"IntSubType"],[4,"IntSize"],[4,"FloatSubType"],[4,"FloatSize"],[4,"Type"],[4,"Access"],[4,"Gamma"],[4,"Target"],[8,"CommandBuffer"],[3,"DataPointer"],[3,"DataBuffer"],[8,"Producer"],[3,"Buffer"],[3,"IndexBuffer"],[3,"RawBuffer"],[3,"ArrayBuffer"],[3,"Shader"],[3,"Program"],[3,"FrameBuffer"],[3,"Surface"],[3,"Texture"],[3,"Sampler"],[3,"Manager"],[8,"Raw"],[8,"Builder"],[3,"Readable"],[3,"Writable"],[3,"RW"],[3,"Attribute"],[3,"UniformVar"],[3,"BlockVar"],[3,"SamplerVar"],[3,"ProgramInfo"],[4,"IsArray"],[4,"IsShadow"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"SamplerType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[4,"CompatibilityError"],[4,"CreateShaderError"],[4,"ShaderModel"],[3,"SurfaceInfo"],[3,"TextureInfo"],[3,"ImageInfo"],[3,"SamplerInfo"],[4,"SurfaceError"],[4,"TextureError"],[4,"AaMode"],[4,"Components"],[4,"Compression"],[4,"Format"],[4,"FilterMethod"],[4,"TextureKind"],[4,"CubeFace"],[4,"WrapMode"],[4,"ComparisonMode"],[8,"Factory"],[8,"Device"]]};
searchIndex['enum_primitive'] = {"items":[[0,"","enum_primitive","This crate exports a macro `enum_from_primitive!` that wraps an\n`enum` declaration and automatically adds an implementation of\n`num::FromPrimitive` (reexported here), to allow conversion from\nprimitive integers to the enum.  It therefore provides an\nalternative to the built-in `#[derive(FromPrimitive)]`, which\nrequires the unstable `std::num::FromPrimitive` and is disabled in\nRust 1.0.",null,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive!","","Wrap this macro around an `enum` declaration to get an\nautomatically generated implementation of `num::FromPrimitive`.",null,null]],"paths":[[8,"FromPrimitive"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics.",null,null],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"RadixFmt","","",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"hash","","",5,{"inputs":[{"name":"biguint"},{"name":"h"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","","",null,null],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[6,"FromStrRadixErr","","",null,null],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[6,"Output","","",null,null],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",7,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[6,"Output","","",null,null],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,{"inputs":[{"name":"bigint"},{"name":"h"}],"output":null}],[6,"Err","","",null,null],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[6,"FromStrRadixErr","","",null,null],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[6,"Output","","",null,null],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[6,"Output","","",null,null],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",8,null],[12,"im","","Imaginary portion of the complex number",8,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"new","","Create a new Complex",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",8,null],[11,"from_polar","","Convert a polar representation into a complex number.",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"neg","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[6,"Output","","",null,null],[11,"zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",10,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[6,"Item","","",null,null],[11,"next","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[6,"Item","","",null,null],[11,"next","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[6,"Item","","",null,null],[11,"next","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[6,"Item","","",null,null],[11,"next","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[5,"cast","num::traits","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","num::traits::Num","Parse error for `from_str_radix`",null,null],[10,"from_str_radix","num::traits","Convert from a string and radix <= 36.",14,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",15,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",15,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",16,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",17,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",17,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",17,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",17,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",17,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",18,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",18,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",19,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",19,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",20,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",21,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",22,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",23,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",24,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",24,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",24,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",24,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",24,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",24,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",24,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",24,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",24,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",24,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",24,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",24,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",25,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",26,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",27,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",28,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",28,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",28,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",28,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",28,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",28,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",28,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",28,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[6,"FromStrRadixErr","","",null,null],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",29,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"clone","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",29,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",29,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",29,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",29,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",29,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[6,"Output","","",null,null],[11,"mul","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"mul","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"div","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"add","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"add","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"sub","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"rem","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"neg","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"Output","","",null,null],[11,"zero","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[6,"FromStrRadixErr","","",null,null],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",29,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",29,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",29,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",29,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","","",null,null],[11,"from_str","","Parses `numer/denom` or just `numer`.",29,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",30,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"RadixFmt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",5,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",6,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",8,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",10,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",11,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",12,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",13,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",14,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",17,null],[12,"newline","","Newline to use",17,null],[12,"pad","","True to pad output with `=` characters",17,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",18,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",19,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20,null],[13,"InvalidBase64Length","","The input had an invalid length",20,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",19,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",17,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",23,null],[13,"InvalidHexLength","","The input had an invalid length",23,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",26,null],[13,"U64","","",26,null],[13,"F64","","",26,null],[13,"String","","",26,null],[13,"Boolean","","",26,null],[13,"Array","","",26,null],[13,"Object","","",26,null],[13,"Null","","",26,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",27,null],[13,"InvalidNumber","","",27,null],[13,"EOFWhileParsingObject","","",27,null],[13,"EOFWhileParsingArray","","",27,null],[13,"EOFWhileParsingValue","","",27,null],[13,"EOFWhileParsingString","","",27,null],[13,"KeyMustBeAString","","",27,null],[13,"ExpectedColon","","",27,null],[13,"TrailingCharacters","","",27,null],[13,"TrailingComma","","",27,null],[13,"InvalidEscape","","",27,null],[13,"InvalidUnicodeCodePoint","","",27,null],[13,"LoneLeadingSurrogateInHexEscape","","",27,null],[13,"UnexpectedEndOfHexEscape","","",27,null],[13,"UnrecognizedHex","","",27,null],[13,"NotFourDigit","","",27,null],[13,"ControlCharacterInString","","",27,null],[13,"NotUtf8","","",27,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",28,null],[13,"IoError","","",28,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",29,null],[13,"ExpectedError","","",29,null],[13,"MissingFieldError","","",29,null],[13,"UnknownVariantError","","",29,null],[13,"ApplicationError","","",29,null],[13,"EOF","","",29,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",30,null],[13,"BadHashmapKey","","",30,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",31,null],[13,"ObjectEnd","","",31,null],[13,"ArrayStart","","",31,null],[13,"ArrayEnd","","",31,null],[13,"BooleanValue","","",31,null],[13,"I64Value","","",31,null],[13,"U64Value","","",31,null],[13,"F64Value","","",31,null],[13,"StringValue","","",31,null],[13,"NullValue","","",31,null],[13,"Error","","",31,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",32,null],[13,"Key","","",32,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",33,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",27,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",28,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[6,"Error","","",null,null],[11,"emit_nil","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",34,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",34,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",34,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",34,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",34,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",34,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",34,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",34,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",34,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",34,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",34,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",34,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",34,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",26,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",26,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",26,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",31,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",35,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",35,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",35,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",35,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"top","","Returns the top-most element (if any).",35,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",36,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",36,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",37,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",37,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",38,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[6,"Error","","",null,null],[11,"read_nil","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",38,null],[11,"read_enum_variant_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",38,null],[11,"read_enum_struct_variant_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",38,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",3,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",13,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",4,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",39,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",41,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","","",null,null],[11,"from_str","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","rustc_serialize::Decoder","",null,null],[10,"read_nil","rustc_serialize","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",42,null],[10,"read_enum_variant_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",42,null],[10,"read_enum_struct_variant_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",42,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","rustc_serialize::Encoder","",null,null],[10,"emit_nil","rustc_serialize","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",43,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",43,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",43,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",43,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",43,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",43,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",43,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",43,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",43,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",43,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",43,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",43,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",43,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",43,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",44,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",45,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",46,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",47,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['gfx_macros'] = {"items":[[0,"","gfx_macros","Macro extensions crate.\nImplements `shaders!` macro as well as `#[shader_param]` and\n`#[vertex_format]` attributes.",null,null],[5,"registrar","","Entry point for the plugin phase",null,{"inputs":[{"name":"registry"}],"output":null}],[0,"shader_param","","",null,null],[3,"ShaderParam","gfx_macros::shader_param","",null,null],[11,"clone","","",0,{"inputs":[{"name":"shaderparam"}],"output":{"name":"shaderparam"}}],[11,"expand","","Decorator for `shader_param` attribute",0,{"inputs":[{"name":"shaderparam"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"item"},{"name":"fnmut"}],"output":null}],[0,"vertex_format","gfx_macros","",null,null],[3,"VertexFormat","gfx_macros::vertex_format","",null,null],[11,"clone","","",1,{"inputs":[{"name":"vertexformat"}],"output":{"name":"vertexformat"}}],[11,"expand","","Derive a `gfx::VertexFormat` implementation for the `struct`",1,{"inputs":[{"name":"vertexformat"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"item"},{"name":"fnmut"}],"output":null}]],"paths":[[3,"ShaderParam"],[3,"VertexFormat"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation",null,null],[3,"OsRng","","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[6,"Item","","",null,null],[11,"next","","",30,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",31,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",32,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",32,null],[11,"rand","","",32,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",33,null],[11,"from_seed","","",33,null],[11,"clone","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",34,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['draw_state'] = {"items":[[0,"","draw_state","Graphics state blocks for gfx-rs",null,null],[3,"DrawState","","An assembly of states that affect regular draw calls",null,null],[12,"primitive","","How to rasterize geometric primitives.",0,null],[12,"multi_sample","","Multi-sampling mode",0,null],[12,"scissor","","Scissor mask to use. If set, no pixel outside of this rectangle (in screen space) will be\nwritten to as a result of rendering.",0,null],[12,"stencil","","Stencil test to use. If None, no stencil testing is done.",0,null],[12,"depth","","Depth test to use. If None, no depth testing is done.",0,null],[12,"blend","","Blend function to use. If None, no blending is done.",0,null],[12,"color_mask","","Color mask to use. Each flag indicates that the given color channel can be written to, and\nthey can be OR'd together.",0,null],[4,"BlendPreset","","Blend function presets for ease of use.",null,null],[13,"Add","","When combining two fragments, add their values together, saturating at 1.0",1,null],[13,"Multiply","","When combining two fragments, multiply their values together.",1,null],[13,"Alpha","","When combining two fragments, add the value of the source times its alpha channel with the\nvalue of the destination multiplied by the inverse of the source alpha channel. Has the\nusual transparency effect: mixes the two colors using a fraction of each one specified by\nthe alpha of the source.",1,null],[13,"Invert","","When combining two fragments, subtract the destination color from a constant color\nusing the source color as weight. Has an invert effect with the constant color\nas base and source color controlling displacement from the base color.\nA white source color and a white value results in plain invert.\nThe output alpha is same as destination alpha.",1,null],[0,"state","","Fixed-function hardware state.",null,null],[3,"Offset","draw_state::state","How to offset vertices in screen space, if at all.",null,null],[3,"Primitive","","Primitive rasterization state. Note that GL allows different raster\nmethod to be used for front and back, while this abstraction does not.",null,null],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",2,null],[12,"method","","How to rasterize this primitive.",2,null],[12,"offset","","Any polygon offset to apply.",2,null],[3,"MultiSample","","Multi-sampling rasterization mode",null,null],[3,"StencilSide","","Complete stencil state for a given side of a face.",null,null],[12,"fun","","Comparison function to use to determine if the stencil test passes.",3,null],[12,"value","","Reference value to compare the value in the stencil buffer with.",3,null],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they\nare read before doing the stencil test.",3,null],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",3,null],[12,"op_fail","","What operation to do if the stencil test fails.",3,null],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",3,null],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",3,null],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",null,null],[12,"front","","",4,null],[12,"back","","",4,null],[3,"Depth","","Depth test state.",null,null],[12,"fun","","Comparison function to use.",5,null],[12,"write","","Specify whether to write to the depth buffer or not.",5,null],[3,"BlendChannel","","",null,null],[12,"equation","","",6,null],[12,"source","","",6,null],[12,"destination","","",6,null],[3,"Blend","","",null,null],[12,"color","","",7,null],[12,"alpha","","",7,null],[12,"value","","",7,null],[3,"ColorMask","","",null,null],[4,"FrontFace","","The front face winding order of a set of vertices.",null,null],[13,"Clockwise","","Clockwise winding order.",8,null],[13,"CounterClockwise","","Counter-clockwise winding order.",8,null],[4,"CullFace","","Which face, if any, to cull.",null,null],[13,"Nothing","","",9,null],[13,"Front","","",9,null],[13,"Back","","",9,null],[4,"RasterMethod","","How to rasterize a primitive.",null,null],[13,"Point","","Rasterize as a point.",10,null],[13,"Line","","Rasterize as a line with the given width.",10,null],[13,"Fill","","Rasterize as a face with a given cull face mode.",10,null],[4,"Comparison","","A pixel-wise comparison function.",null,null],[13,"Never","","`false`",11,null],[13,"Less","","`x < y`",11,null],[13,"LessEqual","","`x <= y`",11,null],[13,"Equal","","`x == y`",11,null],[13,"GreaterEqual","","`x >= y`",11,null],[13,"Greater","","`x > y`",11,null],[13,"NotEqual","","`x != y`",11,null],[13,"Always","","`true`",11,null],[4,"StencilOp","","Stencil mask operation.",null,null],[13,"Keep","","Keep the current value in the stencil buffer (no change).",12,null],[13,"Zero","","Set the value in the stencil buffer to zero.",12,null],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",12,null],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",12,null],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",12,null],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",12,null],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",12,null],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",12,null],[4,"Equation","","",null,null],[13,"Add","","Adds source and destination.\nSource and destination are multiplied by blending parameters before addition.",13,null],[13,"Sub","","Subtracts destination from source.\nSource and destination are multiplied by blending parameters before subtraction.",13,null],[13,"RevSub","","Subtracts source from destination.\nSource and destination are multiplied by blending parameters before subtraction.",13,null],[13,"Min","","Component-wise minimum value of source and destination.\nBlending parameters are ignored.",13,null],[13,"Max","","Component-wise maximum value of source and destination.\nBlending parameters are ignored.",13,null],[4,"BlendValue","","",null,null],[13,"SourceColor","","",14,null],[13,"SourceAlpha","","",14,null],[13,"DestColor","","",14,null],[13,"DestAlpha","","",14,null],[13,"ConstColor","","",14,null],[13,"ConstAlpha","","",14,null],[4,"Factor","","",null,null],[13,"Zero","","",15,null],[13,"One","","",15,null],[13,"SourceAlphaSaturated","","",15,null],[13,"ZeroPlus","","",15,null],[13,"OneMinus","","",15,null],[6,"LineWidth","","Width of a line.",null,null],[6,"OffsetFactor","","",null,null],[6,"OffsetUnits","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"MASK_ALL","","",null,null],[17,"MASK_NONE","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"frontface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"frontface"}],"output":{"name":"frontface"}}],[11,"hash","","",8,null],[11,"partial_cmp","","",8,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"frontface"},{"name":"frontface"}],"output":{"name":"ordering"}}],[11,"fmt","","",16,{"inputs":[{"name":"offset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"offset"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"offset"}],"output":{"name":"offset"}}],[11,"fmt","","",9,{"inputs":[{"name":"cullface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"cullface"},{"name":"cullface"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"cullface"}],"output":{"name":"cullface"}}],[11,"fmt","","",10,{"inputs":[{"name":"rastermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"rastermethod"},{"name":"rastermethod"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"rastermethod"}],"output":{"name":"rastermethod"}}],[11,"fmt","","",2,{"inputs":[{"name":"primitive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"primitive"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"primitive"},{"name":"primitive"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"primitive"}],"output":{"name":"primitive"}}],[11,"get_cull_face","","Get the cull face, if any, for this primitive state.",2,{"inputs":[{"name":"primitive"}],"output":{"name":"cullface"}}],[11,"default","","",2,{"inputs":[{"name":"primitive"}],"output":{"name":"primitive"}}],[11,"fmt","","",17,{"inputs":[{"name":"multisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"multisample"}],"output":{"name":"multisample"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"multisample"},{"name":"multisample"}],"output":{"name":"ordering"}}],[11,"fmt","","",11,{"inputs":[{"name":"comparison"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"comparison"}],"output":{"name":"comparison"}}],[11,"hash","","",11,null],[11,"partial_cmp","","",11,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"comparison"},{"name":"comparison"}],"output":{"name":"ordering"}}],[11,"fmt","","",12,{"inputs":[{"name":"stencilop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"stencilop"}],"output":{"name":"stencilop"}}],[11,"hash","","",12,null],[11,"partial_cmp","","",12,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"stencilop"},{"name":"stencilop"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"stencilside"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"hash","","",3,null],[11,"partial_cmp","","",3,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"stencilside"},{"name":"stencilside"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[{"name":"stencilside"}],"output":{"name":"stencilside"}}],[11,"fmt","","",4,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"hash","","",4,null],[11,"partial_cmp","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"stencil"},{"name":"stencil"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"depth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"depth"},{"name":"depth"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"fmt","","",13,{"inputs":[{"name":"equation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"equation"}],"output":{"name":"equation"}}],[11,"hash","","",13,null],[11,"partial_cmp","","",13,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"equation"},{"name":"equation"}],"output":{"name":"ordering"}}],[11,"fmt","","",14,{"inputs":[{"name":"blendvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"blendvalue"}],"output":{"name":"blendvalue"}}],[11,"hash","","",14,null],[11,"partial_cmp","","",14,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"blendvalue"},{"name":"blendvalue"}],"output":{"name":"ordering"}}],[11,"fmt","","",15,{"inputs":[{"name":"factor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"factor"}],"output":{"name":"factor"}}],[11,"hash","","",15,null],[11,"partial_cmp","","",15,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"factor"},{"name":"factor"}],"output":{"name":"ordering"}}],[11,"fmt","","",6,{"inputs":[{"name":"blendchannel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"hash","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"blendchannel"},{"name":"blendchannel"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"blendchannel"}],"output":{"name":"blendchannel"}}],[11,"default","","",7,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"eq","","",7,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"fmt","","",7,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"cmp","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"eq","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"colormask"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",18,{"inputs":[{"name":"colormask"},{"name":"u32"}],"output":{"name":"colormask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"inputs":[{"name":"colormask"},{"name":"colormask"}],"output":{"name":"colormask"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",18,{"inputs":[{"name":"colormask"}],"output":{"name":"colormask"}}],[11,"fmt","","",18,{"inputs":[{"name":"colormask"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"target","draw_state","Render target specification.",null,null],[3,"Rect","draw_state::target","A screen space rectangle",null,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"w","","",19,null],[12,"h","","",19,null],[3,"Mask","","/// Output mask, used for blitting and clearing",null,null],[3,"Mirror","","/// Mirroring flags, used for blitting",null,null],[3,"ClearData","","How to clear a frame.",null,null],[12,"color","","The color to clear the frame with",20,null],[12,"depth","","The depth value to clear the frame with",20,null],[12,"stencil","","The stencil value to clear the frame with",20,null],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",null,null],[6,"Level","","Mipmap level to select in a texture.",null,null],[6,"Depth","","A single depth value from a depth buffer.",null,null],[6,"Stencil","","A single value from a stencil stencstencil buffer.",null,null],[6,"ColorValue","","A color with floating-point components.",null,null],[17,"COLOR","","",null,null],[17,"COLOR0","","",null,null],[17,"COLOR1","","",null,null],[17,"COLOR2","","",null,null],[17,"COLOR3","","",null,null],[17,"DEPTH","","",null,null],[17,"STENCIL","","",null,null],[17,"MIRROR_X","","",null,null],[17,"MIRROR_Y","","",null,null],[11,"fmt","","",19,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"hash","","",21,null],[11,"cmp","","",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"eq","","",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",21,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"all","","Returns the set containing all flags.",21,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,{"inputs":[{"name":"mask"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",21,{"inputs":[{"name":"mask"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",21,{"inputs":[{"name":"mask"},{"name":"u8"}],"output":{"name":"mask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,{"inputs":[{"name":"mask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",21,{"inputs":[{"name":"mask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",21,{"inputs":[{"name":"mask"},{"name":"mask"}],"output":{"name":"mask"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",21,{"inputs":[{"name":"mask"}],"output":{"name":"mask"}}],[11,"fmt","","",21,{"inputs":[{"name":"mask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"cmp","","",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"eq","","",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"mirror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",22,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"all","","Returns the set containing all flags.",22,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",22,{"inputs":[{"name":"mirror"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",22,{"inputs":[{"name":"mirror"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",22,{"inputs":[{"name":"mirror"},{"name":"u8"}],"output":{"name":"mirror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",22,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",22,{"inputs":[{"name":"mirror"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",22,{"inputs":[{"name":"mirror"},{"name":"mirror"}],"output":{"name":"mirror"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",22,{"inputs":[{"name":"mirror"}],"output":{"name":"mirror"}}],[11,"clone","","",20,{"inputs":[{"name":"cleardata"}],"output":{"name":"cleardata"}}],[11,"fmt","","",20,{"inputs":[{"name":"cleardata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","draw_state","",0,{"inputs":[{"name":"drawstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"drawstate"},{"name":"drawstate"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"blendpreset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"blendpreset"},{"name":"blendpreset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"blendpreset"},{"name":"blendpreset"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"blendpreset"}],"output":{"name":"blendpreset"}}],[11,"new","","Create a default `DrawState`. Uses counter-clockwise winding, culls the backface of each\nprimitive, and does no scissor/stencil/depth/blend/color masking.",0,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"get_target_mask","","Return a target mask that contains all the planes required by this state.",0,{"inputs":[{"name":"drawstate"}],"output":{"name":"mask"}}],[11,"multi_sample","","Enable multi-sampled rasterization",0,{"inputs":[{"name":"drawstate"}],"output":{"name":"drawstate"}}],[11,"stencil","","Set the stencil test to a simple expression",0,{"inputs":[{"name":"drawstate"},{"name":"comparison"},{"name":"stencil"}],"output":{"name":"drawstate"}}],[11,"depth","","Set the depth test with the mask",0,{"inputs":[{"name":"drawstate"},{"name":"comparison"},{"name":"bool"}],"output":{"name":"drawstate"}}],[11,"scissor","","Set the scissor",0,{"inputs":[{"name":"drawstate"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"drawstate"}}],[11,"blend","","Set the blend mode to one of the presets",0,{"inputs":[{"name":"drawstate"},{"name":"blendpreset"}],"output":{"name":"drawstate"}}]],"paths":[[3,"DrawState"],[4,"BlendPreset"],[3,"Primitive"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[3,"BlendChannel"],[3,"Blend"],[4,"FrontFace"],[4,"CullFace"],[4,"RasterMethod"],[4,"Comparison"],[4,"StencilOp"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"Offset"],[3,"MultiSample"],[3,"ColorMask"],[3,"Rect"],[3,"ClearData"],[3,"Mask"],[3,"Mirror"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade.",null,null],[3,"LogRecord","","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Trace` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[6,"Err","","",null,null],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[6,"Err","","",null,null],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"]]};
searchIndex['xml'] = {"items":[[0,"","xml","An XML parsing library",null,null],[3,"Parser","","A streaming XML parser",null,null],[3,"ParserError","","The structure returned, when erroneous XML is read",null,null],[12,"line","","The line number at which the error occurred",0,null],[12,"col","","The column number at which the error occurred",0,null],[12,"msg","","A message describing the type of the error",0,null],[3,"ChildElements","","An iterator returning filtered child `Element`s of another `Element`",null,null],[3,"Element","","A struct representing an XML element",null,null],[12,"name","","The element's name",1,null],[12,"ns","","The element's namespace",1,null],[12,"attributes","","The element's attributes",1,null],[12,"children","","The element's child `Xml` nodes",1,null],[3,"ElementBuilder","","An Element Builder, building `Element`s from `Event`s as produced by `Parser`",null,null],[3,"StartTag","","Structure describing an opening tag",null,null],[12,"name","","The tag's name",2,null],[12,"ns","","The tag's namespace",2,null],[12,"prefix","","The tag's prefix",2,null],[12,"attributes","","The tag's attributes",2,null],[3,"EndTag","","Structure describing a closing tag",null,null],[12,"name","","The tag's name",3,null],[12,"ns","","The tag's namespace",3,null],[12,"prefix","","The tag's prefix",3,null],[4,"Event","","Events returned by the `Parser`",null,null],[13,"PI","","Event indicating processing information was found",4,null],[13,"ElementStart","","Event indicating a start tag was found",4,null],[13,"ElementEnd","","Event indicating a end tag was found",4,null],[13,"Characters","","Event indicating character data was found",4,null],[13,"CDATA","","Event indicating CDATA was found",4,null],[13,"Comment","","Event indicating a comment was found",4,null],[4,"BuilderError","","The structure returned for errors encountered while building an `Element`",null,null],[13,"Parser","","Errors encountered by the `Parser`",5,null],[13,"ImproperNesting","","Elements were improperly nested, e.g. <a><b></a></b>",5,null],[13,"NoElement","","No element was found",5,null],[4,"Xml","","An Enum describing a XML Node",null,null],[13,"ElementNode","","An XML Element",6,null],[13,"CharacterNode","","Character Data",6,null],[13,"CDATANode","","CDATA",6,null],[13,"CommentNode","","A XML Comment",6,null],[13,"PINode","","Processing Information",6,null],[5,"escape","","Escapes ', \", &, <, and > with the appropriate XML entities.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"unescape","","Unescapes all valid XML entities in a string.\nReturns the first invalid entity on failure.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"parsererror"}],"output":{"name":"parsererror"}}],[11,"fmt","","",0,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"description","","",0,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new `Parser`",7,{"inputs":[{"name":"parser"}],"output":{"name":"parser"}}],[11,"feed_str","","Feeds a string slice to the parser",7,{"inputs":[{"name":"parser"},{"name":"str"}],"output":null}],[11,"next","","",7,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"element"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"element"}],"output":{"name":"element"}}],[11,"fmt","","",1,{"inputs":[{"name":"element"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"childelements"}],"output":{"name":"option"}}],[11,"new","","Create a new `Element`, with specified name and namespace.\nAttributes are specified as a `Vec` of `(name, namespace, value)` tuples.",1,{"inputs":[{"name":"element"},{"name":"string"},{"name":"option"},{"name":"vec"}],"output":{"name":"element"}}],[11,"content_str","","Returns the character and CDATA contained in the element.",1,{"inputs":[{"name":"element"}],"output":{"name":"string"}}],[11,"get_attribute","","Gets an attribute with the specified name and namespace. When an attribute with the\nspecified name does not exist `None` is returned.",1,{"inputs":[{"name":"element"},{"name":"str"},{"name":"option"}],"output":{"name":"option"}}],[11,"set_attribute","","Sets the attribute with the specified name and namespace.\nReturns the original value.",1,{"inputs":[{"name":"element"},{"name":"string"},{"name":"option"},{"name":"string"}],"output":{"name":"option"}}],[11,"remove_attribute","","Remove the attribute with the specified name and namespace.\nReturns the original value.",1,{"inputs":[{"name":"element"},{"name":"str"},{"name":"option"}],"output":{"name":"option"}}],[11,"get_child","","Gets the first child `Element` with the specified name and namespace. When no child\nwith the specified name exists `None` is returned.",1,{"inputs":[{"name":"element"},{"name":"str"},{"name":"option"}],"output":{"name":"option"}}],[11,"get_children","","Get all children `Element` with the specified name and namespace. When no child\nwith the specified name exists an empty vetor is returned.",1,{"inputs":[{"name":"element"},{"name":"str"},{"name":"option"}],"output":{"name":"childelements"}}],[11,"tag","","Appends a child element. Returns a reference to the added element.",1,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"element"}}],[11,"tag_stay","","Appends a child element. Returns a mutable reference to self.",1,{"inputs":[{"name":"element"},{"name":"element"}],"output":{"name":"element"}}],[11,"text","","Appends characters. Returns a mutable reference to self.",1,{"inputs":[{"name":"element"},{"name":"string"}],"output":{"name":"element"}}],[11,"cdata","","Appends CDATA. Returns a mutable reference to self.",1,{"inputs":[{"name":"element"},{"name":"string"}],"output":{"name":"element"}}],[11,"comment","","Appends a comment. Returns a mutable reference to self.",1,{"inputs":[{"name":"element"},{"name":"string"}],"output":{"name":"element"}}],[11,"pi","","Appends processing information. Returns a mutable reference to self.",1,{"inputs":[{"name":"element"},{"name":"string"}],"output":{"name":"element"}}],[11,"from_str","","",1,{"inputs":[{"name":"element"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"buildererror"}],"output":{"name":"buildererror"}}],[11,"fmt","","",5,{"inputs":[{"name":"buildererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"buildererror"},{"name":"buildererror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"buildererror"},{"name":"buildererror"}],"output":{"name":"bool"}}],[11,"description","","",5,{"inputs":[{"name":"buildererror"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"buildererror"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"buildererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"buildererror"},{"name":"parsererror"}],"output":{"name":"buildererror"}}],[11,"new","","Returns a new `ElementBuilder`",9,{"inputs":[{"name":"elementbuilder"}],"output":{"name":"elementbuilder"}}],[11,"define_prefix","","Bind a prefix to a namespace",9,{"inputs":[{"name":"elementbuilder"},{"name":"string"},{"name":"string"}],"output":null}],[11,"set_default_ns","","Set the default namespace",9,{"inputs":[{"name":"elementbuilder"},{"name":"string"}],"output":null}],[11,"handle_event","","Let the builder process an `Event` to ultimately build an `Element`.",9,{"inputs":[{"name":"elementbuilder"},{"name":"result"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"xml"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"xml"},{"name":"xml"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"xml"},{"name":"xml"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"xml"}],"output":{"name":"xml"}}],[11,"fmt","","",2,{"inputs":[{"name":"starttag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"starttag"},{"name":"starttag"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"starttag"},{"name":"starttag"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"endtag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"endtag"},{"name":"endtag"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"endtag"},{"name":"endtag"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"xml"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParserError"],[3,"Element"],[3,"StartTag"],[3,"EndTag"],[4,"Event"],[4,"BuilderError"],[4,"Xml"],[3,"Parser"],[3,"ChildElements"],[3,"ElementBuilder"]]};
searchIndex['clock_ticks'] = {"items":[[0,"","clock_ticks","",null,null],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}]],"paths":[]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries",null,null],[0,"types","","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[13,"__variant1","","",0,null],[13,"__variant2","","",0,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",1,null],[12,"gl_pathv","","",1,null],[12,"gl_offs","","",1,null],[12,"__unused1","","",1,null],[12,"__unused2","","",1,null],[12,"__unused3","","",1,null],[12,"__unused4","","",1,null],[12,"__unused5","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_family","","",6,null],[12,"sa_data","","",6,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",7,null],[12,"__ss_align","","",7,null],[12,"__ss_pad2","","",7,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",8,null],[12,"sin_port","","",8,null],[12,"sin_addr","","",8,null],[12,"sin_zero","","",8,null],[3,"in_addr","","",null,null],[12,"s_addr","","",9,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",10,null],[12,"sin6_port","","",10,null],[12,"sin6_flowinfo","","",10,null],[12,"sin6_addr","","",10,null],[12,"sin6_scope_id","","",10,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",11,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",12,null],[12,"imr_interface","","",12,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",13,null],[12,"ipv6mr_interface","","",13,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",14,null],[12,"ai_family","","",14,null],[12,"ai_socktype","","",14,null],[12,"ai_protocol","","",14,null],[12,"ai_addrlen","","",14,null],[12,"ai_addr","","",14,null],[12,"ai_canonname","","",14,null],[12,"ai_next","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",16,null],[12,"ifa_name","","",16,null],[12,"ifa_flags","","",16,null],[12,"ifa_addr","","",16,null],[12,"ifa_netmask","","",16,null],[12,"ifa_ifu","","",16,null],[12,"ifa_data","","",16,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",8,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",9,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",11,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",12,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",14,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[6,"c_char","libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",17,null],[12,"st_ino","","",17,null],[12,"st_nlink","","",17,null],[12,"st_mode","","",17,null],[12,"st_uid","","",17,null],[12,"st_gid","","",17,null],[12,"__pad0","","",17,null],[12,"st_rdev","","",17,null],[12,"st_size","","",17,null],[12,"st_blksize","","",17,null],[12,"st_blocks","","",17,null],[12,"st_atime","","",17,null],[12,"st_atime_nsec","","",17,null],[12,"st_mtime","","",17,null],[12,"st_mtime_nsec","","",17,null],[12,"st_ctime","","",17,null],[12,"st_ctime_nsec","","",17,null],[12,"__unused","","",17,null],[3,"utimbuf","","",null,null],[12,"actime","","",18,null],[12,"modtime","","",18,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",19,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",18,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",19,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"sockaddr_ll","libc::types::os::arch::extra","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[0,"consts","libc","",null,null],[0,"os","libc::consts","",null,null],[0,"c95","libc::consts::os","",null,null],[17,"EXIT_FAILURE","libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","libc::consts::os","",null,null],[17,"O_RDONLY","libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","libc::consts::os","",null,null],[17,"F_DUPFD","libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"bsd44","libc::consts::os","",null,null],[17,"MADV_NORMAL","libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[0,"extra","libc::consts::os","",null,null],[17,"AF_PACKET","libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[0,"sysconf","libc::consts::os","",null,null],[17,"_SC_ARG_MAX","libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"ctype","libc::funcs::c95","",null,null],[5,"isalnum","libc::funcs::c95::ctype","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[0,"stdio","libc::funcs::c95","",null,null],[5,"fopen","libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"abs","libc::funcs::c95::stdlib","",null,null],[5,"labs","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[0,"string","libc::funcs::c95","",null,null],[5,"strcpy","libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix88","",null,null],[5,"chmod","libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","libc::funcs::posix88","",null,null],[5,"popen","libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","libc::funcs::posix88","",null,null],[5,"open","libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[0,"dirent","libc::funcs::posix88","",null,null],[5,"opendir","libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","libc::funcs::posix88","",null,null],[5,"access","libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"getsid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"usleep","","",null,null],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[0,"signal","libc::funcs::posix88","",null,null],[5,"kill","libc::funcs::posix88::signal","",null,null],[0,"mman","libc::funcs::posix88","",null,null],[5,"mlock","libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","libc::funcs::posix88","",null,null],[5,"if_nametoindex","libc::funcs::posix88::net","",null,null],[0,"posix01","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix01","",null,null],[5,"lstat","libc::funcs::posix01::stat_","",null,null],[0,"unistd","libc::funcs::posix01","",null,null],[5,"readlink","libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,null],[5,"fdatasync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[0,"signal","libc::funcs::posix01","",null,null],[5,"signal","libc::funcs::posix01::signal","",null,null],[0,"glob","libc::funcs::posix01","",null,null],[5,"glob","libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","libc::funcs::posix01","",null,null],[5,"posix_madvise","libc::funcs::posix01::mman","",null,null],[0,"resource","libc::funcs::posix01","",null,null],[5,"getrlimit","libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","libc::funcs","",null,null],[5,"socket","libc::funcs::bsd43","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,null],[0,"bsd44","libc::funcs","",null,null],[5,"getdtablesize","libc::funcs::bsd44","",null,null],[5,"ioctl","","",null,null],[5,"madvise","","",null,null],[5,"mincore","","",null,null]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,null]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex['viewport'] = {"items":[[0,"","viewport","A library for storing viewport information",null,null],[3,"Viewport","","Stores viewport information.",null,null],[12,"rect","","Viewport in pixels.",0,null],[12,"draw_size","","The size of frame buffer in pixels.",0,null],[12,"window_size","","The size of window in points.",0,null],[11,"clone","","",0,{"inputs":[{"name":"viewport"}],"output":{"name":"viewport"}}]],"paths":[[3,"Viewport"]]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex['texture'] = {"items":[[0,"","texture","A library for texture conventions.",null,null],[8,"ImageSize","","Implemented by all images to be used with generic algorithms.",null,null],[10,"get_size","","Get the image size.",0,null],[11,"get_width","","Gets the image width.",0,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}],[11,"get_height","","Gets the image height.",0,{"inputs":[{"name":"imagesize"}],"output":{"name":"u32"}}]],"paths":[[8,"ImageSize"]]};
initSearch(searchIndex);
